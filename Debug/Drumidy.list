
Drumidy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800f8d8  0800f8d8  0001f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee4  0800fee4  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800feec  0800feec  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800feec  0800feec  0001feec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fef0  0800fef0  0001fef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800fef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c98  20000410  08010304  00020410  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  08010304  000220a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291bf  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e88  00000000  00000000  000495ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00050190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244b5  00000000  00000000  00051c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214bd  00000000  00000000  00076145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0bed  00000000  00000000  00097602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001781ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b0  00000000  00000000  00178244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000410 	.word	0x20000410
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f8c0 	.word	0x0800f8c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000414 	.word	0x20000414
 800021c:	0800f8c0 	.word	0x0800f8c0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <HAL_TIM_PeriodElapsedCallback>:
	flag_New_Settings = 1;
	dataReceivedSize = _len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	// 10kHz trigger, 0.1ms
	if (htim->Instance==htim4.Instance)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d109      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x28>
      {
		HAL_ADCEx_MultiModeStart_DMA(&hadc1,  (uint32_t *) adc_buf, 5);//
 8000dc8:	2205      	movs	r2, #5
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dce:	f003 ffb9 	bl	8004d44 <HAL_ADCEx_MultiModeStart_DMA>
		cnt++;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dda:	6013      	str	r3, [r2, #0]
      }

	// 3.33Hz active sensing, 300ms
	if (htim->Instance==htim2.Instance)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d102      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x3a>
      {
		upd_active_sens = 1;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
      }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000688 	.word	0x20000688
 8000dfc:	20000c2c 	.word	0x20000c2c
 8000e00:	20000848 	.word	0x20000848
 8000e04:	20000744 	.word	0x20000744
 8000e08:	20000c40 	.word	0x20000c40
 8000e0c:	2000042c 	.word	0x2000042c

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_UART_RxCpltCallback+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d102      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0x1a>
		buffer_in[15] = 1;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_UART_RxCpltCallback+0x2c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	73da      	strb	r2, [r3, #15]
//		config_Mode = 1;
//		HAL_UART_Receive_IT (&huart2, &config_Mode, 1);
	}

}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000c8c 	.word	0x20000c8c
 8000e3c:	20000ba0 	.word	0x20000ba0

08000e40 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==hadc1.Instance)	{
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x134>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 808b 	bne.w	8000f6c <HAL_ADC_ConvCpltCallback+0x12c>
//		}

		// resulting order: 5x[ADC2] + 4x{ADC1} + 1xDummy
		// [PA6] - [PA7] - [PF1] - [PA5] - [PA4] - {PA0} - {PA1} - {PF0} - {PB0} - {XX X}
		//	2		0		4		5		6		9		7		3		1
		adc_val[0] = adc_buf[1] >> 16;
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e60:	801a      	strh	r2, [r3, #0]
		adc_val[1] = adc_buf[3] & 0xFFFF;
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e6a:	805a      	strh	r2, [r3, #2]
		adc_val[2] = adc_buf[0] >> 16;
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0c1b      	lsrs	r3, r3, #16
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e76:	809a      	strh	r2, [r3, #4]
		adc_val[3] = adc_buf[2] & 0xFFFF;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e80:	80da      	strh	r2, [r3, #6]
		adc_val[4] = adc_buf[2] >> 16;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e8c:	811a      	strh	r2, [r3, #8]
		adc_val[5] = adc_buf[3] >> 16;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e98:	815a      	strh	r2, [r3, #10]
		adc_val[6] = adc_buf[4] >> 16;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	0c1b      	lsrs	r3, r3, #16
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ea4:	819a      	strh	r2, [r3, #12]
		adc_val[7] = adc_buf[1] & 0xFFFF;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eae:	81da      	strh	r2, [r3, #14]
		adc_val[8] = adc_buf[0] & 0xFFFF;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eb8:	821a      	strh	r2, [r3, #16]

		getAuxState(aux_current_state);
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ebc:	f001 f8a6 	bl	800200c <getAuxState>

		STEP_TIME = HAL_GetTick();
 8000ec0:	f002 fb3e 	bl	8003540 <HAL_GetTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x144>)
 8000ec8:	6013      	str	r3, [r2, #0]

		Update_channel(&channel[0], adc_val[0], aux_current_state[0]);
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	482c      	ldr	r0, [pc, #176]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x148>)
 8000ed8:	f00b fe0c 	bl	800caf4 <Update_channel>
		Update_channel(&channel[1], adc_val[1], aux_current_state[1]);
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ede:	885b      	ldrh	r3, [r3, #2]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4828      	ldr	r0, [pc, #160]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x14c>)
 8000eea:	f00b fe03 	bl	800caf4 <Update_channel>
		Update_channel(&channel[2], adc_val[2], aux_current_state[2]);
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ef0:	889b      	ldrh	r3, [r3, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x150>)
 8000efc:	f00b fdfa 	bl	800caf4 <Update_channel>
		Update_channel(&channel[3], adc_val[3], aux_current_state[3]);
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f02:	88db      	ldrh	r3, [r3, #6]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x154>)
 8000f0e:	f00b fdf1 	bl	800caf4 <Update_channel>
		Update_channel(&channel[4], adc_val[4], aux_current_state[4]);
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x158>)
 8000f20:	f00b fde8 	bl	800caf4 <Update_channel>
		Update_channel(&channel[5], adc_val[5], aux_current_state[5]);
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	481a      	ldr	r0, [pc, #104]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x15c>)
 8000f32:	f00b fddf 	bl	800caf4 <Update_channel>
		Update_channel(&channel[6], adc_val[6], aux_current_state[6]);
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f38:	899b      	ldrh	r3, [r3, #12]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f3e:	799b      	ldrb	r3, [r3, #6]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f44:	f00b fdd6 	bl	800caf4 <Update_channel>
		Update_channel(&channel[7], adc_val[7], aux_current_state[7]);
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f4a:	89db      	ldrh	r3, [r3, #14]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f50:	79db      	ldrb	r3, [r3, #7]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f56:	f00b fdcd 	bl	800caf4 <Update_channel>
		Update_channel(&channel[8], adc_val[8], aux_current_state[8]);
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f5c:	8a1b      	ldrh	r3, [r3, #16]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f62:	7a1b      	ldrb	r3, [r3, #8]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x168>)
 8000f68:	f00b fdc4 	bl	800caf4 <Update_channel>

	}// end adc1
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000848 	.word	0x20000848
 8000f78:	20000c2c 	.word	0x20000c2c
 8000f7c:	20000668 	.word	0x20000668
 8000f80:	2000067c 	.word	0x2000067c
 8000f84:	200006d4 	.word	0x200006d4
 8000f88:	20000918 	.word	0x20000918
 8000f8c:	20000960 	.word	0x20000960
 8000f90:	200009a8 	.word	0x200009a8
 8000f94:	200009f0 	.word	0x200009f0
 8000f98:	20000a38 	.word	0x20000a38
 8000f9c:	20000a80 	.word	0x20000a80
 8000fa0:	20000ac8 	.word	0x20000ac8
 8000fa4:	20000b10 	.word	0x20000b10
 8000fa8:	20000b58 	.word	0x20000b58

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f002 fa60 	bl	8003476 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f002 facd 	bl	8003558 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 fb55 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 fe69 	bl	8001c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc6:	f000 fe3d 	bl	8001c44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 fdef 	bl	8001bac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fce:	f000 fbb9 	bl	8001744 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000fd2:	f000 fd67 	bl	8001aa4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fd17 	bl	8001a08 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000fda:	f000 fc73 	bl	80018c4 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000fde:	f00c fffb 	bl	800dfd8 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000fe2:	f000 fdad 	bl	8001b40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start (&hadc1);
 8000fe6:	48b5      	ldr	r0, [pc, #724]	; (80012bc <main+0x310>)
 8000fe8:	f002 fea0 	bl	8003d2c <HAL_ADC_Start>
  HAL_ADC_Start (&hadc2);
 8000fec:	48b4      	ldr	r0, [pc, #720]	; (80012c0 <main+0x314>)
 8000fee:	f002 fe9d 	bl	8003d2c <HAL_ADC_Start>
  HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	; 0xc8
 8000ff4:	f002 fab0 	bl	8003558 <HAL_Delay>

  /// **************************
  /// ******* Defaul CFG *******
  /// **************************
  getAuxState(aux_current_state);
 8000ff8:	48b2      	ldr	r0, [pc, #712]	; (80012c4 <main+0x318>)
 8000ffa:	f001 f807 	bl	800200c <getAuxState>

  initDrum(&channel[0], HHOPEN, HHPEDAL	, CYMBAL_HIHAT	, aux_current_state[0]);
 8000ffe:	4bb1      	ldr	r3, [pc, #708]	; (80012c4 <main+0x318>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2303      	movs	r3, #3
 8001006:	222c      	movs	r2, #44	; 0x2c
 8001008:	212e      	movs	r1, #46	; 0x2e
 800100a:	48af      	ldr	r0, [pc, #700]	; (80012c8 <main+0x31c>)
 800100c:	f00b fcda 	bl	800c9c4 <initDrum>
  	  channel[0].alt_voice = HHCLOSE;
 8001010:	4bad      	ldr	r3, [pc, #692]	; (80012c8 <main+0x31c>)
 8001012:	222a      	movs	r2, #42	; 0x2a
 8001014:	705a      	strb	r2, [r3, #1]

  // KICK - MESH+PEDAL - OK
  initDrum(&channel[1], KICK  , KICK	, MESH_PAD_AUTOAUX		, aux_current_state[1]);
 8001016:	4bab      	ldr	r3, [pc, #684]	; (80012c4 <main+0x318>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	2124      	movs	r1, #36	; 0x24
 8001022:	48aa      	ldr	r0, [pc, #680]	; (80012cc <main+0x320>)
 8001024:	f00b fcce 	bl	800c9c4 <initDrum>
  	  channel[1].peak_volume_norm = 20;
 8001028:	4ba7      	ldr	r3, [pc, #668]	; (80012c8 <main+0x31c>)
 800102a:	2214      	movs	r2, #20
 800102c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  	  channel[1].peak_min_length = 3;
 8001030:	4ba5      	ldr	r3, [pc, #660]	; (80012c8 <main+0x31c>)
 8001032:	2203      	movs	r2, #3
 8001034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  // KICK - MESH/ALT+PEDAL - OK
  initDrum(&channel[2], SNARE , KICK 	, MESH_RIM_AUTOAUX		, aux_current_state[2]);
 8001038:	4ba2      	ldr	r3, [pc, #648]	; (80012c4 <main+0x318>)
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2224      	movs	r2, #36	; 0x24
 8001042:	2126      	movs	r1, #38	; 0x26
 8001044:	48a2      	ldr	r0, [pc, #648]	; (80012d0 <main+0x324>)
 8001046:	f00b fcbd 	bl	800c9c4 <initDrum>
	  channel[2].alt_voice = SNRIM;
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <main+0x31c>)
 800104c:	2225      	movs	r2, #37	; 0x25
 800104e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  initDrum(&channel[3], SNARE , KICK 	, MESH_RIM_AUTOAUX		, aux_current_state[3]);
 8001052:	4b9c      	ldr	r3, [pc, #624]	; (80012c4 <main+0x318>)
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	2126      	movs	r1, #38	; 0x26
 800105e:	489d      	ldr	r0, [pc, #628]	; (80012d4 <main+0x328>)
 8001060:	f00b fcb0 	bl	800c9c4 <initDrum>
	  channel[3].alt_voice = 0x40;
 8001064:	4b98      	ldr	r3, [pc, #608]	; (80012c8 <main+0x31c>)
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

  initDrum(&channel[4], TOM1 , TOM1  	, MESH_PAD_AUTOAUX		, aux_current_state[3]);
 800106c:	4b95      	ldr	r3, [pc, #596]	; (80012c4 <main+0x318>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2230      	movs	r2, #48	; 0x30
 8001076:	2130      	movs	r1, #48	; 0x30
 8001078:	4897      	ldr	r0, [pc, #604]	; (80012d8 <main+0x32c>)
 800107a:	f00b fca3 	bl	800c9c4 <initDrum>
  initDrum(&channel[5], TOM2 , TOM2  	, MESH_PAD_AUTOAUX		, aux_current_state[4]);
 800107e:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <main+0x318>)
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	222f      	movs	r2, #47	; 0x2f
 8001088:	212f      	movs	r1, #47	; 0x2f
 800108a:	4894      	ldr	r0, [pc, #592]	; (80012dc <main+0x330>)
 800108c:	f00b fc9a 	bl	800c9c4 <initDrum>
  initDrum(&channel[6], TOMF , TOMF  	, MESH_PAD_AUTOAUX		, aux_current_state[6]);
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <main+0x318>)
 8001092:	799b      	ldrb	r3, [r3, #6]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2300      	movs	r3, #0
 8001098:	222b      	movs	r2, #43	; 0x2b
 800109a:	212b      	movs	r1, #43	; 0x2b
 800109c:	4890      	ldr	r0, [pc, #576]	; (80012e0 <main+0x334>)
 800109e:	f00b fc91 	bl	800c9c4 <initDrum>

  // cymbals
  initDrum(&channel[7], CRASH, CRASH 	, CYMBAL_MUTE			, aux_current_state[7]);	// CH7 aux disabled
 80010a2:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <main+0x318>)
 80010a4:	79db      	ldrb	r3, [r3, #7]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2305      	movs	r3, #5
 80010aa:	2231      	movs	r2, #49	; 0x31
 80010ac:	2131      	movs	r1, #49	; 0x31
 80010ae:	488d      	ldr	r0, [pc, #564]	; (80012e4 <main+0x338>)
 80010b0:	f00b fc88 	bl	800c9c4 <initDrum>
  initDrum(&channel[8], RIDE ,  BELL 	, CYMBAL_2_ZONE			, aux_current_state[8]);
 80010b4:	4b83      	ldr	r3, [pc, #524]	; (80012c4 <main+0x318>)
 80010b6:	7a1b      	ldrb	r3, [r3, #8]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2304      	movs	r3, #4
 80010bc:	2235      	movs	r2, #53	; 0x35
 80010be:	2133      	movs	r1, #51	; 0x33
 80010c0:	4889      	ldr	r0, [pc, #548]	; (80012e8 <main+0x33c>)
 80010c2:	f00b fc7f 	bl	800c9c4 <initDrum>


  // === Previous Settings ===
  HAL_UART_Transmit(&huart2, ASCIILOGO, strlen((char *)ASCIILOGO) , 50);
 80010c6:	4889      	ldr	r0, [pc, #548]	; (80012ec <main+0x340>)
 80010c8:	f7ff f8aa 	bl	8000220 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	4986      	ldr	r1, [pc, #536]	; (80012ec <main+0x340>)
 80010d4:	4886      	ldr	r0, [pc, #536]	; (80012f0 <main+0x344>)
 80010d6:	f008 f917 	bl	8009308 <HAL_UART_Transmit>
  HAL_Delay(500);
 80010da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010de:	f002 fa3b 	bl	8003558 <HAL_Delay>


  Load_Setting();
 80010e2:	f001 f989 	bl	80023f8 <Load_Setting>




	// start waiting for serial commands
	HAL_Delay(200);
 80010e6:	20c8      	movs	r0, #200	; 0xc8
 80010e8:	f002 fa36 	bl	8003558 <HAL_Delay>
	config_Mode[0] = 0;
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <main+0x348>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	497f      	ldr	r1, [pc, #508]	; (80012f4 <main+0x348>)
 80010f6:	487e      	ldr	r0, [pc, #504]	; (80012f0 <main+0x344>)
 80010f8:	f008 f99c 	bl	8009434 <HAL_UART_Receive_IT>

	/// **************************
	/// ******* LETS ROCK! *******
	/// **************************
	HAL_TIM_Base_Start_IT(&htim2); //AS
 80010fc:	487e      	ldr	r0, [pc, #504]	; (80012f8 <main+0x34c>)
 80010fe:	f007 fbb7 	bl	8008870 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4); //ADC
 8001102:	487e      	ldr	r0, [pc, #504]	; (80012fc <main+0x350>)
 8001104:	f007 fbb4 	bl	8008870 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while (config_Mode[0]){
 8001108:	e03e      	b.n	8001188 <main+0x1dc>

		uint8_t rs = UART_CFG();
 800110a:	f001 fb17 	bl	800273c <UART_CFG>
 800110e:	4603      	mov	r3, r0
 8001110:	70fb      	strb	r3, [r7, #3]

		if ((rs == 1) || (rs == 2)){
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d002      	beq.n	800111e <main+0x172>
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d114      	bne.n	8001148 <main+0x19c>
			rs = Save_Setting(0);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 ffd0 	bl	80020c4 <Save_Setting>
 8001124:	4603      	mov	r3, r0
 8001126:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "New configuration saved (%X)\n", rs);
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	461a      	mov	r2, r3
 800112c:	4974      	ldr	r1, [pc, #464]	; (8001300 <main+0x354>)
 800112e:	4875      	ldr	r0, [pc, #468]	; (8001304 <main+0x358>)
 8001130:	f00d ff98 	bl	800f064 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001134:	4873      	ldr	r0, [pc, #460]	; (8001304 <main+0x358>)
 8001136:	f7ff f873 	bl	8000220 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	2332      	movs	r3, #50	; 0x32
 8001140:	4970      	ldr	r1, [pc, #448]	; (8001304 <main+0x358>)
 8001142:	486b      	ldr	r0, [pc, #428]	; (80012f0 <main+0x344>)
 8001144:	f008 f8e0 	bl	8009308 <HAL_UART_Transmit>
		}
		if (rs == 99){
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b63      	cmp	r3, #99	; 0x63
 800114c:	d114      	bne.n	8001178 <main+0x1cc>
			rs = Save_Setting(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 ffb8 	bl	80020c4 <Save_Setting>
 8001154:	4603      	mov	r3, r0
 8001156:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "Reset to default values, restart the device (%X)\n", rs);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	461a      	mov	r2, r3
 800115c:	496a      	ldr	r1, [pc, #424]	; (8001308 <main+0x35c>)
 800115e:	4869      	ldr	r0, [pc, #420]	; (8001304 <main+0x358>)
 8001160:	f00d ff80 	bl	800f064 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001164:	4867      	ldr	r0, [pc, #412]	; (8001304 <main+0x358>)
 8001166:	f7ff f85b 	bl	8000220 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	2332      	movs	r3, #50	; 0x32
 8001170:	4964      	ldr	r1, [pc, #400]	; (8001304 <main+0x358>)
 8001172:	485f      	ldr	r0, [pc, #380]	; (80012f0 <main+0x344>)
 8001174:	f008 f8c8 	bl	8009308 <HAL_UART_Transmit>
		}
		config_Mode[0] = 0;
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <main+0x348>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 800117e:	2201      	movs	r2, #1
 8001180:	495c      	ldr	r1, [pc, #368]	; (80012f4 <main+0x348>)
 8001182:	485b      	ldr	r0, [pc, #364]	; (80012f0 <main+0x344>)
 8001184:	f008 f956 	bl	8009434 <HAL_UART_Receive_IT>
	  while (config_Mode[0]){
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <main+0x348>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1bc      	bne.n	800110a <main+0x15e>

	  }

	  if (upd_active_sens){
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <main+0x360>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <main+0x1f6>
		  upd_active_sens = 0;
 8001198:	4b5c      	ldr	r3, [pc, #368]	; (800130c <main+0x360>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		  sendMidiAS();
 800119e:	f000 fde1 	bl	8001d64 <sendMidiAS>
	  }

	  for (uint8_t ch = 0; ch<9; ch++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	70bb      	strb	r3, [r7, #2]
 80011a6:	e25a      	b.n	800165e <main+0x6b2>

		  if (channel[ch].main_rdy){
 80011a8:	78ba      	ldrb	r2, [r7, #2]
 80011aa:	4947      	ldr	r1, [pc, #284]	; (80012c8 <main+0x31c>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	3311      	adds	r3, #17
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 815e 	beq.w	800147c <main+0x4d0>
			  channel[ch].main_rdy = 0;
 80011c0:	78ba      	ldrb	r2, [r7, #2]
 80011c2:	4941      	ldr	r1, [pc, #260]	; (80012c8 <main+0x31c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3311      	adds	r3, #17
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

			  // custom volume calculation for mesh
			  if (channel[ch].chnl_type < 2){
 80011d4:	78ba      	ldrb	r2, [r7, #2]
 80011d6:	493c      	ldr	r1, [pc, #240]	; (80012c8 <main+0x31c>)
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3303      	adds	r3, #3
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f200 8096 	bhi.w	8001318 <main+0x36c>
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm);
 80011ec:	78ba      	ldrb	r2, [r7, #2]
 80011ee:	4936      	ldr	r1, [pc, #216]	; (80012c8 <main+0x31c>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	331a      	adds	r3, #26
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	3b32      	subs	r3, #50	; 0x32
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f9c4 	bl	8000598 <__aeabi_f2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <main+0x364>)
 8001216:	f7ff fa17 	bl	8000648 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <main+0x368>)
 8001228:	f7ff fb38 	bl	800089c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <main+0x364>)
 800123a:	f7ff fa05 	bl	8000648 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	78ba      	ldrb	r2, [r7, #2]
 8001248:	491f      	ldr	r1, [pc, #124]	; (80012c8 <main+0x31c>)
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3306      	adds	r3, #6
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001260:	ee17 0a90 	vmov	r0, s15
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff fb14 	bl	800089c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fbf6 	bl	8000a6c <__aeabi_d2iz>
 8001280:	4603      	mov	r3, r0
 8001282:	607b      	str	r3, [r7, #4]
				  if ((channel[ch].chnl_type == MESH_RIM_AUTOAUX)&&(channel[ch].main_rdy_usealt))
 8001284:	78ba      	ldrb	r2, [r7, #2]
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <main+0x31c>)
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3303      	adds	r3, #3
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	f040 8092 	bne.w	80013c0 <main+0x414>
 800129c:	78ba      	ldrb	r2, [r7, #2]
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <main+0x31c>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	3312      	adds	r3, #18
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8086 	beq.w	80013c0 <main+0x414>
					  vol = vol*4;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	e081      	b.n	80013c0 <main+0x414>
 80012bc:	20000848 	.word	0x20000848
 80012c0:	200006d8 	.word	0x200006d8
 80012c4:	2000067c 	.word	0x2000067c
 80012c8:	20000918 	.word	0x20000918
 80012cc:	20000960 	.word	0x20000960
 80012d0:	200009a8 	.word	0x200009a8
 80012d4:	200009f0 	.word	0x200009f0
 80012d8:	20000a38 	.word	0x20000a38
 80012dc:	20000a80 	.word	0x20000a80
 80012e0:	20000ac8 	.word	0x20000ac8
 80012e4:	20000b10 	.word	0x20000b10
 80012e8:	20000b58 	.word	0x20000b58
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000c8c 	.word	0x20000c8c
 80012f4:	20000430 	.word	0x20000430
 80012f8:	20000c40 	.word	0x20000c40
 80012fc:	20000688 	.word	0x20000688
 8001300:	0800f8d8 	.word	0x0800f8d8
 8001304:	20000d18 	.word	0x20000d18
 8001308:	0800f8f8 	.word	0x0800f8f8
 800130c:	2000042c 	.word	0x2000042c
 8001310:	40590000 	.word	0x40590000
 8001314:	40b00000 	.word	0x40b00000
			  } else {
				  //volume for cymbals
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm * 2);
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	49b3      	ldr	r1, [pc, #716]	; (80015e8 <main+0x63c>)
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	331a      	adds	r3, #26
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3b32      	subs	r3, #50	; 0x32
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f92e 	bl	8000598 <__aeabi_f2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4baa      	ldr	r3, [pc, #680]	; (80015ec <main+0x640>)
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <main+0x644>)
 8001354:	f7ff faa2 	bl	800089c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4ba1      	ldr	r3, [pc, #644]	; (80015ec <main+0x640>)
 8001366:	f7ff f96f 	bl	8000648 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	499c      	ldr	r1, [pc, #624]	; (80015e8 <main+0x63c>)
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3306      	adds	r3, #6
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff f902 	bl	8000598 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff fa7e 	bl	800089c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	f7fe ff96 	bl	80002dc <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb58 	bl	8000a6c <__aeabi_d2iz>
 80013bc:	4603      	mov	r3, r0
 80013be:	607b      	str	r3, [r7, #4]
			  }

			  if (vol > 127) vol = 127;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b7f      	cmp	r3, #127	; 0x7f
 80013c4:	dd01      	ble.n	80013ca <main+0x41e>
 80013c6:	237f      	movs	r3, #127	; 0x7f
 80013c8:	607b      	str	r3, [r7, #4]
			  if (vol < 1  ) vol = 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dc01      	bgt.n	80013d4 <main+0x428>
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
			  channel[ch].main_rdy_volume = (uint8_t) vol;
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	4983      	ldr	r1, [pc, #524]	; (80015e8 <main+0x63c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3320      	adds	r3, #32
 80013e8:	4602      	mov	r2, r0
 80013ea:	701a      	strb	r2, [r3, #0]

			  uint8_t vc;
			  if (channel[ch].main_rdy_usealt)
 80013ec:	78ba      	ldrb	r2, [r7, #2]
 80013ee:	497e      	ldr	r1, [pc, #504]	; (80015e8 <main+0x63c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3312      	adds	r3, #18
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <main+0x46c>
				  vc = channel[ch].alt_voice;	//				  sendMidiGEN(channel[ch].alt_voice ,channel[ch].main_rdy_volume);
 8001402:	78ba      	ldrb	r2, [r7, #2]
 8001404:	4978      	ldr	r1, [pc, #480]	; (80015e8 <main+0x63c>)
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3301      	adds	r3, #1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	707b      	strb	r3, [r7, #1]
 8001416:	e008      	b.n	800142a <main+0x47e>
			  else
				  vc = channel[ch].main_voice;	//				  sendMidiGEN(channel[ch].main_voice,channel[ch].main_rdy_volume);
 8001418:	78ba      	ldrb	r2, [r7, #2]
 800141a:	4973      	ldr	r1, [pc, #460]	; (80015e8 <main+0x63c>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	707b      	strb	r3, [r7, #1]


			  sendMidi(vc,channel[ch].main_rdy_volume);
 800142a:	78ba      	ldrb	r2, [r7, #2]
 800142c:	496e      	ldr	r1, [pc, #440]	; (80015e8 <main+0x63c>)
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3320      	adds	r3, #32
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc9e 	bl	8001d82 <sendMidi>
			  channel[ch].main_last_on_voice 	= vc;
 8001446:	78ba      	ldrb	r2, [r7, #2]
 8001448:	4967      	ldr	r1, [pc, #412]	; (80015e8 <main+0x63c>)
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	333c      	adds	r3, #60	; 0x3c
 8001456:	787a      	ldrb	r2, [r7, #1]
 8001458:	701a      	strb	r2, [r3, #0]
			  channel[ch].main_last_on_time 	= HAL_GetTick();
 800145a:	78bc      	ldrb	r4, [r7, #2]
 800145c:	f002 f870 	bl	8003540 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	4961      	ldr	r1, [pc, #388]	; (80015e8 <main+0x63c>)
 8001464:	4623      	mov	r3, r4
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4423      	add	r3, r4
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3338      	adds	r3, #56	; 0x38
 8001470:	601a      	str	r2, [r3, #0]

  			  sendDebug(ch,0);
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fd0a 	bl	8001e90 <sendDebug>


		  }


		  if (channel[ch].aux_rdy){
 800147c:	78ba      	ldrb	r2, [r7, #2]
 800147e:	495a      	ldr	r1, [pc, #360]	; (80015e8 <main+0x63c>)
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80b1 	beq.w	80015f6 <main+0x64a>
			  channel[ch].aux_rdy = 0;
 8001494:	78ba      	ldrb	r2, [r7, #2]
 8001496:	4954      	ldr	r1, [pc, #336]	; (80015e8 <main+0x63c>)
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3324      	adds	r3, #36	; 0x24
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
			  sendDebug(ch,1);
 80014a8:	78bb      	ldrb	r3, [r7, #2]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fcef 	bl	8001e90 <sendDebug>

			  switch (channel[ch].chnl_type ){
 80014b2:	78ba      	ldrb	r2, [r7, #2]
 80014b4:	494c      	ldr	r1, [pc, #304]	; (80015e8 <main+0x63c>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3303      	adds	r3, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d014      	beq.n	80014f2 <main+0x546>
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	dc47      	bgt.n	800155c <main+0x5b0>
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d002      	beq.n	80014d6 <main+0x52a>
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d02e      	beq.n	8001532 <main+0x586>
 80014d4:	e042      	b.n	800155c <main+0x5b0>
			  case CYMBAL_HIHAT:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014d6:	78ba      	ldrb	r2, [r7, #2]
 80014d8:	4943      	ldr	r1, [pc, #268]	; (80015e8 <main+0x63c>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	332c      	adds	r3, #44	; 0x2c
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d17b      	bne.n	80015e4 <main+0x638>
					 sendMidiHHPedalOn();
 80014ec:	f000 fc9e 	bl	8001e2c <sendMidiHHPedalOn>
//				  else
//					  sendMidiGEN(channel[ch].main_voice, 5);
				  break;
 80014f0:	e078      	b.n	80015e4 <main+0x638>

			  case CYMBAL_MUTE:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014f2:	78ba      	ldrb	r2, [r7, #2]
 80014f4:	493c      	ldr	r1, [pc, #240]	; (80015e8 <main+0x63c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	332c      	adds	r3, #44	; 0x2c
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d175      	bne.n	80015f4 <main+0x648>
					  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001508:	78ba      	ldrb	r2, [r7, #2]
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <main+0x63c>)
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	78ba      	ldrb	r2, [r7, #2]
 800151a:	4933      	ldr	r1, [pc, #204]	; (80015e8 <main+0x63c>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	2101      	movs	r1, #1
 800152c:	f000 fc48 	bl	8001dc0 <sendMidi2>
				  break;
 8001530:	e060      	b.n	80015f4 <main+0x648>

			  case CYMBAL_2_ZONE:
				  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001532:	78ba      	ldrb	r2, [r7, #2]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <main+0x63c>)
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	78ba      	ldrb	r2, [r7, #2]
 8001544:	4928      	ldr	r1, [pc, #160]	; (80015e8 <main+0x63c>)
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2101      	movs	r1, #1
 8001556:	f000 fc33 	bl	8001dc0 <sendMidi2>
				  break;
 800155a:	e04c      	b.n	80015f6 <main+0x64a>

			  // INDEPENDENT AUX INPUTS
			  default:
				  if (channel[ch].aux_type == AUX_TYPE_PAD)
 800155c:	78ba      	ldrb	r2, [r7, #2]
 800155e:	4922      	ldr	r1, [pc, #136]	; (80015e8 <main+0x63c>)
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3304      	adds	r3, #4
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <main+0x5f4>
					  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 8001572:	78ba      	ldrb	r2, [r7, #2]
 8001574:	491c      	ldr	r1, [pc, #112]	; (80015e8 <main+0x63c>)
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3302      	adds	r3, #2
 8001582:	7818      	ldrb	r0, [r3, #0]
 8001584:	78ba      	ldrb	r2, [r7, #2]
 8001586:	4918      	ldr	r1, [pc, #96]	; (80015e8 <main+0x63c>)
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3302      	adds	r3, #2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2164      	movs	r1, #100	; 0x64
 800159a:	f000 fc11 	bl	8001dc0 <sendMidi2>
 800159e:	e02a      	b.n	80015f6 <main+0x64a>
				  else { //PEDAL
					  // PEDAL pressed
					  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80015a0:	78ba      	ldrb	r2, [r7, #2]
 80015a2:	4911      	ldr	r1, [pc, #68]	; (80015e8 <main+0x63c>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	332c      	adds	r3, #44	; 0x2c
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d11f      	bne.n	80015f6 <main+0x64a>
						  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 80015b6:	78ba      	ldrb	r2, [r7, #2]
 80015b8:	490b      	ldr	r1, [pc, #44]	; (80015e8 <main+0x63c>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3302      	adds	r3, #2
 80015c6:	7818      	ldrb	r0, [r3, #0]
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	4907      	ldr	r1, [pc, #28]	; (80015e8 <main+0x63c>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3302      	adds	r3, #2
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	2164      	movs	r1, #100	; 0x64
 80015de:	f000 fbef 	bl	8001dc0 <sendMidi2>
 80015e2:	e008      	b.n	80015f6 <main+0x64a>
				  break;
 80015e4:	bf00      	nop
 80015e6:	e006      	b.n	80015f6 <main+0x64a>
 80015e8:	20000918 	.word	0x20000918
 80015ec:	40590000 	.word	0x40590000
 80015f0:	40b00000 	.word	0x40b00000
				  break;
 80015f4:	bf00      	nop
			  }


		  }
		  // send off command if needed
		  if (channel[ch].main_last_on_voice > 0){
 80015f6:	78ba      	ldrb	r2, [r7, #2]
 80015f8:	491b      	ldr	r1, [pc, #108]	; (8001668 <main+0x6bc>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	333c      	adds	r3, #60	; 0x3c
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d025      	beq.n	8001658 <main+0x6ac>
			  if ( HAL_GetTick() > (channel[ch].main_last_on_time + OFF_DELAY_MS) ){
 800160c:	f001 ff98 	bl	8003540 <HAL_GetTick>
 8001610:	4601      	mov	r1, r0
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <main+0x6bc>)
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	33c8      	adds	r3, #200	; 0xc8
 8001626:	4299      	cmp	r1, r3
 8001628:	d916      	bls.n	8001658 <main+0x6ac>
				  sendMidi(channel[ch].main_last_on_voice,0);
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <main+0x6bc>)
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	333c      	adds	r3, #60	; 0x3c
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb9f 	bl	8001d82 <sendMidi>
				  channel[ch].main_last_on_voice = 0;
 8001644:	78ba      	ldrb	r2, [r7, #2]
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <main+0x6bc>)
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	333c      	adds	r3, #60	; 0x3c
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	  for (uint8_t ch = 0; ch<9; ch++){
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	3301      	adds	r3, #1
 800165c:	70bb      	strb	r3, [r7, #2]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b08      	cmp	r3, #8
 8001662:	f67f ada1 	bls.w	80011a8 <main+0x1fc>
	  while (config_Mode[0]){
 8001666:	e58f      	b.n	8001188 <main+0x1dc>
 8001668:	20000918 	.word	0x20000918

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0a4      	sub	sp, #144	; 0x90
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00d fcea 	bl	800f054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2244      	movs	r2, #68	; 0x44
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00d fcdc 	bl	800f054 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800169c:	2000      	movs	r0, #0
 800169e:	f006 f8b7 	bl	8007810 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80016a2:	2322      	movs	r3, #34	; 0x22
 80016a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ac:	2340      	movs	r3, #64	; 0x40
 80016ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016bc:	2304      	movs	r3, #4
 80016be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016c0:	2355      	movs	r3, #85	; 0x55
 80016c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016dc:	4618      	mov	r0, r3
 80016de:	f006 f94b 	bl	8007978 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016e8:	f001 fc14 	bl	8002f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001704:	2104      	movs	r1, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f006 fc4e 	bl	8007fa8 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001712:	f001 fbff 	bl	8002f14 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB
 8001716:	f24a 0302 	movw	r3, #40962	; 0xa002
 800171a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001724:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001728:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f006 fe57 	bl	80083e0 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001738:	f001 fbec 	bl	8002f14 <Error_Handler>
  }
}
 800173c:	bf00      	nop
 800173e:	3790      	adds	r7, #144	; 0x90
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f00d fc79 	bl	800f054 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <MX_ADC1_Init+0x168>)
 8001764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <MX_ADC1_Init+0x168>)
 800176c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <MX_ADC1_Init+0x168>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MX_ADC1_Init+0x168>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <MX_ADC1_Init+0x168>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <MX_ADC1_Init+0x168>)
 8001786:	2201      	movs	r2, #1
 8001788:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <MX_ADC1_Init+0x168>)
 800178c:	2208      	movs	r2, #8
 800178e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <MX_ADC1_Init+0x168>)
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <MX_ADC1_Init+0x168>)
 8001798:	2200      	movs	r2, #0
 800179a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 800179c:	4b43      	ldr	r3, [pc, #268]	; (80018ac <MX_ADC1_Init+0x168>)
 800179e:	2205      	movs	r2, #5
 80017a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <MX_ADC1_Init+0x168>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <MX_ADC1_Init+0x168>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_ADC1_Init+0x168>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <MX_ADC1_Init+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <MX_ADC1_Init+0x168>)
 80017c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <MX_ADC1_Init+0x168>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ce:	4837      	ldr	r0, [pc, #220]	; (80018ac <MX_ADC1_Init+0x168>)
 80017d0:	f002 f924 	bl	8003a1c <HAL_ADC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80017da:	f001 fb9b 	bl	8002f14 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80017de:	2306      	movs	r3, #6
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80017e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80017e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	482d      	ldr	r0, [pc, #180]	; (80018ac <MX_ADC1_Init+0x168>)
 80017f6:	f003 fb75 	bl	8004ee4 <HAL_ADCEx_MultiModeConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001800:	f001 fb88 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <MX_ADC1_Init+0x16c>)
 8001806:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001808:	2306      	movs	r3, #6
 800180a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800180c:	2301      	movs	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001810:	237f      	movs	r3, #127	; 0x7f
 8001812:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001814:	2304      	movs	r3, #4
 8001816:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4822      	ldr	r0, [pc, #136]	; (80018ac <MX_ADC1_Init+0x168>)
 8001822:	f002 fd77 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800182c:	f001 fb72 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_ADC1_Init+0x170>)
 8001832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001834:	230c      	movs	r3, #12
 8001836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <MX_ADC1_Init+0x168>)
 800183e:	f002 fd69 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001848:	f001 fb64 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_ADC1_Init+0x174>)
 800184e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001850:	2312      	movs	r3, #18
 8001852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	4619      	mov	r1, r3
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <MX_ADC1_Init+0x168>)
 800185a:	f002 fd5b 	bl	8004314 <HAL_ADC_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8001864:	f001 fb56 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_ADC1_Init+0x178>)
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800186c:	2318      	movs	r3, #24
 800186e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <MX_ADC1_Init+0x168>)
 8001876:	f002 fd4d 	bl	8004314 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8001880:	f001 fb48 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_ADC1_Init+0x17c>)
 8001886:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_ADC1_Init+0x168>)
 8001894:	f002 fd3e 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800189e:	f001 fb39 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000848 	.word	0x20000848
 80018b0:	04300002 	.word	0x04300002
 80018b4:	08600004 	.word	0x08600004
 80018b8:	2a000400 	.word	0x2a000400
 80018bc:	3ef08000 	.word	0x3ef08000
 80018c0:	c3210000 	.word	0xc3210000

080018c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2220      	movs	r2, #32
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00d fbbf 	bl	800f054 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <MX_ADC2_Init+0x128>)
 80018d8:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <MX_ADC2_Init+0x12c>)
 80018da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <MX_ADC2_Init+0x128>)
 80018de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <MX_ADC2_Init+0x128>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b40      	ldr	r3, [pc, #256]	; (80019ec <MX_ADC2_Init+0x128>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80018f0:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <MX_ADC2_Init+0x128>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <MX_ADC2_Init+0x128>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <MX_ADC2_Init+0x128>)
 80018fe:	2208      	movs	r2, #8
 8001900:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001902:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <MX_ADC2_Init+0x128>)
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <MX_ADC2_Init+0x128>)
 800190a:	2200      	movs	r2, #0
 800190c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <MX_ADC2_Init+0x128>)
 8001910:	2205      	movs	r2, #5
 8001912:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <MX_ADC2_Init+0x128>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <MX_ADC2_Init+0x128>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <MX_ADC2_Init+0x128>)
 8001926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <MX_ADC2_Init+0x128>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001934:	482d      	ldr	r0, [pc, #180]	; (80019ec <MX_ADC2_Init+0x128>)
 8001936:	f002 f871 	bl	8003a1c <HAL_ADC_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001940:	f001 fae8 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <MX_ADC2_Init+0x130>)
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001948:	2306      	movs	r3, #6
 800194a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800194c:	2301      	movs	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001950:	237f      	movs	r3, #127	; 0x7f
 8001952:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001954:	2304      	movs	r3, #4
 8001956:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4822      	ldr	r0, [pc, #136]	; (80019ec <MX_ADC2_Init+0x128>)
 8001962:	f002 fcd7 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800196c:	f001 fad2 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_ADC2_Init+0x134>)
 8001972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001974:	230c      	movs	r3, #12
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	481b      	ldr	r0, [pc, #108]	; (80019ec <MX_ADC2_Init+0x128>)
 800197e:	f002 fcc9 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001988:	f001 fac4 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_ADC2_Init+0x138>)
 800198e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001990:	2312      	movs	r3, #18
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4814      	ldr	r0, [pc, #80]	; (80019ec <MX_ADC2_Init+0x128>)
 800199a:	f002 fcbb 	bl	8004314 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80019a4:	f001 fab6 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_ADC2_Init+0x13c>)
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019ac:	2318      	movs	r3, #24
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_ADC2_Init+0x128>)
 80019b6:	f002 fcad 	bl	8004314 <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80019c0:	f001 faa8 	bl	8002f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_ADC2_Init+0x140>)
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019ce:	463b      	mov	r3, r7
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_ADC2_Init+0x128>)
 80019d4:	f002 fc9e 	bl	8004314 <HAL_ADC_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80019de:	f001 fa99 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200006d8 	.word	0x200006d8
 80019f0:	50000100 	.word	0x50000100
 80019f4:	0c900008 	.word	0x0c900008
 80019f8:	10c00010 	.word	0x10c00010
 80019fc:	2a000400 	.word	0x2a000400
 8001a00:	36902000 	.word	0x36902000
 8001a04:	47520000 	.word	0x47520000

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5.1E7;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a3c:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <MX_TIM2_Init+0x98>)
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a4e:	f006 feb7 	bl	80087c0 <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a58:	f001 fa5c 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a6a:	f007 f8eb 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a74:	f001 fa4e 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a86:	f007 fb27 	bl	80090d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f001 fa40 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000c40 	.word	0x20000c40
 8001aa0:	030a32c0 	.word	0x030a32c0

08001aa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <MX_TIM4_Init+0x98>)
 8001ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 17000;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001ad6:	f244 2268 	movw	r2, #17000	; 0x4268
 8001ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae8:	4813      	ldr	r0, [pc, #76]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001aea:	f006 fe69 	bl	80087c0 <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001af4:	f001 fa0e 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	4619      	mov	r1, r3
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001b06:	f007 f89d 	bl	8008c44 <HAL_TIM_ConfigClockSource>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b10:	f001 fa00 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_TIM4_Init+0x94>)
 8001b22:	f007 fad9 	bl	80090d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b2c:	f001 f9f2 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000688 	.word	0x20000688
 8001b3c:	40000800 	.word	0x40000800

08001b40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_TIM6_Init+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b58:	22aa      	movs	r2, #170	; 0xaa
 8001b5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b72:	f006 fe25 	bl	80087c0 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b7c:	f001 f9ca 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_TIM6_Init+0x64>)
 8001b8e:	f007 faa3 	bl	80090d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b98:	f001 f9bc 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000be0 	.word	0x20000be0
 8001ba8:	40001000 	.word	0x40001000

08001bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <MX_USART2_UART_Init+0x94>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf4:	4811      	ldr	r0, [pc, #68]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001bf6:	f007 fb37 	bl	8009268 <HAL_UART_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c00:	f001 f988 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001c08:	f008 fd45 	bl	800a696 <HAL_UARTEx_SetTxFifoThreshold>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c12:	f001 f97f 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	4808      	ldr	r0, [pc, #32]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001c1a:	f008 fd7a 	bl	800a712 <HAL_UARTEx_SetRxFifoThreshold>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c24:	f001 f976 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_USART2_UART_Init+0x90>)
 8001c2a:	f008 fcfb 	bl	800a624 <HAL_UARTEx_DisableFifoMode>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f001 f96e 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000c8c 	.word	0x20000c8c
 8001c40:	40004400 	.word	0x40004400

08001c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6493      	str	r3, [r2, #72]	; 0x48
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_DMA_Init+0x50>)
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	200b      	movs	r0, #11
 8001c80:	f003 faab 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c84:	200b      	movs	r0, #11
 8001c86:	f003 fac2 	bl	800520e <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_GPIO_Init+0xc4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <MX_GPIO_Init+0xc8>)
 8001cfe:	f004 f9df 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG_IN7_Pin DIG_IN1_Pin DIG_IN3_Pin DIG_IN5_Pin */
  GPIO_InitStruct.Pin = DIG_IN7_Pin|DIG_IN1_Pin|DIG_IN3_Pin|DIG_IN5_Pin;
 8001d02:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f004 f837 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_IN9_Pin DIG_IN6_Pin DIG_IN4_Pin DIG_IN2_Pin */
  GPIO_InitStruct.Pin = DIG_IN9_Pin|DIG_IN6_Pin|DIG_IN4_Pin|DIG_IN2_Pin;
 8001d1e:	23f0      	movs	r3, #240	; 0xf0
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <MX_GPIO_Init+0xc8>)
 8001d32:	f004 f82b 	bl	8005d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_GPIO_Init+0xc8>)
 8001d50:	f004 f81c 	bl	8005d8c <HAL_GPIO_Init>

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000400 	.word	0x48000400

08001d64 <sendMidiAS>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */

void sendMidiAS(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  uint8_t bff[4] = {0x0F, 0xFE, 0x00, 0x00};
 8001d6a:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 8001d6e:	607b      	str	r3, [r7, #4]
  tx_midi((uint8_t *)bff,4);
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2104      	movs	r1, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 f86f 	bl	8001e58 <tx_midi>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <sendMidi>:
  bff[6] = 0x7f & note;
  tx_midi((uint8_t *)bff,8);
}

// MIDI generic ON message
void sendMidi(uint8_t note, uint8_t vel){
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460a      	mov	r2, r1
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71bb      	strb	r3, [r7, #6]
  uint8_t bff[4] = {TAB,  0x99, 0x00, 0x00};
 8001d92:	f649 1309 	movw	r3, #39177	; 0x9909
 8001d96:	60fb      	str	r3, [r7, #12]
  bff[2] = 0x7f & note;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	73bb      	strb	r3, [r7, #14]
  bff[3] = 0x7f & vel;
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,4);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2104      	movs	r1, #4
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f850 	bl	8001e58 <tx_midi>
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <sendMidi2>:
  tx_midi((uint8_t *)bff,4);
}


// MIDI generic ON message
void sendMidi2(uint8_t note1, uint8_t vel1,uint8_t note2, uint8_t vel2){
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	717b      	strb	r3, [r7, #5]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	713b      	strb	r3, [r7, #4]
  uint8_t bff[8] = {TAB,  0x99, 0x00, 0x00, TAB,  0x99, 0x00, 0x00};
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <sendMidi2+0x68>)
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de8:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note1;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel1;
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	72fb      	strb	r3, [r7, #11]
  bff[2+4] = 0x7f & note2;
 8001e00:	797b      	ldrb	r3, [r7, #5]
 8001e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	73bb      	strb	r3, [r7, #14]
  bff[3+4] = 0x7f & vel2;
 8001e0a:	793b      	ldrb	r3, [r7, #4]
 8001e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,8);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2108      	movs	r1, #8
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f81c 	bl	8001e58 <tx_midi>
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	0800f92c 	.word	0x0800f92c

08001e2c <sendMidiHHPedalOn>:

// MIDI HiHat pedal press message
void sendMidiHHPedalOn(){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
  uint8_t bff[20] = { TAB,  0xA9, HHOPEN , 0x7F, TAB,  0xA9, HHCLOSE, 0x7F, TAB, 0xA9, 0x15, 0x7F,
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <sendMidiHHPedalOn+0x28>)
 8001e34:	1d3c      	adds	r4, r7, #4
 8001e36:	461d      	mov	r5, r3
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	6023      	str	r3, [r4, #0]
		  	  	  	  TAB,  0x99, HHPEDAL, 0x64, TAB,  0x99, HHPEDAL, 0x00};
  tx_midi((uint8_t *)bff, 20);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2114      	movs	r1, #20
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f807 	bl	8001e58 <tx_midi>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	0800f934 	.word	0x0800f934

08001e58 <tx_midi>:
////  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//}


void tx_midi(uint8_t *_buffer, uint16_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  uint8_t rt = USBD_BUSY;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]

  while( rt == USBD_BUSY) {
 8001e68:	e006      	b.n	8001e78 <tx_midi+0x20>
	  rt = CDC_Transmit_FS(_buffer, len);
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f00c fc8e 	bl	800e790 <CDC_Transmit_FS>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
  while( rt == USBD_BUSY) {
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d0f5      	beq.n	8001e6a <tx_midi+0x12>
  };

  TIM2->CNT = 0; // restart active sense timer
 8001e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <sendDebug>:

void sendDebug(uint8_t _ch, uint8_t _aux)
{
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	b08d      	sub	sp, #52	; 0x34
 8001e94:	af06      	add	r7, sp, #24
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	73bb      	strb	r3, [r7, #14]
	uint8_t voice;
	uint8_t volume;
	uint8_t length;

  if (_aux){
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d032      	beq.n	8001f0c <sendDebug+0x7c>
	  voice = channel[_ch].aux_voice;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	4952      	ldr	r1, [pc, #328]	; (8001ff4 <sendDebug+0x164>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	75fb      	strb	r3, [r7, #23]

	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001eba:	7bf9      	ldrb	r1, [r7, #15]
 8001ebc:	7df8      	ldrb	r0, [r7, #23]
	  			  voice, channel[_ch].aux_rdy_state,
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	4c4c      	ldr	r4, [pc, #304]	; (8001ff4 <sendDebug+0x164>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4423      	add	r3, r4
 8001ecc:	332c      	adds	r3, #44	; 0x2c
 8001ece:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001ed0:	461d      	mov	r5, r3
	  			  channel[_ch].main_peaking, channel[_ch].aux_status);
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	4c47      	ldr	r4, [pc, #284]	; (8001ff4 <sendDebug+0x164>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4423      	add	r3, r4
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001ee4:	461e      	mov	r6, r3
	  			  channel[_ch].main_peaking, channel[_ch].aux_status);
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	4c42      	ldr	r4, [pc, #264]	; (8001ff4 <sendDebug+0x164>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4423      	add	r3, r4
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	9601      	str	r6, [sp, #4]
 8001efc:	9500      	str	r5, [sp, #0]
 8001efe:	4603      	mov	r3, r0
 8001f00:	460a      	mov	r2, r1
 8001f02:	493d      	ldr	r1, [pc, #244]	; (8001ff8 <sendDebug+0x168>)
 8001f04:	483d      	ldr	r0, [pc, #244]	; (8001ffc <sendDebug+0x16c>)
 8001f06:	f00d f8ad 	bl	800f064 <siprintf>
 8001f0a:	e060      	b.n	8001fce <sendDebug+0x13e>
  }else{
	  if (channel[_ch].main_rdy_usealt) voice = channel[_ch].alt_voice; else voice = channel[_ch].main_voice;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	4939      	ldr	r1, [pc, #228]	; (8001ff4 <sendDebug+0x164>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3312      	adds	r3, #18
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <sendDebug+0xa8>
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	4933      	ldr	r1, [pc, #204]	; (8001ff4 <sendDebug+0x164>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3301      	adds	r3, #1
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	75fb      	strb	r3, [r7, #23]
 8001f36:	e008      	b.n	8001f4a <sendDebug+0xba>
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	492e      	ldr	r1, [pc, #184]	; (8001ff4 <sendDebug+0x164>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	75fb      	strb	r3, [r7, #23]
	  volume = channel[_ch].main_rdy_volume;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <sendDebug+0x164>)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	3320      	adds	r3, #32
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	75bb      	strb	r3, [r7, #22]
	  length = channel[_ch].main_rdy_length;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	4924      	ldr	r1, [pc, #144]	; (8001ff4 <sendDebug+0x164>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3322      	adds	r3, #34	; 0x22
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	757b      	strb	r3, [r7, #21]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f72:	7bfc      	ldrb	r4, [r7, #15]
 8001f74:	7dfd      	ldrb	r5, [r7, #23]
			  voice, channel[_ch].alt_voice, volume, channel[_ch].main_rdy_height,
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	491e      	ldr	r1, [pc, #120]	; (8001ff4 <sendDebug+0x164>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	3301      	adds	r3, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	7db9      	ldrb	r1, [r7, #22]
			  voice, channel[_ch].alt_voice, volume, channel[_ch].main_rdy_height,
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <sendDebug+0x164>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4403      	add	r3, r0
 8001f9a:	331a      	adds	r3, #26
 8001f9c:	881b      	ldrh	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	7d78      	ldrb	r0, [r7, #21]
			  length, channel[_ch].aux_status);
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	4e13      	ldr	r6, [pc, #76]	; (8001ff4 <sendDebug+0x164>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4433      	add	r3, r6
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	9003      	str	r0, [sp, #12]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	9202      	str	r2, [sp, #8]
 8001fbc:	9101      	str	r1, [sp, #4]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	4622      	mov	r2, r4
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <sendDebug+0x170>)
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <sendDebug+0x16c>)
 8001fca:	f00d f84b 	bl	800f064 <siprintf>
  }
  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 5);
 8001fce:	480b      	ldr	r0, [pc, #44]	; (8001ffc <sendDebug+0x16c>)
 8001fd0:	f7fe f926 	bl	8000220 <strlen>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2305      	movs	r3, #5
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <sendDebug+0x16c>)
 8001fdc:	4809      	ldr	r0, [pc, #36]	; (8002004 <sendDebug+0x174>)
 8001fde:	f007 f993 	bl	8009308 <HAL_UART_Transmit>

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <sendDebug+0x178>)
 8001fe8:	f004 f882 	bl	80060f0 <HAL_GPIO_TogglePin>

}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	20000918 	.word	0x20000918
 8001ff8:	0800f948 	.word	0x0800f948
 8001ffc:	20000d18 	.word	0x20000d18
 8002000:	0800f964 	.word	0x0800f964
 8002004:	20000c8c 	.word	0x20000c8c
 8002008:	48000400 	.word	0x48000400

0800200c <getAuxState>:


// READ Diginal state of aux channels
void getAuxState (GPIO_PinState *_state){
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	_state[0] = HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin);
 8002014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f004 f838 	bl	8006090 <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	701a      	strb	r2, [r3, #0]
	_state[1] = HAL_GPIO_ReadPin(DIG_IN2_GPIO_Port, DIG_IN2_Pin);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1c5c      	adds	r4, r3, #1
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	4824      	ldr	r0, [pc, #144]	; (80020c0 <getAuxState+0xb4>)
 8002030:	f004 f82e 	bl	8006090 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	7023      	strb	r3, [r4, #0]
	_state[2] = HAL_GPIO_ReadPin(DIG_IN3_GPIO_Port, DIG_IN3_Pin);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1c9c      	adds	r4, r3, #2
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f004 f824 	bl	8006090 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	7023      	strb	r3, [r4, #0]
	_state[3] = HAL_GPIO_ReadPin(DIG_IN4_GPIO_Port, DIG_IN4_Pin);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1cdc      	adds	r4, r3, #3
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	481b      	ldr	r0, [pc, #108]	; (80020c0 <getAuxState+0xb4>)
 8002054:	f004 f81c 	bl	8006090 <HAL_GPIO_ReadPin>
 8002058:	4603      	mov	r3, r0
 800205a:	7023      	strb	r3, [r4, #0]

	_state[4] = HAL_GPIO_ReadPin(DIG_IN5_GPIO_Port, DIG_IN5_Pin);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1d1c      	adds	r4, r3, #4
 8002060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f004 f812 	bl	8006090 <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	7023      	strb	r3, [r4, #0]
	_state[5] = HAL_GPIO_ReadPin(DIG_IN6_GPIO_Port, DIG_IN6_Pin);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	1d5c      	adds	r4, r3, #5
 8002074:	2120      	movs	r1, #32
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <getAuxState+0xb4>)
 8002078:	f004 f80a 	bl	8006090 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	7023      	strb	r3, [r4, #0]
	_state[6] = HAL_GPIO_ReadPin(DIG_IN7_GPIO_Port, DIG_IN7_Pin);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1d9c      	adds	r4, r3, #6
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f004 f800 	bl	8006090 <HAL_GPIO_ReadPin>
 8002090:	4603      	mov	r3, r0
 8002092:	7023      	strb	r3, [r4, #0]
	_state[7] = 0; //HAL_GPIO_ReadPin(DIG_IN8_GPIO_Port, DIG_IN8_Pin);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3307      	adds	r3, #7
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

	_state[8] = HAL_GPIO_ReadPin(DIG_IN9_GPIO_Port, DIG_IN9_Pin);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0408 	add.w	r4, r3, #8
 80020a2:	2110      	movs	r1, #16
 80020a4:	4806      	ldr	r0, [pc, #24]	; (80020c0 <getAuxState+0xb4>)
 80020a6:	f003 fff3 	bl	8006090 <HAL_GPIO_ReadPin>
 80020aa:	4603      	mov	r3, r0
 80020ac:	7023      	strb	r3, [r4, #0]
	_state[9] = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3309      	adds	r3, #9
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd90      	pop	{r4, r7, pc}
 80020be:	bf00      	nop
 80020c0:	48000400 	.word	0x48000400

080020c4 <Save_Setting>:

uint8_t Save_Setting(uint8_t _rst)
{
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b0cd      	sub	sp, #308	; 0x134
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4602      	mov	r2, r0
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	701a      	strb	r2, [r3, #0]
	uint32_t SavingBuff[64];
	uint8_t i;
	uint32_t error = 0;
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
	uint64_t val = 0;
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	4abe      	ldr	r2, [pc, #760]	; (80023e4 <Save_Setting+0x320>)
 80020ea:	461e      	mov	r6, r3
 80020ec:	4613      	mov	r3, r2
 80020ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			.Banks = FLASH_BANK_1,
	        .Page = 63,
			.NbPages = 1
	};

	for (i=0;i<64;i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80020fa:	e00b      	b.n	8002114 <Save_Setting+0x50>
			SavingBuff[i] = 0;
 80020fc:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2100      	movs	r1, #0
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0;i<64;i++)
 800210a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800210e:	3301      	adds	r3, #1
 8002110:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002114:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002118:	2b3f      	cmp	r3, #63	; 0x3f
 800211a:	d9ef      	bls.n	80020fc <Save_Setting+0x38>
//112233445566778899 AABBCCDDEEFF
	if (_rst == 0)
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <Save_Setting+0x6a>
		SavingBuff[0] = 0xC4C0FFEE; // load settings marker
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4aaf      	ldr	r2, [pc, #700]	; (80023e8 <Save_Setting+0x324>)
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e004      	b.n	8002138 <Save_Setting+0x74>
	else
		SavingBuff[0] = 0xFFFFFFFF; // do not load marker
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	601a      	str	r2, [r3, #0]
	SavingBuff[1] = 0xBB;
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	22bb      	movs	r2, #187	; 0xbb
 800213e:	605a      	str	r2, [r3, #4]

	// 0x11223344
	for (i = 1; i < 10; i++){
 8002140:	2301      	movs	r3, #1
 8002142:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002146:	e0bc      	b.n	80022c2 <Save_Setting+0x1fe>
		// channel configuration settings
		SavingBuff[2*i    ]  = (channel[i-1].main_voice & 0xFF)*0x01000000;
 8002148:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	49a7      	ldr	r1, [pc, #668]	; (80023ec <Save_Setting+0x328>)
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	0619      	lsls	r1, r3, #24
 800215e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002162:	005a      	lsls	r2, r3, #1
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].aux_voice  & 0xFF)*0x00010000;
 800216c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002170:	005a      	lsls	r2, r3, #1
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800217a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800217e:	1e5a      	subs	r2, r3, #1
 8002180:	489a      	ldr	r0, [pc, #616]	; (80023ec <Save_Setting+0x328>)
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4403      	add	r3, r0
 800218c:	3302      	adds	r3, #2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	4618      	mov	r0, r3
 8002194:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002198:	005a      	lsls	r2, r3, #1
 800219a:	4401      	add	r1, r0
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].alt_voice  & 0xFF)*0x00000100;
 80021a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	488c      	ldr	r0, [pc, #560]	; (80023ec <Save_Setting+0x328>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4403      	add	r3, r0
 80021c4:	3301      	adds	r3, #1
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	4618      	mov	r0, r3
 80021cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	4401      	add	r1, r0
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].chnl_type   & 0xFF);
 80021dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021e0:	005a      	lsls	r2, r3, #1
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	487e      	ldr	r0, [pc, #504]	; (80023ec <Save_Setting+0x328>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4403      	add	r3, r0
 80021fc:	3303      	adds	r3, #3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002206:	005a      	lsls	r2, r3, #1
 8002208:	4401      	add	r1, r0
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// channel parameter settings
		SavingBuff[2*i + 1]  = (channel[i-1].peak_volume_norm 	& 0xFF)*0x01000000;
 8002212:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	4974      	ldr	r1, [pc, #464]	; (80023ec <Save_Setting+0x328>)
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3306      	adds	r3, #6
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	0619      	lsls	r1, r3, #24
 800222c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_min_length 	& 0xFF)*0x00010000;
 800223c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800224c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	4866      	ldr	r0, [pc, #408]	; (80023ec <Save_Setting+0x328>)
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4403      	add	r3, r0
 800225e:	330a      	adds	r3, #10
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	4401      	add	r1, r0
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_max_length  	& 0xFF)*0x00000100;
 800227a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800228a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	4856      	ldr	r0, [pc, #344]	; (80023ec <Save_Setting+0x328>)
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4403      	add	r3, r0
 800229c:	3308      	adds	r3, #8
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4618      	mov	r0, r3
 80022a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	4401      	add	r1, r0
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i < 10; i++){
 80022b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022bc:	3301      	adds	r3, #1
 80022be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80022c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	f67f af3e 	bls.w	8002148 <Save_Setting+0x84>
//		SavingBuff[2*i + 1] += (channel[i-1].peak2peak  & 0xFF);
	}

	HAL_StatusTypeDef err;
	uint8_t st = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	err = HAL_FLASH_Unlock();
 80022d2:	f003 fb4b 	bl	800596c <HAL_FLASH_Unlock>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 80022dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <Save_Setting+0x22a>
		st += 0b10000000;
 80022e4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80022e8:	3b80      	subs	r3, #128	; 0x80
 80022ea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR  | FLASH_FLAG_PGSERR);
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <Save_Setting+0x32c>)
 80022f0:	22b3      	movs	r2, #179	; 0xb3
 80022f2:	611a      	str	r2, [r3, #16]

	err = HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 80022f4:	f107 0218 	add.w	r2, r7, #24
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fc20 	bl	8005b44 <HAL_FLASHEx_Erase>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 800230a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <Save_Setting+0x258>
		st += 0b01000000;
 8002312:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002316:	3340      	adds	r3, #64	; 0x40
 8002318:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<32;i++)
 800231c:	2300      	movs	r3, #0
 800231e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002322:	e039      	b.n	8002398 <Save_Setting+0x2d4>
	{
		val = (((uint64_t)SavingBuff[i*2+1])<<32) + SavingBuff[i*2];
 8002324:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	4618      	mov	r0, r3
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	0003      	movs	r3, r0
 8002344:	2200      	movs	r2, #0
 8002346:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 800234a:	0048      	lsls	r0, r1, #1
 800234c:	f107 011c 	add.w	r1, r7, #28
 8002350:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002354:	4608      	mov	r0, r1
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	1814      	adds	r4, r2, r0
 800235c:	eb43 0501 	adc.w	r5, r3, r1
 8002360:	e9c7 4548 	strd	r4, r5, [r7, #288]	; 0x120
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_USER_START_ADDR + 8*i, val) != HAL_OK) st += 1;
 8002364:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002368:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800236c:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4619      	mov	r1, r3
 8002374:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002378:	2000      	movs	r0, #0
 800237a:	f003 faa1 	bl	80058c0 <HAL_FLASH_Program>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <Save_Setting+0x2ca>
 8002384:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002388:	3301      	adds	r3, #1
 800238a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	for (i=0;i<32;i++)
 800238e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002392:	3301      	adds	r3, #1
 8002394:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002398:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800239c:	2b1f      	cmp	r3, #31
 800239e:	d9c1      	bls.n	8002324 <Save_Setting+0x260>
	}
	if ( HAL_FLASH_Lock() != HAL_OK ) st += 0b00100000;
 80023a0:	f003 fb06 	bl	80059b0 <HAL_FLASH_Lock>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <Save_Setting+0x2f0>
 80023aa:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80023ae:	3320      	adds	r3, #32
 80023b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<64;i++)	saved_config[0] = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80023ba:	e007      	b.n	80023cc <Save_Setting+0x308>
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <Save_Setting+0x330>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023c6:	3301      	adds	r3, #1
 80023c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80023cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023d0:	2b3f      	cmp	r3, #63	; 0x3f
 80023d2:	d9f3      	bls.n	80023bc <Save_Setting+0x2f8>


	return st;
 80023d4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
}
 80023d8:	4618      	mov	r0, r3
 80023da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800f9a4 	.word	0x0800f9a4
 80023e8:	c4c0ffee 	.word	0xc4c0ffee
 80023ec:	20000918 	.word	0x20000918
 80023f0:	40022000 	.word	0x40022000
 80023f4:	20000748 	.word	0x20000748

080023f8 <Load_Setting>:


uint8_t Load_Setting()
{
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b0a3      	sub	sp, #140	; 0x8c
 80023fc:	af12      	add	r7, sp, #72	; 0x48
	uint8_t i;
//	uint32_t LoadingBuff[64];

	for (i=0;i<64;i++){
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002404:	e010      	b.n	8002428 <Load_Setting+0x30>
		saved_config[i] = *(userConfig+i);
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <Load_Setting+0x258>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	498e      	ldr	r1, [pc, #568]	; (8002654 <Load_Setting+0x25c>)
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<64;i++){
 800241e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002422:	3301      	adds	r3, #1
 8002424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800242c:	2b3f      	cmp	r3, #63	; 0x3f
 800242e:	d9ea      	bls.n	8002406 <Load_Setting+0xe>
	}

	if (saved_config[0] != 0xC4C0FFEE) return 0;
 8002430:	4b88      	ldr	r3, [pc, #544]	; (8002654 <Load_Setting+0x25c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a88      	ldr	r2, [pc, #544]	; (8002658 <Load_Setting+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d001      	beq.n	800243e <Load_Setting+0x46>
 800243a:	2300      	movs	r3, #0
 800243c:	e104      	b.n	8002648 <Load_Setting+0x250>

	for (i = 1; i < 10; i++){
 800243e:	2301      	movs	r3, #1
 8002440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002444:	e094      	b.n	8002570 <Load_Setting+0x178>
		channel[i-1].main_voice = 0xff & (uint8_t)(saved_config[2*i]>>24);
 8002446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4a81      	ldr	r2, [pc, #516]	; (8002654 <Load_Setting+0x25c>)
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	0e19      	lsrs	r1, r3, #24
 8002454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	b2c8      	uxtb	r0, r1
 800245c:	497f      	ldr	r1, [pc, #508]	; (800265c <Load_Setting+0x264>)
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	4602      	mov	r2, r0
 800246a:	701a      	strb	r2, [r3, #0]
		channel[i-1].aux_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>16);
 800246c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4a78      	ldr	r2, [pc, #480]	; (8002654 <Load_Setting+0x25c>)
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	0c19      	lsrs	r1, r3, #16
 800247a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	b2c8      	uxtb	r0, r1
 8002482:	4976      	ldr	r1, [pc, #472]	; (800265c <Load_Setting+0x264>)
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3302      	adds	r3, #2
 8002490:	4602      	mov	r2, r0
 8002492:	701a      	strb	r2, [r3, #0]
		channel[i-1].alt_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>8);
 8002494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4a6e      	ldr	r2, [pc, #440]	; (8002654 <Load_Setting+0x25c>)
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	0a19      	lsrs	r1, r3, #8
 80024a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024a6:	1e5a      	subs	r2, r3, #1
 80024a8:	b2c8      	uxtb	r0, r1
 80024aa:	496c      	ldr	r1, [pc, #432]	; (800265c <Load_Setting+0x264>)
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3301      	adds	r3, #1
 80024b8:	4602      	mov	r2, r0
 80024ba:	701a      	strb	r2, [r3, #0]
		channel[i-1].chnl_type 	= 0xff & (uint8_t)(saved_config[2*i]);
 80024bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4a64      	ldr	r2, [pc, #400]	; (8002654 <Load_Setting+0x25c>)
 80024c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	b2c8      	uxtb	r0, r1
 80024d0:	4962      	ldr	r1, [pc, #392]	; (800265c <Load_Setting+0x264>)
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3303      	adds	r3, #3
 80024de:	4602      	mov	r2, r0
 80024e0:	701a      	strb	r2, [r3, #0]

		//		channel[i-1].peak_threshold 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
		channel[i-1].peak_volume_norm 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
 80024e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a5a      	ldr	r2, [pc, #360]	; (8002654 <Load_Setting+0x25c>)
 80024ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f0:	0e1b      	lsrs	r3, r3, #24
 80024f2:	b2d9      	uxtb	r1, r3
 80024f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	b288      	uxth	r0, r1
 80024fc:	4957      	ldr	r1, [pc, #348]	; (800265c <Load_Setting+0x264>)
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	3306      	adds	r3, #6
 800250a:	4602      	mov	r2, r0
 800250c:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_min_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>16);
 800250e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	3301      	adds	r3, #1
 8002516:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <Load_Setting+0x25c>)
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	b2d9      	uxtb	r1, r3
 8002520:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	b288      	uxth	r0, r1
 8002528:	494c      	ldr	r1, [pc, #304]	; (800265c <Load_Setting+0x264>)
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	330a      	adds	r3, #10
 8002536:	4602      	mov	r2, r0
 8002538:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_max_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>8);
 800253a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	3301      	adds	r3, #1
 8002542:	4a44      	ldr	r2, [pc, #272]	; (8002654 <Load_Setting+0x25c>)
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b2d9      	uxtb	r1, r3
 800254c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	b288      	uxth	r0, r1
 8002554:	4941      	ldr	r1, [pc, #260]	; (800265c <Load_Setting+0x264>)
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	3308      	adds	r3, #8
 8002562:	4602      	mov	r2, r0
 8002564:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < 10; i++){
 8002566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800256a:	3301      	adds	r3, #1
 800256c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002574:	2b09      	cmp	r3, #9
 8002576:	f67f af66 	bls.w	8002446 <Load_Setting+0x4e>
//		channel[i-1].time_between_peaks = 0xff & (uint8_t)(saved_config[2*i+1]);
	}

	sprintf(buffer_out, "........ Previous settings: .......\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n",
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <Load_Setting+0x25c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <Load_Setting+0x25c>)
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	6339      	str	r1, [r7, #48]	; 0x30
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <Load_Setting+0x25c>)
 8002588:	6898      	ldr	r0, [r3, #8]
 800258a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <Load_Setting+0x25c>)
 800258e:	68dc      	ldr	r4, [r3, #12]
 8002590:	62bc      	str	r4, [r7, #40]	; 0x28
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <Load_Setting+0x25c>)
 8002594:	691d      	ldr	r5, [r3, #16]
 8002596:	627d      	str	r5, [r7, #36]	; 0x24
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <Load_Setting+0x25c>)
 800259a:	695e      	ldr	r6, [r3, #20]
 800259c:	623e      	str	r6, [r7, #32]
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <Load_Setting+0x25c>)
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	61fa      	str	r2, [r7, #28]
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <Load_Setting+0x25c>)
 80025a6:	69d9      	ldr	r1, [r3, #28]
 80025a8:	61b9      	str	r1, [r7, #24]
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <Load_Setting+0x25c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <Load_Setting+0x25c>)
 80025b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80025b4:	6138      	str	r0, [r7, #16]
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <Load_Setting+0x25c>)
 80025b8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80025ba:	60fc      	str	r4, [r7, #12]
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <Load_Setting+0x25c>)
 80025be:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80025c0:	60bd      	str	r5, [r7, #8]
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <Load_Setting+0x25c>)
 80025c4:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80025c6:	607e      	str	r6, [r7, #4]
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <Load_Setting+0x25c>)
 80025ca:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <Load_Setting+0x25c>)
 80025ce:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <Load_Setting+0x25c>)
 80025d2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <Load_Setting+0x25c>)
 80025d6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <Load_Setting+0x25c>)
 80025da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <Load_Setting+0x25c>)
 80025de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <Load_Setting+0x25c>)
 80025e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e4:	9311      	str	r3, [sp, #68]	; 0x44
 80025e6:	9210      	str	r2, [sp, #64]	; 0x40
 80025e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80025ea:	900e      	str	r0, [sp, #56]	; 0x38
 80025ec:	940d      	str	r4, [sp, #52]	; 0x34
 80025ee:	950c      	str	r5, [sp, #48]	; 0x30
 80025f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80025f2:	687e      	ldr	r6, [r7, #4]
 80025f4:	960a      	str	r6, [sp, #40]	; 0x28
 80025f6:	68bd      	ldr	r5, [r7, #8]
 80025f8:	9509      	str	r5, [sp, #36]	; 0x24
 80025fa:	68fc      	ldr	r4, [r7, #12]
 80025fc:	9408      	str	r4, [sp, #32]
 80025fe:	6938      	ldr	r0, [r7, #16]
 8002600:	9007      	str	r0, [sp, #28]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	9306      	str	r3, [sp, #24]
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	9105      	str	r1, [sp, #20]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	9204      	str	r2, [sp, #16]
 800260e:	6a3e      	ldr	r6, [r7, #32]
 8002610:	9603      	str	r6, [sp, #12]
 8002612:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8002614:	9502      	str	r5, [sp, #8]
 8002616:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002618:	9401      	str	r4, [sp, #4]
 800261a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800261c:	9000      	str	r0, [sp, #0]
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <Load_Setting+0x268>)
 8002624:	480f      	ldr	r0, [pc, #60]	; (8002664 <Load_Setting+0x26c>)
 8002626:	f00c fd1d 	bl	800f064 <siprintf>
	  saved_config[4] ,saved_config[5] ,saved_config[6] ,saved_config[7] ,
	  saved_config[8] ,saved_config[9] ,saved_config[10],saved_config[11],
	  saved_config[12],saved_config[13],saved_config[14],saved_config[15],
	  saved_config[16],saved_config[17],saved_config[18],saved_config[19]);

	  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <Load_Setting+0x26c>)
 800262c:	f7fd fdf8 	bl	8000220 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	2332      	movs	r3, #50	; 0x32
 8002636:	490b      	ldr	r1, [pc, #44]	; (8002664 <Load_Setting+0x26c>)
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <Load_Setting+0x270>)
 800263a:	f006 fe65 	bl	8009308 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800263e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002642:	f000 ff89 	bl	8003558 <HAL_Delay>

	return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3744      	adds	r7, #68	; 0x44
 800264c:	46bd      	mov	sp, r7
 800264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002650:	20000000 	.word	0x20000000
 8002654:	20000748 	.word	0x20000748
 8002658:	c4c0ffee 	.word	0xc4c0ffee
 800265c:	20000918 	.word	0x20000918
 8002660:	0800f9b4 	.word	0x0800f9b4
 8002664:	20000d18 	.word	0x20000d18
 8002668:	20000c8c 	.word	0x20000c8c

0800266c <get_num_from_uart>:

//receive number from serial or a given max length
int get_num_from_uart(uint8_t _len){
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	int val = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len+1; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e006      	b.n	800268e <get_num_from_uart+0x22>
		buffer_in[i] = 0;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <get_num_from_uart+0xc8>)
 8002684:	2100      	movs	r1, #0
 8002686:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<_len+1; i++)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	3301      	adds	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	429a      	cmp	r2, r3
 8002694:	d2f4      	bcs.n	8002680 <get_num_from_uart+0x14>


	HAL_UART_Receive_IT (&huart2, &buffer_in[0], _len);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	4925      	ldr	r1, [pc, #148]	; (8002734 <get_num_from_uart+0xc8>)
 800269e:	4826      	ldr	r0, [pc, #152]	; (8002738 <get_num_from_uart+0xcc>)
 80026a0:	f006 fec8 	bl	8009434 <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0) {HAL_Delay(1);};
 80026a4:	e002      	b.n	80026ac <get_num_from_uart+0x40>
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 ff56 	bl	8003558 <HAL_Delay>
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <get_num_from_uart+0xc8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f8      	beq.n	80026a6 <get_num_from_uart+0x3a>
	HAL_Delay(2); // wait for the rest of the message
 80026b4:	2002      	movs	r0, #2
 80026b6:	f000 ff4f 	bl	8003558 <HAL_Delay>

	val = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e02a      	b.n	800271a <get_num_from_uart+0xae>
		if ((buffer_in[i] == 0) || (buffer_in[i] == 10) || (buffer_in[i] == 13)) break;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <get_num_from_uart+0xc8>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d029      	beq.n	8002722 <get_num_from_uart+0xb6>
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <get_num_from_uart+0xc8>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	2b0a      	cmp	r3, #10
 80026d6:	d024      	beq.n	8002722 <get_num_from_uart+0xb6>
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <get_num_from_uart+0xc8>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	2b0d      	cmp	r3, #13
 80026e0:	d01f      	beq.n	8002722 <get_num_from_uart+0xb6>
		if ((buffer_in[0]>='0') && (buffer_in[0]<='9'))
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <get_num_from_uart+0xc8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b2f      	cmp	r3, #47	; 0x2f
 80026e8:	d913      	bls.n	8002712 <get_num_from_uart+0xa6>
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <get_num_from_uart+0xc8>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b39      	cmp	r3, #57	; 0x39
 80026f0:	d80f      	bhi.n	8002712 <get_num_from_uart+0xa6>
			val = val*10 + (buffer_in[i]-'0');
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4619      	mov	r1, r3
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <get_num_from_uart+0xc8>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	3b30      	subs	r3, #48	; 0x30
 8002706:	440b      	add	r3, r1
 8002708:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3301      	adds	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	e003      	b.n	800271a <get_num_from_uart+0xae>
		else{
			val = -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	60bb      	str	r3, [r7, #8]
			break;
 8002718:	e003      	b.n	8002722 <get_num_from_uart+0xb6>
	for (i = 0; i<_len; i++){
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	429a      	cmp	r2, r3
 8002720:	d3d0      	bcc.n	80026c4 <get_num_from_uart+0x58>
		}
	}
	HAL_UART_AbortReceive(&huart2);
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <get_num_from_uart+0xcc>)
 8002724:	f006 ff5e 	bl	80095e4 <HAL_UART_AbortReceive>
	return val;
 8002728:	68bb      	ldr	r3, [r7, #8]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000ba0 	.word	0x20000ba0
 8002738:	20000c8c 	.word	0x20000c8c

0800273c <UART_CFG>:

uint8_t UART_CFG(){
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b08b      	sub	sp, #44	; 0x2c
 8002740:	af06      	add	r7, sp, #24

	int val = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]

	uint8_t rtrn = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]

	sprintf(buffer_out, "\nConfig mode.\nType number of the pad [1..9], or hit the drum (x - reset to default):\n");
 800274a:	4995      	ldr	r1, [pc, #596]	; (80029a0 <UART_CFG+0x264>)
 800274c:	4895      	ldr	r0, [pc, #596]	; (80029a4 <UART_CFG+0x268>)
 800274e:	f00c fc89 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002752:	4894      	ldr	r0, [pc, #592]	; (80029a4 <UART_CFG+0x268>)
 8002754:	f7fd fd64 	bl	8000220 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	b29a      	uxth	r2, r3
 800275c:	2332      	movs	r3, #50	; 0x32
 800275e:	4991      	ldr	r1, [pc, #580]	; (80029a4 <UART_CFG+0x268>)
 8002760:	4891      	ldr	r0, [pc, #580]	; (80029a8 <UART_CFG+0x26c>)
 8002762:	f006 fdd1 	bl	8009308 <HAL_UART_Transmit>

	buffer_in[0] = 0;
 8002766:	4b91      	ldr	r3, [pc, #580]	; (80029ac <UART_CFG+0x270>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 800276c:	2201      	movs	r2, #1
 800276e:	498f      	ldr	r1, [pc, #572]	; (80029ac <UART_CFG+0x270>)
 8002770:	488d      	ldr	r0, [pc, #564]	; (80029a8 <UART_CFG+0x26c>)
 8002772:	f006 fe5f 	bl	8009434 <HAL_UART_Receive_IT>

	uint8_t chnl = 10;
 8002776:	230a      	movs	r3, #10
 8002778:	73bb      	strb	r3, [r7, #14]
	while (chnl == 10){
 800277a:	e050      	b.n	800281e <UART_CFG+0xe2>
		  for (uint8_t ch = 0; ch<9; ch++)
 800277c:	2300      	movs	r3, #0
 800277e:	737b      	strb	r3, [r7, #13]
 8002780:	e031      	b.n	80027e6 <UART_CFG+0xaa>
			  if ((channel[ch].main_rdy)||(channel[ch].aux_rdy)){
 8002782:	7b7a      	ldrb	r2, [r7, #13]
 8002784:	498a      	ldr	r1, [pc, #552]	; (80029b0 <UART_CFG+0x274>)
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3311      	adds	r3, #17
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <UART_CFG+0x72>
 8002798:	7b7a      	ldrb	r2, [r7, #13]
 800279a:	4985      	ldr	r1, [pc, #532]	; (80029b0 <UART_CFG+0x274>)
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d018      	beq.n	80027e0 <UART_CFG+0xa4>
				  channel[ch].main_rdy = 0;
 80027ae:	7b7a      	ldrb	r2, [r7, #13]
 80027b0:	497f      	ldr	r1, [pc, #508]	; (80029b0 <UART_CFG+0x274>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3311      	adds	r3, #17
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
				  channel[ch].aux_rdy = 0;
 80027c2:	7b7a      	ldrb	r2, [r7, #13]
 80027c4:	497a      	ldr	r1, [pc, #488]	; (80029b0 <UART_CFG+0x274>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	3324      	adds	r3, #36	; 0x24
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
				  chnl = ch;
 80027d6:	7b7b      	ldrb	r3, [r7, #13]
 80027d8:	73bb      	strb	r3, [r7, #14]
				  HAL_UART_AbortReceive(&huart2);
 80027da:	4873      	ldr	r0, [pc, #460]	; (80029a8 <UART_CFG+0x26c>)
 80027dc:	f006 ff02 	bl	80095e4 <HAL_UART_AbortReceive>
		  for (uint8_t ch = 0; ch<9; ch++)
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	3301      	adds	r3, #1
 80027e4:	737b      	strb	r3, [r7, #13]
 80027e6:	7b7b      	ldrb	r3, [r7, #13]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d9ca      	bls.n	8002782 <UART_CFG+0x46>
			  }
		  if (buffer_in[0]>0){
 80027ec:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <UART_CFG+0x270>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d014      	beq.n	800281e <UART_CFG+0xe2>
			  if ((buffer_in[0]>='1') && (buffer_in[0]<='9'))
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <UART_CFG+0x270>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d908      	bls.n	800280e <UART_CFG+0xd2>
 80027fc:	4b6b      	ldr	r3, [pc, #428]	; (80029ac <UART_CFG+0x270>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b39      	cmp	r3, #57	; 0x39
 8002802:	d804      	bhi.n	800280e <UART_CFG+0xd2>
				  chnl = buffer_in[0]-'1';
 8002804:	4b69      	ldr	r3, [pc, #420]	; (80029ac <UART_CFG+0x270>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3b31      	subs	r3, #49	; 0x31
 800280a:	73bb      	strb	r3, [r7, #14]
 800280c:	e001      	b.n	8002812 <UART_CFG+0xd6>
			  else
				  chnl = 255;
 800280e:	23ff      	movs	r3, #255	; 0xff
 8002810:	73bb      	strb	r3, [r7, #14]

			  if (buffer_in[0]=='x')
 8002812:	4b66      	ldr	r3, [pc, #408]	; (80029ac <UART_CFG+0x270>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b78      	cmp	r3, #120	; 0x78
 8002818:	d101      	bne.n	800281e <UART_CFG+0xe2>
				  return 99;
 800281a:	2363      	movs	r3, #99	; 0x63
 800281c:	e360      	b.n	8002ee0 <UART_CFG+0x7a4>
	while (chnl == 10){
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	2b0a      	cmp	r3, #10
 8002822:	d0ab      	beq.n	800277c <UART_CFG+0x40>
		  }
	}

	if (chnl == 255) {
 8002824:	7bbb      	ldrb	r3, [r7, #14]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d11a      	bne.n	8002860 <UART_CFG+0x124>
		HAL_UART_AbortReceive(&huart2);
 800282a:	485f      	ldr	r0, [pc, #380]	; (80029a8 <UART_CFG+0x26c>)
 800282c:	f006 feda 	bl	80095e4 <HAL_UART_AbortReceive>
		sprintf(buffer_out, "Ciao\n");
 8002830:	4960      	ldr	r1, [pc, #384]	; (80029b4 <UART_CFG+0x278>)
 8002832:	485c      	ldr	r0, [pc, #368]	; (80029a4 <UART_CFG+0x268>)
 8002834:	f00c fc16 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002838:	485a      	ldr	r0, [pc, #360]	; (80029a4 <UART_CFG+0x268>)
 800283a:	f7fd fcf1 	bl	8000220 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	b29a      	uxth	r2, r3
 8002842:	2332      	movs	r3, #50	; 0x32
 8002844:	4957      	ldr	r1, [pc, #348]	; (80029a4 <UART_CFG+0x268>)
 8002846:	4858      	ldr	r0, [pc, #352]	; (80029a8 <UART_CFG+0x26c>)
 8002848:	f006 fd5e 	bl	8009308 <HAL_UART_Transmit>
		config_Mode[0] = 0;
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <UART_CFG+0x27c>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 8002852:	2201      	movs	r2, #1
 8002854:	4958      	ldr	r1, [pc, #352]	; (80029b8 <UART_CFG+0x27c>)
 8002856:	4854      	ldr	r0, [pc, #336]	; (80029a8 <UART_CFG+0x26c>)
 8002858:	f006 fdec 	bl	8009434 <HAL_UART_Receive_IT>
		return 0;
 800285c:	2300      	movs	r3, #0
 800285e:	e33f      	b.n	8002ee0 <UART_CFG+0x7a4>
	}

	// got the correct channel.
	// print current values
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	1c59      	adds	r1, r3, #1
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 8002864:	7bba      	ldrb	r2, [r7, #14]
 8002866:	4852      	ldr	r0, [pc, #328]	; (80029b0 <UART_CFG+0x274>)
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4403      	add	r3, r0
 8002872:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002874:	469c      	mov	ip, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 8002876:	7bba      	ldrb	r2, [r7, #14]
 8002878:	484d      	ldr	r0, [pc, #308]	; (80029b0 <UART_CFG+0x274>)
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	3302      	adds	r3, #2
 8002886:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002888:	461c      	mov	r4, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 800288a:	7bba      	ldrb	r2, [r7, #14]
 800288c:	4848      	ldr	r0, [pc, #288]	; (80029b0 <UART_CFG+0x274>)
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4403      	add	r3, r0
 8002898:	3301      	adds	r3, #1
 800289a:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800289c:	461d      	mov	r5, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 800289e:	7bba      	ldrb	r2, [r7, #14]
 80028a0:	4843      	ldr	r0, [pc, #268]	; (80029b0 <UART_CFG+0x274>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4403      	add	r3, r0
 80028ac:	330a      	adds	r3, #10
 80028ae:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80028b0:	461e      	mov	r6, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 80028b2:	7bba      	ldrb	r2, [r7, #14]
 80028b4:	483e      	ldr	r0, [pc, #248]	; (80029b0 <UART_CFG+0x274>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4403      	add	r3, r0
 80028c0:	3308      	adds	r3, #8
 80028c2:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80028c4:	607b      	str	r3, [r7, #4]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 80028c6:	7bba      	ldrb	r2, [r7, #14]
 80028c8:	4839      	ldr	r0, [pc, #228]	; (80029b0 <UART_CFG+0x274>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4403      	add	r3, r0
 80028d4:	3304      	adds	r3, #4
 80028d6:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80028d8:	603b      	str	r3, [r7, #0]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 80028da:	7bba      	ldrb	r2, [r7, #14]
 80028dc:	4834      	ldr	r0, [pc, #208]	; (80029b0 <UART_CFG+0x274>)
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4403      	add	r3, r0
 80028e8:	3306      	adds	r3, #6
 80028ea:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80028ec:	9305      	str	r3, [sp, #20]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	9204      	str	r2, [sp, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	9303      	str	r3, [sp, #12]
 80028f6:	9602      	str	r6, [sp, #8]
 80028f8:	9501      	str	r5, [sp, #4]
 80028fa:	9400      	str	r4, [sp, #0]
 80028fc:	4663      	mov	r3, ip
 80028fe:	460a      	mov	r2, r1
 8002900:	492e      	ldr	r1, [pc, #184]	; (80029bc <UART_CFG+0x280>)
 8002902:	4828      	ldr	r0, [pc, #160]	; (80029a4 <UART_CFG+0x268>)
 8002904:	f00c fbae 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002908:	4826      	ldr	r0, [pc, #152]	; (80029a4 <UART_CFG+0x268>)
 800290a:	f7fd fc89 	bl	8000220 <strlen>
 800290e:	4603      	mov	r3, r0
 8002910:	b29a      	uxth	r2, r3
 8002912:	2332      	movs	r3, #50	; 0x32
 8002914:	4923      	ldr	r1, [pc, #140]	; (80029a4 <UART_CFG+0x268>)
 8002916:	4824      	ldr	r0, [pc, #144]	; (80029a8 <UART_CFG+0x26c>)
 8002918:	f006 fcf6 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 800291c:	20c8      	movs	r0, #200	; 0xc8
 800291e:	f000 fe1b 	bl	8003558 <HAL_Delay>

	// Starting to change the values
	// main voicepeak_volume_norm
	sprintf(buffer_out, "\nCH#%d Change main voice from %d:\t",chnl+1, channel[chnl].main_voice);
 8002922:	7bbb      	ldrb	r3, [r7, #14]
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	7bba      	ldrb	r2, [r7, #14]
 8002928:	4821      	ldr	r0, [pc, #132]	; (80029b0 <UART_CFG+0x274>)
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	460a      	mov	r2, r1
 8002938:	4921      	ldr	r1, [pc, #132]	; (80029c0 <UART_CFG+0x284>)
 800293a:	481a      	ldr	r0, [pc, #104]	; (80029a4 <UART_CFG+0x268>)
 800293c:	f00c fb92 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002940:	4818      	ldr	r0, [pc, #96]	; (80029a4 <UART_CFG+0x268>)
 8002942:	f7fd fc6d 	bl	8000220 <strlen>
 8002946:	4603      	mov	r3, r0
 8002948:	b29a      	uxth	r2, r3
 800294a:	2332      	movs	r3, #50	; 0x32
 800294c:	4915      	ldr	r1, [pc, #84]	; (80029a4 <UART_CFG+0x268>)
 800294e:	4816      	ldr	r0, [pc, #88]	; (80029a8 <UART_CFG+0x26c>)
 8002950:	f006 fcda 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002954:	20c8      	movs	r0, #200	; 0xc8
 8002956:	f000 fdff 	bl	8003558 <HAL_Delay>

	 val = get_num_from_uart(2);
 800295a:	2002      	movs	r0, #2
 800295c:	f7ff fe86 	bl	800266c <get_num_from_uart>
 8002960:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b19      	cmp	r3, #25
 8002966:	dd2f      	ble.n	80029c8 <UART_CFG+0x28c>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b59      	cmp	r3, #89	; 0x59
 800296c:	dc2c      	bgt.n	80029c8 <UART_CFG+0x28c>
		channel[chnl].main_voice = val & 0xFF;
 800296e:	7bba      	ldrb	r2, [r7, #14]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	b2d8      	uxtb	r0, r3
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <UART_CFG+0x274>)
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	4602      	mov	r2, r0
 8002982:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New main voice: %d\n", channel[chnl].main_voice);
 8002984:	7bba      	ldrb	r2, [r7, #14]
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <UART_CFG+0x274>)
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	490b      	ldr	r1, [pc, #44]	; (80029c4 <UART_CFG+0x288>)
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <UART_CFG+0x268>)
 800299a:	f00c fb63 	bl	800f064 <siprintf>
 800299e:	e020      	b.n	80029e2 <UART_CFG+0x2a6>
 80029a0:	0800fa54 	.word	0x0800fa54
 80029a4:	20000d18 	.word	0x20000d18
 80029a8:	20000c8c 	.word	0x20000c8c
 80029ac:	20000ba0 	.word	0x20000ba0
 80029b0:	20000918 	.word	0x20000918
 80029b4:	0800faac 	.word	0x0800faac
 80029b8:	20000430 	.word	0x20000430
 80029bc:	0800fab4 	.word	0x0800fab4
 80029c0:	0800fb2c 	.word	0x0800fb2c
 80029c4:	0800fb50 	.word	0x0800fb50
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].main_voice);
 80029c8:	7bba      	ldrb	r2, [r7, #14]
 80029ca:	49a6      	ldr	r1, [pc, #664]	; (8002c64 <UART_CFG+0x528>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	49a3      	ldr	r1, [pc, #652]	; (8002c68 <UART_CFG+0x52c>)
 80029dc:	48a3      	ldr	r0, [pc, #652]	; (8002c6c <UART_CFG+0x530>)
 80029de:	f00c fb41 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80029e2:	48a2      	ldr	r0, [pc, #648]	; (8002c6c <UART_CFG+0x530>)
 80029e4:	f7fd fc1c 	bl	8000220 <strlen>
 80029e8:	4603      	mov	r3, r0
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	2332      	movs	r3, #50	; 0x32
 80029ee:	499f      	ldr	r1, [pc, #636]	; (8002c6c <UART_CFG+0x530>)
 80029f0:	489f      	ldr	r0, [pc, #636]	; (8002c70 <UART_CFG+0x534>)
 80029f2:	f006 fc89 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 80029f6:	20c8      	movs	r0, #200	; 0xc8
 80029f8:	f000 fdae 	bl	8003558 <HAL_Delay>

	// aux voice
	sprintf(buffer_out, "\nCH#%d Change aux input voice from %d:\t",chnl+1, channel[chnl].aux_voice);
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	1c59      	adds	r1, r3, #1
 8002a00:	7bba      	ldrb	r2, [r7, #14]
 8002a02:	4898      	ldr	r0, [pc, #608]	; (8002c64 <UART_CFG+0x528>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4403      	add	r3, r0
 8002a0e:	3302      	adds	r3, #2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	460a      	mov	r2, r1
 8002a14:	4997      	ldr	r1, [pc, #604]	; (8002c74 <UART_CFG+0x538>)
 8002a16:	4895      	ldr	r0, [pc, #596]	; (8002c6c <UART_CFG+0x530>)
 8002a18:	f00c fb24 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a1c:	4893      	ldr	r0, [pc, #588]	; (8002c6c <UART_CFG+0x530>)
 8002a1e:	f7fd fbff 	bl	8000220 <strlen>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	2332      	movs	r3, #50	; 0x32
 8002a28:	4990      	ldr	r1, [pc, #576]	; (8002c6c <UART_CFG+0x530>)
 8002a2a:	4891      	ldr	r0, [pc, #580]	; (8002c70 <UART_CFG+0x534>)
 8002a2c:	f006 fc6c 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002a30:	20c8      	movs	r0, #200	; 0xc8
 8002a32:	f000 fd91 	bl	8003558 <HAL_Delay>

	 val = get_num_from_uart(2);
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7ff fe18 	bl	800266c <get_num_from_uart>
 8002a3c:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b19      	cmp	r3, #25
 8002a42:	dd1d      	ble.n	8002a80 <UART_CFG+0x344>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b59      	cmp	r3, #89	; 0x59
 8002a48:	dc1a      	bgt.n	8002a80 <UART_CFG+0x344>
		channel[chnl].aux_voice = val & 0xFF;
 8002a4a:	7bba      	ldrb	r2, [r7, #14]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	b2d8      	uxtb	r0, r3
 8002a50:	4984      	ldr	r1, [pc, #528]	; (8002c64 <UART_CFG+0x528>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	4602      	mov	r2, r0
 8002a60:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New aux voice: %d\n", channel[chnl].aux_voice);
 8002a62:	7bba      	ldrb	r2, [r7, #14]
 8002a64:	497f      	ldr	r1, [pc, #508]	; (8002c64 <UART_CFG+0x528>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3302      	adds	r3, #2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4980      	ldr	r1, [pc, #512]	; (8002c78 <UART_CFG+0x53c>)
 8002a78:	487c      	ldr	r0, [pc, #496]	; (8002c6c <UART_CFG+0x530>)
 8002a7a:	f00c faf3 	bl	800f064 <siprintf>
 8002a7e:	e00d      	b.n	8002a9c <UART_CFG+0x360>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].aux_voice);
 8002a80:	7bba      	ldrb	r2, [r7, #14]
 8002a82:	4978      	ldr	r1, [pc, #480]	; (8002c64 <UART_CFG+0x528>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3302      	adds	r3, #2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4974      	ldr	r1, [pc, #464]	; (8002c68 <UART_CFG+0x52c>)
 8002a96:	4875      	ldr	r0, [pc, #468]	; (8002c6c <UART_CFG+0x530>)
 8002a98:	f00c fae4 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a9c:	4873      	ldr	r0, [pc, #460]	; (8002c6c <UART_CFG+0x530>)
 8002a9e:	f7fd fbbf 	bl	8000220 <strlen>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	2332      	movs	r3, #50	; 0x32
 8002aa8:	4970      	ldr	r1, [pc, #448]	; (8002c6c <UART_CFG+0x530>)
 8002aaa:	4871      	ldr	r0, [pc, #452]	; (8002c70 <UART_CFG+0x534>)
 8002aac:	f006 fc2c 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002ab0:	20c8      	movs	r0, #200	; 0xc8
 8002ab2:	f000 fd51 	bl	8003558 <HAL_Delay>

	// main alt voice
	sprintf(buffer_out, "\nCH#%d Change main alt voice (when pedal pressed) from %d:\t",chnl+1, channel[chnl].alt_voice);
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	1c59      	adds	r1, r3, #1
 8002aba:	7bba      	ldrb	r2, [r7, #14]
 8002abc:	4869      	ldr	r0, [pc, #420]	; (8002c64 <UART_CFG+0x528>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4403      	add	r3, r0
 8002ac8:	3301      	adds	r3, #1
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	460a      	mov	r2, r1
 8002ace:	496b      	ldr	r1, [pc, #428]	; (8002c7c <UART_CFG+0x540>)
 8002ad0:	4866      	ldr	r0, [pc, #408]	; (8002c6c <UART_CFG+0x530>)
 8002ad2:	f00c fac7 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ad6:	4865      	ldr	r0, [pc, #404]	; (8002c6c <UART_CFG+0x530>)
 8002ad8:	f7fd fba2 	bl	8000220 <strlen>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2332      	movs	r3, #50	; 0x32
 8002ae2:	4962      	ldr	r1, [pc, #392]	; (8002c6c <UART_CFG+0x530>)
 8002ae4:	4862      	ldr	r0, [pc, #392]	; (8002c70 <UART_CFG+0x534>)
 8002ae6:	f006 fc0f 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002aea:	20c8      	movs	r0, #200	; 0xc8
 8002aec:	f000 fd34 	bl	8003558 <HAL_Delay>

	 val = get_num_from_uart(2);
 8002af0:	2002      	movs	r0, #2
 8002af2:	f7ff fdbb 	bl	800266c <get_num_from_uart>
 8002af6:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b19      	cmp	r3, #25
 8002afc:	dd1d      	ble.n	8002b3a <UART_CFG+0x3fe>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b59      	cmp	r3, #89	; 0x59
 8002b02:	dc1a      	bgt.n	8002b3a <UART_CFG+0x3fe>
		channel[chnl].alt_voice = val & 0xFF;
 8002b04:	7bba      	ldrb	r2, [r7, #14]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	b2d8      	uxtb	r0, r3
 8002b0a:	4956      	ldr	r1, [pc, #344]	; (8002c64 <UART_CFG+0x528>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3301      	adds	r3, #1
 8002b18:	4602      	mov	r2, r0
 8002b1a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New alt voice: %d\n", channel[chnl].alt_voice);
 8002b1c:	7bba      	ldrb	r2, [r7, #14]
 8002b1e:	4951      	ldr	r1, [pc, #324]	; (8002c64 <UART_CFG+0x528>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4953      	ldr	r1, [pc, #332]	; (8002c80 <UART_CFG+0x544>)
 8002b32:	484e      	ldr	r0, [pc, #312]	; (8002c6c <UART_CFG+0x530>)
 8002b34:	f00c fa96 	bl	800f064 <siprintf>
 8002b38:	e00d      	b.n	8002b56 <UART_CFG+0x41a>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].alt_voice);
 8002b3a:	7bba      	ldrb	r2, [r7, #14]
 8002b3c:	4949      	ldr	r1, [pc, #292]	; (8002c64 <UART_CFG+0x528>)
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	3301      	adds	r3, #1
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4946      	ldr	r1, [pc, #280]	; (8002c68 <UART_CFG+0x52c>)
 8002b50:	4846      	ldr	r0, [pc, #280]	; (8002c6c <UART_CFG+0x530>)
 8002b52:	f00c fa87 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002b56:	4845      	ldr	r0, [pc, #276]	; (8002c6c <UART_CFG+0x530>)
 8002b58:	f7fd fb62 	bl	8000220 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2332      	movs	r3, #50	; 0x32
 8002b62:	4942      	ldr	r1, [pc, #264]	; (8002c6c <UART_CFG+0x530>)
 8002b64:	4842      	ldr	r0, [pc, #264]	; (8002c70 <UART_CFG+0x534>)
 8002b66:	f006 fbcf 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002b6a:	20c8      	movs	r0, #200	; 0xc8
 8002b6c:	f000 fcf4 	bl	8003558 <HAL_Delay>

	// channel type
	sprintf(buffer_out, "\nCH#%d Change aux type from %d to:\n\tAUX - auto, MAIN - Mesh(0), Mesh with rim(1), or Cymbal(2),\n\t HiHat(3) with pedal, Cymbal with 2 zones(4), Cymabal with mute button(5)\n", chnl+1,  channel[chnl].chnl_type);
 8002b70:	7bbb      	ldrb	r3, [r7, #14]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	7bba      	ldrb	r2, [r7, #14]
 8002b76:	483b      	ldr	r0, [pc, #236]	; (8002c64 <UART_CFG+0x528>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4403      	add	r3, r0
 8002b82:	3303      	adds	r3, #3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	460a      	mov	r2, r1
 8002b88:	493e      	ldr	r1, [pc, #248]	; (8002c84 <UART_CFG+0x548>)
 8002b8a:	4838      	ldr	r0, [pc, #224]	; (8002c6c <UART_CFG+0x530>)
 8002b8c:	f00c fa6a 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002b90:	4836      	ldr	r0, [pc, #216]	; (8002c6c <UART_CFG+0x530>)
 8002b92:	f7fd fb45 	bl	8000220 <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	2332      	movs	r3, #50	; 0x32
 8002b9c:	4933      	ldr	r1, [pc, #204]	; (8002c6c <UART_CFG+0x530>)
 8002b9e:	4834      	ldr	r0, [pc, #208]	; (8002c70 <UART_CFG+0x534>)
 8002ba0:	f006 fbb2 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002ba4:	20c8      	movs	r0, #200	; 0xc8
 8002ba6:	f000 fcd7 	bl	8003558 <HAL_Delay>

	val = get_num_from_uart(1);
 8002baa:	2001      	movs	r0, #1
 8002bac:	f7ff fd5e 	bl	800266c <get_num_from_uart>
 8002bb0:	60b8      	str	r0, [r7, #8]
	if ((val>=0)&&(val<=4)){
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db1d      	blt.n	8002bf4 <UART_CFG+0x4b8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	dc1a      	bgt.n	8002bf4 <UART_CFG+0x4b8>
		channel[chnl].chnl_type = val & 0xFF;
 8002bbe:	7bba      	ldrb	r2, [r7, #14]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	4927      	ldr	r1, [pc, #156]	; (8002c64 <UART_CFG+0x528>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New channel type: %d\n", channel[chnl].chnl_type);
 8002bd6:	7bba      	ldrb	r2, [r7, #14]
 8002bd8:	4922      	ldr	r1, [pc, #136]	; (8002c64 <UART_CFG+0x528>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3303      	adds	r3, #3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4927      	ldr	r1, [pc, #156]	; (8002c88 <UART_CFG+0x54c>)
 8002bec:	481f      	ldr	r0, [pc, #124]	; (8002c6c <UART_CFG+0x530>)
 8002bee:	f00c fa39 	bl	800f064 <siprintf>
 8002bf2:	e00d      	b.n	8002c10 <UART_CFG+0x4d4>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].chnl_type);
 8002bf4:	7bba      	ldrb	r2, [r7, #14]
 8002bf6:	491b      	ldr	r1, [pc, #108]	; (8002c64 <UART_CFG+0x528>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3303      	adds	r3, #3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4917      	ldr	r1, [pc, #92]	; (8002c68 <UART_CFG+0x52c>)
 8002c0a:	4818      	ldr	r0, [pc, #96]	; (8002c6c <UART_CFG+0x530>)
 8002c0c:	f00c fa2a 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <UART_CFG+0x530>)
 8002c12:	f7fd fb05 	bl	8000220 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	2332      	movs	r3, #50	; 0x32
 8002c1c:	4913      	ldr	r1, [pc, #76]	; (8002c6c <UART_CFG+0x530>)
 8002c1e:	4814      	ldr	r0, [pc, #80]	; (8002c70 <UART_CFG+0x534>)
 8002c20:	f006 fb72 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002c24:	20c8      	movs	r0, #200	; 0xc8
 8002c26:	f000 fc97 	bl	8003558 <HAL_Delay>

	rtrn = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
	sprintf(buffer_out, "\nAdjust timing? y - yes, n - save settings and exit\n");
 8002c2e:	4917      	ldr	r1, [pc, #92]	; (8002c8c <UART_CFG+0x550>)
 8002c30:	480e      	ldr	r0, [pc, #56]	; (8002c6c <UART_CFG+0x530>)
 8002c32:	f00c fa17 	bl	800f064 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <UART_CFG+0x530>)
 8002c38:	f7fd faf2 	bl	8000220 <strlen>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	2332      	movs	r3, #50	; 0x32
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <UART_CFG+0x530>)
 8002c44:	480a      	ldr	r0, [pc, #40]	; (8002c70 <UART_CFG+0x534>)
 8002c46:	f006 fb5f 	bl	8009308 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002c4a:	20c8      	movs	r0, #200	; 0xc8
 8002c4c:	f000 fc84 	bl	8003558 <HAL_Delay>


	buffer_in[0] = 0;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <UART_CFG+0x554>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8002c56:	2201      	movs	r2, #1
 8002c58:	490d      	ldr	r1, [pc, #52]	; (8002c90 <UART_CFG+0x554>)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <UART_CFG+0x534>)
 8002c5c:	f006 fbea 	bl	8009434 <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0){HAL_Delay(1);}
 8002c60:	e01b      	b.n	8002c9a <UART_CFG+0x55e>
 8002c62:	bf00      	nop
 8002c64:	20000918 	.word	0x20000918
 8002c68:	0800fb64 	.word	0x0800fb64
 8002c6c:	20000d18 	.word	0x20000d18
 8002c70:	20000c8c 	.word	0x20000c8c
 8002c74:	0800fb80 	.word	0x0800fb80
 8002c78:	0800fba8 	.word	0x0800fba8
 8002c7c:	0800fbbc 	.word	0x0800fbbc
 8002c80:	0800fbf8 	.word	0x0800fbf8
 8002c84:	0800fc0c 	.word	0x0800fc0c
 8002c88:	0800fcb8 	.word	0x0800fcb8
 8002c8c:	0800fcd0 	.word	0x0800fcd0
 8002c90:	20000ba0 	.word	0x20000ba0
 8002c94:	2001      	movs	r0, #1
 8002c96:	f000 fc5f 	bl	8003558 <HAL_Delay>
 8002c9a:	4b93      	ldr	r3, [pc, #588]	; (8002ee8 <UART_CFG+0x7ac>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f8      	beq.n	8002c94 <UART_CFG+0x558>
	if (buffer_in[0] == 'y'){
 8002ca2:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <UART_CFG+0x7ac>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b79      	cmp	r3, #121	; 0x79
 8002ca8:	f040 8119 	bne.w	8002ede <UART_CFG+0x7a2>

		// Peak threshold
		sprintf(buffer_out, "\nCH#%d Volume norm = %d (default 50, 0..255) (full volume point, 100~4096). New:\t",chnl+1,(int) channel[chnl].peak_volume_norm);
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	7bba      	ldrb	r2, [r7, #14]
 8002cb2:	488e      	ldr	r0, [pc, #568]	; (8002eec <UART_CFG+0x7b0>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4403      	add	r3, r0
 8002cbe:	3306      	adds	r3, #6
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	460a      	mov	r2, r1
 8002cc4:	498a      	ldr	r1, [pc, #552]	; (8002ef0 <UART_CFG+0x7b4>)
 8002cc6:	488b      	ldr	r0, [pc, #556]	; (8002ef4 <UART_CFG+0x7b8>)
 8002cc8:	f00c f9cc 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ccc:	4889      	ldr	r0, [pc, #548]	; (8002ef4 <UART_CFG+0x7b8>)
 8002cce:	f7fd faa7 	bl	8000220 <strlen>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	2332      	movs	r3, #50	; 0x32
 8002cd8:	4986      	ldr	r1, [pc, #536]	; (8002ef4 <UART_CFG+0x7b8>)
 8002cda:	4887      	ldr	r0, [pc, #540]	; (8002ef8 <UART_CFG+0x7bc>)
 8002cdc:	f006 fb14 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002ce0:	20c8      	movs	r0, #200	; 0xc8
 8002ce2:	f000 fc39 	bl	8003558 <HAL_Delay>

		val = get_num_from_uart(3);
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f7ff fcc0 	bl	800266c <get_num_from_uart>
 8002cec:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dd1d      	ble.n	8002d30 <UART_CFG+0x5f4>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	dc1a      	bgt.n	8002d30 <UART_CFG+0x5f4>
			channel[chnl].peak_volume_norm = val;
 8002cfa:	7bba      	ldrb	r2, [r7, #14]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	b298      	uxth	r0, r3
 8002d00:	497a      	ldr	r1, [pc, #488]	; (8002eec <UART_CFG+0x7b0>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3306      	adds	r3, #6
 8002d0e:	4602      	mov	r2, r0
 8002d10:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New threshold = %d\n", (int)channel[chnl].peak_volume_norm);
 8002d12:	7bba      	ldrb	r2, [r7, #14]
 8002d14:	4975      	ldr	r1, [pc, #468]	; (8002eec <UART_CFG+0x7b0>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3306      	adds	r3, #6
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4975      	ldr	r1, [pc, #468]	; (8002efc <UART_CFG+0x7c0>)
 8002d28:	4872      	ldr	r0, [pc, #456]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d2a:	f00c f99b 	bl	800f064 <siprintf>
 8002d2e:	e00d      	b.n	8002d4c <UART_CFG+0x610>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_volume_norm);
 8002d30:	7bba      	ldrb	r2, [r7, #14]
 8002d32:	496e      	ldr	r1, [pc, #440]	; (8002eec <UART_CFG+0x7b0>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3306      	adds	r3, #6
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	496e      	ldr	r1, [pc, #440]	; (8002f00 <UART_CFG+0x7c4>)
 8002d46:	486b      	ldr	r0, [pc, #428]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d48:	f00c f98c 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002d4c:	4869      	ldr	r0, [pc, #420]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d4e:	f7fd fa67 	bl	8000220 <strlen>
 8002d52:	4603      	mov	r3, r0
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	2332      	movs	r3, #50	; 0x32
 8002d58:	4966      	ldr	r1, [pc, #408]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d5a:	4867      	ldr	r0, [pc, #412]	; (8002ef8 <UART_CFG+0x7bc>)
 8002d5c:	f006 fad4 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002d60:	20c8      	movs	r0, #200	; 0xc8
 8002d62:	f000 fbf9 	bl	8003558 <HAL_Delay>

		// min peak len
		sprintf(buffer_out, "\nCH#%d Peak min length = %d (default mesh 15, cymbal 4, 1..99) [x0.1ms]. New:\t",chnl+1,(int) channel[chnl].peak_min_length);
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	7bba      	ldrb	r2, [r7, #14]
 8002d6c:	485f      	ldr	r0, [pc, #380]	; (8002eec <UART_CFG+0x7b0>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4403      	add	r3, r0
 8002d78:	330a      	adds	r3, #10
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	4961      	ldr	r1, [pc, #388]	; (8002f04 <UART_CFG+0x7c8>)
 8002d80:	485c      	ldr	r0, [pc, #368]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d82:	f00c f96f 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002d86:	485b      	ldr	r0, [pc, #364]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d88:	f7fd fa4a 	bl	8000220 <strlen>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	2332      	movs	r3, #50	; 0x32
 8002d92:	4958      	ldr	r1, [pc, #352]	; (8002ef4 <UART_CFG+0x7b8>)
 8002d94:	4858      	ldr	r0, [pc, #352]	; (8002ef8 <UART_CFG+0x7bc>)
 8002d96:	f006 fab7 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002d9a:	20c8      	movs	r0, #200	; 0xc8
 8002d9c:	f000 fbdc 	bl	8003558 <HAL_Delay>

		val = get_num_from_uart(2);
 8002da0:	2002      	movs	r0, #2
 8002da2:	f7ff fc63 	bl	800266c <get_num_from_uart>
 8002da6:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<100)){
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	dd1d      	ble.n	8002dea <UART_CFG+0x6ae>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b63      	cmp	r3, #99	; 0x63
 8002db2:	dc1a      	bgt.n	8002dea <UART_CFG+0x6ae>
			channel[chnl].peak_min_length = val;
 8002db4:	7bba      	ldrb	r2, [r7, #14]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	b298      	uxth	r0, r3
 8002dba:	494c      	ldr	r1, [pc, #304]	; (8002eec <UART_CFG+0x7b0>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	330a      	adds	r3, #10
 8002dc8:	4602      	mov	r2, r0
 8002dca:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New min length = %d\n", (int)channel[chnl].peak_min_length);
 8002dcc:	7bba      	ldrb	r2, [r7, #14]
 8002dce:	4947      	ldr	r1, [pc, #284]	; (8002eec <UART_CFG+0x7b0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	330a      	adds	r3, #10
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4949      	ldr	r1, [pc, #292]	; (8002f08 <UART_CFG+0x7cc>)
 8002de2:	4844      	ldr	r0, [pc, #272]	; (8002ef4 <UART_CFG+0x7b8>)
 8002de4:	f00c f93e 	bl	800f064 <siprintf>
 8002de8:	e00d      	b.n	8002e06 <UART_CFG+0x6ca>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_min_length);
 8002dea:	7bba      	ldrb	r2, [r7, #14]
 8002dec:	493f      	ldr	r1, [pc, #252]	; (8002eec <UART_CFG+0x7b0>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	330a      	adds	r3, #10
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4940      	ldr	r1, [pc, #256]	; (8002f00 <UART_CFG+0x7c4>)
 8002e00:	483c      	ldr	r0, [pc, #240]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e02:	f00c f92f 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002e06:	483b      	ldr	r0, [pc, #236]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e08:	f7fd fa0a 	bl	8000220 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	2332      	movs	r3, #50	; 0x32
 8002e12:	4938      	ldr	r1, [pc, #224]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e14:	4838      	ldr	r0, [pc, #224]	; (8002ef8 <UART_CFG+0x7bc>)
 8002e16:	f006 fa77 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002e1a:	20c8      	movs	r0, #200	; 0xc8
 8002e1c:	f000 fb9c 	bl	8003558 <HAL_Delay>

		// max peak len
		sprintf(buffer_out, "\nCH#%d Peak max length = %d (default 200, 1..255) [x0.1ms]. New:\t",chnl+1, (int)channel[chnl].peak_max_length);
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	7bba      	ldrb	r2, [r7, #14]
 8002e26:	4831      	ldr	r0, [pc, #196]	; (8002eec <UART_CFG+0x7b0>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4403      	add	r3, r0
 8002e32:	3308      	adds	r3, #8
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	460a      	mov	r2, r1
 8002e38:	4934      	ldr	r1, [pc, #208]	; (8002f0c <UART_CFG+0x7d0>)
 8002e3a:	482e      	ldr	r0, [pc, #184]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e3c:	f00c f912 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002e40:	482c      	ldr	r0, [pc, #176]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e42:	f7fd f9ed 	bl	8000220 <strlen>
 8002e46:	4603      	mov	r3, r0
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	2332      	movs	r3, #50	; 0x32
 8002e4c:	4929      	ldr	r1, [pc, #164]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e4e:	482a      	ldr	r0, [pc, #168]	; (8002ef8 <UART_CFG+0x7bc>)
 8002e50:	f006 fa5a 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002e54:	20c8      	movs	r0, #200	; 0xc8
 8002e56:	f000 fb7f 	bl	8003558 <HAL_Delay>

		val = get_num_from_uart(3);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f7ff fc06 	bl	800266c <get_num_from_uart>
 8002e60:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dd1d      	ble.n	8002ea4 <UART_CFG+0x768>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2bff      	cmp	r3, #255	; 0xff
 8002e6c:	dc1a      	bgt.n	8002ea4 <UART_CFG+0x768>
			channel[chnl].peak_max_length = val;
 8002e6e:	7bba      	ldrb	r2, [r7, #14]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	b298      	uxth	r0, r3
 8002e74:	491d      	ldr	r1, [pc, #116]	; (8002eec <UART_CFG+0x7b0>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	3308      	adds	r3, #8
 8002e82:	4602      	mov	r2, r0
 8002e84:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New max length = %d\n", (int)channel[chnl].peak_max_length);
 8002e86:	7bba      	ldrb	r2, [r7, #14]
 8002e88:	4918      	ldr	r1, [pc, #96]	; (8002eec <UART_CFG+0x7b0>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	3308      	adds	r3, #8
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	491d      	ldr	r1, [pc, #116]	; (8002f10 <UART_CFG+0x7d4>)
 8002e9c:	4815      	ldr	r0, [pc, #84]	; (8002ef4 <UART_CFG+0x7b8>)
 8002e9e:	f00c f8e1 	bl	800f064 <siprintf>
 8002ea2:	e00d      	b.n	8002ec0 <UART_CFG+0x784>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_max_length);
 8002ea4:	7bba      	ldrb	r2, [r7, #14]
 8002ea6:	4911      	ldr	r1, [pc, #68]	; (8002eec <UART_CFG+0x7b0>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4911      	ldr	r1, [pc, #68]	; (8002f00 <UART_CFG+0x7c4>)
 8002eba:	480e      	ldr	r0, [pc, #56]	; (8002ef4 <UART_CFG+0x7b8>)
 8002ebc:	f00c f8d2 	bl	800f064 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <UART_CFG+0x7b8>)
 8002ec2:	f7fd f9ad 	bl	8000220 <strlen>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	2332      	movs	r3, #50	; 0x32
 8002ecc:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <UART_CFG+0x7b8>)
 8002ece:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <UART_CFG+0x7bc>)
 8002ed0:	f006 fa1a 	bl	8009308 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002ed4:	20c8      	movs	r0, #200	; 0xc8
 8002ed6:	f000 fb3f 	bl	8003558 <HAL_Delay>
		rtrn = 2;
 8002eda:	2302      	movs	r3, #2
 8002edc:	73fb      	strb	r3, [r7, #15]
	}
	return rtrn;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee8:	20000ba0 	.word	0x20000ba0
 8002eec:	20000918 	.word	0x20000918
 8002ef0:	0800fd08 	.word	0x0800fd08
 8002ef4:	20000d18 	.word	0x20000d18
 8002ef8:	20000c8c 	.word	0x20000c8c
 8002efc:	0800fd5c 	.word	0x0800fd5c
 8002f00:	0800fb64 	.word	0x0800fb64
 8002f04:	0800fd70 	.word	0x0800fd70
 8002f08:	0800fdc0 	.word	0x0800fdc0
 8002f0c:	0800fdd8 	.word	0x0800fdd8
 8002f10:	0800fe1c 	.word	0x0800fe1c

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <Error_Handler+0x8>
	...

08002f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_MspInit+0x44>)
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_MspInit+0x44>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6613      	str	r3, [r2, #96]	; 0x60
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_MspInit+0x44>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_MspInit+0x44>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_MspInit+0x44>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_MspInit+0x44>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f56:	f004 fcff 	bl	8007958 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f88:	f040 8092 	bne.w	80030b0 <HAL_ADC_MspInit+0x148>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f8c:	4b74      	ldr	r3, [pc, #464]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	4a73      	ldr	r2, [pc, #460]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 8002f94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f96:	4b72      	ldr	r3, [pc, #456]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f9e:	4b71      	ldr	r3, [pc, #452]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	4a70      	ldr	r2, [pc, #448]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002faa:	4b6e      	ldr	r3, [pc, #440]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fb6:	4b6b      	ldr	r3, [pc, #428]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a6a      	ldr	r2, [pc, #424]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc2:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4a64      	ldr	r2, [pc, #400]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fda:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff2:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003002:	2303      	movs	r3, #3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800300a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300e:	4619      	mov	r1, r3
 8003010:	4855      	ldr	r0, [pc, #340]	; (8003168 <HAL_ADC_MspInit+0x200>)
 8003012:	f002 febb 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003016:	2303      	movs	r3, #3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301a:	2303      	movs	r3, #3
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302c:	f002 feae 	bl	8005d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003030:	2301      	movs	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003034:	2303      	movs	r3, #3
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	484a      	ldr	r0, [pc, #296]	; (800316c <HAL_ADC_MspInit+0x204>)
 8003044:	f002 fea2 	bl	8005d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_ADC_MspInit+0x208>)
 800304a:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_ADC_MspInit+0x20c>)
 800304c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800304e:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003050:	2205      	movs	r2, #5
 8003052:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_ADC_MspInit+0x208>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800306e:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003076:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003078:	2200      	movs	r2, #0
 800307a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <HAL_ADC_MspInit+0x208>)
 800307e:	2200      	movs	r2, #0
 8003080:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003082:	483b      	ldr	r0, [pc, #236]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003084:	f002 f8de 	bl	8005244 <HAL_DMA_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 800308e:	f7ff ff41 	bl	8002f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a36      	ldr	r2, [pc, #216]	; (8003170 <HAL_ADC_MspInit+0x208>)
 8003096:	655a      	str	r2, [r3, #84]	; 0x54
 8003098:	4a35      	ldr	r2, [pc, #212]	; (8003170 <HAL_ADC_MspInit+0x208>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	2012      	movs	r0, #18
 80030a4:	f002 f899 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80030a8:	2012      	movs	r0, #18
 80030aa:	f002 f8b0 	bl	800520e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80030ae:	e052      	b.n	8003156 <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a30      	ldr	r2, [pc, #192]	; (8003178 <HAL_ADC_MspInit+0x210>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d14d      	bne.n	8003156 <HAL_ADC_MspInit+0x1ee>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 80030c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_ADC_MspInit+0x1f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10b      	bne.n	80030e4 <HAL_ADC_MspInit+0x17c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_ADC_MspInit+0x1fc>)
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003114:	2302      	movs	r3, #2
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003118:	2303      	movs	r3, #3
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003124:	4619      	mov	r1, r3
 8003126:	4810      	ldr	r0, [pc, #64]	; (8003168 <HAL_ADC_MspInit+0x200>)
 8003128:	f002 fe30 	bl	8005d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800312c:	23f0      	movs	r3, #240	; 0xf0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003130:	2303      	movs	r3, #3
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313c:	4619      	mov	r1, r3
 800313e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003142:	f002 fe23 	bl	8005d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2012      	movs	r0, #18
 800314c:	f002 f845 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003150:	2012      	movs	r0, #18
 8003152:	f002 f85c 	bl	800520e <HAL_NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3738      	adds	r7, #56	; 0x38
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000434 	.word	0x20000434
 8003164:	40021000 	.word	0x40021000
 8003168:	48001400 	.word	0x48001400
 800316c:	48000400 	.word	0x48000400
 8003170:	200008b8 	.word	0x200008b8
 8003174:	40020008 	.word	0x40020008
 8003178:	50000100 	.word	0x50000100

0800317c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d114      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	201c      	movs	r0, #28
 80031ac:	f002 f815 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031b0:	201c      	movs	r0, #28
 80031b2:	f002 f82c 	bl	800520e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80031b6:	e02a      	b.n	800320e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_TIM_Base_MspInit+0xa0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d114      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	201e      	movs	r0, #30
 80031e0:	f001 fffb 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031e4:	201e      	movs	r0, #30
 80031e6:	f002 f812 	bl	800520e <HAL_NVIC_EnableIRQ>
}
 80031ea:	e010      	b.n	800320e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_TIM_Base_MspInit+0xa4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10b      	bne.n	800320e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_TIM_Base_MspInit+0x9c>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40000800 	.word	0x40000800
 8003220:	40001000 	.word	0x40001000

08003224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_UART_MspInit+0x8c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d130      	bne.n	80032a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_UART_MspInit+0x90>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_UART_MspInit+0x90>)
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <HAL_UART_MspInit+0x90>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_UART_MspInit+0x90>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_UART_MspInit+0x90>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_UART_MspInit+0x90>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003276:	230c      	movs	r3, #12
 8003278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003286:	2307      	movs	r3, #7
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f002 fd7a 	bl	8005d8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2026      	movs	r0, #38	; 0x26
 800329e:	f001 ff9c 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032a2:	2026      	movs	r0, #38	; 0x26
 80032a4:	f001 ffb3 	bl	800520e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40004400 	.word	0x40004400
 80032b4:	40021000 	.word	0x40021000

080032b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <NMI_Handler+0x4>

080032be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <HardFault_Handler+0x4>

080032c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <MemManage_Handler+0x4>

080032ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler+0x4>

080032d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler+0x4>

080032d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003304:	f000 f90a 	bl	800351c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}

0800330c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <DMA1_Channel1_IRQHandler+0x10>)
 8003312:	f002 f97a 	bl	800560a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200008b8 	.word	0x200008b8

08003320 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003324:	4803      	ldr	r0, [pc, #12]	; (8003334 <ADC1_2_IRQHandler+0x14>)
 8003326:	f000 fdbd 	bl	8003ea4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <ADC1_2_IRQHandler+0x18>)
 800332c:	f000 fdba 	bl	8003ea4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000848 	.word	0x20000848
 8003338:	200006d8 	.word	0x200006d8

0800333c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <USB_LP_IRQHandler+0x10>)
 8003342:	f002 fff6 	bl	8006332 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20001da4 	.word	0x20001da4

08003350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <TIM2_IRQHandler+0x10>)
 8003356:	f005 faf5 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000c40 	.word	0x20000c40

08003364 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM4_IRQHandler+0x10>)
 800336a:	f005 faeb 	bl	8008944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000688 	.word	0x20000688

08003378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <USART2_IRQHandler+0x10>)
 800337e:	f006 f98d 	bl	800969c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000c8c 	.word	0x20000c8c

0800338c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <_sbrk+0x5c>)
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <_sbrk+0x60>)
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <_sbrk+0x64>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <_sbrk+0x64>)
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <_sbrk+0x68>)
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <_sbrk+0x64>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d207      	bcs.n	80033cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033bc:	f00b fe20 	bl	800f000 <__errno>
 80033c0:	4603      	mov	r3, r0
 80033c2:	220c      	movs	r2, #12
 80033c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e009      	b.n	80033e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <_sbrk+0x64>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <_sbrk+0x64>)
 80033dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20008000 	.word	0x20008000
 80033ec:	00000400 	.word	0x00000400
 80033f0:	20000438 	.word	0x20000438
 80033f4:	200020a8 	.word	0x200020a8

080033f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <SystemInit+0x28>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <SystemInit+0x28>)
 8003404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <SystemInit+0x28>)
 800340e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003412:	609a      	str	r2, [r3, #8]
#endif
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003426:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <LoopForever+0x6>)
  ldr r1, =_edata
 800342a:	490e      	ldr	r1, [pc, #56]	; (8003464 <LoopForever+0xa>)
  ldr r2, =_sidata
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <LoopForever+0xe>)
  movs r3, #0
 800342e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003430:	e002      	b.n	8003438 <LoopCopyDataInit>

08003432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003436:	3304      	adds	r3, #4

08003438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800343c:	d3f9      	bcc.n	8003432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003440:	4c0b      	ldr	r4, [pc, #44]	; (8003470 <LoopForever+0x16>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003444:	e001      	b.n	800344a <LoopFillZerobss>

08003446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003448:	3204      	adds	r2, #4

0800344a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800344c:	d3fb      	bcc.n	8003446 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800344e:	f7ff ffd3 	bl	80033f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003452:	f00b fddb 	bl	800f00c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003456:	f7fd fda9 	bl	8000fac <main>

0800345a <LoopForever>:

LoopForever:
    b LoopForever
 800345a:	e7fe      	b.n	800345a <LoopForever>
  ldr   r0, =_estack
 800345c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003464:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8003468:	0800fef4 	.word	0x0800fef4
  ldr r2, =_sbss
 800346c:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8003470:	200020a8 	.word	0x200020a8

08003474 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <COMP1_2_3_IRQHandler>

08003476 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003480:	2003      	movs	r0, #3
 8003482:	f001 fe9f 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003486:	2000      	movs	r0, #0
 8003488:	f000 f80e 	bl	80034a8 <HAL_InitTick>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	71fb      	strb	r3, [r7, #7]
 8003496:	e001      	b.n	800349c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003498:	f7ff fd42 	bl	8002f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800349c:	79fb      	ldrb	r3, [r7, #7]

}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_InitTick+0x68>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d022      	beq.n	8003502 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_InitTick+0x6c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_InitTick+0x68>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 feaa 	bl	800522a <HAL_SYSTICK_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10f      	bne.n	80034fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	d809      	bhi.n	80034f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e2:	2200      	movs	r2, #0
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	f001 fe76 	bl	80051da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <HAL_InitTick+0x70>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e007      	b.n	8003506 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
 80034fa:	e004      	b.n	8003506 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e001      	b.n	8003506 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2000019c 	.word	0x2000019c
 8003514:	20000194 	.word	0x20000194
 8003518:	20000198 	.word	0x20000198

0800351c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_IncTick+0x1c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x20>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4413      	add	r3, r2
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <HAL_IncTick+0x1c>)
 800352c:	6013      	str	r3, [r2, #0]
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20001100 	.word	0x20001100
 800353c:	2000019c 	.word	0x2000019c

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_GetTick+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20001100 	.word	0x20001100

08003558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff ffee 	bl	8003540 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d004      	beq.n	800357c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_Delay+0x40>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800357c:	bf00      	nop
 800357e:	f7ff ffdf 	bl	8003540 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	429a      	cmp	r2, r3
 800358c:	d8f7      	bhi.n	800357e <HAL_Delay+0x26>
  {
  }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	2000019c 	.word	0x2000019c

0800359c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3360      	adds	r3, #96	; 0x60
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <LL_ADC_SetOffset+0x44>)
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	03fff000 	.word	0x03fff000

0800364c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	461a      	mov	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3360      	adds	r3, #96	; 0x60
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	431a      	orrs	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3360      	adds	r3, #96	; 0x60
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3360      	adds	r3, #96	; 0x60
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	615a      	str	r2, [r3, #20]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003766:	b480      	push	{r7}
 8003768:	b087      	sub	sp, #28
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3330      	adds	r3, #48	; 0x30
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	4413      	add	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	211f      	movs	r1, #31
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	401a      	ands	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	f003 011f 	and.w	r1, r3, #31
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	431a      	orrs	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3314      	adds	r3, #20
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	0e5b      	lsrs	r3, r3, #25
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	0d1b      	lsrs	r3, r3, #20
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2107      	movs	r1, #7
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	401a      	ands	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0d1b      	lsrs	r3, r3, #20
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	431a      	orrs	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003854:	43db      	mvns	r3, r3
 8003856:	401a      	ands	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0318 	and.w	r3, r3, #24
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003860:	40d9      	lsrs	r1, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	400b      	ands	r3, r1
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	0007ffff 	.word	0x0007ffff

08003884 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 031f 	and.w	r3, r3, #31
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6093      	str	r3, [r2, #8]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f4:	d101      	bne.n	80038fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800391c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003944:	d101      	bne.n	800394a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <LL_ADC_IsEnabled+0x18>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <LL_ADC_IsEnabled+0x1a>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d101      	bne.n	8003a0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e16b      	b.n	8003d0e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fa8f 	bl	8002f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff3f 	bl	80038e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff25 	bl	80038bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff5a 	bl	8003930 <LL_ADC_IsInternalRegulatorEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff3e 	bl	8003908 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a8c:	4ba2      	ldr	r3, [pc, #648]	; (8003d18 <HAL_ADC_Init+0x2fc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	4aa2      	ldr	r2, [pc, #648]	; (8003d1c <HAL_ADC_Init+0x300>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a9c:	e002      	b.n	8003aa4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f9      	bne.n	8003a9e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff3e 	bl	8003930 <LL_ADC_IsInternalRegulatorEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff77 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 8003ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 8106 	bne.w	8003cfc <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 8102 	bne.w	8003cfc <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff37 	bl	8003980 <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d111      	bne.n	8003b3c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b1c:	f7ff ff30 	bl	8003980 <LL_ADC_IsEnabled>
 8003b20:	4604      	mov	r4, r0
 8003b22:	487f      	ldr	r0, [pc, #508]	; (8003d20 <HAL_ADC_Init+0x304>)
 8003b24:	f7ff ff2c 	bl	8003980 <LL_ADC_IsEnabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4323      	orrs	r3, r4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4619      	mov	r1, r3
 8003b36:	487b      	ldr	r0, [pc, #492]	; (8003d24 <HAL_ADC_Init+0x308>)
 8003b38:	f7ff fd30 	bl	800359c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7f5b      	ldrb	r3, [r3, #29]
 8003b40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	045b      	lsls	r3, r3, #17
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_ADC_Init+0x30c>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff03 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 8003bc8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ff10 	bl	80039f4 <LL_ADC_INJ_IsConversionOngoing>
 8003bd4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d16d      	bne.n	8003cb8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d16a      	bne.n	8003cb8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003be6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfe:	f023 0302 	bic.w	r3, r3, #2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6911      	ldr	r1, [r2, #16]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003c42:	e013      	b.n	8003c6c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d118      	bne.n	8003ca8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c80:	f023 0304 	bic.w	r3, r3, #4
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	e007      	b.n	8003cb8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10c      	bne.n	8003cda <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f023 010f 	bic.w	r1, r3, #15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	1e5a      	subs	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd8:	e007      	b.n	8003cea <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 020f 	bic.w	r2, r2, #15
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cfa:	e007      	b.n	8003d0c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	f043 0210 	orr.w	r2, r3, #16
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000194 	.word	0x20000194
 8003d1c:	053e2d63 	.word	0x053e2d63
 8003d20:	50000100 	.word	0x50000100
 8003d24:	50000300 	.word	0x50000300
 8003d28:	fff04007 	.word	0xfff04007

08003d2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d34:	4859      	ldr	r0, [pc, #356]	; (8003e9c <HAL_ADC_Start+0x170>)
 8003d36:	f7ff fda5 	bl	8003884 <LL_ADC_GetMultimode>
 8003d3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fe44 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 809f 	bne.w	8003e8c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_Start+0x30>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e09a      	b.n	8003e92 <HAL_ADC_Start+0x166>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fec5 	bl	8004af4 <ADC_Enable>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8086 	bne.w	8003e82 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a44      	ldr	r2, [pc, #272]	; (8003ea0 <HAL_ADC_Start+0x174>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d002      	beq.n	8003d9a <HAL_ADC_Start+0x6e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	e001      	b.n	8003d9e <HAL_ADC_Start+0x72>
 8003d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d002      	beq.n	8003dac <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d106      	bne.n	8003dd4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	f023 0206 	bic.w	r2, r3, #6
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	661a      	str	r2, [r3, #96]	; 0x60
 8003dd2:	e002      	b.n	8003dda <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	221c      	movs	r2, #28
 8003de0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_ADC_Start+0x174>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d002      	beq.n	8003dfa <HAL_ADC_Start+0xce>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	e001      	b.n	8003dfe <HAL_ADC_Start+0xd2>
 8003dfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d008      	beq.n	8003e18 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d002      	beq.n	8003e18 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d114      	bne.n	8003e42 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fdb3 	bl	80039a6 <LL_ADC_REG_StartConversion>
 8003e40:	e026      	b.n	8003e90 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <HAL_ADC_Start+0x174>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d002      	beq.n	8003e5e <HAL_ADC_Start+0x132>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	e001      	b.n	8003e62 <HAL_ADC_Start+0x136>
 8003e5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e62:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e80:	e006      	b.n	8003e90 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003e8a:	e001      	b.n	8003e90 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	50000300 	.word	0x50000300
 8003ea0:	50000100 	.word	0x50000100

08003ea4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ec0:	4883      	ldr	r0, [pc, #524]	; (80040d0 <HAL_ADC_IRQHandler+0x22c>)
 8003ec2:	f7ff fcdf 	bl	8003884 <LL_ADC_GetMultimode>
 8003ec6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x5e>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 ffeb 	bl	8004ed0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2202      	movs	r2, #2
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_ADC_IRQHandler+0x72>
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8085 	beq.w	800402c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d07f      	beq.n	800402c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fbf9 	bl	8003740 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d064      	beq.n	800401e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <HAL_ADC_IRQHandler+0x230>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d002      	beq.n	8003f64 <HAL_ADC_IRQHandler+0xc0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	e001      	b.n	8003f68 <HAL_ADC_IRQHandler+0xc4>
 8003f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d008      	beq.n	8003f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d002      	beq.n	8003f82 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b09      	cmp	r3, #9
 8003f80:	d104      	bne.n	8003f8c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	e00d      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a50      	ldr	r2, [pc, #320]	; (80040d4 <HAL_ADC_IRQHandler+0x230>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d002      	beq.n	8003f9c <HAL_ADC_IRQHandler+0xf8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	e001      	b.n	8003fa0 <HAL_ADC_IRQHandler+0xfc>
 8003f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fa0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d135      	bne.n	800401e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d12e      	bne.n	800401e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fd02 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11a      	bne.n	8004006 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 020c 	bic.w	r2, r2, #12
 8003fde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d112      	bne.n	800401e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c
 8004004:	e00b      	b.n	800401e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff0e 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	220c      	movs	r2, #12
 800402a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_ADC_IRQHandler+0x19c>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 809e 	beq.w	8004188 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8098 	beq.w	8004188 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fba2 	bl	80037be <LL_ADC_INJ_IsTriggerSourceSWStart>
 800407a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fb5d 	bl	8003740 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004086:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <HAL_ADC_IRQHandler+0x230>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d002      	beq.n	8004098 <HAL_ADC_IRQHandler+0x1f4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	e001      	b.n	800409c <HAL_ADC_IRQHandler+0x1f8>
 8004098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d008      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d002      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	d104      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	e011      	b.n	80040e4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a03      	ldr	r2, [pc, #12]	; (80040d4 <HAL_ADC_IRQHandler+0x230>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d006      	beq.n	80040d8 <HAL_ADC_IRQHandler+0x234>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	e005      	b.n	80040dc <HAL_ADC_IRQHandler+0x238>
 80040d0:	50000300 	.word	0x50000300
 80040d4:	50000100 	.word	0x50000100
 80040d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040dc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d142      	bne.n	800417a <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03f      	beq.n	800417a <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d13a      	bne.n	800417a <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d133      	bne.n	800417a <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d12e      	bne.n	800417a <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fc67 	bl	80039f4 <LL_ADC_INJ_IsConversionOngoing>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11a      	bne.n	8004162 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800413a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d112      	bne.n	800417a <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004160:	e00b      	b.n	800417a <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f043 0210 	orr.w	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fe80 	bl	8004e80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2260      	movs	r2, #96	; 0x60
 8004186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d011      	beq.n	80041b6 <HAL_ADC_IRQHandler+0x312>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f89f 	bl	80042ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_ADC_IRQHandler+0x342>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fe66 	bl	8004ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d012      	beq.n	8004216 <HAL_ADC_IRQHandler+0x372>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fe58 	bl	8004ebc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d036      	beq.n	800428e <HAL_ADC_IRQHandler+0x3ea>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d031      	beq.n	800428e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004232:	2301      	movs	r3, #1
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e014      	b.n	8004262 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800423e:	4825      	ldr	r0, [pc, #148]	; (80042d4 <HAL_ADC_IRQHandler+0x430>)
 8004240:	f7ff fb2e 	bl	80038a0 <LL_ADC_GetMultiDMATransfer>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800424a:	2301      	movs	r3, #1
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	e008      	b.n	8004262 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800425e:	2301      	movs	r3, #1
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10e      	bne.n	8004286 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	f043 0202 	orr.w	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f83d 	bl	8004300 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d018      	beq.n	80042ca <HAL_ADC_IRQHandler+0x426>
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fde5 	bl	8004e94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80042ca:	bf00      	nop
 80042cc:	3728      	adds	r7, #40	; 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	50000300 	.word	0x50000300

080042d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b0b6      	sub	sp, #216	; 0xd8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x22>
 8004332:	2302      	movs	r3, #2
 8004334:	e3c7      	b.n	8004ac6 <HAL_ADC_ConfigChannel+0x7b2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fb43 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 83ac 	bne.w	8004aa8 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	f7ff fa02 	bl	8003766 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fb31 	bl	80039ce <LL_ADC_REG_IsConversionOngoing>
 800436c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fb3d 	bl	80039f4 <LL_ADC_INJ_IsConversionOngoing>
 800437a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 81d9 	bne.w	800473a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 81d4 	bne.w	800473a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439a:	d10f      	bne.n	80043bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7ff fa1c 	bl	80037e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f9b0 	bl	800371a <LL_ADC_SetSamplingTimeCommonConfig>
 80043ba:	e00e      	b.n	80043da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	461a      	mov	r2, r3
 80043ca:	f7ff fa0b 	bl	80037e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f9a0 	bl	800371a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d022      	beq.n	8004442 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6919      	ldr	r1, [r3, #16]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800440c:	f7ff f8fa 	bl	8003604 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	461a      	mov	r2, r3
 800441e:	f7ff f946 	bl	80036ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6919      	ldr	r1, [r3, #16]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	7f1b      	ldrb	r3, [r3, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x124>
 8004432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004436:	e000      	b.n	800443a <HAL_ADC_ConfigChannel+0x126>
 8004438:	2300      	movs	r3, #0
 800443a:	461a      	mov	r2, r3
 800443c:	f7ff f952 	bl	80036e4 <LL_ADC_SetOffsetSaturation>
 8004440:	e17b      	b.n	800473a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff f8ff 	bl	800364c <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <HAL_ADC_ConfigChannel+0x15a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f8f4 	bl	800364c <LL_ADC_GetOffsetChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	0e9b      	lsrs	r3, r3, #26
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	e01e      	b.n	80044ac <HAL_ADC_ConfigChannel+0x198>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff f8e9 	bl	800364c <LL_ADC_GetOffsetChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800448c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e004      	b.n	80044aa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80044a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x1b0>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e9b      	lsrs	r3, r3, #26
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	e018      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x1e2>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80044d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80044e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80044e8:	2320      	movs	r3, #32
 80044ea:	e004      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80044ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d106      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f8b8 	bl	8003678 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f89c 	bl	800364c <LL_ADC_GetOffsetChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x220>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff f891 	bl	800364c <LL_ADC_GetOffsetChannel>
 800452a:	4603      	mov	r3, r0
 800452c:	0e9b      	lsrs	r3, r3, #26
 800452e:	f003 021f 	and.w	r2, r3, #31
 8004532:	e01e      	b.n	8004572 <HAL_ADC_ConfigChannel+0x25e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f886 	bl	800364c <LL_ADC_GetOffsetChannel>
 8004540:	4603      	mov	r3, r0
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800455a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004562:	2320      	movs	r3, #32
 8004564:	e004      	b.n	8004570 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_ADC_ConfigChannel+0x276>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	e018      	b.n	80045bc <HAL_ADC_ConfigChannel+0x2a8>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800459e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80045a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e004      	b.n	80045bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80045b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	429a      	cmp	r2, r3
 80045be:	d106      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff f855 	bl	8003678 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff f839 	bl	800364c <LL_ADC_GetOffsetChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x2e6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2102      	movs	r1, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff f82e 	bl	800364c <LL_ADC_GetOffsetChannel>
 80045f0:	4603      	mov	r3, r0
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	f003 021f 	and.w	r2, r3, #31
 80045f8:	e01e      	b.n	8004638 <HAL_ADC_ConfigChannel+0x324>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2102      	movs	r1, #2
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f823 	bl	800364c <LL_ADC_GetOffsetChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800461c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004620:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004628:	2320      	movs	r3, #32
 800462a:	e004      	b.n	8004636 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800462c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x33c>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	e016      	b.n	800467e <HAL_ADC_ConfigChannel+0x36a>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e004      	b.n	800467e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	429a      	cmp	r2, r3
 8004680:	d106      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fff4 	bl	8003678 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2103      	movs	r1, #3
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe ffd8 	bl	800364c <LL_ADC_GetOffsetChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x3a8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2103      	movs	r1, #3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe ffcd 	bl	800364c <LL_ADC_GetOffsetChannel>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	e017      	b.n	80046ec <HAL_ADC_ConfigChannel+0x3d8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2103      	movs	r1, #3
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe ffc2 	bl	800364c <LL_ADC_GetOffsetChannel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80046d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80046d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80046de:	2320      	movs	r3, #32
 80046e0:	e003      	b.n	80046ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80046e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x3f0>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	e011      	b.n	8004728 <HAL_ADC_ConfigChannel+0x414>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004714:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	429a      	cmp	r2, r3
 800472a:	d106      	bne.n	800473a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2200      	movs	r2, #0
 8004732:	2103      	movs	r1, #3
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ff9f 	bl	8003678 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f91e 	bl	8003980 <LL_ADC_IsEnabled>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 8140 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	461a      	mov	r2, r3
 800475a:	f7ff f86f 	bl	800383c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a8f      	ldr	r2, [pc, #572]	; (80049a0 <HAL_ADC_ConfigChannel+0x68c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	f040 8131 	bne.w	80049cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x47e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0e9b      	lsrs	r3, r3, #26
 8004780:	3301      	adds	r3, #1
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b09      	cmp	r3, #9
 8004788:	bf94      	ite	ls
 800478a:	2301      	movls	r3, #1
 800478c:	2300      	movhi	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e019      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x4b2>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80047a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80047a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80047aa:	2320      	movs	r3, #32
 80047ac:	e003      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80047ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2b09      	cmp	r3, #9
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d079      	beq.n	80048be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x4d2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	0e9b      	lsrs	r3, r3, #26
 80047dc:	3301      	adds	r3, #1
 80047de:	069b      	lsls	r3, r3, #26
 80047e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047e4:	e015      	b.n	8004812 <HAL_ADC_ConfigChannel+0x4fe>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80047f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047fe:	2320      	movs	r3, #32
 8004800:	e003      	b.n	800480a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	3301      	adds	r3, #1
 800480c:	069b      	lsls	r3, r3, #26
 800480e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x51e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	0e9b      	lsrs	r3, r3, #26
 8004824:	3301      	adds	r3, #1
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2101      	movs	r1, #1
 800482c:	fa01 f303 	lsl.w	r3, r1, r3
 8004830:	e017      	b.n	8004862 <HAL_ADC_ConfigChannel+0x54e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800484a:	2320      	movs	r3, #32
 800484c:	e003      	b.n	8004856 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	3301      	adds	r3, #1
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2101      	movs	r1, #1
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	ea42 0103 	orr.w	r1, r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x574>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	3301      	adds	r3, #1
 800487a:	f003 021f 	and.w	r2, r3, #31
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	e018      	b.n	80048ba <HAL_ADC_ConfigChannel+0x5a6>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800489a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e003      	b.n	80048ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	f003 021f 	and.w	r2, r3, #31
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ba:	430b      	orrs	r3, r1
 80048bc:	e081      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_ADC_ConfigChannel+0x5c6>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	0e9b      	lsrs	r3, r3, #26
 80048d0:	3301      	adds	r3, #1
 80048d2:	069b      	lsls	r3, r3, #26
 80048d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d8:	e015      	b.n	8004906 <HAL_ADC_ConfigChannel+0x5f2>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80048f2:	2320      	movs	r3, #32
 80048f4:	e003      	b.n	80048fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	069b      	lsls	r3, r3, #26
 8004902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x612>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	0e9b      	lsrs	r3, r3, #26
 8004918:	3301      	adds	r3, #1
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2101      	movs	r1, #1
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	e017      	b.n	8004956 <HAL_ADC_ConfigChannel+0x642>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	61fb      	str	r3, [r7, #28]
  return result;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800493e:	2320      	movs	r3, #32
 8004940:	e003      	b.n	800494a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	ea42 0103 	orr.w	r1, r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x66e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	0e9b      	lsrs	r3, r3, #26
 800496c:	3301      	adds	r3, #1
 800496e:	f003 021f 	and.w	r2, r3, #31
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	3b1e      	subs	r3, #30
 800497a:	051b      	lsls	r3, r3, #20
 800497c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004980:	e01e      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x6ac>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fa93 f3a3 	rbit	r3, r3
 800498e:	613b      	str	r3, [r7, #16]
  return result;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800499a:	2320      	movs	r3, #32
 800499c:	e006      	b.n	80049ac <HAL_ADC_ConfigChannel+0x698>
 800499e:	bf00      	nop
 80049a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	3301      	adds	r3, #1
 80049ae:	f003 021f 	and.w	r2, r3, #31
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	3b1e      	subs	r3, #30
 80049ba:	051b      	lsls	r3, r3, #20
 80049bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c0:	430b      	orrs	r3, r1
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	6892      	ldr	r2, [r2, #8]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7fe ff0c 	bl	80037e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b3f      	ldr	r3, [pc, #252]	; (8004ad0 <HAL_ADC_ConfigChannel+0x7bc>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d070      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d8:	483e      	ldr	r0, [pc, #248]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7c0>)
 80049da:	f7fe fe05 	bl	80035e8 <LL_ADC_GetCommonPathInternalCh>
 80049de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3c      	ldr	r2, [pc, #240]	; (8004ad8 <HAL_ADC_ConfigChannel+0x7c4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_ADC_ConfigChannel+0x6e2>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3a      	ldr	r2, [pc, #232]	; (8004adc <HAL_ADC_ConfigChannel+0x7c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d126      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d120      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a0a:	d156      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a14:	4619      	mov	r1, r3
 8004a16:	482f      	ldr	r0, [pc, #188]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a18:	f7fe fdd3 	bl	80035c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	099b      	lsrs	r3, r3, #6
 8004a22:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	099a      	lsrs	r2, r3, #6
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a34:	e002      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f9      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a42:	e03a      	b.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a27      	ldr	r2, [pc, #156]	; (8004ae8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d113      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x762>
 8004a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10d      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a23      	ldr	r2, [pc, #140]	; (8004aec <HAL_ADC_ConfigChannel+0x7d8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02a      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4819      	ldr	r0, [pc, #100]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a70:	f7fe fda7 	bl	80035c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a74:	e021      	b.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d11c      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d116      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_ADC_ConfigChannel+0x7d8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d011      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	480c      	ldr	r0, [pc, #48]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004aa2:	f7fe fd8e 	bl	80035c2 <LL_ADC_SetCommonPathInternalCh>
 8004aa6:	e008      	b.n	8004aba <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ac2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	37d8      	adds	r7, #216	; 0xd8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	80080000 	.word	0x80080000
 8004ad4:	50000300 	.word	0x50000300
 8004ad8:	c3210000 	.word	0xc3210000
 8004adc:	90c00010 	.word	0x90c00010
 8004ae0:	20000194 	.word	0x20000194
 8004ae4:	053e2d63 	.word	0x053e2d63
 8004ae8:	c7520000 	.word	0xc7520000
 8004aec:	50000100 	.word	0x50000100
 8004af0:	cb840000 	.word	0xcb840000

08004af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe ff3d 	bl	8003980 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d146      	bne.n	8004b9a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <ADC_Enable+0xb0>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e032      	b.n	8004b9c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe ff0c 	bl	8003958 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b40:	f7fe fcfe 	bl	8003540 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b46:	e021      	b.n	8004b8c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe ff17 	bl	8003980 <LL_ADC_IsEnabled>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fefb 	bl	8003958 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b62:	f7fe fced 	bl	8003540 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d90d      	bls.n	8004b8c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e007      	b.n	8004b9c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d1d6      	bne.n	8004b48 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	8000003f 	.word	0x8000003f

08004ba8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d14b      	bne.n	8004c5a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d021      	beq.n	8004c20 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fdad 	bl	8003740 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d032      	beq.n	8004c52 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d12b      	bne.n	8004c52 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11f      	bne.n	8004c52 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c1e:	e018      	b.n	8004c52 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d111      	bne.n	8004c52 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7fc f8f4 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c58:	e00e      	b.n	8004c78 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff fb4a 	bl	8004300 <HAL_ADC_ErrorCallback>
}
 8004c6c:	e004      	b.n	8004c78 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff fb22 	bl	80042d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	f043 0204 	orr.w	r2, r3, #4
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff fb1c 	bl	8004300 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <LL_ADC_IsEnabled>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <LL_ADC_IsEnabled+0x18>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <LL_ADC_IsEnabled+0x1a>
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <LL_ADC_REG_StartConversion>:
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d101      	bne.n	8004d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0a2      	sub	sp, #136	; 0x88
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ffe2 	bl	8004d1e <LL_ADC_REG_IsConversionOngoing>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
 8004d62:	e07e      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e077      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d82:	d102      	bne.n	8004d8a <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8004d84:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e001      	b.n	8004d8e <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e05a      	b.n	8004e62 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fea1 	bl	8004af4 <ADC_Enable>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8004db8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fe95 	bl	8004af4 <ADC_Enable>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004dd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d13e      	bne.n	8004e56 <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8004df8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8004e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	221c      	movs	r2, #28
 8004e16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0210 	orr.w	r2, r2, #16
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e38:	330c      	adds	r3, #12
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f000 faa8 	bl	8005394 <HAL_DMA_Start_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff51 	bl	8004cf6 <LL_ADC_REG_StartConversion>
 8004e54:	e003      	b.n	8004e5e <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004e5e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3788      	adds	r7, #136	; 0x88
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	08004ba9 	.word	0x08004ba9
 8004e74:	08004c81 	.word	0x08004c81
 8004e78:	08004c9d 	.word	0x08004c9d
 8004e7c:	50000300 	.word	0x50000300

08004e80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b0a1      	sub	sp, #132	; 0x84
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e087      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f12:	d102      	bne.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004f14:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	e001      	b.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e06a      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff feed 	bl	8004d1e <LL_ADC_REG_IsConversionOngoing>
 8004f44:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fee7 	bl	8004d1e <LL_ADC_REG_IsConversionOngoing>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14c      	bne.n	8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d149      	bne.n	8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f5c:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004f5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d028      	beq.n	8004fba <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7a:	035b      	lsls	r3, r3, #13
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f88:	f7ff fea2 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4823      	ldr	r0, [pc, #140]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004f90:	f7ff fe9e 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4323      	orrs	r3, r4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d133      	bne.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fa4:	f023 030f 	bic.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	6811      	ldr	r1, [r2, #0]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fb8:	e024      	b.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fc6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fca:	f7ff fe81 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4812      	ldr	r0, [pc, #72]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004fd2:	f7ff fe7d 	bl	8004cd0 <LL_ADC_IsEnabled>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4323      	orrs	r3, r4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d112      	bne.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fe6:	f023 030f 	bic.w	r3, r3, #15
 8004fea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fee:	e009      	b.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005002:	e000      	b.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800500e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005012:	4618      	mov	r0, r3
 8005014:	3784      	adds	r7, #132	; 0x84
 8005016:	46bd      	mov	sp, r7
 8005018:	bd90      	pop	{r4, r7, pc}
 800501a:	bf00      	nop
 800501c:	50000100 	.word	0x50000100
 8005020:	50000300 	.word	0x50000300

08005024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800504c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	60d3      	str	r3, [r2, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_GetPriorityGrouping+0x18>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0307 	and.w	r3, r3, #7
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db0b      	blt.n	80050b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <__NVIC_EnableIRQ+0x38>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2001      	movs	r0, #1
 80050aa:	fa00 f202 	lsl.w	r2, r0, r2
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0a      	blt.n	80050ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <__NVIC_SetPriority+0x4c>)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	440b      	add	r3, r1
 80050e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050ec:	e00a      	b.n	8005104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_SetPriority+0x50>)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	3b04      	subs	r3, #4
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	440b      	add	r3, r1
 8005102:	761a      	strb	r2, [r3, #24]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf28      	it	cs
 8005136:	2304      	movcs	r3, #4
 8005138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	2b06      	cmp	r3, #6
 8005140:	d902      	bls.n	8005148 <NVIC_EncodePriority+0x30>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b03      	subs	r3, #3
 8005146:	e000      	b.n	800514a <NVIC_EncodePriority+0x32>
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005160:	f04f 31ff 	mov.w	r1, #4294967295
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43d9      	mvns	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	4313      	orrs	r3, r2
         );
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3b01      	subs	r3, #1
 800518c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005190:	d301      	bcc.n	8005196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005192:	2301      	movs	r3, #1
 8005194:	e00f      	b.n	80051b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <SysTick_Config+0x40>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519e:	210f      	movs	r1, #15
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	f7ff ff8e 	bl	80050c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SysTick_Config+0x40>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <SysTick_Config+0x40>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010

080051c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ff29 	bl	8005024 <__NVIC_SetPriorityGrouping>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	4603      	mov	r3, r0
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051e8:	f7ff ff40 	bl	800506c <__NVIC_GetPriorityGrouping>
 80051ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	6978      	ldr	r0, [r7, #20]
 80051f4:	f7ff ff90 	bl	8005118 <NVIC_EncodePriority>
 80051f8:	4602      	mov	r2, r0
 80051fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff5f 	bl	80050c4 <__NVIC_SetPriority>
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	4603      	mov	r3, r0
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff33 	bl	8005088 <__NVIC_EnableIRQ>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ffa4 	bl	8005180 <SysTick_Config>
 8005238:	4603      	mov	r3, r0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e08d      	b.n	8005372 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_DMA_Init+0x138>)
 800525e:	429a      	cmp	r2, r3
 8005260:	d80f      	bhi.n	8005282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b45      	ldr	r3, [pc, #276]	; (8005380 <HAL_DMA_Init+0x13c>)
 800526a:	4413      	add	r3, r2
 800526c:	4a45      	ldr	r2, [pc, #276]	; (8005384 <HAL_DMA_Init+0x140>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	009a      	lsls	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a42      	ldr	r2, [pc, #264]	; (8005388 <HAL_DMA_Init+0x144>)
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
 8005280:	e00e      	b.n	80052a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_DMA_Init+0x148>)
 800528a:	4413      	add	r3, r2
 800528c:	4a3d      	ldr	r2, [pc, #244]	; (8005384 <HAL_DMA_Init+0x140>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	009a      	lsls	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a3c      	ldr	r2, [pc, #240]	; (8005390 <HAL_DMA_Init+0x14c>)
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa82 	bl	80057fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005300:	d102      	bne.n	8005308 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800531c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_DMA_Init+0x104>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d80c      	bhi.n	8005348 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 faa2 	bl	8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	e008      	b.n	800535a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40020407 	.word	0x40020407
 8005380:	bffdfff8 	.word	0xbffdfff8
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	40020000 	.word	0x40020000
 800538c:	bffdfbf8 	.word	0xbffdfbf8
 8005390:	40020400 	.word	0x40020400

08005394 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Start_IT+0x20>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e066      	b.n	8005482 <HAL_DMA_Start_IT+0xee>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d155      	bne.n	8005474 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f9c7 	bl	8005780 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 020e 	orr.w	r2, r2, #14
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e00f      	b.n	800542c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 020a 	orr.w	r2, r2, #10
 800542a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005448:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e005      	b.n	8005480 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d005      	beq.n	80054ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	e037      	b.n	800551e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020e 	bic.w	r2, r2, #14
 80054bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f003 021f 	and.w	r2, r3, #31
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f202 	lsl.w	r2, r1, r2
 80054f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00c      	beq.n	800551e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005512:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800551c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d00d      	beq.n	8005570 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
 800556e:	e047      	b.n	8005600 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 020e 	bic.w	r2, r2, #14
 800557e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800559e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	f003 021f 	and.w	r2, r3, #31
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f202 	lsl.w	r2, r1, r2
 80055b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
    }
  }
  return status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2204      	movs	r2, #4
 800562c:	409a      	lsls	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d026      	beq.n	8005684 <HAL_DMA_IRQHandler+0x7a>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d021      	beq.n	8005684 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	f003 021f 	and.w	r2, r3, #31
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2104      	movs	r1, #4
 800566c:	fa01 f202 	lsl.w	r2, r1, r2
 8005670:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d071      	beq.n	800575e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005682:	e06c      	b.n	800575e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2202      	movs	r2, #2
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02e      	beq.n	80056f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d029      	beq.n	80056f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 020a 	bic.w	r2, r2, #10
 80056be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f003 021f 	and.w	r2, r3, #31
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	2102      	movs	r1, #2
 80056d6:	fa01 f202 	lsl.w	r2, r1, r2
 80056da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d038      	beq.n	800575e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056f4:	e033      	b.n	800575e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2208      	movs	r2, #8
 8005700:	409a      	lsls	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02a      	beq.n	8005760 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d025      	beq.n	8005760 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 020e 	bic.w	r2, r2, #14
 8005722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	f003 021f 	and.w	r2, r3, #31
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f202 	lsl.w	r2, r1, r2
 8005736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800575e:	bf00      	nop
 8005760:	bf00      	nop
}
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005796:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f003 021f 	and.w	r2, r3, #31
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f202 	lsl.w	r2, r1, r2
 80057bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d108      	bne.n	80057e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057de:	e007      	b.n	80057f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	60da      	str	r2, [r3, #12]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	4b16      	ldr	r3, [pc, #88]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800580c:	429a      	cmp	r2, r3
 800580e:	d802      	bhi.n	8005816 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005810:	4b15      	ldr	r3, [pc, #84]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e001      	b.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005818:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	3b08      	subs	r3, #8
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2201      	movs	r2, #1
 8005850:	409a      	lsls	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40020407 	.word	0x40020407
 8005868:	40020800 	.word	0x40020800
 800586c:	40020820 	.word	0x40020820
 8005870:	cccccccd 	.word	0xcccccccd
 8005874:	40020880 	.word	0x40020880

08005878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800589a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2201      	movs	r2, #1
 80058a6:	409a      	lsls	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	1000823f 	.word	0x1000823f
 80058bc:	40020940 	.word	0x40020940

080058c0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058d2:	4b24      	ldr	r3, [pc, #144]	; (8005964 <HAL_FLASH_Program+0xa4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_FLASH_Program+0x1e>
 80058da:	2302      	movs	r3, #2
 80058dc:	e03e      	b.n	800595c <HAL_FLASH_Program+0x9c>
 80058de:	4b21      	ldr	r3, [pc, #132]	; (8005964 <HAL_FLASH_Program+0xa4>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058e8:	f000 f87c 	bl	80059e4 <FLASH_WaitForLastOperation>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d12e      	bne.n	8005954 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_FLASH_Program+0xa4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d107      	bne.n	8005912 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005906:	68b8      	ldr	r0, [r7, #8]
 8005908:	f000 f8c0 	bl	8005a8c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800590c:	2301      	movs	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e010      	b.n	8005934 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d002      	beq.n	800591e <HAL_FLASH_Program+0x5e>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d10a      	bne.n	8005934 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	68b8      	ldr	r0, [r7, #8]
 8005924:	f000 f8d8 	bl	8005ad8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d102      	bne.n	8005934 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800592e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005932:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005938:	f000 f854 	bl	80059e4 <FLASH_WaitForLastOperation>
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <HAL_FLASH_Program+0xa8>)
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	43db      	mvns	r3, r3
 800594e:	4906      	ldr	r1, [pc, #24]	; (8005968 <HAL_FLASH_Program+0xa8>)
 8005950:	4013      	ands	r3, r2
 8005952:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <HAL_FLASH_Program+0xa4>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800595a:	7dfb      	ldrb	r3, [r7, #23]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	200001a0 	.word	0x200001a0
 8005968:	40022000 	.word	0x40022000

0800596c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_FLASH_Unlock+0x38>)
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da0b      	bge.n	8005996 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_FLASH_Unlock+0x38>)
 8005980:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <HAL_FLASH_Unlock+0x3c>)
 8005982:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <HAL_FLASH_Unlock+0x38>)
 8005986:	4a09      	ldr	r2, [pc, #36]	; (80059ac <HAL_FLASH_Unlock+0x40>)
 8005988:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_FLASH_Unlock+0x38>)
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da01      	bge.n	8005996 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005996:	79fb      	ldrb	r3, [r7, #7]
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40022000 	.word	0x40022000
 80059a8:	45670123 	.word	0x45670123
 80059ac:	cdef89ab 	.word	0xcdef89ab

080059b0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_FLASH_Lock+0x30>)
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <HAL_FLASH_Lock+0x30>)
 80059c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_FLASH_Lock+0x30>)
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da01      	bge.n	80059d2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80059d2:	79fb      	ldrb	r3, [r7, #7]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40022000 	.word	0x40022000

080059e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7fd fda8 	bl	8003540 <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059f2:	e009      	b.n	8005a08 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80059f4:	f7fd fda4 	bl	8003540 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d201      	bcs.n	8005a08 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e038      	b.n	8005a7a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d0ee      	beq.n	80059f4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01e      	beq.n	8005a66 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8005a28:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <FLASH_WaitForLastOperation+0xa4>)
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <FLASH_WaitForLastOperation+0xa4>)
 8005a32:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <FLASH_WaitForLastOperation+0x6a>
 8005a3e:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a48:	490e      	ldr	r1, [pc, #56]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	618b      	str	r3, [r1, #24]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <FLASH_WaitForLastOperation+0x7e>
 8005a58:	4a0a      	ldr	r2, [pc, #40]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a60:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e009      	b.n	8005a7a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d102      	bne.n	8005a78 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <FLASH_WaitForLastOperation+0xa0>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40022000 	.word	0x40022000
 8005a88:	200001a0 	.word	0x200001a0

08005a8c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <FLASH_Program_DoubleWord+0x48>)
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <FLASH_Program_DoubleWord+0x48>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005aaa:	f3bf 8f6f 	isb	sy
}
 8005aae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	000a      	movs	r2, r1
 8005abe:	2300      	movs	r3, #0
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	3104      	adds	r1, #4
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40022000 	.word	0x40022000

08005ad8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <FLASH_Program_Fast+0x68>)
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <FLASH_Program_Fast+0x68>)
 8005af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b00:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b04:	b672      	cpsid	i
}
 8005b06:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	3304      	adds	r3, #4
 8005b14:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b1c:	7ffb      	ldrb	r3, [r7, #31]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005b22:	7ffb      	ldrb	r3, [r7, #31]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ef      	bne.n	8005b08 <FLASH_Program_Fast+0x30>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f383 8810 	msr	PRIMASK, r3
}
 8005b32:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005b34:	bf00      	nop
 8005b36:	3724      	adds	r7, #36	; 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40022000 	.word	0x40022000

08005b44 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b4e:	4b4a      	ldr	r3, [pc, #296]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_FLASHEx_Erase+0x16>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e089      	b.n	8005c6e <HAL_FLASHEx_Erase+0x12a>
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b64:	f7ff ff3e 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d179      	bne.n	8005c66 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b72:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d019      	beq.n	8005bb8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b84:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3c      	ldr	r2, [pc, #240]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005b8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b8e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b90:	4b3a      	ldr	r3, [pc, #232]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b9c:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a36      	ldr	r2, [pc, #216]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005ba8:	4b33      	ldr	r3, [pc, #204]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005baa:	2203      	movs	r2, #3
 8005bac:	771a      	strb	r2, [r3, #28]
 8005bae:	e016      	b.n	8005bde <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005bb0:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	771a      	strb	r2, [r3, #28]
 8005bb6:	e012      	b.n	8005bde <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005bb8:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2c      	ldr	r2, [pc, #176]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	771a      	strb	r2, [r3, #28]
 8005bd6:	e002      	b.n	8005bde <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d111      	bne.n	8005c0a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f848 	bl	8005c80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bf4:	f7ff fef6 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005c02:	f023 0304 	bic.w	r3, r3, #4
 8005c06:	6153      	str	r3, [r2, #20]
 8005c08:	e02b      	b.n	8005c62 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	e01b      	b.n	8005c52 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68b8      	ldr	r0, [r7, #8]
 8005c22:	f000 f84b 	bl	8005cbc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2a:	f7ff fedb 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <HAL_FLASHEx_Erase+0x138>)
 8005c38:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005c3c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	601a      	str	r2, [r3, #0]
          break;
 8005c4a:	e00a      	b.n	8005c62 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d3db      	bcc.n	8005c1a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c62:	f000 f84f 	bl	8005d04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_FLASHEx_Erase+0x134>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]

  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200001a0 	.word	0x200001a0
 8005c7c:	40022000 	.word	0x40022000

08005c80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <FLASH_MassErase+0x38>)
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <FLASH_MassErase+0x38>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <FLASH_MassErase+0x38>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <FLASH_MassErase+0x38>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca8:	6153      	str	r3, [r2, #20]
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40022000 	.word	0x40022000

08005cbc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <FLASH_PageErase+0x44>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005cd6:	490a      	ldr	r1, [pc, #40]	; (8005d00 <FLASH_PageErase+0x44>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <FLASH_PageErase+0x44>)
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	4a07      	ldr	r2, [pc, #28]	; (8005d00 <FLASH_PageErase+0x44>)
 8005ce2:	f043 0302 	orr.w	r3, r3, #2
 8005ce6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <FLASH_PageErase+0x44>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <FLASH_PageErase+0x44>)
 8005cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf2:	6153      	str	r3, [r2, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40022000 	.word	0x40022000

08005d04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <FLASH_FlushCaches+0x80>)
 8005d0c:	7f1b      	ldrb	r3, [r3, #28]
 8005d0e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d002      	beq.n	8005d1c <FLASH_FlushCaches+0x18>
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d111      	bne.n	8005d40 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d1c:	4b1a      	ldr	r3, [pc, #104]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a19      	ldr	r2, [pc, #100]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d32:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d3e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d002      	beq.n	8005d4c <FLASH_FlushCaches+0x48>
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d111      	bne.n	8005d70 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d62:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <FLASH_FlushCaches+0x84>)
 8005d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <FLASH_FlushCaches+0x80>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	771a      	strb	r2, [r3, #28]
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	200001a0 	.word	0x200001a0
 8005d88:	40022000 	.word	0x40022000

08005d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d9a:	e15a      	b.n	8006052 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	2101      	movs	r1, #1
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 814c 	beq.w	800604c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d00b      	beq.n	8005dd4 <HAL_GPIO_Init+0x48>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d007      	beq.n	8005dd4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dc8:	2b11      	cmp	r3, #17
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b12      	cmp	r3, #18
 8005dd2:	d130      	bne.n	8005e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	2203      	movs	r2, #3
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4013      	ands	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	091b      	lsrs	r3, r3, #4
 8005e20:	f003 0201 	and.w	r2, r3, #1
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	2203      	movs	r2, #3
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0xea>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b12      	cmp	r3, #18
 8005e74:	d123      	bne.n	8005ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	08da      	lsrs	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3208      	adds	r2, #8
 8005e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4013      	ands	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	08da      	lsrs	r2, r3, #3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3208      	adds	r2, #8
 8005eb8:	6939      	ldr	r1, [r7, #16]
 8005eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2203      	movs	r2, #3
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0203 	and.w	r2, r3, #3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a6 	beq.w	800604c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f00:	4b5b      	ldr	r3, [pc, #364]	; (8006070 <HAL_GPIO_Init+0x2e4>)
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	4a5a      	ldr	r2, [pc, #360]	; (8006070 <HAL_GPIO_Init+0x2e4>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8005f0c:	4b58      	ldr	r3, [pc, #352]	; (8006070 <HAL_GPIO_Init+0x2e4>)
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f18:	4a56      	ldr	r2, [pc, #344]	; (8006074 <HAL_GPIO_Init+0x2e8>)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	089b      	lsrs	r3, r3, #2
 8005f1e:	3302      	adds	r3, #2
 8005f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	220f      	movs	r2, #15
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f42:	d01f      	beq.n	8005f84 <HAL_GPIO_Init+0x1f8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a4c      	ldr	r2, [pc, #304]	; (8006078 <HAL_GPIO_Init+0x2ec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d019      	beq.n	8005f80 <HAL_GPIO_Init+0x1f4>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a4b      	ldr	r2, [pc, #300]	; (800607c <HAL_GPIO_Init+0x2f0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_GPIO_Init+0x1f0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <HAL_GPIO_Init+0x2f4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00d      	beq.n	8005f78 <HAL_GPIO_Init+0x1ec>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a49      	ldr	r2, [pc, #292]	; (8006084 <HAL_GPIO_Init+0x2f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <HAL_GPIO_Init+0x1e8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a48      	ldr	r2, [pc, #288]	; (8006088 <HAL_GPIO_Init+0x2fc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d101      	bne.n	8005f70 <HAL_GPIO_Init+0x1e4>
 8005f6c:	2305      	movs	r3, #5
 8005f6e:	e00a      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f70:	2306      	movs	r3, #6
 8005f72:	e008      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f74:	2304      	movs	r3, #4
 8005f76:	e006      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e004      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e002      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_GPIO_Init+0x1fa>
 8005f84:	2300      	movs	r3, #0
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	f002 0203 	and.w	r2, r2, #3
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	4093      	lsls	r3, r2
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f96:	4937      	ldr	r1, [pc, #220]	; (8006074 <HAL_GPIO_Init+0x2e8>)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fa4:	4b39      	ldr	r3, [pc, #228]	; (800608c <HAL_GPIO_Init+0x300>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fc8:	4a30      	ldr	r2, [pc, #192]	; (800608c <HAL_GPIO_Init+0x300>)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <HAL_GPIO_Init+0x300>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ff2:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_GPIO_Init+0x300>)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ff8:	4b24      	ldr	r3, [pc, #144]	; (800608c <HAL_GPIO_Init+0x300>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	43db      	mvns	r3, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4013      	ands	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_GPIO_Init+0x300>)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006022:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_GPIO_Init+0x300>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	43db      	mvns	r3, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4013      	ands	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006046:	4a11      	ldr	r2, [pc, #68]	; (800608c <HAL_GPIO_Init+0x300>)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3301      	adds	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f ae9d 	bne.w	8005d9c <HAL_GPIO_Init+0x10>
  }
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40021000 	.word	0x40021000
 8006074:	40010000 	.word	0x40010000
 8006078:	48000400 	.word	0x48000400
 800607c:	48000800 	.word	0x48000800
 8006080:	48000c00 	.word	0x48000c00
 8006084:	48001000 	.word	0x48001000
 8006088:	48001400 	.word	0x48001400
 800608c:	40010400 	.word	0x40010400

08006090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e001      	b.n	80060b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
 80060cc:	4613      	mov	r3, r2
 80060ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060dc:	e002      	b.n	80060e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4013      	ands	r3, r2
 8006108:	041a      	lsls	r2, r3, #16
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	43d9      	mvns	r1, r3
 800610e:	887b      	ldrh	r3, [r7, #2]
 8006110:	400b      	ands	r3, r1
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006126:	b08b      	sub	sp, #44	; 0x2c
 8006128:	af06      	add	r7, sp, #24
 800612a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e0d7      	b.n	80062e6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f008 fc68 	bl	800ea20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f004 fb96 	bl	800a88e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
 8006166:	e04c      	b.n	8006202 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	3301      	adds	r3, #1
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	b298      	uxth	r0, r3
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	440b      	add	r3, r1
 80061a4:	3336      	adds	r3, #54	; 0x36
 80061a6:	4602      	mov	r2, r0
 80061a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	440b      	add	r3, r1
 80061ba:	3303      	adds	r3, #3
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	3338      	adds	r3, #56	; 0x38
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061d4:	7bfa      	ldrb	r2, [r7, #15]
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	440b      	add	r3, r1
 80061e2:	333c      	adds	r3, #60	; 0x3c
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061e8:	7bfa      	ldrb	r2, [r7, #15]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	3340      	adds	r3, #64	; 0x40
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	3301      	adds	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	7bfa      	ldrb	r2, [r7, #15]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d3ad      	bcc.n	8006168 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	e044      	b.n	800629c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	440b      	add	r3, r1
 8006220:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006228:	7bfa      	ldrb	r2, [r7, #15]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	440b      	add	r3, r1
 8006236:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800623a:	7bfa      	ldrb	r2, [r7, #15]
 800623c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	440b      	add	r3, r1
 8006262:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800626a:	7bfa      	ldrb	r2, [r7, #15]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	440b      	add	r3, r1
 8006278:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	440b      	add	r3, r1
 800628e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	3301      	adds	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3b5      	bcc.n	8006212 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	687e      	ldr	r6, [r7, #4]
 80062ae:	466d      	mov	r5, sp
 80062b0:	f106 0410 	add.w	r4, r6, #16
 80062b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	1d33      	adds	r3, r6, #4
 80062be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c0:	6838      	ldr	r0, [r7, #0]
 80062c2:	f004 faff 	bl	800a8c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d102      	bne.n	80062e4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fa6c 	bl	80077bc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_PCD_Start+0x16>
 8006300:	2302      	movs	r3, #2
 8006302:	e012      	b.n	800632a <HAL_PCD_Start+0x3c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f004 faa5 	bl	800a860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f006 fa91 	bl	800c842 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f006 fa96 	bl	800c870 <USB_ReadInterrupts>
 8006344:	4603      	mov	r3, r0
 8006346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	d102      	bne.n	8006356 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb5b 	bl	8006a0c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f006 fa88 	bl	800c870 <USB_ReadInterrupts>
 8006360:	4603      	mov	r3, r0
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d112      	bne.n	8006392 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	b292      	uxth	r2, r2
 8006380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f008 fbc6 	bl	800eb16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800638a:	2100      	movs	r1, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f91e 	bl	80065ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f006 fa6a 	bl	800c870 <USB_ReadInterrupts>
 800639c:	4603      	mov	r3, r0
 800639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a6:	d10b      	bne.n	80063c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ba:	b292      	uxth	r2, r2
 80063bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f006 fa53 	bl	800c870 <USB_ReadInterrupts>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d4:	d10b      	bne.n	80063ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e8:	b292      	uxth	r2, r2
 80063ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f006 fa3c 	bl	800c870 <USB_ReadInterrupts>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d133      	bne.n	800646c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800640c:	b29a      	uxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0204 	bic.w	r2, r2, #4
 8006416:	b292      	uxth	r2, r2
 8006418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0208 	bic.w	r2, r2, #8
 800642e:	b292      	uxth	r2, r2
 8006430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f008 fd59 	bl	800ef00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f008 fb9a 	bl	800eb88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800645c:	b29a      	uxth	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006466:	b292      	uxth	r2, r2
 8006468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f006 f9fd 	bl	800c870 <USB_ReadInterrupts>
 8006476:	4603      	mov	r3, r0
 8006478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800647c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006480:	d126      	bne.n	80064d0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800648a:	b29a      	uxth	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0208 	orr.w	r2, r2, #8
 8006494:	b292      	uxth	r2, r2
 8006496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ac:	b292      	uxth	r2, r2
 80064ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0204 	orr.w	r2, r2, #4
 80064c4:	b292      	uxth	r2, r2
 80064c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f008 fb42 	bl	800eb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f006 f9cb 	bl	800c870 <USB_ReadInterrupts>
 80064da:	4603      	mov	r3, r0
 80064dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e0:	2b80      	cmp	r3, #128	; 0x80
 80064e2:	d13f      	bne.n	8006564 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064f6:	b292      	uxth	r2, r2
 80064f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d12b      	bne.n	800655e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800650e:	b29a      	uxth	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0204 	orr.w	r2, r2, #4
 8006518:	b292      	uxth	r2, r2
 800651a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0208 	orr.w	r2, r2, #8
 8006530:	b292      	uxth	r2, r2
 8006532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006546:	b29b      	uxth	r3, r3
 8006548:	089b      	lsrs	r3, r3, #2
 800654a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006554:	2101      	movs	r1, #1
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f008 fcd2 	bl	800ef00 <HAL_PCDEx_LPM_Callback>
 800655c:	e002      	b.n	8006564 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f008 faf8 	bl	800eb54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f006 f981 	bl	800c870 <USB_ReadInterrupts>
 800656e:	4603      	mov	r3, r0
 8006570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d10e      	bne.n	8006598 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800658c:	b292      	uxth	r2, r2
 800658e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f008 fab1 	bl	800eafa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f006 f967 	bl	800c870 <USB_ReadInterrupts>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ac:	d10b      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c0:	b292      	uxth	r2, r2
 80065c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_PCD_SetAddress+0x1a>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e013      	b.n	8006610 <HAL_PCD_SetAddress+0x42>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	4611      	mov	r1, r2
 8006600:	4618      	mov	r0, r3
 8006602:	f006 f90a 	bl	800c81a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	4608      	mov	r0, r1
 8006622:	4611      	mov	r1, r2
 8006624:	461a      	mov	r2, r3
 8006626:	4603      	mov	r3, r0
 8006628:	70fb      	strb	r3, [r7, #3]
 800662a:	460b      	mov	r3, r1
 800662c:	803b      	strh	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800663a:	2b00      	cmp	r3, #0
 800663c:	da0e      	bge.n	800665c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	705a      	strb	r2, [r3, #1]
 800665a:	e00e      	b.n	800667a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 0207 	and.w	r2, r3, #7
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	b2da      	uxtb	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006686:	883a      	ldrh	r2, [r7, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	78ba      	ldrb	r2, [r7, #2]
 8006690:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80066a4:	78bb      	ldrb	r3, [r7, #2]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d102      	bne.n	80066b0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_PCD_EP_Open+0xa6>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e00e      	b.n	80066dc <HAL_PCD_EP_Open+0xc4>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f004 f91b 	bl	800a908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80066da:	7afb      	ldrb	r3, [r7, #11]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	da0e      	bge.n	8006716 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	705a      	strb	r2, [r3, #1]
 8006714:	e00e      	b.n	8006734 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	f003 0207 	and.w	r2, r3, #7
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4413      	add	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	b2da      	uxtb	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_PCD_EP_Close+0x6a>
 800674a:	2302      	movs	r3, #2
 800674c:	e00e      	b.n	800676c <HAL_PCD_EP_Close+0x88>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	4618      	mov	r0, r3
 800675e:	f004 fc41 	bl	800afe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	460b      	mov	r3, r1
 8006782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	f003 0207 	and.w	r2, r3, #7
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6979      	ldr	r1, [r7, #20]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f004 fdf4 	bl	800b3be <USB_EPStartXfer>
 80067d6:	e005      	b.n	80067e4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	4618      	mov	r0, r3
 80067e0:	f004 fded 	bl	800b3be <USB_EPStartXfer>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	f003 0207 	and.w	r2, r3, #7
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	440b      	add	r3, r1
 800680c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006810:	681b      	ldr	r3, [r3, #0]
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	460b      	mov	r3, r1
 800682c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2201      	movs	r2, #1
 8006868:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	b2da      	uxtb	r2, r3
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	4618      	mov	r0, r3
 8006888:	f004 fd99 	bl	800b3be <USB_EPStartXfer>
 800688c:	e005      	b.n	800689a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	4618      	mov	r0, r3
 8006896:	f004 fd92 	bl	800b3be <USB_EPStartXfer>
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	f003 0207 	and.w	r2, r3, #7
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d901      	bls.n	80068c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e04c      	b.n	800695c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da0e      	bge.n	80068e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	705a      	strb	r2, [r3, #1]
 80068e6:	e00c      	b.n	8006902 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_PCD_EP_SetStall+0x7e>
 800691e:	2302      	movs	r3, #2
 8006920:	e01c      	b.n	800695c <HAL_PCD_EP_SetStall+0xb8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	4618      	mov	r0, r3
 8006932:	f005 fe73 	bl	800c61c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f005 ff9f 	bl	800c890 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	f003 020f 	and.w	r2, r3, #15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d901      	bls.n	8006982 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e040      	b.n	8006a04 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006986:	2b00      	cmp	r3, #0
 8006988:	da0e      	bge.n	80069a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	705a      	strb	r2, [r3, #1]
 80069a6:	e00e      	b.n	80069c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_PCD_EP_ClrStall+0x82>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e00e      	b.n	8006a04 <HAL_PCD_EP_ClrStall+0xa0>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f005 fe62 	bl	800c6be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a14:	e2d1      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 8152 	bne.w	8006cda <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d150      	bne.n	8006ae2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	81fb      	strh	r3, [r7, #14]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	89fb      	ldrh	r3, [r7, #14]
 8006a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3328      	adds	r3, #40	; 0x28
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	4413      	add	r3, r2
 8006a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f008 f80f 	bl	800eac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8282 	beq.w	8006fba <PCD_EP_ISR_Handler+0x5ae>
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 827d 	bne.w	8006fba <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ae0:	e26b      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d032      	beq.n	8006b62 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f005 fef8 	bl	800c92c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b48:	4013      	ands	r3, r2
 8006b4a:	823b      	strh	r3, [r7, #16]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	8a3a      	ldrh	r2, [r7, #16]
 8006b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b56:	b292      	uxth	r2, r2
 8006b58:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f007 ff86 	bl	800ea6c <HAL_PCD_SetupStageCallback>
 8006b60:	e22b      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f280 8227 	bge.w	8006fba <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b78:	4013      	ands	r3, r2
 8006b7a:	83bb      	strh	r3, [r7, #28]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	8bba      	ldrh	r2, [r7, #28]
 8006b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b86:	b292      	uxth	r2, r2
 8006b88:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d019      	beq.n	8006bee <PCD_EP_ISR_Handler+0x1e2>
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6959      	ldr	r1, [r3, #20]
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f005 feaa 	bl	800c92c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	441a      	add	r2, r3
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006be6:	2100      	movs	r1, #0
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f007 ff51 	bl	800ea90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	4413      	add	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d112      	bne.n	8006c3c <PCD_EP_ISR_Handler+0x230>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	801a      	strh	r2, [r3, #0]
 8006c3a:	e02f      	b.n	8006c9c <PCD_EP_ISR_Handler+0x290>
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b3e      	cmp	r3, #62	; 0x3e
 8006c42:	d813      	bhi.n	8006c6c <PCD_EP_ISR_Handler+0x260>
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <PCD_EP_ISR_Handler+0x252>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e017      	b.n	8006c9c <PCD_EP_ISR_Handler+0x290>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	633b      	str	r3, [r7, #48]	; 0x30
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <PCD_EP_ISR_Handler+0x27a>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	3b01      	subs	r3, #1
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	029b      	lsls	r3, r3, #10
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cac:	827b      	strh	r3, [r7, #18]
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cb4:	827b      	strh	r3, [r7, #18]
 8006cb6:	8a7b      	ldrh	r3, [r7, #18]
 8006cb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cbc:	827b      	strh	r3, [r7, #18]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	8a7b      	ldrh	r3, [r7, #18]
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
 8006cd8:	e16f      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006cec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f280 80e4 	bge.w	8006ebe <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d24:	b292      	uxth	r2, r2
 8006d26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006d28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	7b1b      	ldrb	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d120      	bne.n	8006d88 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8083 	beq.w	8006e7a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	6959      	ldr	r1, [r3, #20]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	88da      	ldrh	r2, [r3, #6]
 8006d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d82:	f005 fdd3 	bl	800c92c <USB_ReadPMA>
 8006d86:	e078      	b.n	8006e7a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	78db      	ldrb	r3, [r3, #3]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d108      	bne.n	8006da2 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d92:	461a      	mov	r2, r3
 8006d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f91d 	bl	8006fd6 <HAL_PCD_EP_DB_Receive>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006da0:	e06b      	b.n	8006e7a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01f      	beq.n	8006e3c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4413      	add	r3, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006e22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d028      	beq.n	8006e7a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	6959      	ldr	r1, [r3, #20]
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	891a      	ldrh	r2, [r3, #8]
 8006e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e36:	f005 fd79 	bl	800c92c <USB_ReadPMA>
 8006e3a:	e01e      	b.n	8006e7a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e60:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006e62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	6959      	ldr	r1, [r3, #20]
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	895a      	ldrh	r2, [r3, #10]
 8006e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e76:	f005 fd59 	bl	800c92c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e80:	441a      	add	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e8c:	441a      	add	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <PCD_EP_ISR_Handler+0x498>
 8006e9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d206      	bcs.n	8006eb2 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f007 fdf0 	bl	800ea90 <HAL_PCD_DataOutStageCallback>
 8006eb0:	e005      	b.n	8006ebe <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f004 fa80 	bl	800b3be <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d078      	beq.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8006ec8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	843b      	strh	r3, [r7, #32]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	8c3b      	ldrh	r3, [r7, #32]
 8006f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d108      	bne.n	8006f2e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d144      	bne.n	8006fae <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d13f      	bne.n	8006fae <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f52:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	8bfb      	ldrh	r3, [r7, #30]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d906      	bls.n	8006f6c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	8bfb      	ldrh	r3, [r7, #30]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	619a      	str	r2, [r3, #24]
 8006f6a:	e002      	b.n	8006f72 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	2200      	movs	r2, #0
 8006f70:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f007 fda0 	bl	800eac6 <HAL_PCD_DataInStageCallback>
 8006f86:	e018      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	8bfb      	ldrh	r3, [r7, #30]
 8006f8e:	441a      	add	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	8bfb      	ldrh	r3, [r7, #30]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f004 fa09 	bl	800b3be <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006fac:	e005      	b.n	8006fba <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f917 	bl	80071e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	b21b      	sxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f6ff ad25 	blt.w	8006a16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3738      	adds	r7, #56	; 0x38
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d07c      	beq.n	80070e8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	4413      	add	r3, r2
 8007008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007012:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	8b7b      	ldrh	r3, [r7, #26]
 800701a:	429a      	cmp	r2, r3
 800701c:	d306      	bcc.n	800702c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	8b7b      	ldrh	r3, [r7, #26]
 8007024:	1ad2      	subs	r2, r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	619a      	str	r2, [r3, #24]
 800702a:	e002      	b.n	8007032 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d123      	bne.n	8007082 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	833b      	strh	r3, [r7, #24]
 8007056:	8b3b      	ldrh	r3, [r7, #24]
 8007058:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800705c:	833b      	strh	r3, [r7, #24]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	8b3b      	ldrh	r3, [r7, #24]
 800706e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707e:	b29b      	uxth	r3, r3
 8007080:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01f      	beq.n	80070cc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	82fb      	strh	r3, [r7, #22]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	8afb      	ldrh	r3, [r7, #22]
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070cc:	8b7b      	ldrh	r3, [r7, #26]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8085 	beq.w	80071de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	891a      	ldrh	r2, [r3, #8]
 80070e0:	8b7b      	ldrh	r3, [r7, #26]
 80070e2:	f005 fc23 	bl	800c92c <USB_ReadPMA>
 80070e6:	e07a      	b.n	80071de <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	4413      	add	r3, r2
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	4413      	add	r3, r2
 8007102:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800710c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	8b7b      	ldrh	r3, [r7, #26]
 8007114:	429a      	cmp	r2, r3
 8007116:	d306      	bcc.n	8007126 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	8b7b      	ldrh	r3, [r7, #26]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	619a      	str	r2, [r3, #24]
 8007124:	e002      	b.n	800712c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d123      	bne.n	800717c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	83fb      	strh	r3, [r7, #30]
 8007150:	8bfb      	ldrh	r3, [r7, #30]
 8007152:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007156:	83fb      	strh	r3, [r7, #30]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	8bfb      	ldrh	r3, [r7, #30]
 8007168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007178:	b29b      	uxth	r3, r3
 800717a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d11f      	bne.n	80071c6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a0:	83bb      	strh	r3, [r7, #28]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	441a      	add	r2, r3
 80071b0:	8bbb      	ldrh	r3, [r7, #28]
 80071b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80071c6:	8b7b      	ldrh	r3, [r7, #26]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6959      	ldr	r1, [r3, #20]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	895a      	ldrh	r2, [r3, #10]
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	f005 fba7 	bl	800c92c <USB_ReadPMA>
    }
  }

  return count;
 80071de:	8b7b      	ldrh	r3, [r7, #26]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b094      	sub	sp, #80	; 0x50
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8136 	beq.w	800746e <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4413      	add	r3, r2
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	6812      	ldr	r2, [r2, #0]
 800721a:	4413      	add	r3, r2
 800721c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007226:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007232:	429a      	cmp	r2, r3
 8007234:	d907      	bls.n	8007246 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	619a      	str	r2, [r3, #24]
 8007244:	e002      	b.n	800724c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12c      	bne.n	80072ae <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	4619      	mov	r1, r3
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f007 fc33 	bl	800eac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8238 	beq.w	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	82fb      	strh	r3, [r7, #22]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	8afb      	ldrh	r3, [r7, #22]
 8007298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	8013      	strh	r3, [r2, #0]
 80072ac:	e216      	b.n	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01f      	beq.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072fe:	2b01      	cmp	r3, #1
 8007300:	f040 81ec 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	695a      	ldr	r2, [r3, #20]
 8007308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800730c:	441a      	add	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800731a:	441a      	add	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	429a      	cmp	r2, r3
 800732a:	d309      	bcc.n	8007340 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	621a      	str	r2, [r3, #32]
 800733e:	e015      	b.n	800736c <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 8007348:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007356:	e009      	b.n	800736c <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d155      	bne.n	8007420 <HAL_PCD_EP_DB_Transmit+0x238>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	00da      	lsls	r2, r3, #3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d112      	bne.n	80073c8 <HAL_PCD_EP_DB_Transmit+0x1e0>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e047      	b.n	8007458 <HAL_PCD_EP_DB_Transmit+0x270>
 80073c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ca:	2b3e      	cmp	r3, #62	; 0x3e
 80073cc:	d811      	bhi.n	80073f2 <HAL_PCD_EP_DB_Transmit+0x20a>
 80073ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d0:	085b      	lsrs	r3, r3, #1
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_PCD_EP_DB_Transmit+0x1fc>
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	3301      	adds	r3, #1
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	029b      	lsls	r3, r3, #10
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e032      	b.n	8007458 <HAL_PCD_EP_DB_Transmit+0x270>
 80073f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <HAL_PCD_EP_DB_Transmit+0x220>
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	3b01      	subs	r3, #1
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29b      	uxth	r3, r3
 8007410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007418:	b29a      	uxth	r2, r3
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	e01b      	b.n	8007458 <HAL_PCD_EP_DB_Transmit+0x270>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d117      	bne.n	8007458 <HAL_PCD_EP_DB_Transmit+0x270>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	4413      	add	r3, r2
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	00da      	lsls	r2, r3, #3
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	4413      	add	r3, r2
 800744a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	b29a      	uxth	r2, r3
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6959      	ldr	r1, [r3, #20]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	891a      	ldrh	r2, [r3, #8]
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	b29b      	uxth	r3, r3
 8007468:	f005 fa1e 	bl	800c8a8 <USB_WritePMA>
 800746c:	e136      	b.n	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	4413      	add	r3, r2
 8007488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007492:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800749e:	429a      	cmp	r2, r3
 80074a0:	d307      	bcc.n	80074b2 <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	619a      	str	r2, [r3, #24]
 80074b0:	e002      	b.n	80074b8 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2200      	movs	r2, #0
 80074b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d12e      	bne.n	800751e <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f007 fafd 	bl	800eac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80074cc:	88fb      	ldrh	r3, [r7, #6]
 80074ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 8102 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	441a      	add	r2, r3
 8007504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
 800751c:	e0de      	b.n	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11f      	bne.n	8007568 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	867b      	strh	r3, [r7, #50]	; 0x32
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007564:	b29b      	uxth	r3, r3
 8007566:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800756e:	2b01      	cmp	r3, #1
 8007570:	f040 80b4 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	695a      	ldr	r2, [r3, #20]
 8007578:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800757c:	441a      	add	r2, r3
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800758a:	441a      	add	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	429a      	cmp	r2, r3
 800759a:	d309      	bcc.n	80075b0 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6a1a      	ldr	r2, [r3, #32]
 80075a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	621a      	str	r2, [r3, #32]
 80075ae:	e015      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d107      	bne.n	80075c8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 80075b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80075bc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075c6:	e009      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	643b      	str	r3, [r7, #64]	; 0x40
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d155      	bne.n	8007696 <HAL_PCD_EP_DB_Transmit+0x4ae>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	4413      	add	r3, r2
 8007600:	63bb      	str	r3, [r7, #56]	; 0x38
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	00da      	lsls	r2, r3, #3
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	4413      	add	r3, r2
 800760c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007614:	2b00      	cmp	r3, #0
 8007616:	d112      	bne.n	800763e <HAL_PCD_EP_DB_Transmit+0x456>
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007622:	b29a      	uxth	r2, r3
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007636:	b29a      	uxth	r2, r3
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	e044      	b.n	80076c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800763e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007640:	2b3e      	cmp	r3, #62	; 0x3e
 8007642:	d811      	bhi.n	8007668 <HAL_PCD_EP_DB_Transmit+0x480>
 8007644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_PCD_EP_DB_Transmit+0x472>
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	3301      	adds	r3, #1
 8007658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	b29b      	uxth	r3, r3
 800765e:	029b      	lsls	r3, r3, #10
 8007660:	b29a      	uxth	r2, r3
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e02f      	b.n	80076c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8007668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <HAL_PCD_EP_DB_Transmit+0x496>
 8007678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767a:	3b01      	subs	r3, #1
 800767c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	b29b      	uxth	r3, r3
 8007682:	029b      	lsls	r3, r3, #10
 8007684:	b29b      	uxth	r3, r3
 8007686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768e:	b29a      	uxth	r2, r3
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e018      	b.n	80076c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d114      	bne.n	80076c8 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	4413      	add	r3, r2
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	00da      	lsls	r2, r3, #3
 80076b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6959      	ldr	r1, [r3, #20]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	895a      	ldrh	r2, [r3, #10]
 80076d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f005 f8e6 	bl	800c8a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f6:	82bb      	strh	r3, [r7, #20]
 80076f8:	8abb      	ldrh	r3, [r7, #20]
 80076fa:	f083 0310 	eor.w	r3, r3, #16
 80076fe:	82bb      	strh	r3, [r7, #20]
 8007700:	8abb      	ldrh	r3, [r7, #20]
 8007702:	f083 0320 	eor.w	r3, r3, #32
 8007706:	82bb      	strh	r3, [r7, #20]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	8abb      	ldrh	r3, [r7, #20]
 8007718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007728:	b29b      	uxth	r3, r3
 800772a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3750      	adds	r7, #80	; 0x50
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007736:	b480      	push	{r7}
 8007738:	b087      	sub	sp, #28
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	817b      	strh	r3, [r7, #10]
 8007744:	4613      	mov	r3, r2
 8007746:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007748:	897b      	ldrh	r3, [r7, #10]
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007754:	897b      	ldrh	r3, [r7, #10]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e009      	b.n	8007780 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800776c:	897a      	ldrh	r2, [r7, #10]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007780:	893b      	ldrh	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d107      	bne.n	8007796 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2200      	movs	r2, #0
 800778a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	b29a      	uxth	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	80da      	strh	r2, [r3, #6]
 8007794:	e00b      	b.n	80077ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2201      	movs	r2, #1
 800779a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	0c1b      	lsrs	r3, r3, #16
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f043 0301 	orr.w	r3, r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f043 0302 	orr.w	r3, r3, #2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d141      	bne.n	80078a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800781e:	4b4b      	ldr	r3, [pc, #300]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782a:	d131      	bne.n	8007890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800782c:	4b47      	ldr	r3, [pc, #284]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800782e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007832:	4a46      	ldr	r2, [pc, #280]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800783c:	4b43      	ldr	r3, [pc, #268]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007844:	4a41      	ldr	r2, [pc, #260]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800784a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800784c:	4b40      	ldr	r3, [pc, #256]	; (8007950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2232      	movs	r2, #50	; 0x32
 8007852:	fb02 f303 	mul.w	r3, r2, r3
 8007856:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	0c9b      	lsrs	r3, r3, #18
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007862:	e002      	b.n	800786a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800786a:	4b38      	ldr	r3, [pc, #224]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d102      	bne.n	800787e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f2      	bne.n	8007864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800787e:	4b33      	ldr	r3, [pc, #204]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788a:	d158      	bne.n	800793e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e057      	b.n	8007940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007890:	4b2e      	ldr	r3, [pc, #184]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007896:	4a2d      	ldr	r2, [pc, #180]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80078a0:	e04d      	b.n	800793e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a8:	d141      	bne.n	800792e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078aa:	4b28      	ldr	r3, [pc, #160]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b6:	d131      	bne.n	800791c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078be:	4a23      	ldr	r2, [pc, #140]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078c8:	4b20      	ldr	r3, [pc, #128]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078d0:	4a1e      	ldr	r2, [pc, #120]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2232      	movs	r2, #50	; 0x32
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	0c9b      	lsrs	r3, r3, #18
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ee:	e002      	b.n	80078f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007902:	d102      	bne.n	800790a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f2      	bne.n	80078f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007916:	d112      	bne.n	800793e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e011      	b.n	8007940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007922:	4a0a      	ldr	r2, [pc, #40]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800792c:	e007      	b.n	800793e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007936:	4a05      	ldr	r2, [pc, #20]	; (800794c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800793c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40007000 	.word	0x40007000
 8007950:	20000194 	.word	0x20000194
 8007954:	431bde83 	.word	0x431bde83

08007958 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4a04      	ldr	r2, [pc, #16]	; (8007974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007966:	6093      	str	r3, [r2, #8]
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40007000 	.word	0x40007000

08007978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e308      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d075      	beq.n	8007a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007996:	4ba3      	ldr	r3, [pc, #652]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 030c 	and.w	r3, r3, #12
 800799e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079a0:	4ba0      	ldr	r3, [pc, #640]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b0c      	cmp	r3, #12
 80079ae:	d102      	bne.n	80079b6 <HAL_RCC_OscConfig+0x3e>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d002      	beq.n	80079bc <HAL_RCC_OscConfig+0x44>
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079bc:	4b99      	ldr	r3, [pc, #612]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d05b      	beq.n	8007a80 <HAL_RCC_OscConfig+0x108>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d157      	bne.n	8007a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e2e3      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d106      	bne.n	80079ec <HAL_RCC_OscConfig+0x74>
 80079de:	4b91      	ldr	r3, [pc, #580]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a90      	ldr	r2, [pc, #576]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e01d      	b.n	8007a28 <HAL_RCC_OscConfig+0xb0>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCC_OscConfig+0x98>
 80079f6:	4b8b      	ldr	r3, [pc, #556]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a8a      	ldr	r2, [pc, #552]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a87      	ldr	r2, [pc, #540]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e00b      	b.n	8007a28 <HAL_RCC_OscConfig+0xb0>
 8007a10:	4b84      	ldr	r3, [pc, #528]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a83      	ldr	r2, [pc, #524]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	4b81      	ldr	r3, [pc, #516]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a80      	ldr	r2, [pc, #512]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d013      	beq.n	8007a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fb fd86 	bl	8003540 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a38:	f7fb fd82 	bl	8003540 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b64      	cmp	r3, #100	; 0x64
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e2a8      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4a:	4b76      	ldr	r3, [pc, #472]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f0      	beq.n	8007a38 <HAL_RCC_OscConfig+0xc0>
 8007a56:	e014      	b.n	8007a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a58:	f7fb fd72 	bl	8003540 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a60:	f7fb fd6e 	bl	8003540 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b64      	cmp	r3, #100	; 0x64
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e294      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a72:	4b6c      	ldr	r3, [pc, #432]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1f0      	bne.n	8007a60 <HAL_RCC_OscConfig+0xe8>
 8007a7e:	e000      	b.n	8007a82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d075      	beq.n	8007b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a8e:	4b65      	ldr	r3, [pc, #404]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 030c 	and.w	r3, r3, #12
 8007a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a98:	4b62      	ldr	r3, [pc, #392]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d102      	bne.n	8007aae <HAL_RCC_OscConfig+0x136>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d002      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x13c>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d11f      	bne.n	8007af4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_OscConfig+0x154>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e267      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007acc:	4b55      	ldr	r3, [pc, #340]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	061b      	lsls	r3, r3, #24
 8007ada:	4952      	ldr	r1, [pc, #328]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ae0:	4b51      	ldr	r3, [pc, #324]	; (8007c28 <HAL_RCC_OscConfig+0x2b0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fb fcdf 	bl	80034a8 <HAL_InitTick>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d043      	beq.n	8007b78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e253      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d023      	beq.n	8007b44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007afc:	4b49      	ldr	r3, [pc, #292]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a48      	ldr	r2, [pc, #288]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7fb fd1a 	bl	8003540 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b10:	f7fb fd16 	bl	8003540 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e23c      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b22:	4b40      	ldr	r3, [pc, #256]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0f0      	beq.n	8007b10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	061b      	lsls	r3, r3, #24
 8007b3c:	4939      	ldr	r1, [pc, #228]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	604b      	str	r3, [r1, #4]
 8007b42:	e01a      	b.n	8007b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b44:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a36      	ldr	r2, [pc, #216]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fb fcf6 	bl	8003540 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b58:	f7fb fcf2 	bl	8003540 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e218      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b6a:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x1e0>
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d03c      	beq.n	8007c00 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b8e:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b94:	4a23      	ldr	r2, [pc, #140]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9e:	f7fb fccf 	bl	8003540 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba6:	f7fb fccb 	bl	8003540 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e1f1      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0ef      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x22e>
 8007bc6:	e01b      	b.n	8007c00 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bc8:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bce:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd8:	f7fb fcb2 	bl	8003540 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007be0:	f7fb fcae 	bl	8003540 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e1d4      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1ef      	bne.n	8007be0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80ab 	beq.w	8007d64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c12:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <HAL_RCC_OscConfig+0x2ac>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_RCC_OscConfig+0x2b4>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e005      	b.n	8007c2e <HAL_RCC_OscConfig+0x2b6>
 8007c22:	bf00      	nop
 8007c24:	40021000 	.word	0x40021000
 8007c28:	20000198 	.word	0x20000198
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c32:	4baf      	ldr	r3, [pc, #700]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	4aae      	ldr	r2, [pc, #696]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c3e:	4bac      	ldr	r3, [pc, #688]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c4e:	4ba9      	ldr	r3, [pc, #676]	; (8007ef4 <HAL_RCC_OscConfig+0x57c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d118      	bne.n	8007c8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c5a:	4ba6      	ldr	r3, [pc, #664]	; (8007ef4 <HAL_RCC_OscConfig+0x57c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4aa5      	ldr	r2, [pc, #660]	; (8007ef4 <HAL_RCC_OscConfig+0x57c>)
 8007c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c66:	f7fb fc6b 	bl	8003540 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c6e:	f7fb fc67 	bl	8003540 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e18d      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c80:	4b9c      	ldr	r3, [pc, #624]	; (8007ef4 <HAL_RCC_OscConfig+0x57c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d108      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x32e>
 8007c94:	4b96      	ldr	r3, [pc, #600]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	4a95      	ldr	r2, [pc, #596]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ca4:	e024      	b.n	8007cf0 <HAL_RCC_OscConfig+0x378>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b05      	cmp	r3, #5
 8007cac:	d110      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x358>
 8007cae:	4b90      	ldr	r3, [pc, #576]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	4a8e      	ldr	r2, [pc, #568]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cb6:	f043 0304 	orr.w	r3, r3, #4
 8007cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cbe:	4b8c      	ldr	r3, [pc, #560]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	4a8a      	ldr	r2, [pc, #552]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cce:	e00f      	b.n	8007cf0 <HAL_RCC_OscConfig+0x378>
 8007cd0:	4b87      	ldr	r3, [pc, #540]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	4a86      	ldr	r2, [pc, #536]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ce0:	4b83      	ldr	r3, [pc, #524]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	4a82      	ldr	r2, [pc, #520]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ce8:	f023 0304 	bic.w	r3, r3, #4
 8007cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d016      	beq.n	8007d26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fb fc22 	bl	8003540 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cfe:	e00a      	b.n	8007d16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d00:	f7fb fc1e 	bl	8003540 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e142      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d16:	4b76      	ldr	r3, [pc, #472]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0ed      	beq.n	8007d00 <HAL_RCC_OscConfig+0x388>
 8007d24:	e015      	b.n	8007d52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d26:	f7fb fc0b 	bl	8003540 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d2c:	e00a      	b.n	8007d44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fb fc07 	bl	8003540 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e12b      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d44:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1ed      	bne.n	8007d2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d105      	bne.n	8007d64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d58:	4b65      	ldr	r3, [pc, #404]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5c:	4a64      	ldr	r2, [pc, #400]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d03c      	beq.n	8007dea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01c      	beq.n	8007db2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d78:	4b5d      	ldr	r3, [pc, #372]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d7e:	4a5c      	ldr	r2, [pc, #368]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d88:	f7fb fbda 	bl	8003540 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d90:	f7fb fbd6 	bl	8003540 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e0fc      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007da2:	4b53      	ldr	r3, [pc, #332]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0ef      	beq.n	8007d90 <HAL_RCC_OscConfig+0x418>
 8007db0:	e01b      	b.n	8007dea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007db2:	4b4f      	ldr	r3, [pc, #316]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007db8:	4a4d      	ldr	r2, [pc, #308]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc2:	f7fb fbbd 	bl	8003540 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dca:	f7fb fbb9 	bl	8003540 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e0df      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ddc:	4b44      	ldr	r3, [pc, #272]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1ef      	bne.n	8007dca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80d3 	beq.w	8007f9a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007df4:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 030c 	and.w	r3, r3, #12
 8007dfc:	2b0c      	cmp	r3, #12
 8007dfe:	f000 808d 	beq.w	8007f1c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d15a      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e0a:	4b39      	ldr	r3, [pc, #228]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a38      	ldr	r2, [pc, #224]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e16:	f7fb fb93 	bl	8003540 <HAL_GetTick>
 8007e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e1e:	f7fb fb8f 	bl	8003540 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0b5      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e30:	4b2f      	ldr	r3, [pc, #188]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <HAL_RCC_OscConfig+0x580>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6a11      	ldr	r1, [r2, #32]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	0112      	lsls	r2, r2, #4
 8007e50:	4311      	orrs	r1, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007e56:	0212      	lsls	r2, r2, #8
 8007e58:	4311      	orrs	r1, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e5e:	0852      	lsrs	r2, r2, #1
 8007e60:	3a01      	subs	r2, #1
 8007e62:	0552      	lsls	r2, r2, #21
 8007e64:	4311      	orrs	r1, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e6a:	0852      	lsrs	r2, r2, #1
 8007e6c:	3a01      	subs	r2, #1
 8007e6e:	0652      	lsls	r2, r2, #25
 8007e70:	4311      	orrs	r1, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e76:	06d2      	lsls	r2, r2, #27
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	491d      	ldr	r1, [pc, #116]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e80:	4b1b      	ldr	r3, [pc, #108]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e8c:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4a17      	ldr	r2, [pc, #92]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e98:	f7fb fb52 	bl	8003540 <HAL_GetTick>
 8007e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea0:	f7fb fb4e 	bl	8003540 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e074      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x528>
 8007ebe:	e06c      	b.n	8007f9a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ecc:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	4a07      	ldr	r2, [pc, #28]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <HAL_RCC_OscConfig+0x578>)
 8007ede:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fb fb2a 	bl	8003540 <HAL_GetTick>
 8007eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eee:	e00e      	b.n	8007f0e <HAL_RCC_OscConfig+0x596>
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	40007000 	.word	0x40007000
 8007ef8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007efc:	f7fb fb20 	bl	8003540 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e046      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f0e:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_RCC_OscConfig+0x62c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1f0      	bne.n	8007efc <HAL_RCC_OscConfig+0x584>
 8007f1a:	e03e      	b.n	8007f9a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e039      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007f28:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <HAL_RCC_OscConfig+0x62c>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f003 0203 	and.w	r2, r3, #3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d12c      	bne.n	8007f96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	3b01      	subs	r3, #1
 8007f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d123      	bne.n	8007f96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d11b      	bne.n	8007f96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d113      	bne.n	8007f96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d109      	bne.n	8007f96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d001      	beq.n	8007f9a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3720      	adds	r7, #32
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40021000 	.word	0x40021000

08007fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e11e      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fc0:	4b91      	ldr	r3, [pc, #580]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d910      	bls.n	8007ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fce:	4b8e      	ldr	r3, [pc, #568]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 020f 	bic.w	r2, r3, #15
 8007fd6:	498c      	ldr	r1, [pc, #560]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fde:	4b8a      	ldr	r3, [pc, #552]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e106      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d073      	beq.n	80080e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b03      	cmp	r3, #3
 8008002:	d129      	bne.n	8008058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008004:	4b81      	ldr	r3, [pc, #516]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0f4      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008014:	f000 f99e 	bl	8008354 <RCC_GetSysClockFreqFromPLLSource>
 8008018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4a7c      	ldr	r2, [pc, #496]	; (8008210 <HAL_RCC_ClockConfig+0x268>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d93f      	bls.n	80080a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008022:	4b7a      	ldr	r3, [pc, #488]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008036:	2b00      	cmp	r3, #0
 8008038:	d033      	beq.n	80080a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800803e:	2b00      	cmp	r3, #0
 8008040:	d12f      	bne.n	80080a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008042:	4b72      	ldr	r3, [pc, #456]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800804a:	4a70      	ldr	r2, [pc, #448]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	e024      	b.n	80080a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d107      	bne.n	8008070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008060:	4b6a      	ldr	r3, [pc, #424]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d109      	bne.n	8008080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0c6      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008070:	4b66      	ldr	r3, [pc, #408]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e0be      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008080:	f000 f8ce 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 8008084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	4a61      	ldr	r2, [pc, #388]	; (8008210 <HAL_RCC_ClockConfig+0x268>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d909      	bls.n	80080a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800808e:	4b5f      	ldr	r3, [pc, #380]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008096:	4a5d      	ldr	r2, [pc, #372]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800809e:	2380      	movs	r3, #128	; 0x80
 80080a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080a2:	4b5a      	ldr	r3, [pc, #360]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f023 0203 	bic.w	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	4957      	ldr	r1, [pc, #348]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b4:	f7fb fa44 	bl	8003540 <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ba:	e00a      	b.n	80080d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080bc:	f7fb fa40 	bl	8003540 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e095      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d2:	4b4e      	ldr	r3, [pc, #312]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 020c 	and.w	r2, r3, #12
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d1eb      	bne.n	80080bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d023      	beq.n	8008138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080fc:	4b43      	ldr	r3, [pc, #268]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	4a42      	ldr	r2, [pc, #264]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008114:	4b3d      	ldr	r3, [pc, #244]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800811c:	4a3b      	ldr	r2, [pc, #236]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 800811e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008124:	4b39      	ldr	r3, [pc, #228]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4936      	ldr	r1, [pc, #216]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008132:	4313      	orrs	r3, r2
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	e008      	b.n	800814a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d105      	bne.n	800814a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800813e:	4b33      	ldr	r3, [pc, #204]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	4a32      	ldr	r2, [pc, #200]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 8008144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800814a:	4b2f      	ldr	r3, [pc, #188]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d21d      	bcs.n	8008194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008158:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f023 020f 	bic.w	r2, r3, #15
 8008160:	4929      	ldr	r1, [pc, #164]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008168:	f7fb f9ea 	bl	8003540 <HAL_GetTick>
 800816c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	e00a      	b.n	8008186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008170:	f7fb f9e6 	bl	8003540 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e03b      	b.n	80081fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008186:	4b20      	ldr	r3, [pc, #128]	; (8008208 <HAL_RCC_ClockConfig+0x260>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d1ed      	bne.n	8008170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4917      	ldr	r1, [pc, #92]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	490f      	ldr	r1, [pc, #60]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081d2:	f000 f825 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 80081d6:	4602      	mov	r2, r0
 80081d8:	4b0c      	ldr	r3, [pc, #48]	; (800820c <HAL_RCC_ClockConfig+0x264>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	490c      	ldr	r1, [pc, #48]	; (8008214 <HAL_RCC_ClockConfig+0x26c>)
 80081e4:	5ccb      	ldrb	r3, [r1, r3]
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	fa22 f303 	lsr.w	r3, r2, r3
 80081ee:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <HAL_RCC_ClockConfig+0x270>)
 80081f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <HAL_RCC_ClockConfig+0x274>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fb f956 	bl	80034a8 <HAL_InitTick>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40022000 	.word	0x40022000
 800820c:	40021000 	.word	0x40021000
 8008210:	04c4b400 	.word	0x04c4b400
 8008214:	0800fe80 	.word	0x0800fe80
 8008218:	20000194 	.word	0x20000194
 800821c:	20000198 	.word	0x20000198

08008220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008226:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
 800822e:	2b04      	cmp	r3, #4
 8008230:	d102      	bne.n	8008238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008232:	4b2a      	ldr	r3, [pc, #168]	; (80082dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	e047      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008238:	4b27      	ldr	r3, [pc, #156]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 030c 	and.w	r3, r3, #12
 8008240:	2b08      	cmp	r3, #8
 8008242:	d102      	bne.n	800824a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008244:	4b26      	ldr	r3, [pc, #152]	; (80082e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	e03e      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800824a:	4b23      	ldr	r3, [pc, #140]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 030c 	and.w	r3, r3, #12
 8008252:	2b0c      	cmp	r3, #12
 8008254:	d136      	bne.n	80082c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008256:	4b20      	ldr	r3, [pc, #128]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	091b      	lsrs	r3, r3, #4
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	3301      	adds	r3, #1
 800826c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d10c      	bne.n	800828e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008274:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	fbb2 f3f3 	udiv	r3, r2, r3
 800827c:	4a16      	ldr	r2, [pc, #88]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800827e:	68d2      	ldr	r2, [r2, #12]
 8008280:	0a12      	lsrs	r2, r2, #8
 8008282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	617b      	str	r3, [r7, #20]
      break;
 800828c:	e00c      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800828e:	4a13      	ldr	r2, [pc, #76]	; (80082dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008298:	68d2      	ldr	r2, [r2, #12]
 800829a:	0a12      	lsrs	r2, r2, #8
 800829c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	617b      	str	r3, [r7, #20]
      break;
 80082a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082a8:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	0e5b      	lsrs	r3, r3, #25
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	3301      	adds	r3, #1
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	e001      	b.n	80082c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80082c8:	693b      	ldr	r3, [r7, #16]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40021000 	.word	0x40021000
 80082dc:	00f42400 	.word	0x00f42400
 80082e0:	007a1200 	.word	0x007a1200

080082e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000194 	.word	0x20000194

080082fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008300:	f7ff fff0 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8008304:	4602      	mov	r2, r0
 8008306:	4b06      	ldr	r3, [pc, #24]	; (8008320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	0a1b      	lsrs	r3, r3, #8
 800830c:	f003 0307 	and.w	r3, r3, #7
 8008310:	4904      	ldr	r1, [pc, #16]	; (8008324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008312:	5ccb      	ldrb	r3, [r1, r3]
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800831c:	4618      	mov	r0, r3
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40021000 	.word	0x40021000
 8008324:	0800fe90 	.word	0x0800fe90

08008328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800832c:	f7ff ffda 	bl	80082e4 <HAL_RCC_GetHCLKFreq>
 8008330:	4602      	mov	r2, r0
 8008332:	4b06      	ldr	r3, [pc, #24]	; (800834c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	0adb      	lsrs	r3, r3, #11
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	4904      	ldr	r1, [pc, #16]	; (8008350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800833e:	5ccb      	ldrb	r3, [r1, r3]
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40021000 	.word	0x40021000
 8008350:	0800fe90 	.word	0x0800fe90

08008354 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800835a:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008364:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	091b      	lsrs	r3, r3, #4
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b03      	cmp	r3, #3
 8008376:	d10c      	bne.n	8008392 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008380:	4a14      	ldr	r2, [pc, #80]	; (80083d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008382:	68d2      	ldr	r2, [r2, #12]
 8008384:	0a12      	lsrs	r2, r2, #8
 8008386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800838a:	fb02 f303 	mul.w	r3, r2, r3
 800838e:	617b      	str	r3, [r7, #20]
    break;
 8008390:	e00c      	b.n	80083ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008392:	4a12      	ldr	r2, [pc, #72]	; (80083dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800839c:	68d2      	ldr	r2, [r2, #12]
 800839e:	0a12      	lsrs	r2, r2, #8
 80083a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083a4:	fb02 f303 	mul.w	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]
    break;
 80083aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	0e5b      	lsrs	r3, r3, #25
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	3301      	adds	r3, #1
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80083c6:	687b      	ldr	r3, [r7, #4]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	40021000 	.word	0x40021000
 80083d8:	007a1200 	.word	0x007a1200
 80083dc:	00f42400 	.word	0x00f42400

080083e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083e8:	2300      	movs	r3, #0
 80083ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083ec:	2300      	movs	r3, #0
 80083ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8098 	beq.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083fe:	2300      	movs	r3, #0
 8008400:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008402:	4b43      	ldr	r3, [pc, #268]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10d      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800840e:	4b40      	ldr	r3, [pc, #256]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	4a3f      	ldr	r2, [pc, #252]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008418:	6593      	str	r3, [r2, #88]	; 0x58
 800841a:	4b3d      	ldr	r3, [pc, #244]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	60bb      	str	r3, [r7, #8]
 8008424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008426:	2301      	movs	r3, #1
 8008428:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800842a:	4b3a      	ldr	r3, [pc, #232]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a39      	ldr	r2, [pc, #228]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008436:	f7fb f883 	bl	8003540 <HAL_GetTick>
 800843a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843c:	e009      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800843e:	f7fb f87f 	bl	8003540 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d902      	bls.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	74fb      	strb	r3, [r7, #19]
        break;
 8008450:	e005      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008452:	4b30      	ldr	r3, [pc, #192]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ef      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800845e:	7cfb      	ldrb	r3, [r7, #19]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d159      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008464:	4b2a      	ldr	r3, [pc, #168]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800846e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	429a      	cmp	r2, r3
 800847e:	d019      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008480:	4b23      	ldr	r3, [pc, #140]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800848c:	4b20      	ldr	r3, [pc, #128]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800848e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008492:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800849c:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a2:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80084ac:	4a18      	ldr	r2, [pc, #96]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084be:	f7fb f83f 	bl	8003540 <HAL_GetTick>
 80084c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084c4:	e00b      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084c6:	f7fb f83b 	bl	8003540 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d902      	bls.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	74fb      	strb	r3, [r7, #19]
            break;
 80084dc:	e006      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0ec      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80084ec:	7cfb      	ldrb	r3, [r7, #19]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80084f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	4903      	ldr	r1, [pc, #12]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008508:	e008      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800850a:	7cfb      	ldrb	r3, [r7, #19]
 800850c:	74bb      	strb	r3, [r7, #18]
 800850e:	e005      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008510:	40021000 	.word	0x40021000
 8008514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	7cfb      	ldrb	r3, [r7, #19]
 800851a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800851c:	7c7b      	ldrb	r3, [r7, #17]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d105      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008522:	4ba6      	ldr	r3, [pc, #664]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008526:	4aa5      	ldr	r2, [pc, #660]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800852c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800853a:	4ba0      	ldr	r3, [pc, #640]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008540:	f023 0203 	bic.w	r2, r3, #3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	499c      	ldr	r1, [pc, #624]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800855c:	4b97      	ldr	r3, [pc, #604]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008562:	f023 020c 	bic.w	r2, r3, #12
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	4994      	ldr	r1, [pc, #592]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800857e:	4b8f      	ldr	r3, [pc, #572]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	498b      	ldr	r1, [pc, #556]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085a0:	4b86      	ldr	r3, [pc, #536]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	4983      	ldr	r1, [pc, #524]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085c2:	4b7e      	ldr	r3, [pc, #504]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	497a      	ldr	r1, [pc, #488]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085e4:	4b75      	ldr	r3, [pc, #468]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	4972      	ldr	r1, [pc, #456]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008606:	4b6d      	ldr	r3, [pc, #436]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	4969      	ldr	r1, [pc, #420]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008616:	4313      	orrs	r3, r2
 8008618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008628:	4b64      	ldr	r3, [pc, #400]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	4961      	ldr	r1, [pc, #388]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008638:	4313      	orrs	r3, r2
 800863a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800864a:	4b5c      	ldr	r3, [pc, #368]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800864c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	4958      	ldr	r1, [pc, #352]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008668:	2b00      	cmp	r3, #0
 800866a:	d015      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800866c:	4b53      	ldr	r3, [pc, #332]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800866e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	4950      	ldr	r1, [pc, #320]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800867c:	4313      	orrs	r3, r2
 800867e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800868a:	d105      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800868c:	4b4b      	ldr	r3, [pc, #300]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	4a4a      	ldr	r2, [pc, #296]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d015      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80086a4:	4b45      	ldr	r3, [pc, #276]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	4942      	ldr	r1, [pc, #264]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c2:	d105      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086c4:	4b3d      	ldr	r3, [pc, #244]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	4a3c      	ldr	r2, [pc, #240]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d015      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086dc:	4b37      	ldr	r3, [pc, #220]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4934      	ldr	r1, [pc, #208]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086fa:	d105      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086fc:	4b2f      	ldr	r3, [pc, #188]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4a2e      	ldr	r2, [pc, #184]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d015      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008714:	4b29      	ldr	r3, [pc, #164]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	4926      	ldr	r1, [pc, #152]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008732:	d105      	bne.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008734:	4b21      	ldr	r3, [pc, #132]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a20      	ldr	r2, [pc, #128]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800873a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800873e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d015      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	4918      	ldr	r1, [pc, #96]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800876a:	d105      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800876c:	4b13      	ldr	r3, [pc, #76]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	4a12      	ldr	r2, [pc, #72]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008776:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d015      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008784:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	490a      	ldr	r1, [pc, #40]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a2:	d105      	bne.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	4a04      	ldr	r2, [pc, #16]	; (80087bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80087b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	40021000 	.word	0x40021000

080087c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e049      	b.n	8008866 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fa fcc8 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f000 fb3e 	bl	8008e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d001      	beq.n	8008888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e04a      	b.n	800891e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a21      	ldr	r2, [pc, #132]	; (800892c <HAL_TIM_Base_Start_IT+0xbc>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d018      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0x6c>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b2:	d013      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0x6c>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <HAL_TIM_Base_Start_IT+0xc0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00e      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0x6c>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1c      	ldr	r2, [pc, #112]	; (8008934 <HAL_TIM_Base_Start_IT+0xc4>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d009      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0x6c>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <HAL_TIM_Base_Start_IT+0xc8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d004      	beq.n	80088dc <HAL_TIM_Base_Start_IT+0x6c>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a19      	ldr	r2, [pc, #100]	; (800893c <HAL_TIM_Base_Start_IT+0xcc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d115      	bne.n	8008908 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	4b17      	ldr	r3, [pc, #92]	; (8008940 <HAL_TIM_Base_Start_IT+0xd0>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b06      	cmp	r3, #6
 80088ec:	d015      	beq.n	800891a <HAL_TIM_Base_Start_IT+0xaa>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f4:	d011      	beq.n	800891a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008906:	e008      	b.n	800891a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0201 	orr.w	r2, r2, #1
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	e000      	b.n	800891c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800891a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	40012c00 	.word	0x40012c00
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800
 8008938:	40013400 	.word	0x40013400
 800893c:	40014000 	.word	0x40014000
 8008940:	00010007 	.word	0x00010007

08008944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d122      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b02      	cmp	r3, #2
 8008966:	d11b      	bne.n	80089a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0202 	mvn.w	r2, #2
 8008970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa5c 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa4e 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa5f 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d122      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d11b      	bne.n	80089f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f06f 0204 	mvn.w	r2, #4
 80089c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa32 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 80089e0:	e005      	b.n	80089ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa24 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fa35 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d122      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d11b      	bne.n	8008a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0208 	mvn.w	r2, #8
 8008a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2204      	movs	r2, #4
 8008a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa08 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008a34:	e005      	b.n	8008a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f9fa 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa0b 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	2b10      	cmp	r3, #16
 8008a54:	d122      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f06f 0210 	mvn.w	r2, #16
 8008a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2208      	movs	r2, #8
 8008a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9de 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008a88:	e005      	b.n	8008a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9d0 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9e1 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10e      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d107      	bne.n	8008ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f06f 0201 	mvn.w	r2, #1
 8008ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7f8 f976 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d10e      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d107      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb7e 	bl	80091f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b02:	d10e      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b80      	cmp	r3, #128	; 0x80
 8008b10:	d107      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb71 	bl	8009204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d10e      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d107      	bne.n	8008b4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f98f 	bl	8008e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d10e      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d107      	bne.n	8008b7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f06f 0220 	mvn.w	r2, #32
 8008b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb31 	bl	80091dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b88:	d10f      	bne.n	8008baa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb37 	bl	8009218 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb8:	d10f      	bne.n	8008bda <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc8:	d107      	bne.n	8008bda <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fb29 	bl	800922c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be8:	d10f      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bf8:	d107      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb1b 	bl	8009240 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c18:	d10f      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c28:	d107      	bne.n	8008c3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb0d 	bl	8009254 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_TIM_ConfigClockSource+0x18>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0dd      	b.n	8008e18 <HAL_TIM_ConfigClockSource+0x1d4>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a62      	ldr	r2, [pc, #392]	; (8008e20 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	f000 80a9 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008c9c:	4a60      	ldr	r2, [pc, #384]	; (8008e20 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	f200 80ae 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ca4:	4a5f      	ldr	r2, [pc, #380]	; (8008e24 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	f000 80a1 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008cac:	4a5d      	ldr	r2, [pc, #372]	; (8008e24 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	f200 80a6 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cb4:	4a5c      	ldr	r2, [pc, #368]	; (8008e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	f000 8099 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008cbc:	4a5a      	ldr	r2, [pc, #360]	; (8008e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f200 809e 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cc4:	4a59      	ldr	r2, [pc, #356]	; (8008e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	f000 8091 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008ccc:	4a57      	ldr	r2, [pc, #348]	; (8008e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	f200 8096 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008cd8:	f000 8089 	beq.w	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008cdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ce0:	f200 808e 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce8:	d03e      	beq.n	8008d68 <HAL_TIM_ConfigClockSource+0x124>
 8008cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cee:	f200 8087 	bhi.w	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf6:	f000 8085 	beq.w	8008e04 <HAL_TIM_ConfigClockSource+0x1c0>
 8008cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfe:	d87f      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d00:	2b70      	cmp	r3, #112	; 0x70
 8008d02:	d01a      	beq.n	8008d3a <HAL_TIM_ConfigClockSource+0xf6>
 8008d04:	2b70      	cmp	r3, #112	; 0x70
 8008d06:	d87b      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d08:	2b60      	cmp	r3, #96	; 0x60
 8008d0a:	d050      	beq.n	8008dae <HAL_TIM_ConfigClockSource+0x16a>
 8008d0c:	2b60      	cmp	r3, #96	; 0x60
 8008d0e:	d877      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d10:	2b50      	cmp	r3, #80	; 0x50
 8008d12:	d03c      	beq.n	8008d8e <HAL_TIM_ConfigClockSource+0x14a>
 8008d14:	2b50      	cmp	r3, #80	; 0x50
 8008d16:	d873      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d058      	beq.n	8008dce <HAL_TIM_ConfigClockSource+0x18a>
 8008d1c:	2b40      	cmp	r3, #64	; 0x40
 8008d1e:	d86f      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d20:	2b30      	cmp	r3, #48	; 0x30
 8008d22:	d064      	beq.n	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008d24:	2b30      	cmp	r3, #48	; 0x30
 8008d26:	d86b      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d060      	beq.n	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d867      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d05c      	beq.n	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d05a      	beq.n	8008dee <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d38:	e062      	b.n	8008e00 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	6899      	ldr	r1, [r3, #8]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f000 f9a5 	bl	8009098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	609a      	str	r2, [r3, #8]
      break;
 8008d66:	e04e      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	6899      	ldr	r1, [r3, #8]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f000 f98e 	bl	8009098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d8a:	609a      	str	r2, [r3, #8]
      break;
 8008d8c:	e03b      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6859      	ldr	r1, [r3, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f000 f900 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2150      	movs	r1, #80	; 0x50
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 f959 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 8008dac:	e02b      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	6859      	ldr	r1, [r3, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f000 f91f 	bl	8008ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2160      	movs	r1, #96	; 0x60
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f949 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 8008dcc:	e01b      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	6859      	ldr	r1, [r3, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f000 f8e0 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2140      	movs	r1, #64	; 0x40
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 f939 	bl	800905e <TIM_ITRx_SetConfig>
      break;
 8008dec:	e00b      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f000 f930 	bl	800905e <TIM_ITRx_SetConfig>
        break;
 8008dfe:	e002      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8008e00:	bf00      	nop
 8008e02:	e000      	b.n	8008e06 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8008e04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	00100070 	.word	0x00100070
 8008e24:	00100040 	.word	0x00100040
 8008e28:	00100030 	.word	0x00100030
 8008e2c:	00100020 	.word	0x00100020

08008e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a3c      	ldr	r2, [pc, #240]	; (8008f84 <TIM_Base_SetConfig+0x104>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00f      	beq.n	8008eb8 <TIM_Base_SetConfig+0x38>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9e:	d00b      	beq.n	8008eb8 <TIM_Base_SetConfig+0x38>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a39      	ldr	r2, [pc, #228]	; (8008f88 <TIM_Base_SetConfig+0x108>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d007      	beq.n	8008eb8 <TIM_Base_SetConfig+0x38>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a38      	ldr	r2, [pc, #224]	; (8008f8c <TIM_Base_SetConfig+0x10c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_Base_SetConfig+0x38>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a37      	ldr	r2, [pc, #220]	; (8008f90 <TIM_Base_SetConfig+0x110>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d108      	bne.n	8008eca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <TIM_Base_SetConfig+0x104>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d01b      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed8:	d017      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <TIM_Base_SetConfig+0x108>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d013      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a29      	ldr	r2, [pc, #164]	; (8008f8c <TIM_Base_SetConfig+0x10c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00f      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a28      	ldr	r2, [pc, #160]	; (8008f90 <TIM_Base_SetConfig+0x110>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00b      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a27      	ldr	r2, [pc, #156]	; (8008f94 <TIM_Base_SetConfig+0x114>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d007      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a26      	ldr	r2, [pc, #152]	; (8008f98 <TIM_Base_SetConfig+0x118>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_Base_SetConfig+0x8a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a25      	ldr	r2, [pc, #148]	; (8008f9c <TIM_Base_SetConfig+0x11c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d108      	bne.n	8008f1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <TIM_Base_SetConfig+0x104>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00f      	beq.n	8008f68 <TIM_Base_SetConfig+0xe8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a11      	ldr	r2, [pc, #68]	; (8008f90 <TIM_Base_SetConfig+0x110>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00b      	beq.n	8008f68 <TIM_Base_SetConfig+0xe8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a10      	ldr	r2, [pc, #64]	; (8008f94 <TIM_Base_SetConfig+0x114>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d007      	beq.n	8008f68 <TIM_Base_SetConfig+0xe8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a0f      	ldr	r2, [pc, #60]	; (8008f98 <TIM_Base_SetConfig+0x118>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d003      	beq.n	8008f68 <TIM_Base_SetConfig+0xe8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a0e      	ldr	r2, [pc, #56]	; (8008f9c <TIM_Base_SetConfig+0x11c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d103      	bne.n	8008f70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	691a      	ldr	r2, [r3, #16]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	615a      	str	r2, [r3, #20]
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40012c00 	.word	0x40012c00
 8008f88:	40000400 	.word	0x40000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	40013400 	.word	0x40013400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800

08008fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0201 	bic.w	r2, r3, #1
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 030a 	bic.w	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b087      	sub	sp, #28
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	f023 0210 	bic.w	r2, r3, #16
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800903a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	f043 0307 	orr.w	r3, r3, #7
 8009084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	609a      	str	r2, [r3, #8]
}
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	021a      	lsls	r2, r3, #8
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4313      	orrs	r3, r2
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	609a      	str	r2, [r3, #8]
}
 80090cc:	bf00      	nop
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e065      	b.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a2c      	ldr	r2, [pc, #176]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d004      	beq.n	8009124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a2b      	ldr	r2, [pc, #172]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d108      	bne.n	8009136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800912a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800913c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009140:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d018      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009166:	d013      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00e      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a17      	ldr	r2, [pc, #92]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d009      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a12      	ldr	r2, [pc, #72]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a13      	ldr	r2, [pc, #76]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10c      	bne.n	80091aa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	40012c00 	.word	0x40012c00
 80091cc:	40013400 	.word	0x40013400
 80091d0:	40000400 	.word	0x40000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	40014000 	.word	0x40014000

080091dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e042      	b.n	8009300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7f9 ffc9 	bl	8003224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2224      	movs	r2, #36	; 0x24
 8009296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0201 	bic.w	r2, r2, #1
 80092a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fb88 	bl	80099c0 <UART_SetConfig>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e022      	b.n	8009300 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fe20 	bl	8009f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fea7 	bl	800a04c <UART_CheckIdleState>
 80092fe:	4603      	mov	r3, r0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08a      	sub	sp, #40	; 0x28
 800930c:	af02      	add	r7, sp, #8
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	4613      	mov	r3, r2
 8009316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800931e:	2b20      	cmp	r3, #32
 8009320:	f040 8083 	bne.w	800942a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <HAL_UART_Transmit+0x28>
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e07b      	b.n	800942c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800933a:	2b01      	cmp	r3, #1
 800933c:	d101      	bne.n	8009342 <HAL_UART_Transmit+0x3a>
 800933e:	2302      	movs	r3, #2
 8009340:	e074      	b.n	800942c <HAL_UART_Transmit+0x124>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2221      	movs	r2, #33	; 0x21
 8009356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800935a:	f7fa f8f1 	bl	8003540 <HAL_GetTick>
 800935e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	88fa      	ldrh	r2, [r7, #6]
 8009364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	88fa      	ldrh	r2, [r7, #6]
 800936c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009378:	d108      	bne.n	800938c <HAL_UART_Transmit+0x84>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d104      	bne.n	800938c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	e003      	b.n	8009394 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800939c:	e02c      	b.n	80093f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2200      	movs	r2, #0
 80093a6:	2180      	movs	r1, #128	; 0x80
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fe97 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e039      	b.n	800942c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10b      	bne.n	80093d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	3302      	adds	r3, #2
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e007      	b.n	80093e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1cc      	bne.n	800939e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2200      	movs	r2, #0
 800940c:	2140      	movs	r1, #64	; 0x40
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fe64 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e006      	b.n	800942c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	e000      	b.n	800942c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800942a:	2302      	movs	r3, #2
  }
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009448:	2b20      	cmp	r3, #32
 800944a:	f040 80bc 	bne.w	80095c6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <HAL_UART_Receive_IT+0x26>
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0b4      	b.n	80095c8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_UART_Receive_IT+0x38>
 8009468:	2302      	movs	r3, #2
 800946a:	e0ad      	b.n	80095c8 <HAL_UART_Receive_IT+0x194>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	88fa      	ldrh	r2, [r7, #6]
 800947e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009498:	d10e      	bne.n	80094b8 <HAL_UART_Receive_IT+0x84>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <HAL_UART_Receive_IT+0x7a>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094ac:	e02d      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	22ff      	movs	r2, #255	; 0xff
 80094b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094b6:	e028      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10d      	bne.n	80094dc <HAL_UART_Receive_IT+0xa8>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <HAL_UART_Receive_IT+0x9e>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	22ff      	movs	r2, #255	; 0xff
 80094cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094d0:	e01b      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	227f      	movs	r2, #127	; 0x7f
 80094d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094da:	e016      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094e4:	d10d      	bne.n	8009502 <HAL_UART_Receive_IT+0xce>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d104      	bne.n	80094f8 <HAL_UART_Receive_IT+0xc4>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	227f      	movs	r2, #127	; 0x7f
 80094f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094f6:	e008      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	223f      	movs	r2, #63	; 0x3f
 80094fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009500:	e003      	b.n	800950a <HAL_UART_Receive_IT+0xd6>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2222      	movs	r2, #34	; 0x22
 8009516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0201 	orr.w	r2, r2, #1
 8009528:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009532:	d12a      	bne.n	800958a <HAL_UART_Receive_IT+0x156>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	429a      	cmp	r2, r3
 800953e:	d324      	bcc.n	800958a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009548:	d107      	bne.n	800955a <HAL_UART_Receive_IT+0x126>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d103      	bne.n	800955a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a1f      	ldr	r2, [pc, #124]	; (80095d4 <HAL_UART_Receive_IT+0x1a0>)
 8009556:	66da      	str	r2, [r3, #108]	; 0x6c
 8009558:	e002      	b.n	8009560 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <HAL_UART_Receive_IT+0x1a4>)
 800955e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009576:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689a      	ldr	r2, [r3, #8]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009586:	609a      	str	r2, [r3, #8]
 8009588:	e01b      	b.n	80095c2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009592:	d107      	bne.n	80095a4 <HAL_UART_Receive_IT+0x170>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4a0f      	ldr	r2, [pc, #60]	; (80095dc <HAL_UART_Receive_IT+0x1a8>)
 80095a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80095a2:	e002      	b.n	80095aa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4a0e      	ldr	r2, [pc, #56]	; (80095e0 <HAL_UART_Receive_IT+0x1ac>)
 80095a8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80095c0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e000      	b.n	80095c8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80095c6:	2302      	movs	r3, #2
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	0800a4e1 	.word	0x0800a4e1
 80095d8:	0800a3d9 	.word	0x0800a3d9
 80095dc:	0800a32d 	.word	0x0800a32d
 80095e0:	0800a283 	.word	0x0800a283

080095e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	6093      	str	r3, [r2, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d125      	bne.n	800966a <HAL_UART_AbortReceive+0x86>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800962c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009632:	2b00      	cmp	r3, #0
 8009634:	d019      	beq.n	800966a <HAL_UART_AbortReceive+0x86>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800963a:	2200      	movs	r2, #0
 800963c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009642:	4618      	mov	r0, r3
 8009644:	f7fb ff21 	bl	800548a <HAL_DMA_Abort>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00d      	beq.n	800966a <HAL_UART_AbortReceive+0x86>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009652:	4618      	mov	r0, r3
 8009654:	f7fc f888 	bl	8005768 <HAL_DMA_GetError>
 8009658:	4603      	mov	r3, r0
 800965a:	2b20      	cmp	r3, #32
 800965c:	d105      	bne.n	800966a <HAL_UART_AbortReceive+0x86>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2210      	movs	r2, #16
 8009662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e014      	b.n	8009694 <HAL_UART_AbortReceive+0xb0>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	220f      	movs	r2, #15
 8009678:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699a      	ldr	r2, [r3, #24]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f042 0208 	orr.w	r2, r2, #8
 8009688:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096bc:	69fa      	ldr	r2, [r7, #28]
 80096be:	f640 030f 	movw	r3, #2063	; 0x80f
 80096c2:	4013      	ands	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d118      	bne.n	80096fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d013      	beq.n	80096fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8144 	beq.w	800997c <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
      }
      return;
 80096fc:	e13e      	b.n	800997c <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80e8 	beq.w	80098d6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4ba0      	ldr	r3, [pc, #640]	; (800998c <HAL_UART_IRQHandler+0x2f0>)
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	4b9f      	ldr	r3, [pc, #636]	; (8009990 <HAL_UART_IRQHandler+0x2f4>)
 8009714:	4013      	ands	r3, r2
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 80dd 	beq.w	80098d6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d010      	beq.n	8009748 <HAL_UART_IRQHandler+0xac>
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2201      	movs	r2, #1
 8009736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	f043 0201 	orr.w	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d010      	beq.n	8009774 <HAL_UART_IRQHandler+0xd8>
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2202      	movs	r2, #2
 8009762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976a:	f043 0204 	orr.w	r2, r3, #4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	d010      	beq.n	80097a0 <HAL_UART_IRQHandler+0x104>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2204      	movs	r2, #4
 800978e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009796:	f043 0202 	orr.w	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d015      	beq.n	80097d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4b75      	ldr	r3, [pc, #468]	; (800998c <HAL_UART_IRQHandler+0x2f0>)
 80097b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2208      	movs	r2, #8
 80097c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097cc:	f043 0208 	orr.w	r2, r3, #8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d011      	beq.n	8009804 <HAL_UART_IRQHandler+0x168>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	f043 0220 	orr.w	r2, r3, #32
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80b8 	beq.w	8009980 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d011      	beq.n	800983e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009844:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	d004      	beq.n	800985e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800985a:	2b00      	cmp	r3, #0
 800985c:	d031      	beq.n	80098c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fcbc 	bl	800a1dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d123      	bne.n	80098ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009880:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009886:	2b00      	cmp	r3, #0
 8009888:	d013      	beq.n	80098b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800988e:	4a41      	ldr	r2, [pc, #260]	; (8009994 <HAL_UART_IRQHandler+0x2f8>)
 8009890:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009896:	4618      	mov	r0, r3
 8009898:	f7fb fe50 	bl	800553c <HAL_DMA_Abort_IT>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b0:	e00f      	b.n	80098d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f87a 	bl	80099ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	e00b      	b.n	80098d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f876 	bl	80099ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c0:	e007      	b.n	80098d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f872 	bl	80099ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80098d0:	e056      	b.n	8009980 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	bf00      	nop
    return;
 80098d4:	e054      	b.n	8009980 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00d      	beq.n	80098fc <HAL_UART_IRQHandler+0x260>
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d008      	beq.n	80098fc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fe77 	bl	800a5e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fa:	e044      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009902:	2b00      	cmp	r3, #0
 8009904:	d012      	beq.n	800992c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	2b00      	cmp	r3, #0
 8009920:	d030      	beq.n	8009984 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
    }
    return;
 800992a:	e02b      	b.n	8009984 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	d008      	beq.n	8009948 <HAL_UART_IRQHandler+0x2ac>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc84 	bl	800a24e <UART_EndTransmit_IT>
    return;
 8009946:	e01e      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <HAL_UART_IRQHandler+0x2c8>
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fe57 	bl	800a610 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009962:	e010      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <HAL_UART_IRQHandler+0x2ea>
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	da08      	bge.n	8009986 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fe41 	bl	800a5fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800997a:	e004      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
      return;
 800997c:	bf00      	nop
 800997e:	e002      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
    return;
 8009980:	bf00      	nop
 8009982:	e000      	b.n	8009986 <HAL_UART_IRQHandler+0x2ea>
    return;
 8009984:	bf00      	nop
  }
}
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	10000001 	.word	0x10000001
 8009990:	04000120 	.word	0x04000120
 8009994:	0800a223 	.word	0x0800a223

08009998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099c0:	b5b0      	push	{r4, r5, r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	4baf      	ldr	r3, [pc, #700]	; (8009cb4 <UART_SetConfig+0x2f4>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	69f9      	ldr	r1, [r7, #28]
 80099fe:	430b      	orrs	r3, r1
 8009a00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4aa5      	ldr	r2, [pc, #660]	; (8009cb8 <UART_SetConfig+0x2f8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d004      	beq.n	8009a32 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009a3c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	69f9      	ldr	r1, [r7, #28]
 8009a46:	430b      	orrs	r3, r1
 8009a48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	f023 010f 	bic.w	r1, r3, #15
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a95      	ldr	r2, [pc, #596]	; (8009cbc <UART_SetConfig+0x2fc>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d121      	bne.n	8009aae <UART_SetConfig+0xee>
 8009a6a:	4b95      	ldr	r3, [pc, #596]	; (8009cc0 <UART_SetConfig+0x300>)
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d817      	bhi.n	8009aa8 <UART_SetConfig+0xe8>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0xc0>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009a9d 	.word	0x08009a9d
 8009a88:	08009a97 	.word	0x08009a97
 8009a8c:	08009aa3 	.word	0x08009aa3
 8009a90:	2301      	movs	r3, #1
 8009a92:	76fb      	strb	r3, [r7, #27]
 8009a94:	e0bc      	b.n	8009c10 <UART_SetConfig+0x250>
 8009a96:	2302      	movs	r3, #2
 8009a98:	76fb      	strb	r3, [r7, #27]
 8009a9a:	e0b9      	b.n	8009c10 <UART_SetConfig+0x250>
 8009a9c:	2304      	movs	r3, #4
 8009a9e:	76fb      	strb	r3, [r7, #27]
 8009aa0:	e0b6      	b.n	8009c10 <UART_SetConfig+0x250>
 8009aa2:	2308      	movs	r3, #8
 8009aa4:	76fb      	strb	r3, [r7, #27]
 8009aa6:	e0b3      	b.n	8009c10 <UART_SetConfig+0x250>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	76fb      	strb	r3, [r7, #27]
 8009aac:	e0b0      	b.n	8009c10 <UART_SetConfig+0x250>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a84      	ldr	r2, [pc, #528]	; (8009cc4 <UART_SetConfig+0x304>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d132      	bne.n	8009b1e <UART_SetConfig+0x15e>
 8009ab8:	4b81      	ldr	r3, [pc, #516]	; (8009cc0 <UART_SetConfig+0x300>)
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	f003 030c 	and.w	r3, r3, #12
 8009ac2:	2b0c      	cmp	r3, #12
 8009ac4:	d828      	bhi.n	8009b18 <UART_SetConfig+0x158>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x10c>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b01 	.word	0x08009b01
 8009ad0:	08009b19 	.word	0x08009b19
 8009ad4:	08009b19 	.word	0x08009b19
 8009ad8:	08009b19 	.word	0x08009b19
 8009adc:	08009b0d 	.word	0x08009b0d
 8009ae0:	08009b19 	.word	0x08009b19
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009b19 	.word	0x08009b19
 8009aec:	08009b07 	.word	0x08009b07
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b13 	.word	0x08009b13
 8009b00:	2300      	movs	r3, #0
 8009b02:	76fb      	strb	r3, [r7, #27]
 8009b04:	e084      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b06:	2302      	movs	r3, #2
 8009b08:	76fb      	strb	r3, [r7, #27]
 8009b0a:	e081      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	76fb      	strb	r3, [r7, #27]
 8009b10:	e07e      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b12:	2308      	movs	r3, #8
 8009b14:	76fb      	strb	r3, [r7, #27]
 8009b16:	e07b      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	76fb      	strb	r3, [r7, #27]
 8009b1c:	e078      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a69      	ldr	r2, [pc, #420]	; (8009cc8 <UART_SetConfig+0x308>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d120      	bne.n	8009b6a <UART_SetConfig+0x1aa>
 8009b28:	4b65      	ldr	r3, [pc, #404]	; (8009cc0 <UART_SetConfig+0x300>)
 8009b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b32:	2b30      	cmp	r3, #48	; 0x30
 8009b34:	d013      	beq.n	8009b5e <UART_SetConfig+0x19e>
 8009b36:	2b30      	cmp	r3, #48	; 0x30
 8009b38:	d814      	bhi.n	8009b64 <UART_SetConfig+0x1a4>
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d009      	beq.n	8009b52 <UART_SetConfig+0x192>
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d810      	bhi.n	8009b64 <UART_SetConfig+0x1a4>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <UART_SetConfig+0x18c>
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d006      	beq.n	8009b58 <UART_SetConfig+0x198>
 8009b4a:	e00b      	b.n	8009b64 <UART_SetConfig+0x1a4>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	76fb      	strb	r3, [r7, #27]
 8009b50:	e05e      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b52:	2302      	movs	r3, #2
 8009b54:	76fb      	strb	r3, [r7, #27]
 8009b56:	e05b      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	76fb      	strb	r3, [r7, #27]
 8009b5c:	e058      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b5e:	2308      	movs	r3, #8
 8009b60:	76fb      	strb	r3, [r7, #27]
 8009b62:	e055      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b64:	2310      	movs	r3, #16
 8009b66:	76fb      	strb	r3, [r7, #27]
 8009b68:	e052      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a57      	ldr	r2, [pc, #348]	; (8009ccc <UART_SetConfig+0x30c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d120      	bne.n	8009bb6 <UART_SetConfig+0x1f6>
 8009b74:	4b52      	ldr	r3, [pc, #328]	; (8009cc0 <UART_SetConfig+0x300>)
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8009b80:	d013      	beq.n	8009baa <UART_SetConfig+0x1ea>
 8009b82:	2bc0      	cmp	r3, #192	; 0xc0
 8009b84:	d814      	bhi.n	8009bb0 <UART_SetConfig+0x1f0>
 8009b86:	2b80      	cmp	r3, #128	; 0x80
 8009b88:	d009      	beq.n	8009b9e <UART_SetConfig+0x1de>
 8009b8a:	2b80      	cmp	r3, #128	; 0x80
 8009b8c:	d810      	bhi.n	8009bb0 <UART_SetConfig+0x1f0>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <UART_SetConfig+0x1d8>
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	d006      	beq.n	8009ba4 <UART_SetConfig+0x1e4>
 8009b96:	e00b      	b.n	8009bb0 <UART_SetConfig+0x1f0>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	76fb      	strb	r3, [r7, #27]
 8009b9c:	e038      	b.n	8009c10 <UART_SetConfig+0x250>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	76fb      	strb	r3, [r7, #27]
 8009ba2:	e035      	b.n	8009c10 <UART_SetConfig+0x250>
 8009ba4:	2304      	movs	r3, #4
 8009ba6:	76fb      	strb	r3, [r7, #27]
 8009ba8:	e032      	b.n	8009c10 <UART_SetConfig+0x250>
 8009baa:	2308      	movs	r3, #8
 8009bac:	76fb      	strb	r3, [r7, #27]
 8009bae:	e02f      	b.n	8009c10 <UART_SetConfig+0x250>
 8009bb0:	2310      	movs	r3, #16
 8009bb2:	76fb      	strb	r3, [r7, #27]
 8009bb4:	e02c      	b.n	8009c10 <UART_SetConfig+0x250>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3f      	ldr	r2, [pc, #252]	; (8009cb8 <UART_SetConfig+0x2f8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d125      	bne.n	8009c0c <UART_SetConfig+0x24c>
 8009bc0:	4b3f      	ldr	r3, [pc, #252]	; (8009cc0 <UART_SetConfig+0x300>)
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bce:	d017      	beq.n	8009c00 <UART_SetConfig+0x240>
 8009bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bd4:	d817      	bhi.n	8009c06 <UART_SetConfig+0x246>
 8009bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bda:	d00b      	beq.n	8009bf4 <UART_SetConfig+0x234>
 8009bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be0:	d811      	bhi.n	8009c06 <UART_SetConfig+0x246>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <UART_SetConfig+0x22e>
 8009be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bea:	d006      	beq.n	8009bfa <UART_SetConfig+0x23a>
 8009bec:	e00b      	b.n	8009c06 <UART_SetConfig+0x246>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	76fb      	strb	r3, [r7, #27]
 8009bf2:	e00d      	b.n	8009c10 <UART_SetConfig+0x250>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	76fb      	strb	r3, [r7, #27]
 8009bf8:	e00a      	b.n	8009c10 <UART_SetConfig+0x250>
 8009bfa:	2304      	movs	r3, #4
 8009bfc:	76fb      	strb	r3, [r7, #27]
 8009bfe:	e007      	b.n	8009c10 <UART_SetConfig+0x250>
 8009c00:	2308      	movs	r3, #8
 8009c02:	76fb      	strb	r3, [r7, #27]
 8009c04:	e004      	b.n	8009c10 <UART_SetConfig+0x250>
 8009c06:	2310      	movs	r3, #16
 8009c08:	76fb      	strb	r3, [r7, #27]
 8009c0a:	e001      	b.n	8009c10 <UART_SetConfig+0x250>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a28      	ldr	r2, [pc, #160]	; (8009cb8 <UART_SetConfig+0x2f8>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	f040 809e 	bne.w	8009d58 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c1c:	7efb      	ldrb	r3, [r7, #27]
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d823      	bhi.n	8009c6a <UART_SetConfig+0x2aa>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x268>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c6b 	.word	0x08009c6b
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c6b 	.word	0x08009c6b
 8009c38:	08009c5b 	.word	0x08009c5b
 8009c3c:	08009c6b 	.word	0x08009c6b
 8009c40:	08009c6b 	.word	0x08009c6b
 8009c44:	08009c6b 	.word	0x08009c6b
 8009c48:	08009c63 	.word	0x08009c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fe fb56 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 8009c50:	6178      	str	r0, [r7, #20]
        break;
 8009c52:	e00f      	b.n	8009c74 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c54:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <UART_SetConfig+0x310>)
 8009c56:	617b      	str	r3, [r7, #20]
        break;
 8009c58:	e00c      	b.n	8009c74 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c5a:	f7fe fae1 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 8009c5e:	6178      	str	r0, [r7, #20]
        break;
 8009c60:	e008      	b.n	8009c74 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c66:	617b      	str	r3, [r7, #20]
        break;
 8009c68:	e004      	b.n	8009c74 <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	76bb      	strb	r3, [r7, #26]
        break;
 8009c72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 812e 	beq.w	8009ed8 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	4a14      	ldr	r2, [pc, #80]	; (8009cd4 <UART_SetConfig+0x314>)
 8009c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c86:	461a      	mov	r2, r3
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c8e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d305      	bcc.n	8009cac <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d915      	bls.n	8009cd8 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	76bb      	strb	r3, [r7, #26]
 8009cb0:	e112      	b.n	8009ed8 <UART_SetConfig+0x518>
 8009cb2:	bf00      	nop
 8009cb4:	cfff69f3 	.word	0xcfff69f3
 8009cb8:	40008000 	.word	0x40008000
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	40021000 	.word	0x40021000
 8009cc4:	40004400 	.word	0x40004400
 8009cc8:	40004800 	.word	0x40004800
 8009ccc:	40004c00 	.word	0x40004c00
 8009cd0:	00f42400 	.word	0x00f42400
 8009cd4:	0800fe98 	.word	0x0800fe98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f04f 0100 	mov.w	r1, #0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	4a86      	ldr	r2, [pc, #536]	; (8009f00 <UART_SetConfig+0x540>)
 8009ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	f04f 0300 	mov.w	r3, #0
 8009cf0:	f7f6 fee4 	bl	8000abc <__aeabi_uldivmod>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	020b      	lsls	r3, r1, #8
 8009d06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d0a:	0202      	lsls	r2, r0, #8
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	6849      	ldr	r1, [r1, #4]
 8009d10:	0849      	lsrs	r1, r1, #1
 8009d12:	4608      	mov	r0, r1
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	1814      	adds	r4, r2, r0
 8009d1a:	eb43 0501 	adc.w	r5, r3, r1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	4620      	mov	r0, r4
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	f7f6 fec6 	bl	8000abc <__aeabi_uldivmod>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4613      	mov	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d3e:	d308      	bcc.n	8009d52 <UART_SetConfig+0x392>
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d46:	d204      	bcs.n	8009d52 <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	60da      	str	r2, [r3, #12]
 8009d50:	e0c2      	b.n	8009ed8 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	76bb      	strb	r3, [r7, #26]
 8009d56:	e0bf      	b.n	8009ed8 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d60:	d165      	bne.n	8009e2e <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 8009d62:	7efb      	ldrb	r3, [r7, #27]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d828      	bhi.n	8009dba <UART_SetConfig+0x3fa>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <UART_SetConfig+0x3b0>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009da5 	.word	0x08009da5
 8009d7c:	08009dbb 	.word	0x08009dbb
 8009d80:	08009dab 	.word	0x08009dab
 8009d84:	08009dbb 	.word	0x08009dbb
 8009d88:	08009dbb 	.word	0x08009dbb
 8009d8c:	08009dbb 	.word	0x08009dbb
 8009d90:	08009db3 	.word	0x08009db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d94:	f7fe fab2 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 8009d98:	6178      	str	r0, [r7, #20]
        break;
 8009d9a:	e013      	b.n	8009dc4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d9c:	f7fe fac4 	bl	8008328 <HAL_RCC_GetPCLK2Freq>
 8009da0:	6178      	str	r0, [r7, #20]
        break;
 8009da2:	e00f      	b.n	8009dc4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da4:	4b57      	ldr	r3, [pc, #348]	; (8009f04 <UART_SetConfig+0x544>)
 8009da6:	617b      	str	r3, [r7, #20]
        break;
 8009da8:	e00c      	b.n	8009dc4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009daa:	f7fe fa39 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 8009dae:	6178      	str	r0, [r7, #20]
        break;
 8009db0:	e008      	b.n	8009dc4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009db6:	617b      	str	r3, [r7, #20]
        break;
 8009db8:	e004      	b.n	8009dc4 <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	76bb      	strb	r3, [r7, #26]
        break;
 8009dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 8086 	beq.w	8009ed8 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	4a4b      	ldr	r2, [pc, #300]	; (8009f00 <UART_SetConfig+0x540>)
 8009dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dde:	005a      	lsls	r2, r3, #1
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	085b      	lsrs	r3, r3, #1
 8009de6:	441a      	add	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	2b0f      	cmp	r3, #15
 8009df8:	d916      	bls.n	8009e28 <UART_SetConfig+0x468>
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e00:	d212      	bcs.n	8009e28 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f023 030f 	bic.w	r3, r3, #15
 8009e0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	89fb      	ldrh	r3, [r7, #14]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	89fa      	ldrh	r2, [r7, #14]
 8009e24:	60da      	str	r2, [r3, #12]
 8009e26:	e057      	b.n	8009ed8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	76bb      	strb	r3, [r7, #26]
 8009e2c:	e054      	b.n	8009ed8 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e2e:	7efb      	ldrb	r3, [r7, #27]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d828      	bhi.n	8009e86 <UART_SetConfig+0x4c6>
 8009e34:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <UART_SetConfig+0x47c>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	08009e87 	.word	0x08009e87
 8009e4c:	08009e77 	.word	0x08009e77
 8009e50:	08009e87 	.word	0x08009e87
 8009e54:	08009e87 	.word	0x08009e87
 8009e58:	08009e87 	.word	0x08009e87
 8009e5c:	08009e7f 	.word	0x08009e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e60:	f7fe fa4c 	bl	80082fc <HAL_RCC_GetPCLK1Freq>
 8009e64:	6178      	str	r0, [r7, #20]
        break;
 8009e66:	e013      	b.n	8009e90 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e68:	f7fe fa5e 	bl	8008328 <HAL_RCC_GetPCLK2Freq>
 8009e6c:	6178      	str	r0, [r7, #20]
        break;
 8009e6e:	e00f      	b.n	8009e90 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e70:	4b24      	ldr	r3, [pc, #144]	; (8009f04 <UART_SetConfig+0x544>)
 8009e72:	617b      	str	r3, [r7, #20]
        break;
 8009e74:	e00c      	b.n	8009e90 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e76:	f7fe f9d3 	bl	8008220 <HAL_RCC_GetSysClockFreq>
 8009e7a:	6178      	str	r0, [r7, #20]
        break;
 8009e7c:	e008      	b.n	8009e90 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e82:	617b      	str	r3, [r7, #20]
        break;
 8009e84:	e004      	b.n	8009e90 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8009e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d020      	beq.n	8009ed8 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	4a19      	ldr	r2, [pc, #100]	; (8009f00 <UART_SetConfig+0x540>)
 8009e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	085b      	lsrs	r3, r3, #1
 8009eae:	441a      	add	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b0f      	cmp	r3, #15
 8009ec0:	d908      	bls.n	8009ed4 <UART_SetConfig+0x514>
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec8:	d204      	bcs.n	8009ed4 <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	60da      	str	r2, [r3, #12]
 8009ed2:	e001      	b.n	8009ed8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009ef4:	7ebb      	ldrb	r3, [r7, #26]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bdb0      	pop	{r4, r5, r7, pc}
 8009efe:	bf00      	nop
 8009f00:	0800fe98 	.word	0x0800fe98
 8009f04:	00f42400 	.word	0x00f42400

08009f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	f003 0308 	and.w	r3, r3, #8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01a      	beq.n	800a01e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d10a      	bne.n	800a01e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	605a      	str	r2, [r3, #4]
  }
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af02      	add	r7, sp, #8
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a05c:	f7f9 fa70 	bl	8003540 <HAL_GetTick>
 800a060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d10e      	bne.n	800a08e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f82c 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e022      	b.n	800a0d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d10e      	bne.n	800a0ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f816 	bl	800a0dc <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e00c      	b.n	800a0d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ec:	e062      	b.n	800a1b4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f4:	d05e      	beq.n	800a1b4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f6:	f7f9 fa23 	bl	8003540 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	429a      	cmp	r2, r3
 800a104:	d302      	bcc.n	800a10c <UART_WaitOnFlagUntilTimeout+0x30>
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d11d      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a11a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0201 	bic.w	r2, r2, #1
 800a12a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2220      	movs	r2, #32
 800a130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e045      	b.n	800a1d4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d02e      	beq.n	800a1b4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a164:	d126      	bne.n	800a1b4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a16e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a17e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f022 0201 	bic.w	r2, r2, #1
 800a18e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e00f      	b.n	800a1d4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	69da      	ldr	r2, [r3, #28]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	bf0c      	ite	eq
 800a1c4:	2301      	moveq	r3, #1
 800a1c6:	2300      	movne	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d08d      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a202:	f023 0301 	bic.w	r3, r3, #1
 800a206:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff fbb3 	bl	80099ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a264:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff fb8f 	bl	8009998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a27a:	bf00      	nop
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a290:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a298:	2b22      	cmp	r3, #34	; 0x22
 800a29a:	d13b      	bne.n	800a314 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2a4:	89bb      	ldrh	r3, [r7, #12]
 800a2a6:	b2d9      	uxtb	r1, r3
 800a2a8:	89fb      	ldrh	r3, [r7, #14]
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b0:	400a      	ands	r2, r1
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d122      	bne.n	800a324 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2ec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7f6 fd7f 	bl	8000e10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a312:	e007      	b.n	800a324 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0208 	orr.w	r2, r2, #8
 800a322:	619a      	str	r2, [r3, #24]
}
 800a324:	bf00      	nop
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a33a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a342:	2b22      	cmp	r3, #34	; 0x22
 800a344:	d13b      	bne.n	800a3be <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a352:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a354:	89ba      	ldrh	r2, [r7, #12]
 800a356:	89fb      	ldrh	r3, [r7, #14]
 800a358:	4013      	ands	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a364:	1c9a      	adds	r2, r3, #2
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a370:	b29b      	uxth	r3, r3
 800a372:	3b01      	subs	r3, #1
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d122      	bne.n	800a3ce <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a396:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f022 0201 	bic.w	r2, r2, #1
 800a3a6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7f6 fd2a 	bl	8000e10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3bc:	e007      	b.n	800a3ce <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0208 	orr.w	r2, r2, #8
 800a3cc:	619a      	str	r2, [r3, #24]
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3e6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ee:	2b22      	cmp	r3, #34	; 0x22
 800a3f0:	d168      	bne.n	800a4c4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3f8:	81fb      	strh	r3, [r7, #14]
 800a3fa:	e03f      	b.n	800a47c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a404:	893b      	ldrh	r3, [r7, #8]
 800a406:	b2d9      	uxtb	r1, r3
 800a408:	89bb      	ldrh	r3, [r7, #12]
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a410:	400a      	ands	r2, r1
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d11b      	bne.n	800a476 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a44c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7f6 fccd 	bl	8000e10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a476:	89fb      	ldrh	r3, [r7, #14]
 800a478:	3b01      	subs	r3, #1
 800a47a:	81fb      	strh	r3, [r7, #14]
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1bc      	bne.n	800a3fc <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a488:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a48a:	897b      	ldrh	r3, [r7, #10]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d021      	beq.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a496:	897a      	ldrh	r2, [r7, #10]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d21b      	bcs.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <UART_RxISR_8BIT_FIFOEN+0x104>)
 800a4b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f042 0220 	orr.w	r2, r2, #32
 800a4c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4c2:	e007      	b.n	800a4d4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f042 0208 	orr.w	r2, r2, #8
 800a4d2:	619a      	str	r2, [r3, #24]
}
 800a4d4:	bf00      	nop
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	0800a283 	.word	0x0800a283

0800a4e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4ee:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4f6:	2b22      	cmp	r3, #34	; 0x22
 800a4f8:	d168      	bne.n	800a5cc <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a500:	82fb      	strh	r3, [r7, #22]
 800a502:	e03f      	b.n	800a584 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a510:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a512:	8a3a      	ldrh	r2, [r7, #16]
 800a514:	8abb      	ldrh	r3, [r7, #20]
 800a516:	4013      	ands	r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a540:	b29b      	uxth	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d11b      	bne.n	800a57e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a554:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a564:	f023 0301 	bic.w	r3, r3, #1
 800a568:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7f6 fc49 	bl	8000e10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a57e:	8afb      	ldrh	r3, [r7, #22]
 800a580:	3b01      	subs	r3, #1
 800a582:	82fb      	strh	r3, [r7, #22]
 800a584:	8afb      	ldrh	r3, [r7, #22]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1bc      	bne.n	800a504 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a590:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a592:	8a7b      	ldrh	r3, [r7, #18]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d021      	beq.n	800a5dc <UART_RxISR_16BIT_FIFOEN+0xfc>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a59e:	8a7a      	ldrh	r2, [r7, #18]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d21b      	bcs.n	800a5dc <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5b2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a0b      	ldr	r2, [pc, #44]	; (800a5e4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800a5b8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0220 	orr.w	r2, r2, #32
 800a5c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5ca:	e007      	b.n	800a5dc <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0208 	orr.w	r2, r2, #8
 800a5da:	619a      	str	r2, [r3, #24]
}
 800a5dc:	bf00      	nop
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	0800a32d 	.word	0x0800a32d

0800a5e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_UARTEx_DisableFifoMode+0x16>
 800a636:	2302      	movs	r3, #2
 800a638:	e027      	b.n	800a68a <HAL_UARTEx_DisableFifoMode+0x66>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2224      	movs	r2, #36	; 0x24
 800a646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0201 	bic.w	r2, r2, #1
 800a660:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a668:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e02d      	b.n	800a70a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2224      	movs	r2, #36	; 0x24
 800a6ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f850 	bl	800a790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d101      	bne.n	800a72a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a726:	2302      	movs	r3, #2
 800a728:	e02d      	b.n	800a786 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2224      	movs	r2, #36	; 0x24
 800a736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0201 	bic.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f812 	bl	800a790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2220      	movs	r2, #32
 800a778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a790:	b480      	push	{r7}
 800a792:	b089      	sub	sp, #36	; 0x24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a798:	4a2f      	ldr	r2, [pc, #188]	; (800a858 <UARTEx_SetNbDataToProcess+0xc8>)
 800a79a:	f107 0314 	add.w	r3, r7, #20
 800a79e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7a2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a7a6:	4a2d      	ldr	r2, [pc, #180]	; (800a85c <UARTEx_SetNbDataToProcess+0xcc>)
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7b0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d108      	bne.n	800a7ce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7cc:	e03d      	b.n	800a84a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7ce:	2308      	movs	r3, #8
 800a7d0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7d2:	2308      	movs	r3, #8
 800a7d4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	0e5b      	lsrs	r3, r3, #25
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	0f5b      	lsrs	r3, r3, #29
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7f6:	7fbb      	ldrb	r3, [r7, #30]
 800a7f8:	7f3a      	ldrb	r2, [r7, #28]
 800a7fa:	f107 0120 	add.w	r1, r7, #32
 800a7fe:	440a      	add	r2, r1
 800a800:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a808:	7f3a      	ldrb	r2, [r7, #28]
 800a80a:	f107 0120 	add.w	r1, r7, #32
 800a80e:	440a      	add	r2, r1
 800a810:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a814:	fb93 f3f2 	sdiv	r3, r3, r2
 800a818:	b29a      	uxth	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a820:	7ffb      	ldrb	r3, [r7, #31]
 800a822:	7f7a      	ldrb	r2, [r7, #29]
 800a824:	f107 0120 	add.w	r1, r7, #32
 800a828:	440a      	add	r2, r1
 800a82a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a832:	7f7a      	ldrb	r2, [r7, #29]
 800a834:	f107 0120 	add.w	r1, r7, #32
 800a838:	440a      	add	r2, r1
 800a83a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a83e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a842:	b29a      	uxth	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a84a:	bf00      	nop
 800a84c:	3724      	adds	r7, #36	; 0x24
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	0800fe34 	.word	0x0800fe34
 800a85c:	0800fe3c 	.word	0x0800fe3c

0800a860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a870:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	b29a      	uxth	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a896:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a89a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	f107 0014 	add.w	r0, r7, #20
 800a8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	b004      	add	sp, #16
 800a904:	4770      	bx	lr
	...

0800a908 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a908:	b480      	push	{r7}
 800a90a:	b09b      	sub	sp, #108	; 0x6c
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	2b03      	cmp	r3, #3
 800a938:	d81f      	bhi.n	800a97a <USB_ActivateEndpoint+0x72>
 800a93a:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <USB_ActivateEndpoint+0x38>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a951 	.word	0x0800a951
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a983 	.word	0x0800a983
 800a94c:	0800a95f 	.word	0x0800a95f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a950:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a958:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a95c:	e012      	b.n	800a984 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a95e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a962:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a96a:	e00b      	b.n	800a984 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a96c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a974:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a978:	e004      	b.n	800a984 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a980:	e000      	b.n	800a984 <USB_ActivateEndpoint+0x7c>
      break;
 800a982:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	b21b      	sxth	r3, r3
 800a9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	b21a      	sxth	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	b21b      	sxth	r3, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	441a      	add	r2, r3
 800a9d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	7b1b      	ldrb	r3, [r3, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f040 8149 	bne.w	800ac8c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	785b      	ldrb	r3, [r3, #1]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8084 	beq.w	800ab0c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	4413      	add	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	00da      	lsls	r2, r3, #3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	88db      	ldrh	r3, [r3, #6]
 800aa2c:	085b      	lsrs	r3, r3, #1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	81fb      	strh	r3, [r7, #14]
 800aa46:	89fb      	ldrh	r3, [r7, #14]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01b      	beq.n	800aa88 <USB_ActivateEndpoint+0x180>
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa66:	81bb      	strh	r3, [r7, #12]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	441a      	add	r2, r3
 800aa72:	89bb      	ldrh	r3, [r7, #12]
 800aa74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	78db      	ldrb	r3, [r3, #3]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d020      	beq.n	800aad2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa6:	813b      	strh	r3, [r7, #8]
 800aaa8:	893b      	ldrh	r3, [r7, #8]
 800aaaa:	f083 0320 	eor.w	r3, r3, #32
 800aaae:	813b      	strh	r3, [r7, #8]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	441a      	add	r2, r3
 800aaba:	893b      	ldrh	r3, [r7, #8]
 800aabc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aacc:	b29b      	uxth	r3, r3
 800aace:	8013      	strh	r3, [r2, #0]
 800aad0:	e27f      	b.n	800afd2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae8:	817b      	strh	r3, [r7, #10]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	441a      	add	r2, r3
 800aaf4:	897b      	ldrh	r3, [r7, #10]
 800aaf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	8013      	strh	r3, [r2, #0]
 800ab0a:	e262      	b.n	800afd2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	4413      	add	r3, r2
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00da      	lsls	r2, r3, #3
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	88db      	ldrh	r3, [r3, #6]
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	4413      	add	r3, r2
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab62:	623b      	str	r3, [r7, #32]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d112      	bne.n	800ab92 <USB_ActivateEndpoint+0x28a>
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	801a      	strh	r2, [r3, #0]
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	801a      	strh	r2, [r3, #0]
 800ab90:	e02f      	b.n	800abf2 <USB_ActivateEndpoint+0x2ea>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b3e      	cmp	r3, #62	; 0x3e
 800ab98:	d813      	bhi.n	800abc2 <USB_ActivateEndpoint+0x2ba>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	085b      	lsrs	r3, r3, #1
 800aba0:	663b      	str	r3, [r7, #96]	; 0x60
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <USB_ActivateEndpoint+0x2ac>
 800abae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abb0:	3301      	adds	r3, #1
 800abb2:	663b      	str	r3, [r7, #96]	; 0x60
 800abb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	029b      	lsls	r3, r3, #10
 800abba:	b29a      	uxth	r2, r3
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	801a      	strh	r2, [r3, #0]
 800abc0:	e017      	b.n	800abf2 <USB_ActivateEndpoint+0x2ea>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	095b      	lsrs	r3, r3, #5
 800abc8:	663b      	str	r3, [r7, #96]	; 0x60
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 031f 	and.w	r3, r3, #31
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <USB_ActivateEndpoint+0x2d4>
 800abd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abd8:	3b01      	subs	r3, #1
 800abda:	663b      	str	r3, [r7, #96]	; 0x60
 800abdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abde:	b29b      	uxth	r3, r3
 800abe0:	029b      	lsls	r3, r3, #10
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abec:	b29a      	uxth	r2, r3
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	83fb      	strh	r3, [r7, #30]
 800ac00:	8bfb      	ldrh	r3, [r7, #30]
 800ac02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01b      	beq.n	800ac42 <USB_ActivateEndpoint+0x33a>
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac20:	83bb      	strh	r3, [r7, #28]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	441a      	add	r2, r3
 800ac2c:	8bbb      	ldrh	r3, [r7, #28]
 800ac2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac58:	837b      	strh	r3, [r7, #26]
 800ac5a:	8b7b      	ldrh	r3, [r7, #26]
 800ac5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac60:	837b      	strh	r3, [r7, #26]
 800ac62:	8b7b      	ldrh	r3, [r7, #26]
 800ac64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac68:	837b      	strh	r3, [r7, #26]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	441a      	add	r2, r3
 800ac74:	8b7b      	ldrh	r3, [r7, #26]
 800ac76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	8013      	strh	r3, [r2, #0]
 800ac8a:	e1a2      	b.n	800afd2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	441a      	add	r2, r3
 800acb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800acb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acbc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800acc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	65bb      	str	r3, [r7, #88]	; 0x58
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	461a      	mov	r2, r3
 800acd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd8:	4413      	add	r3, r2
 800acda:	65bb      	str	r3, [r7, #88]	; 0x58
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	00da      	lsls	r2, r3, #3
 800ace2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acea:	657b      	str	r3, [r7, #84]	; 0x54
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	891b      	ldrh	r3, [r3, #8]
 800acf0:	085b      	lsrs	r3, r3, #1
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	653b      	str	r3, [r7, #80]	; 0x50
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	461a      	mov	r2, r3
 800ad0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad0c:	4413      	add	r3, r2
 800ad0e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	00da      	lsls	r2, r3, #3
 800ad16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad18:	4413      	add	r3, r2
 800ad1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	895b      	ldrh	r3, [r3, #10]
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	785b      	ldrb	r3, [r3, #1]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f040 8091 	bne.w	800ae5c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ad48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d01b      	beq.n	800ad8a <USB_ActivateEndpoint+0x482>
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad68:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	441a      	add	r2, r3
 800ad74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01b      	beq.n	800adda <USB_ActivateEndpoint+0x4d2>
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	441a      	add	r2, r3
 800adc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800add6:	b29b      	uxth	r3, r3
 800add8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800adf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800adf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800adf8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800adfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800adfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae00:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	441a      	add	r2, r3
 800ae0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ae0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae38:	867b      	strh	r3, [r7, #50]	; 0x32
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	441a      	add	r2, r3
 800ae44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	8013      	strh	r3, [r2, #0]
 800ae5a:	e0ba      	b.n	800afd2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ae6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d01d      	beq.n	800aeb4 <USB_ActivateEndpoint+0x5ac>
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	441a      	add	r2, r3
 800ae9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800aea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aeac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01d      	beq.n	800af0c <USB_ActivateEndpoint+0x604>
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	441a      	add	r2, r3
 800aef4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aefc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af08:	b29b      	uxth	r3, r3
 800af0a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	78db      	ldrb	r3, [r3, #3]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d024      	beq.n	800af5e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	b29b      	uxth	r3, r3
 800af22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af32:	f083 0320 	eor.w	r3, r3, #32
 800af36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	441a      	add	r2, r3
 800af44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af58:	b29b      	uxth	r3, r3
 800af5a:	8013      	strh	r3, [r2, #0]
 800af5c:	e01d      	b.n	800af9a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	441a      	add	r2, r3
 800af82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af96:	b29b      	uxth	r3, r3
 800af98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	441a      	add	r2, r3
 800afbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afce:	b29b      	uxth	r3, r3
 800afd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800afd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	376c      	adds	r7, #108	; 0x6c
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop

0800afe4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b08d      	sub	sp, #52	; 0x34
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	7b1b      	ldrb	r3, [r3, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f040 808e 	bne.w	800b114 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d044      	beq.n	800b08a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	81bb      	strh	r3, [r7, #12]
 800b00e:	89bb      	ldrh	r3, [r7, #12]
 800b010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01b      	beq.n	800b050 <USB_DeactivateEndpoint+0x6c>
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02e:	817b      	strh	r3, [r7, #10]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	441a      	add	r2, r3
 800b03a:	897b      	ldrh	r3, [r7, #10]
 800b03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b066:	813b      	strh	r3, [r7, #8]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	441a      	add	r2, r3
 800b072:	893b      	ldrh	r3, [r7, #8]
 800b074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b07c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b084:	b29b      	uxth	r3, r3
 800b086:	8013      	strh	r3, [r2, #0]
 800b088:	e192      	b.n	800b3b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	827b      	strh	r3, [r7, #18]
 800b098:	8a7b      	ldrh	r3, [r7, #18]
 800b09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d01b      	beq.n	800b0da <USB_DeactivateEndpoint+0xf6>
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b8:	823b      	strh	r3, [r7, #16]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	441a      	add	r2, r3
 800b0c4:	8a3b      	ldrh	r3, [r7, #16]
 800b0c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f0:	81fb      	strh	r3, [r7, #14]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	441a      	add	r2, r3
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b10e:	b29b      	uxth	r3, r3
 800b110:	8013      	strh	r3, [r2, #0]
 800b112:	e14d      	b.n	800b3b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f040 80a5 	bne.w	800b268 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	843b      	strh	r3, [r7, #32]
 800b12c:	8c3b      	ldrh	r3, [r7, #32]
 800b12e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01b      	beq.n	800b16e <USB_DeactivateEndpoint+0x18a>
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14c:	83fb      	strh	r3, [r7, #30]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	441a      	add	r2, r3
 800b158:	8bfb      	ldrh	r3, [r7, #30]
 800b15a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b15e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	83bb      	strh	r3, [r7, #28]
 800b17c:	8bbb      	ldrh	r3, [r7, #28]
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d01b      	beq.n	800b1be <USB_DeactivateEndpoint+0x1da>
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19c:	837b      	strh	r3, [r7, #26]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	441a      	add	r2, r3
 800b1a8:	8b7b      	ldrh	r3, [r7, #26]
 800b1aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d4:	833b      	strh	r3, [r7, #24]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	441a      	add	r2, r3
 800b1e0:	8b3b      	ldrh	r3, [r7, #24]
 800b1e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	b29b      	uxth	r3, r3
 800b204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20c:	82fb      	strh	r3, [r7, #22]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	441a      	add	r2, r3
 800b218:	8afb      	ldrh	r3, [r7, #22]
 800b21a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b244:	82bb      	strh	r3, [r7, #20]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	441a      	add	r2, r3
 800b250:	8abb      	ldrh	r3, [r7, #20]
 800b252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b25a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b262:	b29b      	uxth	r3, r3
 800b264:	8013      	strh	r3, [r2, #0]
 800b266:	e0a3      	b.n	800b3b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01b      	beq.n	800b2b8 <USB_DeactivateEndpoint+0x2d4>
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b296:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	441a      	add	r2, r3
 800b2a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b2c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d01b      	beq.n	800b308 <USB_DeactivateEndpoint+0x324>
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e6:	853b      	strh	r3, [r7, #40]	; 0x28
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	441a      	add	r2, r3
 800b2f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b304:	b29b      	uxth	r3, r3
 800b306:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	b29b      	uxth	r3, r3
 800b316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b31e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	441a      	add	r2, r3
 800b32a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b32c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b356:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	441a      	add	r2, r3
 800b362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b36c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b374:	b29b      	uxth	r3, r3
 800b376:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	441a      	add	r2, r3
 800b39a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b39c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3734      	adds	r7, #52	; 0x34
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b0c4      	sub	sp, #272	; 0x110
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	1d3b      	adds	r3, r7, #4
 800b3c6:	6018      	str	r0, [r3, #0]
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	f040 8566 	bne.w	800bea4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b3d8:	463b      	mov	r3, r7
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699a      	ldr	r2, [r3, #24]
 800b3de:	463b      	mov	r3, r7
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d905      	bls.n	800b3f4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b3f2:	e004      	b.n	800b3fe <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b3f4:	463b      	mov	r3, r7
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b3fe:	463b      	mov	r3, r7
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	7b1b      	ldrb	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d12c      	bne.n	800b462 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b408:	463b      	mov	r3, r7
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6959      	ldr	r1, [r3, #20]
 800b40e:	463b      	mov	r3, r7
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	88da      	ldrh	r2, [r3, #6]
 800b414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b418:	b29b      	uxth	r3, r3
 800b41a:	1d38      	adds	r0, r7, #4
 800b41c:	6800      	ldr	r0, [r0, #0]
 800b41e:	f001 fa43 	bl	800c8a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b422:	1d3b      	adds	r3, r7, #4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	1d3b      	adds	r3, r7, #4
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b430:	b29b      	uxth	r3, r3
 800b432:	461a      	mov	r2, r3
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4413      	add	r3, r2
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	463b      	mov	r3, r7
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	00da      	lsls	r2, r3, #3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	4413      	add	r3, r2
 800b446:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800b44a:	f107 0310 	add.w	r3, r7, #16
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b454:	b29a      	uxth	r2, r3
 800b456:	f107 0310 	add.w	r3, r7, #16
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	f000 bcec 	b.w	800be3a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b462:	463b      	mov	r3, r7
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	78db      	ldrb	r3, [r3, #3]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	f040 8356 	bne.w	800bb1a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b46e:	463b      	mov	r3, r7
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6a1a      	ldr	r2, [r3, #32]
 800b474:	463b      	mov	r3, r7
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	f240 82fa 	bls.w	800ba74 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b480:	1d3b      	adds	r3, r7, #4
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	463b      	mov	r3, r7
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	b29b      	uxth	r3, r3
 800b492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800b49e:	1d3b      	adds	r3, r7, #4
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	441a      	add	r2, r3
 800b4ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6a1a      	ldr	r2, [r3, #32]
 800b4d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4d8:	1ad2      	subs	r2, r2, r3
 800b4da:	463b      	mov	r3, r7
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b4e0:	1d3b      	adds	r3, r7, #4
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f000 815e 	beq.w	800b7b8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4fc:	1d3b      	adds	r3, r7, #4
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
 800b502:	463b      	mov	r3, r7
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d164      	bne.n	800b5d6 <USB_EPStartXfer+0x218>
 800b50c:	1d3b      	adds	r3, r7, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b512:	1d3b      	adds	r3, r7, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	4413      	add	r3, r2
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b524:	463b      	mov	r3, r7
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	00da      	lsls	r2, r3, #3
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	4413      	add	r3, r2
 800b530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
 800b536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d112      	bne.n	800b564 <USB_EPStartXfer+0x1a6>
 800b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	b29b      	uxth	r3, r3
 800b544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b548:	b29a      	uxth	r2, r3
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	801a      	strh	r2, [r3, #0]
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	b29b      	uxth	r3, r3
 800b554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	801a      	strh	r2, [r3, #0]
 800b562:	e054      	b.n	800b60e <USB_EPStartXfer+0x250>
 800b564:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b568:	2b3e      	cmp	r3, #62	; 0x3e
 800b56a:	d817      	bhi.n	800b59c <USB_EPStartXfer+0x1de>
 800b56c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b570:	085b      	lsrs	r3, r3, #1
 800b572:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <USB_EPStartXfer+0x1ce>
 800b582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b586:	3301      	adds	r3, #1
 800b588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b590:	b29b      	uxth	r3, r3
 800b592:	029b      	lsls	r3, r3, #10
 800b594:	b29a      	uxth	r2, r3
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	801a      	strh	r2, [r3, #0]
 800b59a:	e038      	b.n	800b60e <USB_EPStartXfer+0x250>
 800b59c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5a0:	095b      	lsrs	r3, r3, #5
 800b5a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b5a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5aa:	f003 031f 	and.w	r3, r3, #31
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d104      	bne.n	800b5bc <USB_EPStartXfer+0x1fe>
 800b5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	029b      	lsls	r3, r3, #10
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	801a      	strh	r2, [r3, #0]
 800b5d4:	e01b      	b.n	800b60e <USB_EPStartXfer+0x250>
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d116      	bne.n	800b60e <USB_EPStartXfer+0x250>
 800b5e0:	1d3b      	adds	r3, r7, #4
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ee:	4413      	add	r3, r2
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	00da      	lsls	r2, r3, #3
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b602:	633b      	str	r3, [r7, #48]	; 0x30
 800b604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b608:	b29a      	uxth	r2, r3
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b60e:	463b      	mov	r3, r7
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	895b      	ldrh	r3, [r3, #10]
 800b614:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b618:	463b      	mov	r3, r7
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6959      	ldr	r1, [r3, #20]
 800b61e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b622:	b29b      	uxth	r3, r3
 800b624:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b628:	1d38      	adds	r0, r7, #4
 800b62a:	6800      	ldr	r0, [r0, #0]
 800b62c:	f001 f93c 	bl	800c8a8 <USB_WritePMA>
            ep->xfer_buff += len;
 800b630:	463b      	mov	r3, r7
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	695a      	ldr	r2, [r3, #20]
 800b636:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b63a:	441a      	add	r2, r3
 800b63c:	463b      	mov	r3, r7
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b642:	463b      	mov	r3, r7
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6a1a      	ldr	r2, [r3, #32]
 800b648:	463b      	mov	r3, r7
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d90e      	bls.n	800b670 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800b652:	463b      	mov	r3, r7
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b65c:	463b      	mov	r3, r7
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6a1a      	ldr	r2, [r3, #32]
 800b662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	463b      	mov	r3, r7
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	621a      	str	r2, [r3, #32]
 800b66e:	e008      	b.n	800b682 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b670:	463b      	mov	r3, r7
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b67a:	463b      	mov	r3, r7
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2200      	movs	r2, #0
 800b680:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b682:	463b      	mov	r3, r7
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	785b      	ldrb	r3, [r3, #1]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d164      	bne.n	800b756 <USB_EPStartXfer+0x398>
 800b68c:	1d3b      	adds	r3, r7, #4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	61fb      	str	r3, [r7, #28]
 800b692:	1d3b      	adds	r3, r7, #4
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	61fb      	str	r3, [r7, #28]
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	00da      	lsls	r2, r3, #3
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6b4:	61bb      	str	r3, [r7, #24]
 800b6b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d112      	bne.n	800b6e4 <USB_EPStartXfer+0x326>
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	801a      	strh	r2, [r3, #0]
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	801a      	strh	r2, [r3, #0]
 800b6e2:	e057      	b.n	800b794 <USB_EPStartXfer+0x3d6>
 800b6e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6e8:	2b3e      	cmp	r3, #62	; 0x3e
 800b6ea:	d817      	bhi.n	800b71c <USB_EPStartXfer+0x35e>
 800b6ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6f0:	085b      	lsrs	r3, r3, #1
 800b6f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d004      	beq.n	800b70c <USB_EPStartXfer+0x34e>
 800b702:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b706:	3301      	adds	r3, #1
 800b708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b70c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b710:	b29b      	uxth	r3, r3
 800b712:	029b      	lsls	r3, r3, #10
 800b714:	b29a      	uxth	r2, r3
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	801a      	strh	r2, [r3, #0]
 800b71a:	e03b      	b.n	800b794 <USB_EPStartXfer+0x3d6>
 800b71c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b720:	095b      	lsrs	r3, r3, #5
 800b722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b726:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b72a:	f003 031f 	and.w	r3, r3, #31
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d104      	bne.n	800b73c <USB_EPStartXfer+0x37e>
 800b732:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b736:	3b01      	subs	r3, #1
 800b738:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b73c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b740:	b29b      	uxth	r3, r3
 800b742:	029b      	lsls	r3, r3, #10
 800b744:	b29b      	uxth	r3, r3
 800b746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b74e:	b29a      	uxth	r2, r3
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	e01e      	b.n	800b794 <USB_EPStartXfer+0x3d6>
 800b756:	463b      	mov	r3, r7
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	785b      	ldrb	r3, [r3, #1]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d119      	bne.n	800b794 <USB_EPStartXfer+0x3d6>
 800b760:	1d3b      	adds	r3, r7, #4
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	627b      	str	r3, [r7, #36]	; 0x24
 800b766:	1d3b      	adds	r3, r7, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b76e:	b29b      	uxth	r3, r3
 800b770:	461a      	mov	r2, r3
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	4413      	add	r3, r2
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
 800b778:	463b      	mov	r3, r7
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	00da      	lsls	r2, r3, #3
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	4413      	add	r3, r2
 800b784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b788:	623b      	str	r3, [r7, #32]
 800b78a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b78e:	b29a      	uxth	r2, r3
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b794:	463b      	mov	r3, r7
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	891b      	ldrh	r3, [r3, #8]
 800b79a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b79e:	463b      	mov	r3, r7
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6959      	ldr	r1, [r3, #20]
 800b7a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b7ae:	1d38      	adds	r0, r7, #4
 800b7b0:	6800      	ldr	r0, [r0, #0]
 800b7b2:	f001 f879 	bl	800c8a8 <USB_WritePMA>
 800b7b6:	e340      	b.n	800be3a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	785b      	ldrb	r3, [r3, #1]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d164      	bne.n	800b88c <USB_EPStartXfer+0x4ce>
 800b7c2:	1d3b      	adds	r3, r7, #4
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c8:	1d3b      	adds	r3, r7, #4
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d6:	4413      	add	r3, r2
 800b7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7da:	463b      	mov	r3, r7
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	00da      	lsls	r2, r3, #3
 800b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d112      	bne.n	800b81a <USB_EPStartXfer+0x45c>
 800b7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b802:	801a      	strh	r2, [r3, #0]
 800b804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b812:	b29a      	uxth	r2, r3
 800b814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b816:	801a      	strh	r2, [r3, #0]
 800b818:	e057      	b.n	800b8ca <USB_EPStartXfer+0x50c>
 800b81a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b81e:	2b3e      	cmp	r3, #62	; 0x3e
 800b820:	d817      	bhi.n	800b852 <USB_EPStartXfer+0x494>
 800b822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b82c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <USB_EPStartXfer+0x484>
 800b838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b83c:	3301      	adds	r3, #1
 800b83e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b846:	b29b      	uxth	r3, r3
 800b848:	029b      	lsls	r3, r3, #10
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b84e:	801a      	strh	r2, [r3, #0]
 800b850:	e03b      	b.n	800b8ca <USB_EPStartXfer+0x50c>
 800b852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b856:	095b      	lsrs	r3, r3, #5
 800b858:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b85c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b860:	f003 031f 	and.w	r3, r3, #31
 800b864:	2b00      	cmp	r3, #0
 800b866:	d104      	bne.n	800b872 <USB_EPStartXfer+0x4b4>
 800b868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b86c:	3b01      	subs	r3, #1
 800b86e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b876:	b29b      	uxth	r3, r3
 800b878:	029b      	lsls	r3, r3, #10
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b884:	b29a      	uxth	r2, r3
 800b886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	e01e      	b.n	800b8ca <USB_EPStartXfer+0x50c>
 800b88c:	463b      	mov	r3, r7
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	785b      	ldrb	r3, [r3, #1]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d119      	bne.n	800b8ca <USB_EPStartXfer+0x50c>
 800b896:	1d3b      	adds	r3, r7, #4
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	657b      	str	r3, [r7, #84]	; 0x54
 800b89c:	1d3b      	adds	r3, r7, #4
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8aa:	4413      	add	r3, r2
 800b8ac:	657b      	str	r3, [r7, #84]	; 0x54
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	00da      	lsls	r2, r3, #3
 800b8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8be:	653b      	str	r3, [r7, #80]	; 0x50
 800b8c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	891b      	ldrh	r3, [r3, #8]
 800b8d0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6959      	ldr	r1, [r3, #20]
 800b8da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b8e4:	1d38      	adds	r0, r7, #4
 800b8e6:	6800      	ldr	r0, [r0, #0]
 800b8e8:	f000 ffde 	bl	800c8a8 <USB_WritePMA>
            ep->xfer_buff += len;
 800b8ec:	463b      	mov	r3, r7
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	695a      	ldr	r2, [r3, #20]
 800b8f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8f6:	441a      	add	r2, r3
 800b8f8:	463b      	mov	r3, r7
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b8fe:	463b      	mov	r3, r7
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6a1a      	ldr	r2, [r3, #32]
 800b904:	463b      	mov	r3, r7
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d90e      	bls.n	800b92c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800b90e:	463b      	mov	r3, r7
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b918:	463b      	mov	r3, r7
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6a1a      	ldr	r2, [r3, #32]
 800b91e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b922:	1ad2      	subs	r2, r2, r3
 800b924:	463b      	mov	r3, r7
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	621a      	str	r2, [r3, #32]
 800b92a:	e008      	b.n	800b93e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800b92c:	463b      	mov	r3, r7
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b936:	463b      	mov	r3, r7
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2200      	movs	r2, #0
 800b93c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b93e:	1d3b      	adds	r3, r7, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	647b      	str	r3, [r7, #68]	; 0x44
 800b944:	463b      	mov	r3, r7
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	785b      	ldrb	r3, [r3, #1]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d164      	bne.n	800ba18 <USB_EPStartXfer+0x65a>
 800b94e:	1d3b      	adds	r3, r7, #4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b954:	1d3b      	adds	r3, r7, #4
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	461a      	mov	r2, r3
 800b960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b962:	4413      	add	r3, r2
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b966:	463b      	mov	r3, r7
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	00da      	lsls	r2, r3, #3
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	4413      	add	r3, r2
 800b972:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b976:	63bb      	str	r3, [r7, #56]	; 0x38
 800b978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d112      	bne.n	800b9a6 <USB_EPStartXfer+0x5e8>
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98e:	801a      	strh	r2, [r3, #0]
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	801a      	strh	r2, [r3, #0]
 800b9a4:	e054      	b.n	800ba50 <USB_EPStartXfer+0x692>
 800b9a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9aa:	2b3e      	cmp	r3, #62	; 0x3e
 800b9ac:	d817      	bhi.n	800b9de <USB_EPStartXfer+0x620>
 800b9ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9b2:	085b      	lsrs	r3, r3, #1
 800b9b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <USB_EPStartXfer+0x610>
 800b9c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	029b      	lsls	r3, r3, #10
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e038      	b.n	800ba50 <USB_EPStartXfer+0x692>
 800b9de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9ec:	f003 031f 	and.w	r3, r3, #31
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d104      	bne.n	800b9fe <USB_EPStartXfer+0x640>
 800b9f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	029b      	lsls	r3, r3, #10
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	801a      	strh	r2, [r3, #0]
 800ba16:	e01b      	b.n	800ba50 <USB_EPStartXfer+0x692>
 800ba18:	463b      	mov	r3, r7
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	785b      	ldrb	r3, [r3, #1]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d116      	bne.n	800ba50 <USB_EPStartXfer+0x692>
 800ba22:	1d3b      	adds	r3, r7, #4
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba30:	4413      	add	r3, r2
 800ba32:	647b      	str	r3, [r7, #68]	; 0x44
 800ba34:	463b      	mov	r3, r7
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	00da      	lsls	r2, r3, #3
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	4413      	add	r3, r2
 800ba40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba44:	643b      	str	r3, [r7, #64]	; 0x40
 800ba46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ba50:	463b      	mov	r3, r7
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	895b      	ldrh	r3, [r3, #10]
 800ba56:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6959      	ldr	r1, [r3, #20]
 800ba60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800ba6a:	1d38      	adds	r0, r7, #4
 800ba6c:	6800      	ldr	r0, [r0, #0]
 800ba6e:	f000 ff1b 	bl	800c8a8 <USB_WritePMA>
 800ba72:	e1e2      	b.n	800be3a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800ba74:	463b      	mov	r3, r7
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800ba7e:	1d3b      	adds	r3, r7, #4
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	463b      	mov	r3, r7
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ba94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba98:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ba9c:	1d3b      	adds	r3, r7, #4
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	463b      	mov	r3, r7
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	441a      	add	r2, r3
 800baaa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800baae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800babe:	b29b      	uxth	r3, r3
 800bac0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bac2:	1d3b      	adds	r3, r7, #4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	663b      	str	r3, [r7, #96]	; 0x60
 800bac8:	1d3b      	adds	r3, r7, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	461a      	mov	r2, r3
 800bad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad6:	4413      	add	r3, r2
 800bad8:	663b      	str	r3, [r7, #96]	; 0x60
 800bada:	463b      	mov	r3, r7
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	00da      	lsls	r2, r3, #3
 800bae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bae4:	4413      	add	r3, r2
 800bae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800baea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baf4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800baf6:	463b      	mov	r3, r7
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	891b      	ldrh	r3, [r3, #8]
 800bafc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb00:	463b      	mov	r3, r7
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6959      	ldr	r1, [r3, #20]
 800bb06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800bb10:	1d38      	adds	r0, r7, #4
 800bb12:	6800      	ldr	r0, [r0, #0]
 800bb14:	f000 fec8 	bl	800c8a8 <USB_WritePMA>
 800bb18:	e18f      	b.n	800be3a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb1a:	1d3b      	adds	r3, r7, #4
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	463b      	mov	r3, r7
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 808f 	beq.w	800bc54 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb36:	1d3b      	adds	r3, r7, #4
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	785b      	ldrb	r3, [r3, #1]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d164      	bne.n	800bc10 <USB_EPStartXfer+0x852>
 800bb46:	1d3b      	adds	r3, r7, #4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	673b      	str	r3, [r7, #112]	; 0x70
 800bb4c:	1d3b      	adds	r3, r7, #4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	461a      	mov	r2, r3
 800bb58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb5a:	4413      	add	r3, r2
 800bb5c:	673b      	str	r3, [r7, #112]	; 0x70
 800bb5e:	463b      	mov	r3, r7
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	00da      	lsls	r2, r3, #3
 800bb66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb68:	4413      	add	r3, r2
 800bb6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d112      	bne.n	800bb9e <USB_EPStartXfer+0x7e0>
 800bb78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb86:	801a      	strh	r2, [r3, #0]
 800bb88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9a:	801a      	strh	r2, [r3, #0]
 800bb9c:	e054      	b.n	800bc48 <USB_EPStartXfer+0x88a>
 800bb9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bba2:	2b3e      	cmp	r3, #62	; 0x3e
 800bba4:	d817      	bhi.n	800bbd6 <USB_EPStartXfer+0x818>
 800bba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d004      	beq.n	800bbc6 <USB_EPStartXfer+0x808>
 800bbbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	029b      	lsls	r3, r3, #10
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd2:	801a      	strh	r2, [r3, #0]
 800bbd4:	e038      	b.n	800bc48 <USB_EPStartXfer+0x88a>
 800bbd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbda:	095b      	lsrs	r3, r3, #5
 800bbdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbe0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbe4:	f003 031f 	and.w	r3, r3, #31
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d104      	bne.n	800bbf6 <USB_EPStartXfer+0x838>
 800bbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	029b      	lsls	r3, r3, #10
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc0c:	801a      	strh	r2, [r3, #0]
 800bc0e:	e01b      	b.n	800bc48 <USB_EPStartXfer+0x88a>
 800bc10:	463b      	mov	r3, r7
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	785b      	ldrb	r3, [r3, #1]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d116      	bne.n	800bc48 <USB_EPStartXfer+0x88a>
 800bc1a:	1d3b      	adds	r3, r7, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc28:	4413      	add	r3, r2
 800bc2a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	00da      	lsls	r2, r3, #3
 800bc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc36:	4413      	add	r3, r2
 800bc38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc3c:	677b      	str	r3, [r7, #116]	; 0x74
 800bc3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bc48:	463b      	mov	r3, r7
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	895b      	ldrh	r3, [r3, #10]
 800bc4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800bc52:	e097      	b.n	800bd84 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc54:	463b      	mov	r3, r7
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d168      	bne.n	800bd30 <USB_EPStartXfer+0x972>
 800bc5e:	1d3b      	adds	r3, r7, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc66:	1d3b      	adds	r3, r7, #4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc76:	4413      	add	r3, r2
 800bc78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc7c:	463b      	mov	r3, r7
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	00da      	lsls	r2, r3, #3
 800bc84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc88:	4413      	add	r3, r2
 800bc8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d112      	bne.n	800bcbe <USB_EPStartXfer+0x900>
 800bc98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc9a:	881b      	ldrh	r3, [r3, #0]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bca6:	801a      	strh	r2, [r3, #0]
 800bca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcba:	801a      	strh	r2, [r3, #0]
 800bcbc:	e05d      	b.n	800bd7a <USB_EPStartXfer+0x9bc>
 800bcbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bcc2:	2b3e      	cmp	r3, #62	; 0x3e
 800bcc4:	d817      	bhi.n	800bcf6 <USB_EPStartXfer+0x938>
 800bcc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bcca:	085b      	lsrs	r3, r3, #1
 800bccc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <USB_EPStartXfer+0x928>
 800bcdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bce0:	3301      	adds	r3, #1
 800bce2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bce6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	029b      	lsls	r3, r3, #10
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	e041      	b.n	800bd7a <USB_EPStartXfer+0x9bc>
 800bcf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bd04:	f003 031f 	and.w	r3, r3, #31
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USB_EPStartXfer+0x958>
 800bd0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd10:	3b01      	subs	r3, #1
 800bd12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	029b      	lsls	r3, r3, #10
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd2c:	801a      	strh	r2, [r3, #0]
 800bd2e:	e024      	b.n	800bd7a <USB_EPStartXfer+0x9bc>
 800bd30:	463b      	mov	r3, r7
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d11f      	bne.n	800bd7a <USB_EPStartXfer+0x9bc>
 800bd3a:	1d3b      	adds	r3, r7, #4
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd42:	1d3b      	adds	r3, r7, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd52:	4413      	add	r3, r2
 800bd54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd58:	463b      	mov	r3, r7
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	00da      	lsls	r2, r3, #3
 800bd60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd64:	4413      	add	r3, r2
 800bd66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd7a:	463b      	mov	r3, r7
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	891b      	ldrh	r3, [r3, #8]
 800bd80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd84:	463b      	mov	r3, r7
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6959      	ldr	r1, [r3, #20]
 800bd8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800bd94:	1d38      	adds	r0, r7, #4
 800bd96:	6800      	ldr	r0, [r0, #0]
 800bd98:	f000 fd86 	bl	800c8a8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800bd9c:	463b      	mov	r3, r7
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	785b      	ldrb	r3, [r3, #1]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d122      	bne.n	800bdec <USB_EPStartXfer+0xa2e>
 800bda6:	1d3b      	adds	r3, r7, #4
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	463b      	mov	r3, r7
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800bdc4:	1d3b      	adds	r3, r7, #4
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	463b      	mov	r3, r7
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	441a      	add	r2, r3
 800bdd2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800bdd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bde2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	8013      	strh	r3, [r2, #0]
 800bdea:	e026      	b.n	800be3a <USB_EPStartXfer+0xa7c>
 800bdec:	463b      	mov	r3, r7
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	785b      	ldrb	r3, [r3, #1]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d121      	bne.n	800be3a <USB_EPStartXfer+0xa7c>
 800bdf6:	1d3b      	adds	r3, r7, #4
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	463b      	mov	r3, r7
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	b29b      	uxth	r3, r3
 800be08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800be14:	1d3b      	adds	r3, r7, #4
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	463b      	mov	r3, r7
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	441a      	add	r2, r3
 800be22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800be26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be36:	b29b      	uxth	r3, r3
 800be38:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800be3a:	1d3b      	adds	r3, r7, #4
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	463b      	mov	r3, r7
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	f107 020e 	add.w	r2, r7, #14
 800be50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be58:	8013      	strh	r3, [r2, #0]
 800be5a:	f107 030e 	add.w	r3, r7, #14
 800be5e:	f107 020e 	add.w	r2, r7, #14
 800be62:	8812      	ldrh	r2, [r2, #0]
 800be64:	f082 0210 	eor.w	r2, r2, #16
 800be68:	801a      	strh	r2, [r3, #0]
 800be6a:	f107 030e 	add.w	r3, r7, #14
 800be6e:	f107 020e 	add.w	r2, r7, #14
 800be72:	8812      	ldrh	r2, [r2, #0]
 800be74:	f082 0220 	eor.w	r2, r2, #32
 800be78:	801a      	strh	r2, [r3, #0]
 800be7a:	1d3b      	adds	r3, r7, #4
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	463b      	mov	r3, r7
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	441a      	add	r2, r3
 800be88:	f107 030e 	add.w	r3, r7, #14
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	8013      	strh	r3, [r2, #0]
 800bea2:	e3b5      	b.n	800c610 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bea4:	463b      	mov	r3, r7
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	7b1b      	ldrb	r3, [r3, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f040 8090 	bne.w	800bfd0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800beb0:	463b      	mov	r3, r7
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	463b      	mov	r3, r7
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d90e      	bls.n	800bede <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800bec0:	463b      	mov	r3, r7
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800beca:	463b      	mov	r3, r7
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	699a      	ldr	r2, [r3, #24]
 800bed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bed4:	1ad2      	subs	r2, r2, r3
 800bed6:	463b      	mov	r3, r7
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	619a      	str	r2, [r3, #24]
 800bedc:	e008      	b.n	800bef0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800bede:	463b      	mov	r3, r7
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800bee8:	463b      	mov	r3, r7
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2200      	movs	r2, #0
 800beee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bef0:	1d3b      	adds	r3, r7, #4
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bef8:	1d3b      	adds	r3, r7, #4
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf08:	4413      	add	r3, r2
 800bf0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf0e:	463b      	mov	r3, r7
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	00da      	lsls	r2, r3, #3
 800bf16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d116      	bne.n	800bf5a <USB_EPStartXfer+0xb9c>
 800bf2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf3e:	801a      	strh	r2, [r3, #0]
 800bf40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf56:	801a      	strh	r2, [r3, #0]
 800bf58:	e32c      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800bf5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf5e:	2b3e      	cmp	r3, #62	; 0x3e
 800bf60:	d818      	bhi.n	800bf94 <USB_EPStartXfer+0xbd6>
 800bf62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf66:	085b      	lsrs	r3, r3, #1
 800bf68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf70:	f003 0301 	and.w	r3, r3, #1
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d004      	beq.n	800bf82 <USB_EPStartXfer+0xbc4>
 800bf78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	029b      	lsls	r3, r3, #10
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf90:	801a      	strh	r2, [r3, #0]
 800bf92:	e30f      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800bf94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf98:	095b      	lsrs	r3, r3, #5
 800bf9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bfa2:	f003 031f 	and.w	r3, r3, #31
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d104      	bne.n	800bfb4 <USB_EPStartXfer+0xbf6>
 800bfaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bfb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	029b      	lsls	r3, r3, #10
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfcc:	801a      	strh	r2, [r3, #0]
 800bfce:	e2f1      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	78db      	ldrb	r3, [r3, #3]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	f040 818f 	bne.w	800c2fa <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bfdc:	463b      	mov	r3, r7
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d175      	bne.n	800c0d2 <USB_EPStartXfer+0xd14>
 800bfe6:	1d3b      	adds	r3, r7, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfee:	1d3b      	adds	r3, r7, #4
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	461a      	mov	r2, r3
 800bffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bffe:	4413      	add	r3, r2
 800c000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c004:	463b      	mov	r3, r7
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	00da      	lsls	r2, r3, #3
 800c00c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c010:	4413      	add	r3, r2
 800c012:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c01a:	463b      	mov	r3, r7
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d116      	bne.n	800c052 <USB_EPStartXfer+0xc94>
 800c024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c030:	b29a      	uxth	r2, r3
 800c032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c036:	801a      	strh	r2, [r3, #0]
 800c038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c048:	b29a      	uxth	r2, r3
 800c04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c04e:	801a      	strh	r2, [r3, #0]
 800c050:	e065      	b.n	800c11e <USB_EPStartXfer+0xd60>
 800c052:	463b      	mov	r3, r7
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b3e      	cmp	r3, #62	; 0x3e
 800c05a:	d81a      	bhi.n	800c092 <USB_EPStartXfer+0xcd4>
 800c05c:	463b      	mov	r3, r7
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	085b      	lsrs	r3, r3, #1
 800c064:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c068:	463b      	mov	r3, r7
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <USB_EPStartXfer+0xcc2>
 800c076:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c07a:	3301      	adds	r3, #1
 800c07c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c080:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c084:	b29b      	uxth	r3, r3
 800c086:	029b      	lsls	r3, r3, #10
 800c088:	b29a      	uxth	r2, r3
 800c08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c08e:	801a      	strh	r2, [r3, #0]
 800c090:	e045      	b.n	800c11e <USB_EPStartXfer+0xd60>
 800c092:	463b      	mov	r3, r7
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	095b      	lsrs	r3, r3, #5
 800c09a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c09e:	463b      	mov	r3, r7
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	f003 031f 	and.w	r3, r3, #31
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d104      	bne.n	800c0b6 <USB_EPStartXfer+0xcf8>
 800c0ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	029b      	lsls	r3, r3, #10
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0ce:	801a      	strh	r2, [r3, #0]
 800c0d0:	e025      	b.n	800c11e <USB_EPStartXfer+0xd60>
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d120      	bne.n	800c11e <USB_EPStartXfer+0xd60>
 800c0dc:	1d3b      	adds	r3, r7, #4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0e4:	1d3b      	adds	r3, r7, #4
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	00da      	lsls	r2, r3, #3
 800c102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c106:	4413      	add	r3, r2
 800c108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c10c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c110:	463b      	mov	r3, r7
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	b29a      	uxth	r2, r3
 800c118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c11c:	801a      	strh	r2, [r3, #0]
 800c11e:	1d3b      	adds	r3, r7, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c126:	463b      	mov	r3, r7
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d175      	bne.n	800c21c <USB_EPStartXfer+0xe5e>
 800c130:	1d3b      	adds	r3, r7, #4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c138:	1d3b      	adds	r3, r7, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c140:	b29b      	uxth	r3, r3
 800c142:	461a      	mov	r2, r3
 800c144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c148:	4413      	add	r3, r2
 800c14a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c14e:	463b      	mov	r3, r7
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	00da      	lsls	r2, r3, #3
 800c156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c15a:	4413      	add	r3, r2
 800c15c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c164:	463b      	mov	r3, r7
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d116      	bne.n	800c19c <USB_EPStartXfer+0xdde>
 800c16e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	b29b      	uxth	r3, r3
 800c176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c192:	b29a      	uxth	r2, r3
 800c194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c198:	801a      	strh	r2, [r3, #0]
 800c19a:	e061      	b.n	800c260 <USB_EPStartXfer+0xea2>
 800c19c:	463b      	mov	r3, r7
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	691b      	ldr	r3, [r3, #16]
 800c1a2:	2b3e      	cmp	r3, #62	; 0x3e
 800c1a4:	d81a      	bhi.n	800c1dc <USB_EPStartXfer+0xe1e>
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	085b      	lsrs	r3, r3, #1
 800c1ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <USB_EPStartXfer+0xe0c>
 800c1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	029b      	lsls	r3, r3, #10
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1d8:	801a      	strh	r2, [r3, #0]
 800c1da:	e041      	b.n	800c260 <USB_EPStartXfer+0xea2>
 800c1dc:	463b      	mov	r3, r7
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	095b      	lsrs	r3, r3, #5
 800c1e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1e8:	463b      	mov	r3, r7
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	f003 031f 	and.w	r3, r3, #31
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d104      	bne.n	800c200 <USB_EPStartXfer+0xe42>
 800c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c204:	b29b      	uxth	r3, r3
 800c206:	029b      	lsls	r3, r3, #10
 800c208:	b29b      	uxth	r3, r3
 800c20a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c212:	b29a      	uxth	r2, r3
 800c214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	e021      	b.n	800c260 <USB_EPStartXfer+0xea2>
 800c21c:	463b      	mov	r3, r7
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	785b      	ldrb	r3, [r3, #1]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d11c      	bne.n	800c260 <USB_EPStartXfer+0xea2>
 800c226:	1d3b      	adds	r3, r7, #4
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c22e:	b29b      	uxth	r3, r3
 800c230:	461a      	mov	r2, r3
 800c232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c236:	4413      	add	r3, r2
 800c238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c23c:	463b      	mov	r3, r7
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	00da      	lsls	r2, r3, #3
 800c244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c248:	4413      	add	r3, r2
 800c24a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c252:	463b      	mov	r3, r7
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	b29a      	uxth	r2, r3
 800c25a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c25e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800c260:	463b      	mov	r3, r7
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 81a4 	beq.w	800c5b4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c26c:	1d3b      	adds	r3, r7, #4
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	463b      	mov	r3, r7
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c280:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d005      	beq.n	800c298 <USB_EPStartXfer+0xeda>
 800c28c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10d      	bne.n	800c2b4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c298:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c29c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8187 	bne.w	800c5b4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c2a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f040 8180 	bne.w	800c5b4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c2b4:	1d3b      	adds	r3, r7, #4
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	881b      	ldrh	r3, [r3, #0]
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800c2d2:	1d3b      	adds	r3, r7, #4
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	441a      	add	r2, r3
 800c2e0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800c2e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	8013      	strh	r3, [r2, #0]
 800c2f8:	e15c      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	78db      	ldrb	r3, [r3, #3]
 800c300:	2b01      	cmp	r3, #1
 800c302:	f040 8155 	bne.w	800c5b0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800c306:	463b      	mov	r3, r7
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	699a      	ldr	r2, [r3, #24]
 800c30c:	463b      	mov	r3, r7
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	429a      	cmp	r2, r3
 800c314:	d90e      	bls.n	800c334 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800c316:	463b      	mov	r3, r7
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800c320:	463b      	mov	r3, r7
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	699a      	ldr	r2, [r3, #24]
 800c326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	463b      	mov	r3, r7
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	619a      	str	r2, [r3, #24]
 800c332:	e008      	b.n	800c346 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800c334:	463b      	mov	r3, r7
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800c33e:	463b      	mov	r3, r7
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2200      	movs	r2, #0
 800c344:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c346:	463b      	mov	r3, r7
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	785b      	ldrb	r3, [r3, #1]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d16f      	bne.n	800c430 <USB_EPStartXfer+0x1072>
 800c350:	1d3b      	adds	r3, r7, #4
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c358:	1d3b      	adds	r3, r7, #4
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c360:	b29b      	uxth	r3, r3
 800c362:	461a      	mov	r2, r3
 800c364:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c368:	4413      	add	r3, r2
 800c36a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c36e:	463b      	mov	r3, r7
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	00da      	lsls	r2, r3, #3
 800c376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c37a:	4413      	add	r3, r2
 800c37c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d116      	bne.n	800c3ba <USB_EPStartXfer+0xffc>
 800c38c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	b29b      	uxth	r3, r3
 800c394:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c398:	b29a      	uxth	r2, r3
 800c39a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c39e:	801a      	strh	r2, [r3, #0]
 800c3a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3b6:	801a      	strh	r2, [r3, #0]
 800c3b8:	e05f      	b.n	800c47a <USB_EPStartXfer+0x10bc>
 800c3ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c3be:	2b3e      	cmp	r3, #62	; 0x3e
 800c3c0:	d818      	bhi.n	800c3f4 <USB_EPStartXfer+0x1036>
 800c3c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c3c6:	085b      	lsrs	r3, r3, #1
 800c3c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d004      	beq.n	800c3e2 <USB_EPStartXfer+0x1024>
 800c3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	029b      	lsls	r3, r3, #10
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3f0:	801a      	strh	r2, [r3, #0]
 800c3f2:	e042      	b.n	800c47a <USB_EPStartXfer+0x10bc>
 800c3f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c3f8:	095b      	lsrs	r3, r3, #5
 800c3fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c402:	f003 031f 	and.w	r3, r3, #31
 800c406:	2b00      	cmp	r3, #0
 800c408:	d104      	bne.n	800c414 <USB_EPStartXfer+0x1056>
 800c40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40e:	3b01      	subs	r3, #1
 800c410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c418:	b29b      	uxth	r3, r3
 800c41a:	029b      	lsls	r3, r3, #10
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c426:	b29a      	uxth	r2, r3
 800c428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c42c:	801a      	strh	r2, [r3, #0]
 800c42e:	e024      	b.n	800c47a <USB_EPStartXfer+0x10bc>
 800c430:	463b      	mov	r3, r7
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d11f      	bne.n	800c47a <USB_EPStartXfer+0x10bc>
 800c43a:	1d3b      	adds	r3, r7, #4
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c442:	1d3b      	adds	r3, r7, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	461a      	mov	r2, r3
 800c44e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c452:	4413      	add	r3, r2
 800c454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c458:	463b      	mov	r3, r7
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	00da      	lsls	r2, r3, #3
 800c460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c464:	4413      	add	r3, r2
 800c466:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c46a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c46e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c472:	b29a      	uxth	r2, r3
 800c474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c478:	801a      	strh	r2, [r3, #0]
 800c47a:	1d3b      	adds	r3, r7, #4
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c482:	463b      	mov	r3, r7
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d16f      	bne.n	800c56c <USB_EPStartXfer+0x11ae>
 800c48c:	1d3b      	adds	r3, r7, #4
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c494:	1d3b      	adds	r3, r7, #4
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c4aa:	463b      	mov	r3, r7
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00da      	lsls	r2, r3, #3
 800c4b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d116      	bne.n	800c4f6 <USB_EPStartXfer+0x1138>
 800c4c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4f2:	801a      	strh	r2, [r3, #0]
 800c4f4:	e05e      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800c4f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c4fc:	d818      	bhi.n	800c530 <USB_EPStartXfer+0x1172>
 800c4fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c502:	085b      	lsrs	r3, r3, #1
 800c504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c508:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <USB_EPStartXfer+0x1160>
 800c514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c518:	3301      	adds	r3, #1
 800c51a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c522:	b29b      	uxth	r3, r3
 800c524:	029b      	lsls	r3, r3, #10
 800c526:	b29a      	uxth	r2, r3
 800c528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c52c:	801a      	strh	r2, [r3, #0]
 800c52e:	e041      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800c530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c534:	095b      	lsrs	r3, r3, #5
 800c536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c53a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c53e:	f003 031f 	and.w	r3, r3, #31
 800c542:	2b00      	cmp	r3, #0
 800c544:	d104      	bne.n	800c550 <USB_EPStartXfer+0x1192>
 800c546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c54a:	3b01      	subs	r3, #1
 800c54c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c554:	b29b      	uxth	r3, r3
 800c556:	029b      	lsls	r3, r3, #10
 800c558:	b29b      	uxth	r3, r3
 800c55a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c55e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c562:	b29a      	uxth	r2, r3
 800c564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c568:	801a      	strh	r2, [r3, #0]
 800c56a:	e023      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800c56c:	463b      	mov	r3, r7
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	785b      	ldrb	r3, [r3, #1]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d11e      	bne.n	800c5b4 <USB_EPStartXfer+0x11f6>
 800c576:	1d3b      	adds	r3, r7, #4
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c57e:	b29b      	uxth	r3, r3
 800c580:	461a      	mov	r2, r3
 800c582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c586:	4413      	add	r3, r2
 800c588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c58c:	463b      	mov	r3, r7
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	00da      	lsls	r2, r3, #3
 800c594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c598:	4413      	add	r3, r2
 800c59a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c59e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c5ac:	801a      	strh	r2, [r3, #0]
 800c5ae:	e001      	b.n	800c5b4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e02e      	b.n	800c612 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c5b4:	1d3b      	adds	r3, r7, #4
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	463b      	mov	r3, r7
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c5d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c5d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c5da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c5de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c5e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c5ea:	1d3b      	adds	r3, r7, #4
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	441a      	add	r2, r3
 800c5f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c5fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	785b      	ldrb	r3, [r3, #1]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d020      	beq.n	800c670 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c644:	81bb      	strh	r3, [r7, #12]
 800c646:	89bb      	ldrh	r3, [r7, #12]
 800c648:	f083 0310 	eor.w	r3, r3, #16
 800c64c:	81bb      	strh	r3, [r7, #12]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	441a      	add	r2, r3
 800c658:	89bb      	ldrh	r3, [r7, #12]
 800c65a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c65e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	8013      	strh	r3, [r2, #0]
 800c66e:	e01f      	b.n	800c6b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	881b      	ldrh	r3, [r3, #0]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c686:	81fb      	strh	r3, [r7, #14]
 800c688:	89fb      	ldrh	r3, [r7, #14]
 800c68a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c68e:	81fb      	strh	r3, [r7, #14]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	441a      	add	r2, r3
 800c69a:	89fb      	ldrh	r3, [r7, #14]
 800c69c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b087      	sub	sp, #28
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	7b1b      	ldrb	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 809d 	bne.w	800c80c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d04c      	beq.n	800c774 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	823b      	strh	r3, [r7, #16]
 800c6e8:	8a3b      	ldrh	r3, [r7, #16]
 800c6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d01b      	beq.n	800c72a <USB_EPClearStall+0x6c>
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c708:	81fb      	strh	r3, [r7, #14]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	441a      	add	r2, r3
 800c714:	89fb      	ldrh	r3, [r7, #14]
 800c716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c71a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c726:	b29b      	uxth	r3, r3
 800c728:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	78db      	ldrb	r3, [r3, #3]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d06c      	beq.n	800c80c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c748:	81bb      	strh	r3, [r7, #12]
 800c74a:	89bb      	ldrh	r3, [r7, #12]
 800c74c:	f083 0320 	eor.w	r3, r3, #32
 800c750:	81bb      	strh	r3, [r7, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	441a      	add	r2, r3
 800c75c:	89bb      	ldrh	r3, [r7, #12]
 800c75e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c76e:	b29b      	uxth	r3, r3
 800c770:	8013      	strh	r3, [r2, #0]
 800c772:	e04b      	b.n	800c80c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	82fb      	strh	r3, [r7, #22]
 800c782:	8afb      	ldrh	r3, [r7, #22]
 800c784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01b      	beq.n	800c7c4 <USB_EPClearStall+0x106>
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7a2:	82bb      	strh	r3, [r7, #20]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	8abb      	ldrh	r3, [r7, #20]
 800c7b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7da:	827b      	strh	r3, [r7, #18]
 800c7dc:	8a7b      	ldrh	r3, [r7, #18]
 800c7de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7e2:	827b      	strh	r3, [r7, #18]
 800c7e4:	8a7b      	ldrh	r3, [r7, #18]
 800c7e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c7ea:	827b      	strh	r3, [r7, #18]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	441a      	add	r2, r3
 800c7f6:	8a7b      	ldrh	r3, [r7, #18]
 800c7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c808:	b29b      	uxth	r3, r3
 800c80a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b083      	sub	sp, #12
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	460b      	mov	r3, r1
 800c824:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c826:	78fb      	ldrb	r3, [r7, #3]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d103      	bne.n	800c834 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2280      	movs	r2, #128	; 0x80
 800c830:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c850:	b29b      	uxth	r3, r3
 800c852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c87e:	b29b      	uxth	r3, r3
 800c880:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c882:	68fb      	ldr	r3, [r7, #12]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b08d      	sub	sp, #52	; 0x34
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	80fb      	strh	r3, [r7, #6]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c8be:	88bb      	ldrh	r3, [r7, #4]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	085b      	lsrs	r3, r3, #1
 800c8c4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c8ce:	88fa      	ldrh	r2, [r7, #6]
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8de:	e01b      	b.n	800c918 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	b29a      	uxth	r2, r3
 800c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c904:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	3302      	adds	r3, #2
 800c90a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	3301      	adds	r3, #1
 800c910:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	3b01      	subs	r3, #1
 800c916:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e0      	bne.n	800c8e0 <USB_WritePMA+0x38>
  }
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	3734      	adds	r7, #52	; 0x34
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b08b      	sub	sp, #44	; 0x2c
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	4611      	mov	r1, r2
 800c938:	461a      	mov	r2, r3
 800c93a:	460b      	mov	r3, r1
 800c93c:	80fb      	strh	r3, [r7, #6]
 800c93e:	4613      	mov	r3, r2
 800c940:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c942:	88bb      	ldrh	r3, [r7, #4]
 800c944:	085b      	lsrs	r3, r3, #1
 800c946:	b29b      	uxth	r3, r3
 800c948:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c952:	88fa      	ldrh	r2, [r7, #6]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	627b      	str	r3, [r7, #36]	; 0x24
 800c962:	e018      	b.n	800c996 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	3302      	adds	r3, #2
 800c970:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	b2da      	uxtb	r2, r3
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	3301      	adds	r3, #1
 800c97e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	0a1b      	lsrs	r3, r3, #8
 800c984:	b2da      	uxtb	r2, r3
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	3301      	adds	r3, #1
 800c98e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	3b01      	subs	r3, #1
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e3      	bne.n	800c964 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c99c:	88bb      	ldrh	r3, [r7, #4]
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d007      	beq.n	800c9b8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	701a      	strb	r2, [r3, #0]
  }
}
 800c9b8:	bf00      	nop
 800c9ba:	372c      	adds	r7, #44	; 0x2c
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <initDrum>:
" |___/|_|  \\_,_|_|_|_|_\\__,_|\\_, |\n"
"                             |__/ \n";
*/

void initDrum(DRUM* _chnl, DRM_voice _main_voice, DRM_voice _aux_voice, DRM_type _chnl_type, GPIO_PinState _aux_state)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	4608      	mov	r0, r1
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	70fb      	strb	r3, [r7, #3]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	70bb      	strb	r3, [r7, #2]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	707b      	strb	r3, [r7, #1]
	// main configuration
	_chnl->main_voice 			= _main_voice;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	78fa      	ldrb	r2, [r7, #3]
 800c9e2:	701a      	strb	r2, [r3, #0]
	_chnl->aux_voice  			= _aux_voice;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	78ba      	ldrb	r2, [r7, #2]
 800c9e8:	709a      	strb	r2, [r3, #2]
	_chnl->chnl_type   			= _chnl_type;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	787a      	ldrb	r2, [r7, #1]
 800c9ee:	70da      	strb	r2, [r3, #3]

	// parameters default values for cymbal
	_chnl->peak_volume_norm		= 50;		// full volume at 4096*50%=2048
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2232      	movs	r2, #50	; 0x32
 800c9f4:	80da      	strh	r2, [r3, #6]
	_chnl->peak_max_length		= 201;		// 201 	x0.1=20.1ms
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	22c9      	movs	r2, #201	; 0xc9
 800c9fa:	811a      	strh	r2, [r3, #8]
	_chnl->peak_min_length		= 3; 		// 15 	x0.1=1.5ms
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2203      	movs	r2, #3
 800ca00:	815a      	strh	r2, [r3, #10]
	_chnl->peak2peak 			= 1500;//2048; 	//512 mute and 2048 ramp-down
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ca08:	819a      	strh	r2, [r3, #12]
	// if the main pad is mesh, peaks are much longer
	if ((_chnl_type == MESH_PAD_AUTOAUX) || (_chnl_type == MESH_RIM_AUTOAUX))
 800ca0a:	787b      	ldrb	r3, [r7, #1]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <initDrum+0x52>
 800ca10:	787b      	ldrb	r3, [r7, #1]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d102      	bne.n	800ca1c <initDrum+0x58>
		_chnl->peak_min_length	= 8; 		// 8 	x0.1=0.8ms
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2208      	movs	r2, #8
 800ca1a:	815a      	strh	r2, [r3, #10]

	// likely to overwrite
	_chnl->alt_voice  			= _main_voice;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	705a      	strb	r2, [r3, #1]

	// update all variables
	_chnl->cooldown		 		= 0;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	81da      	strh	r2, [r3, #14]
	_chnl->main_peaking			= 0;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	741a      	strb	r2, [r3, #16]
	_chnl->main_rdy	 			= 0;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	745a      	strb	r2, [r3, #17]
	_chnl->main_rdy_usealt		= 0;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	749a      	strb	r2, [r3, #18]

	_chnl->main_active_max 	 	= 0;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	829a      	strh	r2, [r3, #20]
	_chnl->main_active_length	= 0;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	82da      	strh	r2, [r3, #22]


	_chnl->main_rdy_height 	 	= 0;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	835a      	strh	r2, [r3, #26]
	_chnl->main_rdy_time	 	= 0;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	61da      	str	r2, [r3, #28]
	_chnl->main_rdy_volume	 	= 0;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 2020 	strb.w	r2, [r3, #32]
	_chnl->main_rdy_length	 	= 0;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	845a      	strh	r2, [r3, #34]	; 0x22


	_chnl->aux_rdy				= 0;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_chnl->aux_rdy_time			= 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	629a      	str	r2, [r3, #40]	; 0x28
	_chnl->aux_active_time		= 0;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	631a      	str	r2, [r3, #48]	; 0x30

	_chnl->aux_status 			= CHANNEL_STATUS_IDLE;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	761a      	strb	r2, [r3, #24]

	if ((_aux_state == GPIO_PIN_RESET)||(_chnl_type == CYMBAL_2_ZONE)){
 800ca7a:	7c3b      	ldrb	r3, [r7, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <initDrum+0xc2>
 800ca80:	787b      	ldrb	r3, [r7, #1]
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d10a      	bne.n	800ca9c <initDrum+0xd8>
		// LOW state, pad input
		_chnl->aux_type = AUX_TYPE_PAD;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PAD_IDLE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PAD_IDLE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if ((_aux_state == GPIO_PIN_SET)||(_chnl_type == CYMBAL_HIHAT)||(_chnl_type == CYMBAL_MUTE)){
 800ca9c:	7c3b      	ldrb	r3, [r7, #16]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d005      	beq.n	800caae <initDrum+0xea>
 800caa2:	787b      	ldrb	r3, [r7, #1]
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	d002      	beq.n	800caae <initDrum+0xea>
 800caa8:	787b      	ldrb	r3, [r7, #1]
 800caaa:	2b05      	cmp	r3, #5
 800caac:	d10a      	bne.n	800cac4 <initDrum+0x100>
		// HIGH state, pedal input
		_chnl->aux_type = AUX_TYPE_PEDAL;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PEDAL_IDLE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	_chnl->aux_last_state	= _aux_state;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7c3a      	ldrb	r2, [r7, #16]
 800cac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	_chnl->main_last_on_voice 	= 0;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	_chnl->main_last_on_time 	= 0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	639a      	str	r2, [r3, #56]	; 0x38
	_chnl->aux_last_on_voice 	= 0;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	_chnl->aux_last_on_time 	= 0;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	641a      	str	r2, [r3, #64]	; 0x40

}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <Update_channel>:

// V 4.0
uint8_t Update_channel(DRUM* _chnl, uint32_t _adc_reading, GPIO_PinState _aux_state){
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]

	// ### MAIN INPUT ###
	uint16_t thresh = PEAK_THRESHOLD;
 800cb02:	2332      	movs	r3, #50	; 0x32
 800cb04:	82fb      	strh	r3, [r7, #22]
	if (_chnl->cooldown) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	89db      	ldrh	r3, [r3, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d024      	beq.n	800cb58 <Update_channel+0x64>
		_chnl->cooldown--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	89db      	ldrh	r3, [r3, #14]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	81da      	strh	r2, [r3, #14]

		// if the peak is happening - no threshold
		if ( _chnl->main_peaking )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	7c1b      	ldrb	r3, [r3, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <Update_channel+0x34>
			thresh = 1;
 800cb22:	2301      	movs	r3, #1
 800cb24:	82fb      	strh	r3, [r7, #22]
 800cb26:	e017      	b.n	800cb58 <Update_channel+0x64>
		// until 50ms threshold = (2x max height)
		else if ( _chnl->cooldown > (_chnl->peak2peak - 512) )
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	899b      	ldrh	r3, [r3, #12]
 800cb2c:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	89d2      	ldrh	r2, [r2, #14]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	dc04      	bgt.n	800cb42 <Update_channel+0x4e>
			thresh = (_chnl->main_rdy_height<<1);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	8b5b      	ldrh	r3, [r3, #26]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	82fb      	strh	r3, [r7, #22]
 800cb40:	e00a      	b.n	800cb58 <Update_channel+0x64>
		// after 50ms, gradually lower the threshold from 75% until 0 after 150ms
		else
			thresh = (uint16_t)(_chnl->main_rdy_height>>5)*(uint16_t)(_chnl->cooldown>>6);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	8b5b      	ldrh	r3, [r3, #26]
 800cb46:	095b      	lsrs	r3, r3, #5
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	89db      	ldrh	r3, [r3, #14]
 800cb4e:	099b      	lsrs	r3, r3, #6
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	fb12 f303 	smulbb	r3, r2, r3
 800cb56:	82fb      	strh	r3, [r7, #22]
	}


	if (_adc_reading > thresh){
 800cb58:	8afb      	ldrh	r3, [r7, #22]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	f240 8091 	bls.w	800cc84 <Update_channel+0x190>
		// new peak, restart cooldown timer
		if (_chnl->cooldown < (_chnl->peak2peak - 512)){
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	89db      	ldrh	r3, [r3, #14]
 800cb66:	461a      	mov	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	899b      	ldrh	r3, [r3, #12]
 800cb6c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cb70:	429a      	cmp	r2, r3
 800cb72:	da0c      	bge.n	800cb8e <Update_channel+0x9a>
			_chnl->main_peaking  = 1;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	741a      	strb	r2, [r3, #16]

			_chnl->cooldown = _chnl->peak2peak;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	899a      	ldrh	r2, [r3, #12]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	81da      	strh	r2, [r3, #14]
			_chnl->main_active_length 	= 0;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	829a      	strh	r2, [r3, #20]
		}

		// increment peak length until max length is reached
		_chnl->main_active_length +=1;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	8adb      	ldrh	r3, [r3, #22]
 800cb92:	3301      	adds	r3, #1
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	82da      	strh	r2, [r3, #22]

		// if the value is bigger then max, update max
		if (_adc_reading > _chnl->main_active_max)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8a9b      	ldrh	r3, [r3, #20]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d903      	bls.n	800cbae <Update_channel+0xba>
			_chnl->main_active_max  = _adc_reading;
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	829a      	strh	r2, [r3, #20]

		// CHECKING END CONDITION
		// End of peak, if the point is lower then half of the max
		if (_adc_reading < (_chnl->main_active_max>>1)) {
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	8a9b      	ldrh	r3, [r3, #20]
 800cbb2:	085b      	lsrs	r3, r3, #1
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d262      	bcs.n	800cc84 <Update_channel+0x190>
			_chnl->main_peaking = 0;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	741a      	strb	r2, [r3, #16]

			// option 1. short peaks higher than 40% of max volume (50*8=400 ADC)
			if ((_chnl->main_active_length < _chnl->peak_min_length) && (_chnl->main_active_max > (_chnl->peak_volume_norm<<3)) ) {
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8ada      	ldrh	r2, [r3, #22]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	895b      	ldrh	r3, [r3, #10]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d221      	bcs.n	800cc14 <Update_channel+0x120>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8a9b      	ldrh	r3, [r3, #20]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	88db      	ldrh	r3, [r3, #6]
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	dd19      	ble.n	800cc14 <Update_channel+0x120>
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	78db      	ldrb	r3, [r3, #3]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d147      	bne.n	800cc78 <Update_channel+0x184>
					_chnl->main_rdy 		= 1;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2201      	movs	r2, #1
 800cbec:	745a      	strb	r2, [r3, #17]
					_chnl->main_rdy_usealt 	= 0;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	749a      	strb	r2, [r3, #18]
					_chnl->main_rdy_time	= STEP_TIME;
 800cbf4:	4b78      	ldr	r3, [pc, #480]	; (800cdd8 <Update_channel+0x2e4>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	61da      	str	r2, [r3, #28]
					_chnl->main_rdy_height 	= _chnl->main_active_max;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	8a9a      	ldrh	r2, [r3, #20]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	835a      	strh	r2, [r3, #26]
					_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	8ada      	ldrh	r2, [r3, #22]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	845a      	strh	r2, [r3, #34]	; 0x22
					_chnl->main_rdy_usealt = 1;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800cc12:	e031      	b.n	800cc78 <Update_channel+0x184>
				}
			// option 2. normal length peaks
			} else if ( ((_chnl->main_active_length >= _chnl->peak_min_length)  ) //|| (_chnl->main_active_max < (_chnl->peak_volume_norm<<2))
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8ada      	ldrh	r2, [r3, #22]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	895b      	ldrh	r3, [r3, #10]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d323      	bcc.n	800cc68 <Update_channel+0x174>
					  && (_chnl->main_active_length <  _chnl->peak_max_length)) {
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8ada      	ldrh	r2, [r3, #22]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	891b      	ldrh	r3, [r3, #8]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d21d      	bcs.n	800cc68 <Update_channel+0x174>
				_chnl->main_rdy 		= 1;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	745a      	strb	r2, [r3, #17]
				_chnl->main_rdy_usealt 	= 0;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	749a      	strb	r2, [r3, #18]
				_chnl->main_rdy_time	= STEP_TIME;
 800cc38:	4b67      	ldr	r3, [pc, #412]	; (800cdd8 <Update_channel+0x2e4>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	61da      	str	r2, [r3, #28]
				_chnl->main_rdy_height 	= _chnl->main_active_max;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	8a9a      	ldrh	r2, [r3, #20]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	835a      	strh	r2, [r3, #26]
				_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	8ada      	ldrh	r2, [r3, #22]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	845a      	strh	r2, [r3, #34]	; 0x22

				// handle hihat case
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	78db      	ldrb	r3, [r3, #3]
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d10e      	bne.n	800cc76 <Update_channel+0x182>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	7e1b      	ldrb	r3, [r3, #24]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d10a      	bne.n	800cc76 <Update_channel+0x182>
					_chnl->main_rdy_usealt = 1;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2201      	movs	r2, #1
 800cc64:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cc66:	e006      	b.n	800cc76 <Update_channel+0x182>
			// option 3 - inconsistent peak:
			}else{
//				if (_chnl->cooldown < (_chnl->peak2peak - 512)){
					_chnl->cooldown = 0;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	81da      	strh	r2, [r3, #14]
					_chnl->main_rdy_height 	= 0;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	835a      	strh	r2, [r3, #26]
 800cc74:	e000      	b.n	800cc78 <Update_channel+0x184>
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cc76:	bf00      	nop

//				}
			}

			// reset process
			_chnl->main_active_length 	= 0;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	829a      	strh	r2, [r3, #20]
		}//end adc<max/2
	}

	// ### AUX INPUT ###

	if (_chnl->aux_type == AUX_TYPE_PAD){
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	791b      	ldrb	r3, [r3, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d141      	bne.n	800cd10 <Update_channel+0x21c>

		if (_aux_state == GPIO_PIN_RESET)
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d104      	bne.n	800cc9c <Update_channel+0x1a8>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800cc9a:	e003      	b.n	800cca4 <Update_channel+0x1b0>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		// new peak started
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d107      	bne.n	800ccbe <Update_channel+0x1ca>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d102      	bne.n	800ccbe <Update_channel+0x1ca>
			_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	761a      	strb	r2, [r3, #24]
		}

		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d11c      	bne.n	800cd02 <Update_channel+0x20e>
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d117      	bne.n	800cd02 <Update_channel+0x20e>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800ccd2:	4b41      	ldr	r3, [pc, #260]	; (800cdd8 <Update_channel+0x2e4>)
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	2b32      	cmp	r3, #50	; 0x32
 800ccde:	d90d      	bls.n	800ccfc <Update_channel+0x208>
				_chnl->aux_rdy			 = 1;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800cce8:	4b3b      	ldr	r3, [pc, #236]	; (800cdd8 <Update_channel+0x2e4>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	629a      	str	r2, [r3, #40]	; 0x28
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800cd0e:	e055      	b.n	800cdbc <Update_channel+0x2c8>

	} else { //AUX_TYPE_PEDAL

		if (_aux_state == GPIO_PIN_SET)
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d104      	bne.n	800cd20 <Update_channel+0x22c>
			_chnl->aux_active_state = CHANNEL_PEDAL_IDLE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800cd1e:	e003      	b.n	800cd28 <Update_channel+0x234>
		else
			_chnl->aux_active_state = CHANNEL_PEDAL_PRESSED;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2203      	movs	r2, #3
 800cd24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


		// pedal pressed
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_PRESSED) && (_chnl->aux_last_state == CHANNEL_PEDAL_IDLE)){
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d11c      	bne.n	800cd6c <Update_channel+0x278>
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d117      	bne.n	800cd6c <Update_channel+0x278>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800cd3c:	4b26      	ldr	r3, [pc, #152]	; (800cdd8 <Update_channel+0x2e4>)
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	2b32      	cmp	r3, #50	; 0x32
 800cd48:	d907      	bls.n	800cd5a <Update_channel+0x266>
				_chnl->aux_rdy			 = 1;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800cd52:	4b21      	ldr	r3, [pc, #132]	; (800cdd8 <Update_channel+0x2e4>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_PRESSED;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2202      	movs	r2, #2
 800cd6a:	761a      	strb	r2, [r3, #24]

		}

		// pedal released
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_IDLE) && (_chnl->aux_last_state == CHANNEL_PEDAL_PRESSED)){
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d11c      	bne.n	800cdb0 <Update_channel+0x2bc>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d117      	bne.n	800cdb0 <Update_channel+0x2bc>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800cd80:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <Update_channel+0x2e4>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	2b32      	cmp	r3, #50	; 0x32
 800cd8c:	d907      	bls.n	800cd9e <Update_channel+0x2aa>
				_chnl->aux_rdy			 = 1;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2201      	movs	r2, #1
 800cd92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800cd96:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <Update_channel+0x2e4>)
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// for fun return 1 if there is data to report
	return (_chnl->main_rdy | _chnl->aux_rdy);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7c5a      	ldrb	r2, [r3, #17]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	b2db      	uxtb	r3, r3
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	200006d4 	.word	0x200006d4

0800cddc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	4613      	mov	r3, r2
 800cde8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e01f      	b.n	800ce34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	79fa      	ldrb	r2, [r7, #7]
 800ce26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f001 fec9 	bl	800ebc0 <USBD_LL_Init>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e016      	b.n	800ce82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce70:	f107 020e 	add.w	r2, r7, #14
 800ce74:	4610      	mov	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	4602      	mov	r2, r0
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f001 fef4 	bl	800ec80 <USBD_LL_Start>
 800ce98:	4603      	mov	r3, r0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d009      	beq.n	800cee6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	4798      	blx	r3
 800cee2:	4603      	mov	r3, r0
 800cee4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	78fa      	ldrb	r2, [r7, #3]
 800cf10:	4611      	mov	r1, r2
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	4798      	blx	r3
  }

  return USBD_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ff25 	bl	800dd82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cf46:	461a      	mov	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf54:	f003 031f 	and.w	r3, r3, #31
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d01a      	beq.n	800cf92 <USBD_LL_SetupStage+0x72>
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d822      	bhi.n	800cfa6 <USBD_LL_SetupStage+0x86>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <USBD_LL_SetupStage+0x4a>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d00a      	beq.n	800cf7e <USBD_LL_SetupStage+0x5e>
 800cf68:	e01d      	b.n	800cfa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f9d6 	bl	800d324 <USBD_StdDevReq>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf7c:	e020      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fa3a 	bl	800d400 <USBD_StdItfReq>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf90:	e016      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fa78 	bl	800d490 <USBD_StdEPReq>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa4:	e00c      	b.n	800cfc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f001 fec3 	bl	800ed40 <USBD_LL_StallEP>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73fb      	strb	r3, [r7, #15]
      break;
 800cfbe:	bf00      	nop
  }

  return ret;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d137      	bne.n	800d04e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cfe4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d14a      	bne.n	800d086 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	689a      	ldr	r2, [r3, #8]
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d913      	bls.n	800d024 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	1ad2      	subs	r2, r2, r3
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	68da      	ldr	r2, [r3, #12]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	4293      	cmp	r3, r2
 800d014:	bf28      	it	cs
 800d016:	4613      	movcs	r3, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 ffa4 	bl	800df6a <USBD_CtlContinueRx>
 800d022:	e030      	b.n	800d086 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00a      	beq.n	800d046 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d036:	2b03      	cmp	r3, #3
 800d038:	d105      	bne.n	800d046 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f000 ffa0 	bl	800df8c <USBD_CtlSendStatus>
 800d04c:	e01b      	b.n	800d086 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d013      	beq.n	800d082 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d060:	2b03      	cmp	r3, #3
 800d062:	d10e      	bne.n	800d082 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	7afa      	ldrb	r2, [r7, #11]
 800d06e:	4611      	mov	r1, r2
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	4798      	blx	r3
 800d074:	4603      	mov	r3, r0
 800d076:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d003      	beq.n	800d086 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	e002      	b.n	800d088 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d082:	2303      	movs	r3, #3
 800d084:	e000      	b.n	800d088 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	460b      	mov	r3, r1
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d09e:	7afb      	ldrb	r3, [r7, #11]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d16a      	bne.n	800d17a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3314      	adds	r3, #20
 800d0a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d155      	bne.n	800d160 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d914      	bls.n	800d0ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f000 ff19 	bl	800df0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0dc:	2300      	movs	r3, #0
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f001 fed7 	bl	800ee96 <USBD_LL_PrepareReceive>
 800d0e8:	e03a      	b.n	800d160 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	68da      	ldr	r2, [r3, #12]
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d11c      	bne.n	800d130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d316      	bcc.n	800d130 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d20f      	bcs.n	800d130 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d110:	2200      	movs	r2, #0
 800d112:	2100      	movs	r1, #0
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f000 fefa 	bl	800df0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d122:	2300      	movs	r3, #0
 800d124:	2200      	movs	r2, #0
 800d126:	2100      	movs	r1, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f001 feb4 	bl	800ee96 <USBD_LL_PrepareReceive>
 800d12e:	e017      	b.n	800d160 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00a      	beq.n	800d152 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d142:	2b03      	cmp	r3, #3
 800d144:	d105      	bne.n	800d152 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d152:	2180      	movs	r1, #128	; 0x80
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f001 fdf3 	bl	800ed40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f000 ff29 	bl	800dfb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d166:	2b01      	cmp	r3, #1
 800d168:	d123      	bne.n	800d1b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f7ff fe99 	bl	800cea2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d178:	e01b      	b.n	800d1b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d013      	beq.n	800d1ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d18c:	2b03      	cmp	r3, #3
 800d18e:	d10e      	bne.n	800d1ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	7afa      	ldrb	r2, [r7, #11]
 800d19a:	4611      	mov	r1, r2
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	4798      	blx	r3
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
 800d1ac:	e002      	b.n	800d1b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	e000      	b.n	800d1b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	6852      	ldr	r2, [r2, #4]
 800d1f8:	b2d2      	uxtb	r2, r2
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d200:	2340      	movs	r3, #64	; 0x40
 800d202:	2200      	movs	r2, #0
 800d204:	2100      	movs	r1, #0
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f001 fd55 	bl	800ecb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2240      	movs	r2, #64	; 0x40
 800d218:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d21c:	2340      	movs	r3, #64	; 0x40
 800d21e:	2200      	movs	r2, #0
 800d220:	2180      	movs	r1, #128	; 0x80
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f001 fd47 	bl	800ecb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2240      	movs	r2, #64	; 0x40
 800d232:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	460b      	mov	r3, r1
 800d248:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	370c      	adds	r7, #12
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2204      	movs	r2, #4
 800d276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d296:	2b04      	cmp	r3, #4
 800d298:	d105      	bne.n	800d2a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d10b      	bne.n	800d2de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d005      	beq.n	800d2de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d306:	8a3b      	ldrh	r3, [r7, #16]
 800d308:	021b      	lsls	r3, r3, #8
 800d30a:	b21a      	sxth	r2, r3
 800d30c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d310:	4313      	orrs	r3, r2
 800d312:	b21b      	sxth	r3, r3
 800d314:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d316:	89fb      	ldrh	r3, [r7, #14]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	371c      	adds	r7, #28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d33a:	2b40      	cmp	r3, #64	; 0x40
 800d33c:	d005      	beq.n	800d34a <USBD_StdDevReq+0x26>
 800d33e:	2b40      	cmp	r3, #64	; 0x40
 800d340:	d853      	bhi.n	800d3ea <USBD_StdDevReq+0xc6>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00b      	beq.n	800d35e <USBD_StdDevReq+0x3a>
 800d346:	2b20      	cmp	r3, #32
 800d348:	d14f      	bne.n	800d3ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	4798      	blx	r3
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]
    break;
 800d35c:	e04a      	b.n	800d3f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	2b09      	cmp	r3, #9
 800d364:	d83b      	bhi.n	800d3de <USBD_StdDevReq+0xba>
 800d366:	a201      	add	r2, pc, #4	; (adr r2, 800d36c <USBD_StdDevReq+0x48>)
 800d368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36c:	0800d3c1 	.word	0x0800d3c1
 800d370:	0800d3d5 	.word	0x0800d3d5
 800d374:	0800d3df 	.word	0x0800d3df
 800d378:	0800d3cb 	.word	0x0800d3cb
 800d37c:	0800d3df 	.word	0x0800d3df
 800d380:	0800d39f 	.word	0x0800d39f
 800d384:	0800d395 	.word	0x0800d395
 800d388:	0800d3df 	.word	0x0800d3df
 800d38c:	0800d3b7 	.word	0x0800d3b7
 800d390:	0800d3a9 	.word	0x0800d3a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f9da 	bl	800d750 <USBD_GetDescriptor>
      break;
 800d39c:	e024      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fb69 	bl	800da78 <USBD_SetAddress>
      break;
 800d3a6:	e01f      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fba8 	bl	800db00 <USBD_SetConfig>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3b4:	e018      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc45 	bl	800dc48 <USBD_GetConfig>
      break;
 800d3be:	e013      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fc75 	bl	800dcb2 <USBD_GetStatus>
      break;
 800d3c8:	e00e      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fca3 	bl	800dd18 <USBD_SetFeature>
      break;
 800d3d2:	e009      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fcb2 	bl	800dd40 <USBD_ClrFeature>
      break;
 800d3dc:	e004      	b.n	800d3e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fd08 	bl	800ddf6 <USBD_CtlError>
      break;
 800d3e6:	bf00      	nop
    }
    break;
 800d3e8:	e004      	b.n	800d3f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fd02 	bl	800ddf6 <USBD_CtlError>
    break;
 800d3f2:	bf00      	nop
  }

  return ret;
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop

0800d400 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d416:	2b40      	cmp	r3, #64	; 0x40
 800d418:	d005      	beq.n	800d426 <USBD_StdItfReq+0x26>
 800d41a:	2b40      	cmp	r3, #64	; 0x40
 800d41c:	d82e      	bhi.n	800d47c <USBD_StdItfReq+0x7c>
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <USBD_StdItfReq+0x26>
 800d422:	2b20      	cmp	r3, #32
 800d424:	d12a      	bne.n	800d47c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d42c:	3b01      	subs	r3, #1
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d81d      	bhi.n	800d46e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	889b      	ldrh	r3, [r3, #4]
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d813      	bhi.n	800d464 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	88db      	ldrh	r3, [r3, #6]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d110      	bne.n	800d478 <USBD_StdItfReq+0x78>
 800d456:	7bfb      	ldrb	r3, [r7, #15]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10d      	bne.n	800d478 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fd95 	bl	800df8c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d462:	e009      	b.n	800d478 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 fcc5 	bl	800ddf6 <USBD_CtlError>
      break;
 800d46c:	e004      	b.n	800d478 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fcc0 	bl	800ddf6 <USBD_CtlError>
      break;
 800d476:	e000      	b.n	800d47a <USBD_StdItfReq+0x7a>
      break;
 800d478:	bf00      	nop
    }
    break;
 800d47a:	e004      	b.n	800d486 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fcb9 	bl	800ddf6 <USBD_CtlError>
    break;
 800d484:	bf00      	nop
  }

  return ret;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	889b      	ldrh	r3, [r3, #4]
 800d4a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4ac:	2b40      	cmp	r3, #64	; 0x40
 800d4ae:	d007      	beq.n	800d4c0 <USBD_StdEPReq+0x30>
 800d4b0:	2b40      	cmp	r3, #64	; 0x40
 800d4b2:	f200 8142 	bhi.w	800d73a <USBD_StdEPReq+0x2aa>
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00c      	beq.n	800d4d4 <USBD_StdEPReq+0x44>
 800d4ba:	2b20      	cmp	r3, #32
 800d4bc:	f040 813d 	bne.w	800d73a <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	4798      	blx	r3
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d2:	e137      	b.n	800d744 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d007      	beq.n	800d4ec <USBD_StdEPReq+0x5c>
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	f300 8126 	bgt.w	800d72e <USBD_StdEPReq+0x29e>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d07d      	beq.n	800d5e2 <USBD_StdEPReq+0x152>
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d03b      	beq.n	800d562 <USBD_StdEPReq+0xd2>
 800d4ea:	e120      	b.n	800d72e <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d002      	beq.n	800d4fc <USBD_StdEPReq+0x6c>
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	d016      	beq.n	800d528 <USBD_StdEPReq+0x98>
 800d4fa:	e02c      	b.n	800d556 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4fc:	7bbb      	ldrb	r3, [r7, #14]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00d      	beq.n	800d51e <USBD_StdEPReq+0x8e>
 800d502:	7bbb      	ldrb	r3, [r7, #14]
 800d504:	2b80      	cmp	r3, #128	; 0x80
 800d506:	d00a      	beq.n	800d51e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d508:	7bbb      	ldrb	r3, [r7, #14]
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f001 fc17 	bl	800ed40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d512:	2180      	movs	r1, #128	; 0x80
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f001 fc13 	bl	800ed40 <USBD_LL_StallEP>
 800d51a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d51c:	e020      	b.n	800d560 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fc68 	bl	800ddf6 <USBD_CtlError>
        break;
 800d526:	e01b      	b.n	800d560 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	885b      	ldrh	r3, [r3, #2]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d10e      	bne.n	800d54e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d530:	7bbb      	ldrb	r3, [r7, #14]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00b      	beq.n	800d54e <USBD_StdEPReq+0xbe>
 800d536:	7bbb      	ldrb	r3, [r7, #14]
 800d538:	2b80      	cmp	r3, #128	; 0x80
 800d53a:	d008      	beq.n	800d54e <USBD_StdEPReq+0xbe>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	88db      	ldrh	r3, [r3, #6]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f001 fbf9 	bl	800ed40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fd1c 	bl	800df8c <USBD_CtlSendStatus>

        break;
 800d554:	e004      	b.n	800d560 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fc4c 	bl	800ddf6 <USBD_CtlError>
        break;
 800d55e:	bf00      	nop
      }
      break;
 800d560:	e0ea      	b.n	800d738 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d002      	beq.n	800d572 <USBD_StdEPReq+0xe2>
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d016      	beq.n	800d59e <USBD_StdEPReq+0x10e>
 800d570:	e030      	b.n	800d5d4 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00d      	beq.n	800d594 <USBD_StdEPReq+0x104>
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	2b80      	cmp	r3, #128	; 0x80
 800d57c:	d00a      	beq.n	800d594 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d57e:	7bbb      	ldrb	r3, [r7, #14]
 800d580:	4619      	mov	r1, r3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f001 fbdc 	bl	800ed40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d588:	2180      	movs	r1, #128	; 0x80
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f001 fbd8 	bl	800ed40 <USBD_LL_StallEP>
 800d590:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d592:	e025      	b.n	800d5e0 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fc2d 	bl	800ddf6 <USBD_CtlError>
        break;
 800d59c:	e020      	b.n	800d5e0 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	885b      	ldrh	r3, [r3, #2]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d11b      	bne.n	800d5de <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d5a6:	7bbb      	ldrb	r3, [r7, #14]
 800d5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 fbe2 	bl	800ed7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fce6 	bl	800df8c <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d5d2:	e004      	b.n	800d5de <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fc0d 	bl	800ddf6 <USBD_CtlError>
        break;
 800d5dc:	e000      	b.n	800d5e0 <USBD_StdEPReq+0x150>
        break;
 800d5de:	bf00      	nop
      }
      break;
 800d5e0:	e0aa      	b.n	800d738 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d002      	beq.n	800d5f2 <USBD_StdEPReq+0x162>
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d032      	beq.n	800d656 <USBD_StdEPReq+0x1c6>
 800d5f0:	e097      	b.n	800d722 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5f2:	7bbb      	ldrb	r3, [r7, #14]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d007      	beq.n	800d608 <USBD_StdEPReq+0x178>
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
 800d5fa:	2b80      	cmp	r3, #128	; 0x80
 800d5fc:	d004      	beq.n	800d608 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fbf8 	bl	800ddf6 <USBD_CtlError>
          break;
 800d606:	e091      	b.n	800d72c <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da0b      	bge.n	800d628 <USBD_StdEPReq+0x198>
 800d610:	7bbb      	ldrb	r3, [r7, #14]
 800d612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d616:	4613      	mov	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	3310      	adds	r3, #16
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	3304      	adds	r3, #4
 800d626:	e00b      	b.n	800d640 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	3304      	adds	r3, #4
 800d640:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2202      	movs	r2, #2
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fc42 	bl	800ded8 <USBD_CtlSendData>
        break;
 800d654:	e06a      	b.n	800d72c <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	da11      	bge.n	800d682 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	f003 020f 	and.w	r2, r3, #15
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	4613      	mov	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	440b      	add	r3, r1
 800d670:	3324      	adds	r3, #36	; 0x24
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d117      	bne.n	800d6a8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fbbb 	bl	800ddf6 <USBD_CtlError>
            break;
 800d680:	e054      	b.n	800d72c <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d682:	7bbb      	ldrb	r3, [r7, #14]
 800d684:	f003 020f 	and.w	r2, r3, #15
 800d688:	6879      	ldr	r1, [r7, #4]
 800d68a:	4613      	mov	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	440b      	add	r3, r1
 800d694:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d104      	bne.n	800d6a8 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fba8 	bl	800ddf6 <USBD_CtlError>
            break;
 800d6a6:	e041      	b.n	800d72c <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	da0b      	bge.n	800d6c8 <USBD_StdEPReq+0x238>
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
 800d6b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	3310      	adds	r3, #16
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	e00b      	b.n	800d6e0 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d6c8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	3304      	adds	r3, #4
 800d6e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <USBD_StdEPReq+0x25e>
 800d6e8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ea:	2b80      	cmp	r3, #128	; 0x80
 800d6ec:	d103      	bne.n	800d6f6 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e00e      	b.n	800d714 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d6f6:	7bbb      	ldrb	r3, [r7, #14]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 fb5e 	bl	800edbc <USBD_LL_IsStallEP>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2201      	movs	r2, #1
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	e002      	b.n	800d714 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2202      	movs	r2, #2
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fbdc 	bl	800ded8 <USBD_CtlSendData>
          break;
 800d720:	e004      	b.n	800d72c <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fb66 	bl	800ddf6 <USBD_CtlError>
        break;
 800d72a:	bf00      	nop
      }
      break;
 800d72c:	e004      	b.n	800d738 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fb60 	bl	800ddf6 <USBD_CtlError>
      break;
 800d736:	bf00      	nop
    }
    break;
 800d738:	e004      	b.n	800d744 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fb5a 	bl	800ddf6 <USBD_CtlError>
    break;
 800d742:	bf00      	nop
  }

  return ret;
 800d744:	7bfb      	ldrb	r3, [r7, #15]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d762:	2300      	movs	r3, #0
 800d764:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	885b      	ldrh	r3, [r3, #2]
 800d76a:	0a1b      	lsrs	r3, r3, #8
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	3b01      	subs	r3, #1
 800d770:	2b0e      	cmp	r3, #14
 800d772:	f200 8152 	bhi.w	800da1a <USBD_GetDescriptor+0x2ca>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <USBD_GetDescriptor+0x2c>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d7ed 	.word	0x0800d7ed
 800d780:	0800d805 	.word	0x0800d805
 800d784:	0800d845 	.word	0x0800d845
 800d788:	0800da1b 	.word	0x0800da1b
 800d78c:	0800da1b 	.word	0x0800da1b
 800d790:	0800d9bb 	.word	0x0800d9bb
 800d794:	0800d9e7 	.word	0x0800d9e7
 800d798:	0800da1b 	.word	0x0800da1b
 800d79c:	0800da1b 	.word	0x0800da1b
 800d7a0:	0800da1b 	.word	0x0800da1b
 800d7a4:	0800da1b 	.word	0x0800da1b
 800d7a8:	0800da1b 	.word	0x0800da1b
 800d7ac:	0800da1b 	.word	0x0800da1b
 800d7b0:	0800da1b 	.word	0x0800da1b
 800d7b4:	0800d7b9 	.word	0x0800d7b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	7c12      	ldrb	r2, [r2, #16]
 800d7d0:	f107 0108 	add.w	r1, r7, #8
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	4798      	blx	r3
 800d7d8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d7da:	e126      	b.n	800da2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fb09 	bl	800ddf6 <USBD_CtlError>
      err++;
 800d7e4:	7afb      	ldrb	r3, [r7, #11]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	72fb      	strb	r3, [r7, #11]
    break;
 800d7ea:	e11e      	b.n	800da2a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	7c12      	ldrb	r2, [r2, #16]
 800d7f8:	f107 0108 	add.w	r1, r7, #8
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
 800d800:	60f8      	str	r0, [r7, #12]
    break;
 800d802:	e112      	b.n	800da2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7c1b      	ldrb	r3, [r3, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10d      	bne.n	800d828 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d814:	f107 0208 	add.w	r2, r7, #8
 800d818:	4610      	mov	r0, r2
 800d81a:	4798      	blx	r3
 800d81c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3301      	adds	r3, #1
 800d822:	2202      	movs	r2, #2
 800d824:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d826:	e100      	b.n	800da2a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d830:	f107 0208 	add.w	r2, r7, #8
 800d834:	4610      	mov	r0, r2
 800d836:	4798      	blx	r3
 800d838:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3301      	adds	r3, #1
 800d83e:	2202      	movs	r2, #2
 800d840:	701a      	strb	r2, [r3, #0]
    break;
 800d842:	e0f2      	b.n	800da2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	885b      	ldrh	r3, [r3, #2]
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	2b05      	cmp	r3, #5
 800d84c:	f200 80ac 	bhi.w	800d9a8 <USBD_GetDescriptor+0x258>
 800d850:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <USBD_GetDescriptor+0x108>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d871 	.word	0x0800d871
 800d85c:	0800d8a5 	.word	0x0800d8a5
 800d860:	0800d8d9 	.word	0x0800d8d9
 800d864:	0800d90d 	.word	0x0800d90d
 800d868:	0800d941 	.word	0x0800d941
 800d86c:	0800d975 	.word	0x0800d975
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	7c12      	ldrb	r2, [r2, #16]
 800d888:	f107 0108 	add.w	r1, r7, #8
 800d88c:	4610      	mov	r0, r2
 800d88e:	4798      	blx	r3
 800d890:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d892:	e091      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 faad 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d89c:	7afb      	ldrb	r3, [r7, #11]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	72fb      	strb	r3, [r7, #11]
      break;
 800d8a2:	e089      	b.n	800d9b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00b      	beq.n	800d8c8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	7c12      	ldrb	r2, [r2, #16]
 800d8bc:	f107 0108 	add.w	r1, r7, #8
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	4798      	blx	r3
 800d8c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8c6:	e077      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8c8:	6839      	ldr	r1, [r7, #0]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fa93 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d8d0:	7afb      	ldrb	r3, [r7, #11]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	72fb      	strb	r3, [r7, #11]
      break;
 800d8d6:	e06f      	b.n	800d9b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00b      	beq.n	800d8fc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	7c12      	ldrb	r2, [r2, #16]
 800d8f0:	f107 0108 	add.w	r1, r7, #8
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4798      	blx	r3
 800d8f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8fa:	e05d      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fa79 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d904:	7afb      	ldrb	r3, [r7, #11]
 800d906:	3301      	adds	r3, #1
 800d908:	72fb      	strb	r3, [r7, #11]
      break;
 800d90a:	e055      	b.n	800d9b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00b      	beq.n	800d930 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	7c12      	ldrb	r2, [r2, #16]
 800d924:	f107 0108 	add.w	r1, r7, #8
 800d928:	4610      	mov	r0, r2
 800d92a:	4798      	blx	r3
 800d92c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d92e:	e043      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 fa5f 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d938:	7afb      	ldrb	r3, [r7, #11]
 800d93a:	3301      	adds	r3, #1
 800d93c:	72fb      	strb	r3, [r7, #11]
      break;
 800d93e:	e03b      	b.n	800d9b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00b      	beq.n	800d964 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	7c12      	ldrb	r2, [r2, #16]
 800d958:	f107 0108 	add.w	r1, r7, #8
 800d95c:	4610      	mov	r0, r2
 800d95e:	4798      	blx	r3
 800d960:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d962:	e029      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 fa45 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d96c:	7afb      	ldrb	r3, [r7, #11]
 800d96e:	3301      	adds	r3, #1
 800d970:	72fb      	strb	r3, [r7, #11]
      break;
 800d972:	e021      	b.n	800d9b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00b      	beq.n	800d998 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	7c12      	ldrb	r2, [r2, #16]
 800d98c:	f107 0108 	add.w	r1, r7, #8
 800d990:	4610      	mov	r0, r2
 800d992:	4798      	blx	r3
 800d994:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d996:	e00f      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fa2b 	bl	800ddf6 <USBD_CtlError>
        err++;
 800d9a0:	7afb      	ldrb	r3, [r7, #11]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	72fb      	strb	r3, [r7, #11]
      break;
 800d9a6:	e007      	b.n	800d9b8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa23 	bl	800ddf6 <USBD_CtlError>
      err++;
 800d9b0:	7afb      	ldrb	r3, [r7, #11]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d9b6:	bf00      	nop
    }
    break;
 800d9b8:	e037      	b.n	800da2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7c1b      	ldrb	r3, [r3, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d109      	bne.n	800d9d6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ca:	f107 0208 	add.w	r2, r7, #8
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	4798      	blx	r3
 800d9d2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d9d4:	e029      	b.n	800da2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fa0c 	bl	800ddf6 <USBD_CtlError>
      err++;
 800d9de:	7afb      	ldrb	r3, [r7, #11]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	72fb      	strb	r3, [r7, #11]
    break;
 800d9e4:	e021      	b.n	800da2a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f6:	f107 0208 	add.w	r2, r7, #8
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	4798      	blx	r3
 800d9fe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3301      	adds	r3, #1
 800da04:	2207      	movs	r2, #7
 800da06:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800da08:	e00f      	b.n	800da2a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800da0a:	6839      	ldr	r1, [r7, #0]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f9f2 	bl	800ddf6 <USBD_CtlError>
      err++;
 800da12:	7afb      	ldrb	r3, [r7, #11]
 800da14:	3301      	adds	r3, #1
 800da16:	72fb      	strb	r3, [r7, #11]
    break;
 800da18:	e007      	b.n	800da2a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f9ea 	bl	800ddf6 <USBD_CtlError>
    err++;
 800da22:	7afb      	ldrb	r3, [r7, #11]
 800da24:	3301      	adds	r3, #1
 800da26:	72fb      	strb	r3, [r7, #11]
    break;
 800da28:	bf00      	nop
  }

  if (err != 0U)
 800da2a:	7afb      	ldrb	r3, [r7, #11]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d11e      	bne.n	800da6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	88db      	ldrh	r3, [r3, #6]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d016      	beq.n	800da66 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800da38:	893b      	ldrh	r3, [r7, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00e      	beq.n	800da5c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	88da      	ldrh	r2, [r3, #6]
 800da42:	893b      	ldrh	r3, [r7, #8]
 800da44:	4293      	cmp	r3, r2
 800da46:	bf28      	it	cs
 800da48:	4613      	movcs	r3, r2
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	461a      	mov	r2, r3
 800da52:	68f9      	ldr	r1, [r7, #12]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fa3f 	bl	800ded8 <USBD_CtlSendData>
 800da5a:	e009      	b.n	800da70 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f9c9 	bl	800ddf6 <USBD_CtlError>
 800da64:	e004      	b.n	800da70 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa90 	bl	800df8c <USBD_CtlSendStatus>
 800da6c:	e000      	b.n	800da70 <USBD_GetDescriptor+0x320>
    return;
 800da6e:	bf00      	nop
    }
  }
}
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop

0800da78 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	889b      	ldrh	r3, [r3, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d130      	bne.n	800daec <USBD_SetAddress+0x74>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	88db      	ldrh	r3, [r3, #6]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d12c      	bne.n	800daec <USBD_SetAddress+0x74>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	885b      	ldrh	r3, [r3, #2]
 800da96:	2b7f      	cmp	r3, #127	; 0x7f
 800da98:	d828      	bhi.n	800daec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	885b      	ldrh	r3, [r3, #2]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daac:	2b03      	cmp	r3, #3
 800daae:	d104      	bne.n	800daba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f99f 	bl	800ddf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab8:	e01d      	b.n	800daf6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7bfa      	ldrb	r2, [r7, #15]
 800dabe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f001 f9a5 	bl	800ee16 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 fa5d 	bl	800df8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2202      	movs	r2, #2
 800dadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae0:	e009      	b.n	800daf6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daea:	e004      	b.n	800daf6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f981 	bl	800ddf6 <USBD_CtlError>
  }
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
	...

0800db00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	885b      	ldrh	r3, [r3, #2]
 800db12:	b2da      	uxtb	r2, r3
 800db14:	4b4b      	ldr	r3, [pc, #300]	; (800dc44 <USBD_SetConfig+0x144>)
 800db16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db18:	4b4a      	ldr	r3, [pc, #296]	; (800dc44 <USBD_SetConfig+0x144>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d905      	bls.n	800db2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db20:	6839      	ldr	r1, [r7, #0]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f967 	bl	800ddf6 <USBD_CtlError>
    return USBD_FAIL;
 800db28:	2303      	movs	r3, #3
 800db2a:	e087      	b.n	800dc3c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db32:	2b02      	cmp	r3, #2
 800db34:	d002      	beq.n	800db3c <USBD_SetConfig+0x3c>
 800db36:	2b03      	cmp	r3, #3
 800db38:	d025      	beq.n	800db86 <USBD_SetConfig+0x86>
 800db3a:	e071      	b.n	800dc20 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800db3c:	4b41      	ldr	r3, [pc, #260]	; (800dc44 <USBD_SetConfig+0x144>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d01c      	beq.n	800db7e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800db44:	4b3f      	ldr	r3, [pc, #252]	; (800dc44 <USBD_SetConfig+0x144>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db4e:	4b3d      	ldr	r3, [pc, #244]	; (800dc44 <USBD_SetConfig+0x144>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff f9af 	bl	800ceb8 <USBD_SetClassConfig>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f945 	bl	800ddf6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800db6c:	e065      	b.n	800dc3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fa0c 	bl	800df8c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2203      	movs	r2, #3
 800db78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800db7c:	e05d      	b.n	800dc3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fa04 	bl	800df8c <USBD_CtlSendStatus>
    break;
 800db84:	e059      	b.n	800dc3a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800db86:	4b2f      	ldr	r3, [pc, #188]	; (800dc44 <USBD_SetConfig+0x144>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d112      	bne.n	800dbb4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2202      	movs	r2, #2
 800db92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800db96:	4b2b      	ldr	r3, [pc, #172]	; (800dc44 <USBD_SetConfig+0x144>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dba0:	4b28      	ldr	r3, [pc, #160]	; (800dc44 <USBD_SetConfig+0x144>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff f9a2 	bl	800cef0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f9ed 	bl	800df8c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dbb2:	e042      	b.n	800dc3a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800dbb4:	4b23      	ldr	r3, [pc, #140]	; (800dc44 <USBD_SetConfig+0x144>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d02a      	beq.n	800dc18 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff f990 	bl	800cef0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dbd0:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <USBD_SetConfig+0x144>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbda:	4b1a      	ldr	r3, [pc, #104]	; (800dc44 <USBD_SetConfig+0x144>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff f969 	bl	800ceb8 <USBD_SetClassConfig>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00f      	beq.n	800dc10 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8ff 	bl	800ddf6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff f975 	bl	800cef0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dc0e:	e014      	b.n	800dc3a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f9bb 	bl	800df8c <USBD_CtlSendStatus>
    break;
 800dc16:	e010      	b.n	800dc3a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f9b7 	bl	800df8c <USBD_CtlSendStatus>
    break;
 800dc1e:	e00c      	b.n	800dc3a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f8e7 	bl	800ddf6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc28:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <USBD_SetConfig+0x144>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff f95e 	bl	800cef0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dc34:	2303      	movs	r3, #3
 800dc36:	73fb      	strb	r3, [r7, #15]
    break;
 800dc38:	bf00      	nop
  }

  return ret;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	2000043c 	.word	0x2000043c

0800dc48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	88db      	ldrh	r3, [r3, #6]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d004      	beq.n	800dc64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc5a:	6839      	ldr	r1, [r7, #0]
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f8ca 	bl	800ddf6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800dc62:	e022      	b.n	800dcaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	dc02      	bgt.n	800dc74 <USBD_GetConfig+0x2c>
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	dc03      	bgt.n	800dc7a <USBD_GetConfig+0x32>
 800dc72:	e015      	b.n	800dca0 <USBD_GetConfig+0x58>
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d00b      	beq.n	800dc90 <USBD_GetConfig+0x48>
 800dc78:	e012      	b.n	800dca0 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3308      	adds	r3, #8
 800dc84:	2201      	movs	r2, #1
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f925 	bl	800ded8 <USBD_CtlSendData>
      break;
 800dc8e:	e00c      	b.n	800dcaa <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3304      	adds	r3, #4
 800dc94:	2201      	movs	r2, #1
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f91d 	bl	800ded8 <USBD_CtlSendData>
      break;
 800dc9e:	e004      	b.n	800dcaa <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f8a7 	bl	800ddf6 <USBD_CtlError>
      break;
 800dca8:	bf00      	nop
}
 800dcaa:	bf00      	nop
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d81e      	bhi.n	800dd06 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	88db      	ldrh	r3, [r3, #6]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d004      	beq.n	800dcda <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f88f 	bl	800ddf6 <USBD_CtlError>
      break;
 800dcd8:	e01a      	b.n	800dd10 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d005      	beq.n	800dcf6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	f043 0202 	orr.w	r2, r3, #2
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f8ea 	bl	800ded8 <USBD_CtlSendData>
    break;
 800dd04:	e004      	b.n	800dd10 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 f874 	bl	800ddf6 <USBD_CtlError>
    break;
 800dd0e:	bf00      	nop
  }
}
 800dd10:	bf00      	nop
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d106      	bne.n	800dd38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f92a 	bl	800df8c <USBD_CtlSendStatus>
  }
}
 800dd38:	bf00      	nop
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd50:	3b01      	subs	r3, #1
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d80b      	bhi.n	800dd6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	885b      	ldrh	r3, [r3, #2]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d10c      	bne.n	800dd78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f910 	bl	800df8c <USBD_CtlSendStatus>
      }
      break;
 800dd6c:	e004      	b.n	800dd78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 f840 	bl	800ddf6 <USBD_CtlError>
      break;
 800dd76:	e000      	b.n	800dd7a <USBD_ClrFeature+0x3a>
      break;
 800dd78:	bf00      	nop
  }
}
 800dd7a:	bf00      	nop
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b084      	sub	sp, #16
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	781a      	ldrb	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff fa9b 	bl	800d2e8 <SWAPBYTE>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f7ff fa8e 	bl	800d2e8 <SWAPBYTE>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	461a      	mov	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3301      	adds	r3, #1
 800ddde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff fa81 	bl	800d2e8 <SWAPBYTE>
 800dde6:	4603      	mov	r3, r0
 800dde8:	461a      	mov	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	80da      	strh	r2, [r3, #6]
}
 800ddee:	bf00      	nop
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b082      	sub	sp, #8
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de00:	2180      	movs	r1, #128	; 0x80
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 ff9c 	bl	800ed40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de08:	2100      	movs	r1, #0
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 ff98 	bl	800ed40 <USBD_LL_StallEP>
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de24:	2300      	movs	r3, #0
 800de26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d036      	beq.n	800de9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de32:	6938      	ldr	r0, [r7, #16]
 800de34:	f000 f836 	bl	800dea4 <USBD_GetLen>
 800de38:	4603      	mov	r3, r0
 800de3a:	3301      	adds	r3, #1
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	b29a      	uxth	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	4413      	add	r3, r2
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	7812      	ldrb	r2, [r2, #0]
 800de50:	701a      	strb	r2, [r3, #0]
  idx++;
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	3301      	adds	r3, #1
 800de56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4413      	add	r3, r2
 800de5e:	2203      	movs	r2, #3
 800de60:	701a      	strb	r2, [r3, #0]
  idx++;
 800de62:	7dfb      	ldrb	r3, [r7, #23]
 800de64:	3301      	adds	r3, #1
 800de66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de68:	e013      	b.n	800de92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	4413      	add	r3, r2
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	7812      	ldrb	r2, [r2, #0]
 800de74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	3301      	adds	r3, #1
 800de7a:	613b      	str	r3, [r7, #16]
    idx++;
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
 800de7e:	3301      	adds	r3, #1
 800de80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	4413      	add	r3, r2
 800de88:	2200      	movs	r2, #0
 800de8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	3301      	adds	r3, #1
 800de90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1e7      	bne.n	800de6a <USBD_GetString+0x52>
 800de9a:	e000      	b.n	800de9e <USBD_GetString+0x86>
    return;
 800de9c:	bf00      	nop
  }
}
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800deb4:	e005      	b.n	800dec2 <USBD_GetLen+0x1e>
  {
    len++;
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	3301      	adds	r3, #1
 800deba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	3301      	adds	r3, #1
 800dec0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1f5      	bne.n	800deb6 <USBD_GetLen+0x12>
  }

  return len;
 800deca:	7bfb      	ldrb	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2202      	movs	r2, #2
 800dee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	2100      	movs	r1, #0
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f000 ffa8 	bl	800ee54 <USBD_LL_Transmit>

  return USBD_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	2100      	movs	r1, #0
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 ff97 	bl	800ee54 <USBD_LL_Transmit>

  return USBD_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2203      	movs	r2, #3
 800df40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	2100      	movs	r1, #0
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 ff9b 	bl	800ee96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	2100      	movs	r1, #0
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f000 ff8a 	bl	800ee96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2204      	movs	r2, #4
 800df98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df9c:	2300      	movs	r3, #0
 800df9e:	2200      	movs	r2, #0
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 ff56 	bl	800ee54 <USBD_LL_Transmit>

  return USBD_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b082      	sub	sp, #8
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2205      	movs	r2, #5
 800dfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 ff64 	bl	800ee96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dfdc:	2200      	movs	r2, #0
 800dfde:	4912      	ldr	r1, [pc, #72]	; (800e028 <MX_USB_Device_Init+0x50>)
 800dfe0:	4812      	ldr	r0, [pc, #72]	; (800e02c <MX_USB_Device_Init+0x54>)
 800dfe2:	f7fe fefb 	bl	800cddc <USBD_Init>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dfec:	f7f4 ff92 	bl	8002f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dff0:	490f      	ldr	r1, [pc, #60]	; (800e030 <MX_USB_Device_Init+0x58>)
 800dff2:	480e      	ldr	r0, [pc, #56]	; (800e02c <MX_USB_Device_Init+0x54>)
 800dff4:	f7fe ff22 	bl	800ce3c <USBD_RegisterClass>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dffe:	f7f4 ff89 	bl	8002f14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e002:	490c      	ldr	r1, [pc, #48]	; (800e034 <MX_USB_Device_Init+0x5c>)
 800e004:	4809      	ldr	r0, [pc, #36]	; (800e02c <MX_USB_Device_Init+0x54>)
 800e006:	f000 fa85 	bl	800e514 <USBD_CDC_RegisterInterface>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e010:	f7f4 ff80 	bl	8002f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e014:	4805      	ldr	r0, [pc, #20]	; (800e02c <MX_USB_Device_Init+0x54>)
 800e016:	f7fe ff38 	bl	800ce8a <USBD_Start>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e020:	f7f4 ff78 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e024:	bf00      	nop
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000358 	.word	0x20000358
 800e02c:	20001104 	.word	0x20001104
 800e030:	200001cc 	.word	0x200001cc
 800e034:	20000344 	.word	0x20000344

0800e038 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	460b      	mov	r3, r1
 800e042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e044:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e048:	f000 ff90 	bl	800ef6c <USBD_static_malloc>
 800e04c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d105      	bne.n	800e060 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e05c:	2302      	movs	r3, #2
 800e05e:	e066      	b.n	800e12e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7c1b      	ldrb	r3, [r3, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d119      	bne.n	800e0a4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e074:	2202      	movs	r2, #2
 800e076:	2181      	movs	r1, #129	; 0x81
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fe1c 	bl	800ecb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e088:	2202      	movs	r2, #2
 800e08a:	2101      	movs	r1, #1
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fe12 	bl	800ecb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2210      	movs	r2, #16
 800e09e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e0a2:	e016      	b.n	800e0d2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e0a4:	2340      	movs	r3, #64	; 0x40
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	2181      	movs	r1, #129	; 0x81
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fe03 	bl	800ecb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0b6:	2340      	movs	r3, #64	; 0x40
 800e0b8:	2202      	movs	r2, #2
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fdfa 	bl	800ecb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2210      	movs	r2, #16
 800e0ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0d2:	2308      	movs	r3, #8
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	2182      	movs	r1, #130	; 0x82
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fdec 	bl	800ecb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	7c1b      	ldrb	r3, [r3, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d109      	bne.n	800e11c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e10e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e112:	2101      	movs	r1, #1
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 febe 	bl	800ee96 <USBD_LL_PrepareReceive>
 800e11a:	e007      	b.n	800e12c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e122:	2340      	movs	r3, #64	; 0x40
 800e124:	2101      	movs	r1, #1
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 feb5 	bl	800ee96 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	460b      	mov	r3, r1
 800e140:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e142:	2181      	movs	r1, #129	; 0x81
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fddc 	bl	800ed02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e150:	2101      	movs	r1, #1
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fdd5 	bl	800ed02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e160:	2182      	movs	r1, #130	; 0x82
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 fdcd 	bl	800ed02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00e      	beq.n	800e1a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e192:	4618      	mov	r0, r3
 800e194:	f000 fef8 	bl	800ef88 <USBD_static_free>
    pdev->pClassData = NULL;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d03a      	beq.n	800e24c <USBD_CDC_Setup+0xa0>
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	f040 8097 	bne.w	800e30a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	88db      	ldrh	r3, [r3, #6]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d029      	beq.n	800e238 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	b25b      	sxtb	r3, r3
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	da11      	bge.n	800e212 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e1fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	88d2      	ldrh	r2, [r2, #6]
 800e200:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e202:	6939      	ldr	r1, [r7, #16]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	461a      	mov	r2, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7ff fe64 	bl	800ded8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e210:	e082      	b.n	800e318 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	785a      	ldrb	r2, [r3, #1]
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	88db      	ldrh	r3, [r3, #6]
 800e220:	b2da      	uxtb	r2, r3
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e228:	6939      	ldr	r1, [r7, #16]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	88db      	ldrh	r3, [r3, #6]
 800e22e:	461a      	mov	r2, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff fe7d 	bl	800df30 <USBD_CtlPrepareRx>
      break;
 800e236:	e06f      	b.n	800e318 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	7850      	ldrb	r0, [r2, #1]
 800e244:	2200      	movs	r2, #0
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	4798      	blx	r3
      break;
 800e24a:	e065      	b.n	800e318 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	785b      	ldrb	r3, [r3, #1]
 800e250:	2b0b      	cmp	r3, #11
 800e252:	d84f      	bhi.n	800e2f4 <USBD_CDC_Setup+0x148>
 800e254:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <USBD_CDC_Setup+0xb0>)
 800e256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25a:	bf00      	nop
 800e25c:	0800e28d 	.word	0x0800e28d
 800e260:	0800e303 	.word	0x0800e303
 800e264:	0800e2f5 	.word	0x0800e2f5
 800e268:	0800e2f5 	.word	0x0800e2f5
 800e26c:	0800e2f5 	.word	0x0800e2f5
 800e270:	0800e2f5 	.word	0x0800e2f5
 800e274:	0800e2f5 	.word	0x0800e2f5
 800e278:	0800e2f5 	.word	0x0800e2f5
 800e27c:	0800e2f5 	.word	0x0800e2f5
 800e280:	0800e2f5 	.word	0x0800e2f5
 800e284:	0800e2b5 	.word	0x0800e2b5
 800e288:	0800e2dd 	.word	0x0800e2dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e292:	2b03      	cmp	r3, #3
 800e294:	d107      	bne.n	800e2a6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e296:	f107 030c 	add.w	r3, r7, #12
 800e29a:	2202      	movs	r2, #2
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff fe1a 	bl	800ded8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2a4:	e030      	b.n	800e308 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff fda4 	bl	800ddf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	75fb      	strb	r3, [r7, #23]
          break;
 800e2b2:	e029      	b.n	800e308 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d107      	bne.n	800e2ce <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2be:	f107 030f 	add.w	r3, r7, #15
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff fe06 	bl	800ded8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2cc:	e01c      	b.n	800e308 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff fd90 	bl	800ddf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e2da:	e015      	b.n	800e308 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d00f      	beq.n	800e306 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800e2e6:	6839      	ldr	r1, [r7, #0]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff fd84 	bl	800ddf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2f2:	e008      	b.n	800e306 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff fd7d 	bl	800ddf6 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	75fb      	strb	r3, [r7, #23]
          break;
 800e300:	e002      	b.n	800e308 <USBD_CDC_Setup+0x15c>
          break;
 800e302:	bf00      	nop
 800e304:	e008      	b.n	800e318 <USBD_CDC_Setup+0x16c>
          break;
 800e306:	bf00      	nop
      }
      break;
 800e308:	e006      	b.n	800e318 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800e30a:	6839      	ldr	r1, [r7, #0]
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7ff fd72 	bl	800ddf6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e312:	2303      	movs	r3, #3
 800e314:	75fb      	strb	r3, [r7, #23]
      break;
 800e316:	bf00      	nop
  }

  return (uint8_t)ret;
 800e318:	7dfb      	ldrb	r3, [r7, #23]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop

0800e324 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e342:	2303      	movs	r3, #3
 800e344:	e04f      	b.n	800e3e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e34c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e34e:	78fa      	ldrb	r2, [r7, #3]
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	4613      	mov	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	440b      	add	r3, r1
 800e35c:	3318      	adds	r3, #24
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d029      	beq.n	800e3b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e364:	78fa      	ldrb	r2, [r7, #3]
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	440b      	add	r3, r1
 800e372:	3318      	adds	r3, #24
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	78f9      	ldrb	r1, [r7, #3]
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	460b      	mov	r3, r1
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	440b      	add	r3, r1
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	4403      	add	r3, r0
 800e384:	3338      	adds	r3, #56	; 0x38
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	fbb2 f1f3 	udiv	r1, r2, r3
 800e38c:	fb03 f301 	mul.w	r3, r3, r1
 800e390:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e392:	2b00      	cmp	r3, #0
 800e394:	d110      	bne.n	800e3b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e396:	78fa      	ldrb	r2, [r7, #3]
 800e398:	6879      	ldr	r1, [r7, #4]
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	440b      	add	r3, r1
 800e3a4:	3318      	adds	r3, #24
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3aa:	78f9      	ldrb	r1, [r7, #3]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fd4f 	bl	800ee54 <USBD_LL_Transmit>
 800e3b6:	e015      	b.n	800e3e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00b      	beq.n	800e3e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e3e0:	78fa      	ldrb	r2, [r7, #3]
 800e3e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e40c:	2303      	movs	r3, #3
 800e40e:	e015      	b.n	800e43c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fd5f 	bl	800eed8 <USBD_LL_GetRxDataSize>
 800e41a:	4602      	mov	r2, r0
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e436:	4611      	mov	r1, r2
 800e438:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e452:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d015      	beq.n	800e48a <USBD_CDC_EP0_RxReady+0x46>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e464:	2bff      	cmp	r3, #255	; 0xff
 800e466:	d010      	beq.n	800e48a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e476:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e47e:	b292      	uxth	r2, r2
 800e480:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	22ff      	movs	r2, #255	; 0xff
 800e486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2265      	movs	r2, #101	; 0x65
 800e4a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e4a2:	4b03      	ldr	r3, [pc, #12]	; (800e4b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr
 800e4b0:	2000026c 	.word	0x2000026c

0800e4b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2265      	movs	r2, #101	; 0x65
 800e4c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e4c2:	4b03      	ldr	r3, [pc, #12]	; (800e4d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr
 800e4d0:	20000204 	.word	0x20000204

0800e4d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2265      	movs	r2, #101	; 0x65
 800e4e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e4e2:	4b03      	ldr	r3, [pc, #12]	; (800e4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr
 800e4f0:	200002d4 	.word	0x200002d4

0800e4f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	220a      	movs	r2, #10
 800e500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e502:	4b03      	ldr	r3, [pc, #12]	; (800e510 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e504:	4618      	mov	r0, r3
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	200001c0 	.word	0x200001c0

0800e514 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e524:	2303      	movs	r3, #3
 800e526:	e004      	b.n	800e532 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	370c      	adds	r7, #12
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e53e:	b480      	push	{r7}
 800e540:	b087      	sub	sp, #28
 800e542:	af00      	add	r7, sp, #0
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e550:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e580:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3714      	adds	r7, #20
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	e01a      	b.n	800e5f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d114      	bne.n	800e5ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e5e2:	2181      	movs	r1, #129	; 0x81
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fc35 	bl	800ee54 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d101      	bne.n	800e616 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e612:	2303      	movs	r3, #3
 800e614:	e016      	b.n	800e644 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7c1b      	ldrb	r3, [r3, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d109      	bne.n	800e632 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e628:	2101      	movs	r1, #1
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fc33 	bl	800ee96 <USBD_LL_PrepareReceive>
 800e630:	e007      	b.n	800e642 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e638:	2340      	movs	r3, #64	; 0x40
 800e63a:	2101      	movs	r1, #1
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fc2a 	bl	800ee96 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e650:	2200      	movs	r2, #0
 800e652:	4905      	ldr	r1, [pc, #20]	; (800e668 <CDC_Init_FS+0x1c>)
 800e654:	4805      	ldr	r0, [pc, #20]	; (800e66c <CDC_Init_FS+0x20>)
 800e656:	f7ff ff72 	bl	800e53e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e65a:	4905      	ldr	r1, [pc, #20]	; (800e670 <CDC_Init_FS+0x24>)
 800e65c:	4803      	ldr	r0, [pc, #12]	; (800e66c <CDC_Init_FS+0x20>)
 800e65e:	f7ff ff87 	bl	800e570 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e662:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e664:	4618      	mov	r0, r3
 800e666:	bd80      	pop	{r7, pc}
 800e668:	200017bc 	.word	0x200017bc
 800e66c:	20001104 	.word	0x20001104
 800e670:	200013d4 	.word	0x200013d4

0800e674 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e674:	b480      	push	{r7}
 800e676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e678:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	4603      	mov	r3, r0
 800e68c:	6039      	str	r1, [r7, #0]
 800e68e:	71fb      	strb	r3, [r7, #7]
 800e690:	4613      	mov	r3, r2
 800e692:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	2b23      	cmp	r3, #35	; 0x23
 800e698:	d85c      	bhi.n	800e754 <CDC_Control_FS+0xd0>
 800e69a:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <CDC_Control_FS+0x1c>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e755 	.word	0x0800e755
 800e6a4:	0800e755 	.word	0x0800e755
 800e6a8:	0800e755 	.word	0x0800e755
 800e6ac:	0800e755 	.word	0x0800e755
 800e6b0:	0800e755 	.word	0x0800e755
 800e6b4:	0800e755 	.word	0x0800e755
 800e6b8:	0800e755 	.word	0x0800e755
 800e6bc:	0800e755 	.word	0x0800e755
 800e6c0:	0800e755 	.word	0x0800e755
 800e6c4:	0800e755 	.word	0x0800e755
 800e6c8:	0800e755 	.word	0x0800e755
 800e6cc:	0800e755 	.word	0x0800e755
 800e6d0:	0800e755 	.word	0x0800e755
 800e6d4:	0800e755 	.word	0x0800e755
 800e6d8:	0800e755 	.word	0x0800e755
 800e6dc:	0800e755 	.word	0x0800e755
 800e6e0:	0800e755 	.word	0x0800e755
 800e6e4:	0800e755 	.word	0x0800e755
 800e6e8:	0800e755 	.word	0x0800e755
 800e6ec:	0800e755 	.word	0x0800e755
 800e6f0:	0800e755 	.word	0x0800e755
 800e6f4:	0800e755 	.word	0x0800e755
 800e6f8:	0800e755 	.word	0x0800e755
 800e6fc:	0800e755 	.word	0x0800e755
 800e700:	0800e755 	.word	0x0800e755
 800e704:	0800e755 	.word	0x0800e755
 800e708:	0800e755 	.word	0x0800e755
 800e70c:	0800e755 	.word	0x0800e755
 800e710:	0800e755 	.word	0x0800e755
 800e714:	0800e755 	.word	0x0800e755
 800e718:	0800e755 	.word	0x0800e755
 800e71c:	0800e755 	.word	0x0800e755
 800e720:	0800e731 	.word	0x0800e731
 800e724:	0800e743 	.word	0x0800e743
 800e728:	0800e755 	.word	0x0800e755
 800e72c:	0800e755 	.word	0x0800e755
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 800e730:	4b0c      	ldr	r3, [pc, #48]	; (800e764 <CDC_Control_FS+0xe0>)
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	6810      	ldr	r0, [r2, #0]
 800e736:	6018      	str	r0, [r3, #0]
 800e738:	8891      	ldrh	r1, [r2, #4]
 800e73a:	7992      	ldrb	r2, [r2, #6]
 800e73c:	8099      	strh	r1, [r3, #4]
 800e73e:	719a      	strb	r2, [r3, #6]

    break;
 800e740:	e009      	b.n	800e756 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	4a07      	ldr	r2, [pc, #28]	; (800e764 <CDC_Control_FS+0xe0>)
 800e746:	6810      	ldr	r0, [r2, #0]
 800e748:	6018      	str	r0, [r3, #0]
 800e74a:	8891      	ldrh	r1, [r2, #4]
 800e74c:	7992      	ldrb	r2, [r2, #6]
 800e74e:	8099      	strh	r1, [r3, #4]
 800e750:	719a      	strb	r2, [r3, #6]

    case CDC_SET_CONTROL_LINE_STATE:

    break;
 800e752:	e000      	b.n	800e756 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e754:	bf00      	nop
  }

  return (USBD_OK);
 800e756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr
 800e764:	2000033c 	.word	0x2000033c

0800e768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	4805      	ldr	r0, [pc, #20]	; (800e78c <CDC_Receive_FS+0x24>)
 800e776:	f7ff fefb 	bl	800e570 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e77a:	4804      	ldr	r0, [pc, #16]	; (800e78c <CDC_Receive_FS+0x24>)
 800e77c:	f7ff ff3c 	bl	800e5f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e780:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20001104 	.word	0x20001104

0800e790 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e7a0:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <CDC_Transmit_FS+0x48>)
 800e7a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e00b      	b.n	800e7ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e7b6:	887b      	ldrh	r3, [r7, #2]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	4806      	ldr	r0, [pc, #24]	; (800e7d8 <CDC_Transmit_FS+0x48>)
 800e7be:	f7ff febe 	bl	800e53e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e7c2:	4805      	ldr	r0, [pc, #20]	; (800e7d8 <CDC_Transmit_FS+0x48>)
 800e7c4:	f7ff fee8 	bl	800e598 <USBD_CDC_TransmitPacket>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20001104 	.word	0x20001104

0800e7dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e7ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	371c      	adds	r7, #28
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
	...

0800e800 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	6039      	str	r1, [r7, #0]
 800e80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	2212      	movs	r2, #18
 800e810:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e812:	4b03      	ldr	r3, [pc, #12]	; (800e820 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e814:	4618      	mov	r0, r3
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	20000378 	.word	0x20000378

0800e824 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	4603      	mov	r3, r0
 800e82c:	6039      	str	r1, [r7, #0]
 800e82e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2204      	movs	r2, #4
 800e834:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e836:	4b03      	ldr	r3, [pc, #12]	; (800e844 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e838:	4618      	mov	r0, r3
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	2000038c 	.word	0x2000038c

0800e848 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	6039      	str	r1, [r7, #0]
 800e852:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e854:	79fb      	ldrb	r3, [r7, #7]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d105      	bne.n	800e866 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	4907      	ldr	r1, [pc, #28]	; (800e87c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e85e:	4808      	ldr	r0, [pc, #32]	; (800e880 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e860:	f7ff fada 	bl	800de18 <USBD_GetString>
 800e864:	e004      	b.n	800e870 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	4904      	ldr	r1, [pc, #16]	; (800e87c <USBD_CDC_ProductStrDescriptor+0x34>)
 800e86a:	4805      	ldr	r0, [pc, #20]	; (800e880 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e86c:	f7ff fad4 	bl	800de18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e870:	4b02      	ldr	r3, [pc, #8]	; (800e87c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e872:	4618      	mov	r0, r3
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	20001ba4 	.word	0x20001ba4
 800e880:	0800fe44 	.word	0x0800fe44

0800e884 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	6039      	str	r1, [r7, #0]
 800e88e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	4904      	ldr	r1, [pc, #16]	; (800e8a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e894:	4804      	ldr	r0, [pc, #16]	; (800e8a8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e896:	f7ff fabf 	bl	800de18 <USBD_GetString>
  return USBD_StrDesc;
 800e89a:	4b02      	ldr	r3, [pc, #8]	; (800e8a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	20001ba4 	.word	0x20001ba4
 800e8a8:	0800fe50 	.word	0x0800fe50

0800e8ac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	6039      	str	r1, [r7, #0]
 800e8b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	221a      	movs	r2, #26
 800e8bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8be:	f000 f843 	bl	800e948 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e8c2:	4b02      	ldr	r3, [pc, #8]	; (800e8cc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20000390 	.word	0x20000390

0800e8d0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6039      	str	r1, [r7, #0]
 800e8da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d105      	bne.n	800e8ee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	4907      	ldr	r1, [pc, #28]	; (800e904 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e8e6:	4808      	ldr	r0, [pc, #32]	; (800e908 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e8e8:	f7ff fa96 	bl	800de18 <USBD_GetString>
 800e8ec:	e004      	b.n	800e8f8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	4904      	ldr	r1, [pc, #16]	; (800e904 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e8f2:	4805      	ldr	r0, [pc, #20]	; (800e908 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e8f4:	f7ff fa90 	bl	800de18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8f8:	4b02      	ldr	r3, [pc, #8]	; (800e904 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3708      	adds	r7, #8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	20001ba4 	.word	0x20001ba4
 800e908:	0800fe64 	.word	0x0800fe64

0800e90c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e918:	79fb      	ldrb	r3, [r7, #7]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d105      	bne.n	800e92a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	4907      	ldr	r1, [pc, #28]	; (800e940 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e922:	4808      	ldr	r0, [pc, #32]	; (800e944 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e924:	f7ff fa78 	bl	800de18 <USBD_GetString>
 800e928:	e004      	b.n	800e934 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	4904      	ldr	r1, [pc, #16]	; (800e940 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e92e:	4805      	ldr	r0, [pc, #20]	; (800e944 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e930:	f7ff fa72 	bl	800de18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e934:	4b02      	ldr	r3, [pc, #8]	; (800e940 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e936:	4618      	mov	r0, r3
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	20001ba4 	.word	0x20001ba4
 800e944:	0800fe70 	.word	0x0800fe70

0800e948 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e94e:	4b0f      	ldr	r3, [pc, #60]	; (800e98c <Get_SerialNum+0x44>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e954:	4b0e      	ldr	r3, [pc, #56]	; (800e990 <Get_SerialNum+0x48>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e95a:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <Get_SerialNum+0x4c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4413      	add	r3, r2
 800e966:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d009      	beq.n	800e982 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e96e:	2208      	movs	r2, #8
 800e970:	4909      	ldr	r1, [pc, #36]	; (800e998 <Get_SerialNum+0x50>)
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f000 f814 	bl	800e9a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e978:	2204      	movs	r2, #4
 800e97a:	4908      	ldr	r1, [pc, #32]	; (800e99c <Get_SerialNum+0x54>)
 800e97c:	68b8      	ldr	r0, [r7, #8]
 800e97e:	f000 f80f 	bl	800e9a0 <IntToUnicode>
  }
}
 800e982:	bf00      	nop
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	1fff7590 	.word	0x1fff7590
 800e990:	1fff7594 	.word	0x1fff7594
 800e994:	1fff7598 	.word	0x1fff7598
 800e998:	20000392 	.word	0x20000392
 800e99c:	200003a2 	.word	0x200003a2

0800e9a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75fb      	strb	r3, [r7, #23]
 800e9b6:	e027      	b.n	800ea08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	0f1b      	lsrs	r3, r3, #28
 800e9bc:	2b09      	cmp	r3, #9
 800e9be:	d80b      	bhi.n	800e9d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	0f1b      	lsrs	r3, r3, #28
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	440b      	add	r3, r1
 800e9d0:	3230      	adds	r2, #48	; 0x30
 800e9d2:	b2d2      	uxtb	r2, r2
 800e9d4:	701a      	strb	r2, [r3, #0]
 800e9d6:	e00a      	b.n	800e9ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	0f1b      	lsrs	r3, r3, #28
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	7dfb      	ldrb	r3, [r7, #23]
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	440b      	add	r3, r1
 800e9e8:	3237      	adds	r2, #55	; 0x37
 800e9ea:	b2d2      	uxtb	r2, r2
 800e9ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	011b      	lsls	r3, r3, #4
 800e9f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	2200      	movs	r2, #0
 800ea00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
 800ea04:	3301      	adds	r3, #1
 800ea06:	75fb      	strb	r3, [r7, #23]
 800ea08:	7dfa      	ldrb	r2, [r7, #23]
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d3d3      	bcc.n	800e9b8 <IntToUnicode+0x18>
  }
}
 800ea10:	bf00      	nop
 800ea12:	bf00      	nop
 800ea14:	371c      	adds	r7, #28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
	...

0800ea20 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a0d      	ldr	r2, [pc, #52]	; (800ea64 <HAL_PCD_MspInit+0x44>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d113      	bne.n	800ea5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <HAL_PCD_MspInit+0x48>)
 800ea34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea36:	4a0c      	ldr	r2, [pc, #48]	; (800ea68 <HAL_PCD_MspInit+0x48>)
 800ea38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ea3c:	6593      	str	r3, [r2, #88]	; 0x58
 800ea3e:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <HAL_PCD_MspInit+0x48>)
 800ea40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	2014      	movs	r0, #20
 800ea50:	f7f6 fbc3 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ea54:	2014      	movs	r0, #20
 800ea56:	f7f6 fbda 	bl	800520e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	40005c00 	.word	0x40005c00
 800ea68:	40021000 	.word	0x40021000

0800ea6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ea80:	4619      	mov	r1, r3
 800ea82:	4610      	mov	r0, r2
 800ea84:	f7fe fa4c 	bl	800cf20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800eaa2:	78fa      	ldrb	r2, [r7, #3]
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	440b      	add	r3, r1
 800eab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	78fb      	ldrb	r3, [r7, #3]
 800eab8:	4619      	mov	r1, r3
 800eaba:	f7fe fa86 	bl	800cfca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800eabe:	bf00      	nop
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
 800eace:	460b      	mov	r3, r1
 800ead0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ead8:	78fa      	ldrb	r2, [r7, #3]
 800eada:	6879      	ldr	r1, [r7, #4]
 800eadc:	4613      	mov	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	440b      	add	r3, r1
 800eae6:	333c      	adds	r3, #60	; 0x3c
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	78fb      	ldrb	r3, [r7, #3]
 800eaec:	4619      	mov	r1, r3
 800eaee:	f7fe facf 	bl	800d090 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b082      	sub	sp, #8
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe fbd3 	bl	800d2b4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d001      	beq.n	800eb2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eb2a:	f7f4 f9f3 	bl	8002f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eb34:	7bfa      	ldrb	r2, [r7, #15]
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe fb80 	bl	800d23e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fe fb39 	bl	800d1bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fb7b 	bl	800d25e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb70:	4b04      	ldr	r3, [pc, #16]	; (800eb84 <HAL_PCD_SuspendCallback+0x30>)
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	4a03      	ldr	r2, [pc, #12]	; (800eb84 <HAL_PCD_SuspendCallback+0x30>)
 800eb76:	f043 0306 	orr.w	r3, r3, #6
 800eb7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800eb7c:	bf00      	nop
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	e000ed00 	.word	0xe000ed00

0800eb88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d007      	beq.n	800eba8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb98:	4b08      	ldr	r3, [pc, #32]	; (800ebbc <HAL_PCD_ResumeCallback+0x34>)
 800eb9a:	691b      	ldr	r3, [r3, #16]
 800eb9c:	4a07      	ldr	r2, [pc, #28]	; (800ebbc <HAL_PCD_ResumeCallback+0x34>)
 800eb9e:	f023 0306 	bic.w	r3, r3, #6
 800eba2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eba4:	f000 f9fa 	bl	800ef9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fe fb6a 	bl	800d288 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ebb4:	bf00      	nop
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	e000ed00 	.word	0xe000ed00

0800ebc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ebc8:	4a2b      	ldr	r2, [pc, #172]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a29      	ldr	r2, [pc, #164]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ebd8:	4b27      	ldr	r3, [pc, #156]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebda:	4a28      	ldr	r2, [pc, #160]	; (800ec7c <USBD_LL_Init+0xbc>)
 800ebdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ebde:	4b26      	ldr	r3, [pc, #152]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ebe4:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ebea:	4b23      	ldr	r3, [pc, #140]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebec:	2202      	movs	r2, #2
 800ebee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ebf0:	4b21      	ldr	r3, [pc, #132]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ebf6:	4b20      	ldr	r3, [pc, #128]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ebfc:	4b1e      	ldr	r3, [pc, #120]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ec02:	4b1d      	ldr	r3, [pc, #116]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ec08:	481b      	ldr	r0, [pc, #108]	; (800ec78 <USBD_LL_Init+0xb8>)
 800ec0a:	f7f7 fa8b 	bl	8006124 <HAL_PCD_Init>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ec14:	f7f4 f97e 	bl	8002f14 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec1e:	2318      	movs	r3, #24
 800ec20:	2200      	movs	r2, #0
 800ec22:	2100      	movs	r1, #0
 800ec24:	f7f8 fd87 	bl	8007736 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec2e:	2358      	movs	r3, #88	; 0x58
 800ec30:	2200      	movs	r2, #0
 800ec32:	2180      	movs	r1, #128	; 0x80
 800ec34:	f7f8 fd7f 	bl	8007736 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec3e:	23c0      	movs	r3, #192	; 0xc0
 800ec40:	2200      	movs	r2, #0
 800ec42:	2181      	movs	r1, #129	; 0x81
 800ec44:	f7f8 fd77 	bl	8007736 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ec52:	2200      	movs	r2, #0
 800ec54:	2101      	movs	r1, #1
 800ec56:	f7f8 fd6e 	bl	8007736 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec64:	2200      	movs	r2, #0
 800ec66:	2182      	movs	r1, #130	; 0x82
 800ec68:	f7f8 fd65 	bl	8007736 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20001da4 	.word	0x20001da4
 800ec7c:	40005c00 	.word	0x40005c00

0800ec80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f7 fb29 	bl	80062ee <HAL_PCD_Start>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 f980 	bl	800efa8 <USBD_Get_USB_Status>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecac:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	4608      	mov	r0, r1
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	70fb      	strb	r3, [r7, #3]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	70bb      	strb	r3, [r7, #2]
 800eccc:	4613      	mov	r3, r2
 800ecce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ecde:	78bb      	ldrb	r3, [r7, #2]
 800ece0:	883a      	ldrh	r2, [r7, #0]
 800ece2:	78f9      	ldrb	r1, [r7, #3]
 800ece4:	f7f7 fc98 	bl	8006618 <HAL_PCD_EP_Open>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 f95a 	bl	800efa8 <USBD_Get_USB_Status>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed1c:	78fa      	ldrb	r2, [r7, #3]
 800ed1e:	4611      	mov	r1, r2
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7f7 fcdf 	bl	80066e4 <HAL_PCD_EP_Close>
 800ed26:	4603      	mov	r3, r0
 800ed28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 f93b 	bl	800efa8 <USBD_Get_USB_Status>
 800ed32:	4603      	mov	r3, r0
 800ed34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed5a:	78fa      	ldrb	r2, [r7, #3]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f7 fda0 	bl	80068a4 <HAL_PCD_EP_SetStall>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f000 f91c 	bl	800efa8 <USBD_Get_USB_Status>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	460b      	mov	r3, r1
 800ed88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed98:	78fa      	ldrb	r2, [r7, #3]
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7f7 fde1 	bl	8006964 <HAL_PCD_EP_ClrStall>
 800eda2:	4603      	mov	r3, r0
 800eda4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 f8fd 	bl	800efa8 <USBD_Get_USB_Status>
 800edae:	4603      	mov	r3, r0
 800edb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800edd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	da0c      	bge.n	800edf2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800edd8:	78fb      	ldrb	r3, [r7, #3]
 800edda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edde:	68f9      	ldr	r1, [r7, #12]
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	4613      	mov	r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	3302      	adds	r3, #2
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	e00b      	b.n	800ee0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800edf2:	78fb      	ldrb	r3, [r7, #3]
 800edf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edf8:	68f9      	ldr	r1, [r7, #12]
 800edfa:	4613      	mov	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	00db      	lsls	r3, r3, #3
 800ee02:	440b      	add	r3, r1
 800ee04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ee08:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	460b      	mov	r3, r1
 800ee20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	4611      	mov	r1, r2
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7f7 fbca 	bl	80065ce <HAL_PCD_SetAddress>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 f8b1 	bl	800efa8 <USBD_Get_USB_Status>
 800ee46:	4603      	mov	r3, r0
 800ee48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	460b      	mov	r3, r1
 800ee62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee72:	7af9      	ldrb	r1, [r7, #11]
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	f7f7 fcd1 	bl	800681e <HAL_PCD_EP_Transmit>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee80:	7dfb      	ldrb	r3, [r7, #23]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 f890 	bl	800efa8 <USBD_Get_USB_Status>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3718      	adds	r7, #24
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b086      	sub	sp, #24
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
 800eea2:	460b      	mov	r3, r1
 800eea4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eeb4:	7af9      	ldrb	r1, [r7, #11]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	f7f7 fc5b 	bl	8006774 <HAL_PCD_EP_Receive>
 800eebe:	4603      	mov	r3, r0
 800eec0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f000 f86f 	bl	800efa8 <USBD_Get_USB_Status>
 800eeca:	4603      	mov	r3, r0
 800eecc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eece:	7dbb      	ldrb	r3, [r7, #22]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3718      	adds	r7, #24
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeea:	78fa      	ldrb	r2, [r7, #3]
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f7 fc7d 	bl	80067ee <HAL_PCD_EP_GetRxCount>
 800eef4:	4603      	mov	r3, r0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	460b      	mov	r3, r1
 800ef0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ef0c:	78fb      	ldrb	r3, [r7, #3]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d002      	beq.n	800ef18 <HAL_PCDEx_LPM_Callback+0x18>
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d013      	beq.n	800ef3e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ef16:	e023      	b.n	800ef60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	699b      	ldr	r3, [r3, #24]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d007      	beq.n	800ef30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ef20:	f000 f83c 	bl	800ef9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef24:	4b10      	ldr	r3, [pc, #64]	; (800ef68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef26:	691b      	ldr	r3, [r3, #16]
 800ef28:	4a0f      	ldr	r2, [pc, #60]	; (800ef68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef2a:	f023 0306 	bic.w	r3, r3, #6
 800ef2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe f9a6 	bl	800d288 <USBD_LL_Resume>
    break;
 800ef3c:	e010      	b.n	800ef60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe f98a 	bl	800d25e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d005      	beq.n	800ef5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef52:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef54:	691b      	ldr	r3, [r3, #16]
 800ef56:	4a04      	ldr	r2, [pc, #16]	; (800ef68 <HAL_PCDEx_LPM_Callback+0x68>)
 800ef58:	f043 0306 	orr.w	r3, r3, #6
 800ef5c:	6113      	str	r3, [r2, #16]
    break;
 800ef5e:	bf00      	nop
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed00 	.word	0xe000ed00

0800ef6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef74:	4b03      	ldr	r3, [pc, #12]	; (800ef84 <USBD_static_malloc+0x18>)
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	20000440 	.word	0x20000440

0800ef88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]

}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800efa0:	f7f2 fb64 	bl	800166c <SystemClock_Config>
}
 800efa4:	bf00      	nop
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	2b03      	cmp	r3, #3
 800efba:	d817      	bhi.n	800efec <USBD_Get_USB_Status+0x44>
 800efbc:	a201      	add	r2, pc, #4	; (adr r2, 800efc4 <USBD_Get_USB_Status+0x1c>)
 800efbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc2:	bf00      	nop
 800efc4:	0800efd5 	.word	0x0800efd5
 800efc8:	0800efdb 	.word	0x0800efdb
 800efcc:	0800efe1 	.word	0x0800efe1
 800efd0:	0800efe7 	.word	0x0800efe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	73fb      	strb	r3, [r7, #15]
    break;
 800efd8:	e00b      	b.n	800eff2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efda:	2303      	movs	r3, #3
 800efdc:	73fb      	strb	r3, [r7, #15]
    break;
 800efde:	e008      	b.n	800eff2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efe0:	2301      	movs	r3, #1
 800efe2:	73fb      	strb	r3, [r7, #15]
    break;
 800efe4:	e005      	b.n	800eff2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efe6:	2303      	movs	r3, #3
 800efe8:	73fb      	strb	r3, [r7, #15]
    break;
 800efea:	e002      	b.n	800eff2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800efec:	2303      	movs	r3, #3
 800efee:	73fb      	strb	r3, [r7, #15]
    break;
 800eff0:	bf00      	nop
  }
  return usb_status;
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <__errno>:
 800f000:	4b01      	ldr	r3, [pc, #4]	; (800f008 <__errno+0x8>)
 800f002:	6818      	ldr	r0, [r3, #0]
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	200003ac 	.word	0x200003ac

0800f00c <__libc_init_array>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	4d0d      	ldr	r5, [pc, #52]	; (800f044 <__libc_init_array+0x38>)
 800f010:	4c0d      	ldr	r4, [pc, #52]	; (800f048 <__libc_init_array+0x3c>)
 800f012:	1b64      	subs	r4, r4, r5
 800f014:	10a4      	asrs	r4, r4, #2
 800f016:	2600      	movs	r6, #0
 800f018:	42a6      	cmp	r6, r4
 800f01a:	d109      	bne.n	800f030 <__libc_init_array+0x24>
 800f01c:	4d0b      	ldr	r5, [pc, #44]	; (800f04c <__libc_init_array+0x40>)
 800f01e:	4c0c      	ldr	r4, [pc, #48]	; (800f050 <__libc_init_array+0x44>)
 800f020:	f000 fc4e 	bl	800f8c0 <_init>
 800f024:	1b64      	subs	r4, r4, r5
 800f026:	10a4      	asrs	r4, r4, #2
 800f028:	2600      	movs	r6, #0
 800f02a:	42a6      	cmp	r6, r4
 800f02c:	d105      	bne.n	800f03a <__libc_init_array+0x2e>
 800f02e:	bd70      	pop	{r4, r5, r6, pc}
 800f030:	f855 3b04 	ldr.w	r3, [r5], #4
 800f034:	4798      	blx	r3
 800f036:	3601      	adds	r6, #1
 800f038:	e7ee      	b.n	800f018 <__libc_init_array+0xc>
 800f03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f03e:	4798      	blx	r3
 800f040:	3601      	adds	r6, #1
 800f042:	e7f2      	b.n	800f02a <__libc_init_array+0x1e>
 800f044:	0800feec 	.word	0x0800feec
 800f048:	0800feec 	.word	0x0800feec
 800f04c:	0800feec 	.word	0x0800feec
 800f050:	0800fef0 	.word	0x0800fef0

0800f054 <memset>:
 800f054:	4402      	add	r2, r0
 800f056:	4603      	mov	r3, r0
 800f058:	4293      	cmp	r3, r2
 800f05a:	d100      	bne.n	800f05e <memset+0xa>
 800f05c:	4770      	bx	lr
 800f05e:	f803 1b01 	strb.w	r1, [r3], #1
 800f062:	e7f9      	b.n	800f058 <memset+0x4>

0800f064 <siprintf>:
 800f064:	b40e      	push	{r1, r2, r3}
 800f066:	b500      	push	{lr}
 800f068:	b09c      	sub	sp, #112	; 0x70
 800f06a:	ab1d      	add	r3, sp, #116	; 0x74
 800f06c:	9002      	str	r0, [sp, #8]
 800f06e:	9006      	str	r0, [sp, #24]
 800f070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f074:	4809      	ldr	r0, [pc, #36]	; (800f09c <siprintf+0x38>)
 800f076:	9107      	str	r1, [sp, #28]
 800f078:	9104      	str	r1, [sp, #16]
 800f07a:	4909      	ldr	r1, [pc, #36]	; (800f0a0 <siprintf+0x3c>)
 800f07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f080:	9105      	str	r1, [sp, #20]
 800f082:	6800      	ldr	r0, [r0, #0]
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	a902      	add	r1, sp, #8
 800f088:	f000 f868 	bl	800f15c <_svfiprintf_r>
 800f08c:	9b02      	ldr	r3, [sp, #8]
 800f08e:	2200      	movs	r2, #0
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	b01c      	add	sp, #112	; 0x70
 800f094:	f85d eb04 	ldr.w	lr, [sp], #4
 800f098:	b003      	add	sp, #12
 800f09a:	4770      	bx	lr
 800f09c:	200003ac 	.word	0x200003ac
 800f0a0:	ffff0208 	.word	0xffff0208

0800f0a4 <__ssputs_r>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	688e      	ldr	r6, [r1, #8]
 800f0aa:	429e      	cmp	r6, r3
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	4690      	mov	r8, r2
 800f0b2:	461f      	mov	r7, r3
 800f0b4:	d838      	bhi.n	800f128 <__ssputs_r+0x84>
 800f0b6:	898a      	ldrh	r2, [r1, #12]
 800f0b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0bc:	d032      	beq.n	800f124 <__ssputs_r+0x80>
 800f0be:	6825      	ldr	r5, [r4, #0]
 800f0c0:	6909      	ldr	r1, [r1, #16]
 800f0c2:	eba5 0901 	sub.w	r9, r5, r1
 800f0c6:	6965      	ldr	r5, [r4, #20]
 800f0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	444b      	add	r3, r9
 800f0d4:	106d      	asrs	r5, r5, #1
 800f0d6:	429d      	cmp	r5, r3
 800f0d8:	bf38      	it	cc
 800f0da:	461d      	movcc	r5, r3
 800f0dc:	0553      	lsls	r3, r2, #21
 800f0de:	d531      	bpl.n	800f144 <__ssputs_r+0xa0>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f000 fb47 	bl	800f774 <_malloc_r>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	b950      	cbnz	r0, 800f100 <__ssputs_r+0x5c>
 800f0ea:	230c      	movs	r3, #12
 800f0ec:	f8ca 3000 	str.w	r3, [sl]
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0f6:	81a3      	strh	r3, [r4, #12]
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f100:	6921      	ldr	r1, [r4, #16]
 800f102:	464a      	mov	r2, r9
 800f104:	f000 fabe 	bl	800f684 <memcpy>
 800f108:	89a3      	ldrh	r3, [r4, #12]
 800f10a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f112:	81a3      	strh	r3, [r4, #12]
 800f114:	6126      	str	r6, [r4, #16]
 800f116:	6165      	str	r5, [r4, #20]
 800f118:	444e      	add	r6, r9
 800f11a:	eba5 0509 	sub.w	r5, r5, r9
 800f11e:	6026      	str	r6, [r4, #0]
 800f120:	60a5      	str	r5, [r4, #8]
 800f122:	463e      	mov	r6, r7
 800f124:	42be      	cmp	r6, r7
 800f126:	d900      	bls.n	800f12a <__ssputs_r+0x86>
 800f128:	463e      	mov	r6, r7
 800f12a:	4632      	mov	r2, r6
 800f12c:	6820      	ldr	r0, [r4, #0]
 800f12e:	4641      	mov	r1, r8
 800f130:	f000 fab6 	bl	800f6a0 <memmove>
 800f134:	68a3      	ldr	r3, [r4, #8]
 800f136:	6822      	ldr	r2, [r4, #0]
 800f138:	1b9b      	subs	r3, r3, r6
 800f13a:	4432      	add	r2, r6
 800f13c:	60a3      	str	r3, [r4, #8]
 800f13e:	6022      	str	r2, [r4, #0]
 800f140:	2000      	movs	r0, #0
 800f142:	e7db      	b.n	800f0fc <__ssputs_r+0x58>
 800f144:	462a      	mov	r2, r5
 800f146:	f000 fb6f 	bl	800f828 <_realloc_r>
 800f14a:	4606      	mov	r6, r0
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d1e1      	bne.n	800f114 <__ssputs_r+0x70>
 800f150:	6921      	ldr	r1, [r4, #16]
 800f152:	4650      	mov	r0, sl
 800f154:	f000 fabe 	bl	800f6d4 <_free_r>
 800f158:	e7c7      	b.n	800f0ea <__ssputs_r+0x46>
	...

0800f15c <_svfiprintf_r>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	4698      	mov	r8, r3
 800f162:	898b      	ldrh	r3, [r1, #12]
 800f164:	061b      	lsls	r3, r3, #24
 800f166:	b09d      	sub	sp, #116	; 0x74
 800f168:	4607      	mov	r7, r0
 800f16a:	460d      	mov	r5, r1
 800f16c:	4614      	mov	r4, r2
 800f16e:	d50e      	bpl.n	800f18e <_svfiprintf_r+0x32>
 800f170:	690b      	ldr	r3, [r1, #16]
 800f172:	b963      	cbnz	r3, 800f18e <_svfiprintf_r+0x32>
 800f174:	2140      	movs	r1, #64	; 0x40
 800f176:	f000 fafd 	bl	800f774 <_malloc_r>
 800f17a:	6028      	str	r0, [r5, #0]
 800f17c:	6128      	str	r0, [r5, #16]
 800f17e:	b920      	cbnz	r0, 800f18a <_svfiprintf_r+0x2e>
 800f180:	230c      	movs	r3, #12
 800f182:	603b      	str	r3, [r7, #0]
 800f184:	f04f 30ff 	mov.w	r0, #4294967295
 800f188:	e0d1      	b.n	800f32e <_svfiprintf_r+0x1d2>
 800f18a:	2340      	movs	r3, #64	; 0x40
 800f18c:	616b      	str	r3, [r5, #20]
 800f18e:	2300      	movs	r3, #0
 800f190:	9309      	str	r3, [sp, #36]	; 0x24
 800f192:	2320      	movs	r3, #32
 800f194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f198:	f8cd 800c 	str.w	r8, [sp, #12]
 800f19c:	2330      	movs	r3, #48	; 0x30
 800f19e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f348 <_svfiprintf_r+0x1ec>
 800f1a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1a6:	f04f 0901 	mov.w	r9, #1
 800f1aa:	4623      	mov	r3, r4
 800f1ac:	469a      	mov	sl, r3
 800f1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1b2:	b10a      	cbz	r2, 800f1b8 <_svfiprintf_r+0x5c>
 800f1b4:	2a25      	cmp	r2, #37	; 0x25
 800f1b6:	d1f9      	bne.n	800f1ac <_svfiprintf_r+0x50>
 800f1b8:	ebba 0b04 	subs.w	fp, sl, r4
 800f1bc:	d00b      	beq.n	800f1d6 <_svfiprintf_r+0x7a>
 800f1be:	465b      	mov	r3, fp
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ff6d 	bl	800f0a4 <__ssputs_r>
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	f000 80aa 	beq.w	800f324 <_svfiprintf_r+0x1c8>
 800f1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1d2:	445a      	add	r2, fp
 800f1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f000 80a2 	beq.w	800f324 <_svfiprintf_r+0x1c8>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ea:	f10a 0a01 	add.w	sl, sl, #1
 800f1ee:	9304      	str	r3, [sp, #16]
 800f1f0:	9307      	str	r3, [sp, #28]
 800f1f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1f6:	931a      	str	r3, [sp, #104]	; 0x68
 800f1f8:	4654      	mov	r4, sl
 800f1fa:	2205      	movs	r2, #5
 800f1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f200:	4851      	ldr	r0, [pc, #324]	; (800f348 <_svfiprintf_r+0x1ec>)
 800f202:	f7f1 f815 	bl	8000230 <memchr>
 800f206:	9a04      	ldr	r2, [sp, #16]
 800f208:	b9d8      	cbnz	r0, 800f242 <_svfiprintf_r+0xe6>
 800f20a:	06d0      	lsls	r0, r2, #27
 800f20c:	bf44      	itt	mi
 800f20e:	2320      	movmi	r3, #32
 800f210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f214:	0711      	lsls	r1, r2, #28
 800f216:	bf44      	itt	mi
 800f218:	232b      	movmi	r3, #43	; 0x2b
 800f21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f21e:	f89a 3000 	ldrb.w	r3, [sl]
 800f222:	2b2a      	cmp	r3, #42	; 0x2a
 800f224:	d015      	beq.n	800f252 <_svfiprintf_r+0xf6>
 800f226:	9a07      	ldr	r2, [sp, #28]
 800f228:	4654      	mov	r4, sl
 800f22a:	2000      	movs	r0, #0
 800f22c:	f04f 0c0a 	mov.w	ip, #10
 800f230:	4621      	mov	r1, r4
 800f232:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f236:	3b30      	subs	r3, #48	; 0x30
 800f238:	2b09      	cmp	r3, #9
 800f23a:	d94e      	bls.n	800f2da <_svfiprintf_r+0x17e>
 800f23c:	b1b0      	cbz	r0, 800f26c <_svfiprintf_r+0x110>
 800f23e:	9207      	str	r2, [sp, #28]
 800f240:	e014      	b.n	800f26c <_svfiprintf_r+0x110>
 800f242:	eba0 0308 	sub.w	r3, r0, r8
 800f246:	fa09 f303 	lsl.w	r3, r9, r3
 800f24a:	4313      	orrs	r3, r2
 800f24c:	9304      	str	r3, [sp, #16]
 800f24e:	46a2      	mov	sl, r4
 800f250:	e7d2      	b.n	800f1f8 <_svfiprintf_r+0x9c>
 800f252:	9b03      	ldr	r3, [sp, #12]
 800f254:	1d19      	adds	r1, r3, #4
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	9103      	str	r1, [sp, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bfbb      	ittet	lt
 800f25e:	425b      	neglt	r3, r3
 800f260:	f042 0202 	orrlt.w	r2, r2, #2
 800f264:	9307      	strge	r3, [sp, #28]
 800f266:	9307      	strlt	r3, [sp, #28]
 800f268:	bfb8      	it	lt
 800f26a:	9204      	strlt	r2, [sp, #16]
 800f26c:	7823      	ldrb	r3, [r4, #0]
 800f26e:	2b2e      	cmp	r3, #46	; 0x2e
 800f270:	d10c      	bne.n	800f28c <_svfiprintf_r+0x130>
 800f272:	7863      	ldrb	r3, [r4, #1]
 800f274:	2b2a      	cmp	r3, #42	; 0x2a
 800f276:	d135      	bne.n	800f2e4 <_svfiprintf_r+0x188>
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	1d1a      	adds	r2, r3, #4
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	9203      	str	r2, [sp, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfb8      	it	lt
 800f284:	f04f 33ff 	movlt.w	r3, #4294967295
 800f288:	3402      	adds	r4, #2
 800f28a:	9305      	str	r3, [sp, #20]
 800f28c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f358 <_svfiprintf_r+0x1fc>
 800f290:	7821      	ldrb	r1, [r4, #0]
 800f292:	2203      	movs	r2, #3
 800f294:	4650      	mov	r0, sl
 800f296:	f7f0 ffcb 	bl	8000230 <memchr>
 800f29a:	b140      	cbz	r0, 800f2ae <_svfiprintf_r+0x152>
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	eba0 000a 	sub.w	r0, r0, sl
 800f2a2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2a6:	9b04      	ldr	r3, [sp, #16]
 800f2a8:	4303      	orrs	r3, r0
 800f2aa:	3401      	adds	r4, #1
 800f2ac:	9304      	str	r3, [sp, #16]
 800f2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b2:	4826      	ldr	r0, [pc, #152]	; (800f34c <_svfiprintf_r+0x1f0>)
 800f2b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2b8:	2206      	movs	r2, #6
 800f2ba:	f7f0 ffb9 	bl	8000230 <memchr>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d038      	beq.n	800f334 <_svfiprintf_r+0x1d8>
 800f2c2:	4b23      	ldr	r3, [pc, #140]	; (800f350 <_svfiprintf_r+0x1f4>)
 800f2c4:	bb1b      	cbnz	r3, 800f30e <_svfiprintf_r+0x1b2>
 800f2c6:	9b03      	ldr	r3, [sp, #12]
 800f2c8:	3307      	adds	r3, #7
 800f2ca:	f023 0307 	bic.w	r3, r3, #7
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	9303      	str	r3, [sp, #12]
 800f2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d4:	4433      	add	r3, r6
 800f2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d8:	e767      	b.n	800f1aa <_svfiprintf_r+0x4e>
 800f2da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2de:	460c      	mov	r4, r1
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	e7a5      	b.n	800f230 <_svfiprintf_r+0xd4>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	3401      	adds	r4, #1
 800f2e8:	9305      	str	r3, [sp, #20]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f04f 0c0a 	mov.w	ip, #10
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2f6:	3a30      	subs	r2, #48	; 0x30
 800f2f8:	2a09      	cmp	r2, #9
 800f2fa:	d903      	bls.n	800f304 <_svfiprintf_r+0x1a8>
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0c5      	beq.n	800f28c <_svfiprintf_r+0x130>
 800f300:	9105      	str	r1, [sp, #20]
 800f302:	e7c3      	b.n	800f28c <_svfiprintf_r+0x130>
 800f304:	fb0c 2101 	mla	r1, ip, r1, r2
 800f308:	4604      	mov	r4, r0
 800f30a:	2301      	movs	r3, #1
 800f30c:	e7f0      	b.n	800f2f0 <_svfiprintf_r+0x194>
 800f30e:	ab03      	add	r3, sp, #12
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	462a      	mov	r2, r5
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <_svfiprintf_r+0x1f8>)
 800f316:	a904      	add	r1, sp, #16
 800f318:	4638      	mov	r0, r7
 800f31a:	f3af 8000 	nop.w
 800f31e:	1c42      	adds	r2, r0, #1
 800f320:	4606      	mov	r6, r0
 800f322:	d1d6      	bne.n	800f2d2 <_svfiprintf_r+0x176>
 800f324:	89ab      	ldrh	r3, [r5, #12]
 800f326:	065b      	lsls	r3, r3, #25
 800f328:	f53f af2c 	bmi.w	800f184 <_svfiprintf_r+0x28>
 800f32c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f32e:	b01d      	add	sp, #116	; 0x74
 800f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f334:	ab03      	add	r3, sp, #12
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	462a      	mov	r2, r5
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <_svfiprintf_r+0x1f8>)
 800f33c:	a904      	add	r1, sp, #16
 800f33e:	4638      	mov	r0, r7
 800f340:	f000 f87a 	bl	800f438 <_printf_i>
 800f344:	e7eb      	b.n	800f31e <_svfiprintf_r+0x1c2>
 800f346:	bf00      	nop
 800f348:	0800feb0 	.word	0x0800feb0
 800f34c:	0800feba 	.word	0x0800feba
 800f350:	00000000 	.word	0x00000000
 800f354:	0800f0a5 	.word	0x0800f0a5
 800f358:	0800feb6 	.word	0x0800feb6

0800f35c <_printf_common>:
 800f35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f360:	4616      	mov	r6, r2
 800f362:	4699      	mov	r9, r3
 800f364:	688a      	ldr	r2, [r1, #8]
 800f366:	690b      	ldr	r3, [r1, #16]
 800f368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f36c:	4293      	cmp	r3, r2
 800f36e:	bfb8      	it	lt
 800f370:	4613      	movlt	r3, r2
 800f372:	6033      	str	r3, [r6, #0]
 800f374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f378:	4607      	mov	r7, r0
 800f37a:	460c      	mov	r4, r1
 800f37c:	b10a      	cbz	r2, 800f382 <_printf_common+0x26>
 800f37e:	3301      	adds	r3, #1
 800f380:	6033      	str	r3, [r6, #0]
 800f382:	6823      	ldr	r3, [r4, #0]
 800f384:	0699      	lsls	r1, r3, #26
 800f386:	bf42      	ittt	mi
 800f388:	6833      	ldrmi	r3, [r6, #0]
 800f38a:	3302      	addmi	r3, #2
 800f38c:	6033      	strmi	r3, [r6, #0]
 800f38e:	6825      	ldr	r5, [r4, #0]
 800f390:	f015 0506 	ands.w	r5, r5, #6
 800f394:	d106      	bne.n	800f3a4 <_printf_common+0x48>
 800f396:	f104 0a19 	add.w	sl, r4, #25
 800f39a:	68e3      	ldr	r3, [r4, #12]
 800f39c:	6832      	ldr	r2, [r6, #0]
 800f39e:	1a9b      	subs	r3, r3, r2
 800f3a0:	42ab      	cmp	r3, r5
 800f3a2:	dc26      	bgt.n	800f3f2 <_printf_common+0x96>
 800f3a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3a8:	1e13      	subs	r3, r2, #0
 800f3aa:	6822      	ldr	r2, [r4, #0]
 800f3ac:	bf18      	it	ne
 800f3ae:	2301      	movne	r3, #1
 800f3b0:	0692      	lsls	r2, r2, #26
 800f3b2:	d42b      	bmi.n	800f40c <_printf_common+0xb0>
 800f3b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	47c0      	blx	r8
 800f3be:	3001      	adds	r0, #1
 800f3c0:	d01e      	beq.n	800f400 <_printf_common+0xa4>
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	68e5      	ldr	r5, [r4, #12]
 800f3c6:	6832      	ldr	r2, [r6, #0]
 800f3c8:	f003 0306 	and.w	r3, r3, #6
 800f3cc:	2b04      	cmp	r3, #4
 800f3ce:	bf08      	it	eq
 800f3d0:	1aad      	subeq	r5, r5, r2
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	6922      	ldr	r2, [r4, #16]
 800f3d6:	bf0c      	ite	eq
 800f3d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3dc:	2500      	movne	r5, #0
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	bfc4      	itt	gt
 800f3e2:	1a9b      	subgt	r3, r3, r2
 800f3e4:	18ed      	addgt	r5, r5, r3
 800f3e6:	2600      	movs	r6, #0
 800f3e8:	341a      	adds	r4, #26
 800f3ea:	42b5      	cmp	r5, r6
 800f3ec:	d11a      	bne.n	800f424 <_printf_common+0xc8>
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	e008      	b.n	800f404 <_printf_common+0xa8>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	4652      	mov	r2, sl
 800f3f6:	4649      	mov	r1, r9
 800f3f8:	4638      	mov	r0, r7
 800f3fa:	47c0      	blx	r8
 800f3fc:	3001      	adds	r0, #1
 800f3fe:	d103      	bne.n	800f408 <_printf_common+0xac>
 800f400:	f04f 30ff 	mov.w	r0, #4294967295
 800f404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f408:	3501      	adds	r5, #1
 800f40a:	e7c6      	b.n	800f39a <_printf_common+0x3e>
 800f40c:	18e1      	adds	r1, r4, r3
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	2030      	movs	r0, #48	; 0x30
 800f412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f416:	4422      	add	r2, r4
 800f418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f41c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f420:	3302      	adds	r3, #2
 800f422:	e7c7      	b.n	800f3b4 <_printf_common+0x58>
 800f424:	2301      	movs	r3, #1
 800f426:	4622      	mov	r2, r4
 800f428:	4649      	mov	r1, r9
 800f42a:	4638      	mov	r0, r7
 800f42c:	47c0      	blx	r8
 800f42e:	3001      	adds	r0, #1
 800f430:	d0e6      	beq.n	800f400 <_printf_common+0xa4>
 800f432:	3601      	adds	r6, #1
 800f434:	e7d9      	b.n	800f3ea <_printf_common+0x8e>
	...

0800f438 <_printf_i>:
 800f438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f43c:	460c      	mov	r4, r1
 800f43e:	4691      	mov	r9, r2
 800f440:	7e27      	ldrb	r7, [r4, #24]
 800f442:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f444:	2f78      	cmp	r7, #120	; 0x78
 800f446:	4680      	mov	r8, r0
 800f448:	469a      	mov	sl, r3
 800f44a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f44e:	d807      	bhi.n	800f460 <_printf_i+0x28>
 800f450:	2f62      	cmp	r7, #98	; 0x62
 800f452:	d80a      	bhi.n	800f46a <_printf_i+0x32>
 800f454:	2f00      	cmp	r7, #0
 800f456:	f000 80d8 	beq.w	800f60a <_printf_i+0x1d2>
 800f45a:	2f58      	cmp	r7, #88	; 0x58
 800f45c:	f000 80a3 	beq.w	800f5a6 <_printf_i+0x16e>
 800f460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f468:	e03a      	b.n	800f4e0 <_printf_i+0xa8>
 800f46a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f46e:	2b15      	cmp	r3, #21
 800f470:	d8f6      	bhi.n	800f460 <_printf_i+0x28>
 800f472:	a001      	add	r0, pc, #4	; (adr r0, 800f478 <_printf_i+0x40>)
 800f474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f478:	0800f4d1 	.word	0x0800f4d1
 800f47c:	0800f4e5 	.word	0x0800f4e5
 800f480:	0800f461 	.word	0x0800f461
 800f484:	0800f461 	.word	0x0800f461
 800f488:	0800f461 	.word	0x0800f461
 800f48c:	0800f461 	.word	0x0800f461
 800f490:	0800f4e5 	.word	0x0800f4e5
 800f494:	0800f461 	.word	0x0800f461
 800f498:	0800f461 	.word	0x0800f461
 800f49c:	0800f461 	.word	0x0800f461
 800f4a0:	0800f461 	.word	0x0800f461
 800f4a4:	0800f5f1 	.word	0x0800f5f1
 800f4a8:	0800f515 	.word	0x0800f515
 800f4ac:	0800f5d3 	.word	0x0800f5d3
 800f4b0:	0800f461 	.word	0x0800f461
 800f4b4:	0800f461 	.word	0x0800f461
 800f4b8:	0800f613 	.word	0x0800f613
 800f4bc:	0800f461 	.word	0x0800f461
 800f4c0:	0800f515 	.word	0x0800f515
 800f4c4:	0800f461 	.word	0x0800f461
 800f4c8:	0800f461 	.word	0x0800f461
 800f4cc:	0800f5db 	.word	0x0800f5db
 800f4d0:	680b      	ldr	r3, [r1, #0]
 800f4d2:	1d1a      	adds	r2, r3, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	600a      	str	r2, [r1, #0]
 800f4d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f4dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e0a3      	b.n	800f62c <_printf_i+0x1f4>
 800f4e4:	6825      	ldr	r5, [r4, #0]
 800f4e6:	6808      	ldr	r0, [r1, #0]
 800f4e8:	062e      	lsls	r6, r5, #24
 800f4ea:	f100 0304 	add.w	r3, r0, #4
 800f4ee:	d50a      	bpl.n	800f506 <_printf_i+0xce>
 800f4f0:	6805      	ldr	r5, [r0, #0]
 800f4f2:	600b      	str	r3, [r1, #0]
 800f4f4:	2d00      	cmp	r5, #0
 800f4f6:	da03      	bge.n	800f500 <_printf_i+0xc8>
 800f4f8:	232d      	movs	r3, #45	; 0x2d
 800f4fa:	426d      	negs	r5, r5
 800f4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f500:	485e      	ldr	r0, [pc, #376]	; (800f67c <_printf_i+0x244>)
 800f502:	230a      	movs	r3, #10
 800f504:	e019      	b.n	800f53a <_printf_i+0x102>
 800f506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f50a:	6805      	ldr	r5, [r0, #0]
 800f50c:	600b      	str	r3, [r1, #0]
 800f50e:	bf18      	it	ne
 800f510:	b22d      	sxthne	r5, r5
 800f512:	e7ef      	b.n	800f4f4 <_printf_i+0xbc>
 800f514:	680b      	ldr	r3, [r1, #0]
 800f516:	6825      	ldr	r5, [r4, #0]
 800f518:	1d18      	adds	r0, r3, #4
 800f51a:	6008      	str	r0, [r1, #0]
 800f51c:	0628      	lsls	r0, r5, #24
 800f51e:	d501      	bpl.n	800f524 <_printf_i+0xec>
 800f520:	681d      	ldr	r5, [r3, #0]
 800f522:	e002      	b.n	800f52a <_printf_i+0xf2>
 800f524:	0669      	lsls	r1, r5, #25
 800f526:	d5fb      	bpl.n	800f520 <_printf_i+0xe8>
 800f528:	881d      	ldrh	r5, [r3, #0]
 800f52a:	4854      	ldr	r0, [pc, #336]	; (800f67c <_printf_i+0x244>)
 800f52c:	2f6f      	cmp	r7, #111	; 0x6f
 800f52e:	bf0c      	ite	eq
 800f530:	2308      	moveq	r3, #8
 800f532:	230a      	movne	r3, #10
 800f534:	2100      	movs	r1, #0
 800f536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f53a:	6866      	ldr	r6, [r4, #4]
 800f53c:	60a6      	str	r6, [r4, #8]
 800f53e:	2e00      	cmp	r6, #0
 800f540:	bfa2      	ittt	ge
 800f542:	6821      	ldrge	r1, [r4, #0]
 800f544:	f021 0104 	bicge.w	r1, r1, #4
 800f548:	6021      	strge	r1, [r4, #0]
 800f54a:	b90d      	cbnz	r5, 800f550 <_printf_i+0x118>
 800f54c:	2e00      	cmp	r6, #0
 800f54e:	d04d      	beq.n	800f5ec <_printf_i+0x1b4>
 800f550:	4616      	mov	r6, r2
 800f552:	fbb5 f1f3 	udiv	r1, r5, r3
 800f556:	fb03 5711 	mls	r7, r3, r1, r5
 800f55a:	5dc7      	ldrb	r7, [r0, r7]
 800f55c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f560:	462f      	mov	r7, r5
 800f562:	42bb      	cmp	r3, r7
 800f564:	460d      	mov	r5, r1
 800f566:	d9f4      	bls.n	800f552 <_printf_i+0x11a>
 800f568:	2b08      	cmp	r3, #8
 800f56a:	d10b      	bne.n	800f584 <_printf_i+0x14c>
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	07df      	lsls	r7, r3, #31
 800f570:	d508      	bpl.n	800f584 <_printf_i+0x14c>
 800f572:	6923      	ldr	r3, [r4, #16]
 800f574:	6861      	ldr	r1, [r4, #4]
 800f576:	4299      	cmp	r1, r3
 800f578:	bfde      	ittt	le
 800f57a:	2330      	movle	r3, #48	; 0x30
 800f57c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f580:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f584:	1b92      	subs	r2, r2, r6
 800f586:	6122      	str	r2, [r4, #16]
 800f588:	f8cd a000 	str.w	sl, [sp]
 800f58c:	464b      	mov	r3, r9
 800f58e:	aa03      	add	r2, sp, #12
 800f590:	4621      	mov	r1, r4
 800f592:	4640      	mov	r0, r8
 800f594:	f7ff fee2 	bl	800f35c <_printf_common>
 800f598:	3001      	adds	r0, #1
 800f59a:	d14c      	bne.n	800f636 <_printf_i+0x1fe>
 800f59c:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a0:	b004      	add	sp, #16
 800f5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a6:	4835      	ldr	r0, [pc, #212]	; (800f67c <_printf_i+0x244>)
 800f5a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	680e      	ldr	r6, [r1, #0]
 800f5b0:	061f      	lsls	r7, r3, #24
 800f5b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800f5b6:	600e      	str	r6, [r1, #0]
 800f5b8:	d514      	bpl.n	800f5e4 <_printf_i+0x1ac>
 800f5ba:	07d9      	lsls	r1, r3, #31
 800f5bc:	bf44      	itt	mi
 800f5be:	f043 0320 	orrmi.w	r3, r3, #32
 800f5c2:	6023      	strmi	r3, [r4, #0]
 800f5c4:	b91d      	cbnz	r5, 800f5ce <_printf_i+0x196>
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	f023 0320 	bic.w	r3, r3, #32
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	2310      	movs	r3, #16
 800f5d0:	e7b0      	b.n	800f534 <_printf_i+0xfc>
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	f043 0320 	orr.w	r3, r3, #32
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	2378      	movs	r3, #120	; 0x78
 800f5dc:	4828      	ldr	r0, [pc, #160]	; (800f680 <_printf_i+0x248>)
 800f5de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5e2:	e7e3      	b.n	800f5ac <_printf_i+0x174>
 800f5e4:	065e      	lsls	r6, r3, #25
 800f5e6:	bf48      	it	mi
 800f5e8:	b2ad      	uxthmi	r5, r5
 800f5ea:	e7e6      	b.n	800f5ba <_printf_i+0x182>
 800f5ec:	4616      	mov	r6, r2
 800f5ee:	e7bb      	b.n	800f568 <_printf_i+0x130>
 800f5f0:	680b      	ldr	r3, [r1, #0]
 800f5f2:	6826      	ldr	r6, [r4, #0]
 800f5f4:	6960      	ldr	r0, [r4, #20]
 800f5f6:	1d1d      	adds	r5, r3, #4
 800f5f8:	600d      	str	r5, [r1, #0]
 800f5fa:	0635      	lsls	r5, r6, #24
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	d501      	bpl.n	800f604 <_printf_i+0x1cc>
 800f600:	6018      	str	r0, [r3, #0]
 800f602:	e002      	b.n	800f60a <_printf_i+0x1d2>
 800f604:	0671      	lsls	r1, r6, #25
 800f606:	d5fb      	bpl.n	800f600 <_printf_i+0x1c8>
 800f608:	8018      	strh	r0, [r3, #0]
 800f60a:	2300      	movs	r3, #0
 800f60c:	6123      	str	r3, [r4, #16]
 800f60e:	4616      	mov	r6, r2
 800f610:	e7ba      	b.n	800f588 <_printf_i+0x150>
 800f612:	680b      	ldr	r3, [r1, #0]
 800f614:	1d1a      	adds	r2, r3, #4
 800f616:	600a      	str	r2, [r1, #0]
 800f618:	681e      	ldr	r6, [r3, #0]
 800f61a:	6862      	ldr	r2, [r4, #4]
 800f61c:	2100      	movs	r1, #0
 800f61e:	4630      	mov	r0, r6
 800f620:	f7f0 fe06 	bl	8000230 <memchr>
 800f624:	b108      	cbz	r0, 800f62a <_printf_i+0x1f2>
 800f626:	1b80      	subs	r0, r0, r6
 800f628:	6060      	str	r0, [r4, #4]
 800f62a:	6863      	ldr	r3, [r4, #4]
 800f62c:	6123      	str	r3, [r4, #16]
 800f62e:	2300      	movs	r3, #0
 800f630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f634:	e7a8      	b.n	800f588 <_printf_i+0x150>
 800f636:	6923      	ldr	r3, [r4, #16]
 800f638:	4632      	mov	r2, r6
 800f63a:	4649      	mov	r1, r9
 800f63c:	4640      	mov	r0, r8
 800f63e:	47d0      	blx	sl
 800f640:	3001      	adds	r0, #1
 800f642:	d0ab      	beq.n	800f59c <_printf_i+0x164>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	079b      	lsls	r3, r3, #30
 800f648:	d413      	bmi.n	800f672 <_printf_i+0x23a>
 800f64a:	68e0      	ldr	r0, [r4, #12]
 800f64c:	9b03      	ldr	r3, [sp, #12]
 800f64e:	4298      	cmp	r0, r3
 800f650:	bfb8      	it	lt
 800f652:	4618      	movlt	r0, r3
 800f654:	e7a4      	b.n	800f5a0 <_printf_i+0x168>
 800f656:	2301      	movs	r3, #1
 800f658:	4632      	mov	r2, r6
 800f65a:	4649      	mov	r1, r9
 800f65c:	4640      	mov	r0, r8
 800f65e:	47d0      	blx	sl
 800f660:	3001      	adds	r0, #1
 800f662:	d09b      	beq.n	800f59c <_printf_i+0x164>
 800f664:	3501      	adds	r5, #1
 800f666:	68e3      	ldr	r3, [r4, #12]
 800f668:	9903      	ldr	r1, [sp, #12]
 800f66a:	1a5b      	subs	r3, r3, r1
 800f66c:	42ab      	cmp	r3, r5
 800f66e:	dcf2      	bgt.n	800f656 <_printf_i+0x21e>
 800f670:	e7eb      	b.n	800f64a <_printf_i+0x212>
 800f672:	2500      	movs	r5, #0
 800f674:	f104 0619 	add.w	r6, r4, #25
 800f678:	e7f5      	b.n	800f666 <_printf_i+0x22e>
 800f67a:	bf00      	nop
 800f67c:	0800fec1 	.word	0x0800fec1
 800f680:	0800fed2 	.word	0x0800fed2

0800f684 <memcpy>:
 800f684:	440a      	add	r2, r1
 800f686:	4291      	cmp	r1, r2
 800f688:	f100 33ff 	add.w	r3, r0, #4294967295
 800f68c:	d100      	bne.n	800f690 <memcpy+0xc>
 800f68e:	4770      	bx	lr
 800f690:	b510      	push	{r4, lr}
 800f692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f69a:	4291      	cmp	r1, r2
 800f69c:	d1f9      	bne.n	800f692 <memcpy+0xe>
 800f69e:	bd10      	pop	{r4, pc}

0800f6a0 <memmove>:
 800f6a0:	4288      	cmp	r0, r1
 800f6a2:	b510      	push	{r4, lr}
 800f6a4:	eb01 0402 	add.w	r4, r1, r2
 800f6a8:	d902      	bls.n	800f6b0 <memmove+0x10>
 800f6aa:	4284      	cmp	r4, r0
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	d807      	bhi.n	800f6c0 <memmove+0x20>
 800f6b0:	1e43      	subs	r3, r0, #1
 800f6b2:	42a1      	cmp	r1, r4
 800f6b4:	d008      	beq.n	800f6c8 <memmove+0x28>
 800f6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6be:	e7f8      	b.n	800f6b2 <memmove+0x12>
 800f6c0:	4402      	add	r2, r0
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	428a      	cmp	r2, r1
 800f6c6:	d100      	bne.n	800f6ca <memmove+0x2a>
 800f6c8:	bd10      	pop	{r4, pc}
 800f6ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6d2:	e7f7      	b.n	800f6c4 <memmove+0x24>

0800f6d4 <_free_r>:
 800f6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	d048      	beq.n	800f76c <_free_r+0x98>
 800f6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6de:	9001      	str	r0, [sp, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800f6e6:	bfb8      	it	lt
 800f6e8:	18e4      	addlt	r4, r4, r3
 800f6ea:	f000 f8d3 	bl	800f894 <__malloc_lock>
 800f6ee:	4a20      	ldr	r2, [pc, #128]	; (800f770 <_free_r+0x9c>)
 800f6f0:	9801      	ldr	r0, [sp, #4]
 800f6f2:	6813      	ldr	r3, [r2, #0]
 800f6f4:	4615      	mov	r5, r2
 800f6f6:	b933      	cbnz	r3, 800f706 <_free_r+0x32>
 800f6f8:	6063      	str	r3, [r4, #4]
 800f6fa:	6014      	str	r4, [r2, #0]
 800f6fc:	b003      	add	sp, #12
 800f6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f702:	f000 b8cd 	b.w	800f8a0 <__malloc_unlock>
 800f706:	42a3      	cmp	r3, r4
 800f708:	d90b      	bls.n	800f722 <_free_r+0x4e>
 800f70a:	6821      	ldr	r1, [r4, #0]
 800f70c:	1862      	adds	r2, r4, r1
 800f70e:	4293      	cmp	r3, r2
 800f710:	bf04      	itt	eq
 800f712:	681a      	ldreq	r2, [r3, #0]
 800f714:	685b      	ldreq	r3, [r3, #4]
 800f716:	6063      	str	r3, [r4, #4]
 800f718:	bf04      	itt	eq
 800f71a:	1852      	addeq	r2, r2, r1
 800f71c:	6022      	streq	r2, [r4, #0]
 800f71e:	602c      	str	r4, [r5, #0]
 800f720:	e7ec      	b.n	800f6fc <_free_r+0x28>
 800f722:	461a      	mov	r2, r3
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	b10b      	cbz	r3, 800f72c <_free_r+0x58>
 800f728:	42a3      	cmp	r3, r4
 800f72a:	d9fa      	bls.n	800f722 <_free_r+0x4e>
 800f72c:	6811      	ldr	r1, [r2, #0]
 800f72e:	1855      	adds	r5, r2, r1
 800f730:	42a5      	cmp	r5, r4
 800f732:	d10b      	bne.n	800f74c <_free_r+0x78>
 800f734:	6824      	ldr	r4, [r4, #0]
 800f736:	4421      	add	r1, r4
 800f738:	1854      	adds	r4, r2, r1
 800f73a:	42a3      	cmp	r3, r4
 800f73c:	6011      	str	r1, [r2, #0]
 800f73e:	d1dd      	bne.n	800f6fc <_free_r+0x28>
 800f740:	681c      	ldr	r4, [r3, #0]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	6053      	str	r3, [r2, #4]
 800f746:	4421      	add	r1, r4
 800f748:	6011      	str	r1, [r2, #0]
 800f74a:	e7d7      	b.n	800f6fc <_free_r+0x28>
 800f74c:	d902      	bls.n	800f754 <_free_r+0x80>
 800f74e:	230c      	movs	r3, #12
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	e7d3      	b.n	800f6fc <_free_r+0x28>
 800f754:	6825      	ldr	r5, [r4, #0]
 800f756:	1961      	adds	r1, r4, r5
 800f758:	428b      	cmp	r3, r1
 800f75a:	bf04      	itt	eq
 800f75c:	6819      	ldreq	r1, [r3, #0]
 800f75e:	685b      	ldreq	r3, [r3, #4]
 800f760:	6063      	str	r3, [r4, #4]
 800f762:	bf04      	itt	eq
 800f764:	1949      	addeq	r1, r1, r5
 800f766:	6021      	streq	r1, [r4, #0]
 800f768:	6054      	str	r4, [r2, #4]
 800f76a:	e7c7      	b.n	800f6fc <_free_r+0x28>
 800f76c:	b003      	add	sp, #12
 800f76e:	bd30      	pop	{r4, r5, pc}
 800f770:	20000660 	.word	0x20000660

0800f774 <_malloc_r>:
 800f774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f776:	1ccd      	adds	r5, r1, #3
 800f778:	f025 0503 	bic.w	r5, r5, #3
 800f77c:	3508      	adds	r5, #8
 800f77e:	2d0c      	cmp	r5, #12
 800f780:	bf38      	it	cc
 800f782:	250c      	movcc	r5, #12
 800f784:	2d00      	cmp	r5, #0
 800f786:	4606      	mov	r6, r0
 800f788:	db01      	blt.n	800f78e <_malloc_r+0x1a>
 800f78a:	42a9      	cmp	r1, r5
 800f78c:	d903      	bls.n	800f796 <_malloc_r+0x22>
 800f78e:	230c      	movs	r3, #12
 800f790:	6033      	str	r3, [r6, #0]
 800f792:	2000      	movs	r0, #0
 800f794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f796:	f000 f87d 	bl	800f894 <__malloc_lock>
 800f79a:	4921      	ldr	r1, [pc, #132]	; (800f820 <_malloc_r+0xac>)
 800f79c:	680a      	ldr	r2, [r1, #0]
 800f79e:	4614      	mov	r4, r2
 800f7a0:	b99c      	cbnz	r4, 800f7ca <_malloc_r+0x56>
 800f7a2:	4f20      	ldr	r7, [pc, #128]	; (800f824 <_malloc_r+0xb0>)
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	b923      	cbnz	r3, 800f7b2 <_malloc_r+0x3e>
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f000 f862 	bl	800f874 <_sbrk_r>
 800f7b0:	6038      	str	r0, [r7, #0]
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f000 f85d 	bl	800f874 <_sbrk_r>
 800f7ba:	1c43      	adds	r3, r0, #1
 800f7bc:	d123      	bne.n	800f806 <_malloc_r+0x92>
 800f7be:	230c      	movs	r3, #12
 800f7c0:	6033      	str	r3, [r6, #0]
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f000 f86c 	bl	800f8a0 <__malloc_unlock>
 800f7c8:	e7e3      	b.n	800f792 <_malloc_r+0x1e>
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	1b5b      	subs	r3, r3, r5
 800f7ce:	d417      	bmi.n	800f800 <_malloc_r+0x8c>
 800f7d0:	2b0b      	cmp	r3, #11
 800f7d2:	d903      	bls.n	800f7dc <_malloc_r+0x68>
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	441c      	add	r4, r3
 800f7d8:	6025      	str	r5, [r4, #0]
 800f7da:	e004      	b.n	800f7e6 <_malloc_r+0x72>
 800f7dc:	6863      	ldr	r3, [r4, #4]
 800f7de:	42a2      	cmp	r2, r4
 800f7e0:	bf0c      	ite	eq
 800f7e2:	600b      	streq	r3, [r1, #0]
 800f7e4:	6053      	strne	r3, [r2, #4]
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f000 f85a 	bl	800f8a0 <__malloc_unlock>
 800f7ec:	f104 000b 	add.w	r0, r4, #11
 800f7f0:	1d23      	adds	r3, r4, #4
 800f7f2:	f020 0007 	bic.w	r0, r0, #7
 800f7f6:	1ac2      	subs	r2, r0, r3
 800f7f8:	d0cc      	beq.n	800f794 <_malloc_r+0x20>
 800f7fa:	1a1b      	subs	r3, r3, r0
 800f7fc:	50a3      	str	r3, [r4, r2]
 800f7fe:	e7c9      	b.n	800f794 <_malloc_r+0x20>
 800f800:	4622      	mov	r2, r4
 800f802:	6864      	ldr	r4, [r4, #4]
 800f804:	e7cc      	b.n	800f7a0 <_malloc_r+0x2c>
 800f806:	1cc4      	adds	r4, r0, #3
 800f808:	f024 0403 	bic.w	r4, r4, #3
 800f80c:	42a0      	cmp	r0, r4
 800f80e:	d0e3      	beq.n	800f7d8 <_malloc_r+0x64>
 800f810:	1a21      	subs	r1, r4, r0
 800f812:	4630      	mov	r0, r6
 800f814:	f000 f82e 	bl	800f874 <_sbrk_r>
 800f818:	3001      	adds	r0, #1
 800f81a:	d1dd      	bne.n	800f7d8 <_malloc_r+0x64>
 800f81c:	e7cf      	b.n	800f7be <_malloc_r+0x4a>
 800f81e:	bf00      	nop
 800f820:	20000660 	.word	0x20000660
 800f824:	20000664 	.word	0x20000664

0800f828 <_realloc_r>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	4607      	mov	r7, r0
 800f82c:	4614      	mov	r4, r2
 800f82e:	460e      	mov	r6, r1
 800f830:	b921      	cbnz	r1, 800f83c <_realloc_r+0x14>
 800f832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f836:	4611      	mov	r1, r2
 800f838:	f7ff bf9c 	b.w	800f774 <_malloc_r>
 800f83c:	b922      	cbnz	r2, 800f848 <_realloc_r+0x20>
 800f83e:	f7ff ff49 	bl	800f6d4 <_free_r>
 800f842:	4625      	mov	r5, r4
 800f844:	4628      	mov	r0, r5
 800f846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f848:	f000 f830 	bl	800f8ac <_malloc_usable_size_r>
 800f84c:	42a0      	cmp	r0, r4
 800f84e:	d20f      	bcs.n	800f870 <_realloc_r+0x48>
 800f850:	4621      	mov	r1, r4
 800f852:	4638      	mov	r0, r7
 800f854:	f7ff ff8e 	bl	800f774 <_malloc_r>
 800f858:	4605      	mov	r5, r0
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d0f2      	beq.n	800f844 <_realloc_r+0x1c>
 800f85e:	4631      	mov	r1, r6
 800f860:	4622      	mov	r2, r4
 800f862:	f7ff ff0f 	bl	800f684 <memcpy>
 800f866:	4631      	mov	r1, r6
 800f868:	4638      	mov	r0, r7
 800f86a:	f7ff ff33 	bl	800f6d4 <_free_r>
 800f86e:	e7e9      	b.n	800f844 <_realloc_r+0x1c>
 800f870:	4635      	mov	r5, r6
 800f872:	e7e7      	b.n	800f844 <_realloc_r+0x1c>

0800f874 <_sbrk_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d06      	ldr	r5, [pc, #24]	; (800f890 <_sbrk_r+0x1c>)
 800f878:	2300      	movs	r3, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	602b      	str	r3, [r5, #0]
 800f880:	f7f3 fd84 	bl	800338c <_sbrk>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	d102      	bne.n	800f88e <_sbrk_r+0x1a>
 800f888:	682b      	ldr	r3, [r5, #0]
 800f88a:	b103      	cbz	r3, 800f88e <_sbrk_r+0x1a>
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	20002098 	.word	0x20002098

0800f894 <__malloc_lock>:
 800f894:	4801      	ldr	r0, [pc, #4]	; (800f89c <__malloc_lock+0x8>)
 800f896:	f000 b811 	b.w	800f8bc <__retarget_lock_acquire_recursive>
 800f89a:	bf00      	nop
 800f89c:	200020a0 	.word	0x200020a0

0800f8a0 <__malloc_unlock>:
 800f8a0:	4801      	ldr	r0, [pc, #4]	; (800f8a8 <__malloc_unlock+0x8>)
 800f8a2:	f000 b80c 	b.w	800f8be <__retarget_lock_release_recursive>
 800f8a6:	bf00      	nop
 800f8a8:	200020a0 	.word	0x200020a0

0800f8ac <_malloc_usable_size_r>:
 800f8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8b0:	1f18      	subs	r0, r3, #4
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	bfbc      	itt	lt
 800f8b6:	580b      	ldrlt	r3, [r1, r0]
 800f8b8:	18c0      	addlt	r0, r0, r3
 800f8ba:	4770      	bx	lr

0800f8bc <__retarget_lock_acquire_recursive>:
 800f8bc:	4770      	bx	lr

0800f8be <__retarget_lock_release_recursive>:
 800f8be:	4770      	bx	lr

0800f8c0 <_init>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr

0800f8cc <_fini>:
 800f8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ce:	bf00      	nop
 800f8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8d2:	bc08      	pop	{r3}
 800f8d4:	469e      	mov	lr, r3
 800f8d6:	4770      	bx	lr
