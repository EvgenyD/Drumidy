
Drumidy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f674  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800f854  0800f854  0001f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe60  0800fe60  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe68  0800fe68  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe68  0800fe68  0001fe68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800fe70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000410  08010280  00020410  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002018  08010280  00022018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002913e  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e88  00000000  00000000  0004957e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0004e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00050110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244af  00000000  00000000  00051c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021487  00000000  00000000  000760bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b94  00000000  00000000  00097546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001780da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b0  00000000  00000000  00178130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000410 	.word	0x20000410
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f83c 	.word	0x0800f83c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000414 	.word	0x20000414
 800021c:	0800f83c 	.word	0x0800f83c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <HAL_TIM_PeriodElapsedCallback>:
	flag_New_Settings = 1;
	dataReceivedSize = _len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	// 10kHz trigger, 0.1ms
	if (htim->Instance==htim4.Instance)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d109      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x28>
      {
		HAL_ADCEx_MultiModeStart_DMA(&hadc1,  (uint32_t *) adc_buf, 5);//
 8000dc8:	2205      	movs	r2, #5
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dce:	f003 ff85 	bl	8004cdc <HAL_ADCEx_MultiModeStart_DMA>
		cnt++;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dda:	6013      	str	r3, [r2, #0]
      }

	// 3.33Hz active sensing, 300ms
	if (htim->Instance==htim2.Instance)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d102      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x3a>
      {
		upd_active_sens = 1;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
      }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000688 	.word	0x20000688
 8000dfc:	20000b9c 	.word	0x20000b9c
 8000e00:	20000848 	.word	0x20000848
 8000e04:	20000744 	.word	0x20000744
 8000e08:	20000bb0 	.word	0x20000bb0
 8000e0c:	2000042c 	.word	0x2000042c

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_UART_RxCpltCallback+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d102      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0x1a>
		buffer_in[15] = 1;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_UART_RxCpltCallback+0x2c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	73da      	strb	r2, [r3, #15]
//		config_Mode = 1;
//		HAL_UART_Receive_IT (&huart2, &config_Mode, 1);
	}

}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000bfc 	.word	0x20000bfc
 8000e3c:	20000b10 	.word	0x20000b10

08000e40 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==hadc1.Instance)	{
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x134>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 808b 	bne.w	8000f6c <HAL_ADC_ConvCpltCallback+0x12c>
//		}

		// resulting order: 5x[ADC2] + 4x{ADC1} + 1xDummy
		// [PA6] - [PA7] - [PF1] - [PA5] - [PA4] - {PA0} - {PA1} - {PF0} - {PB0} - {XX X}
		//	2		0		4		5		6		9		7		3		1
		adc_val[0] = adc_buf[1] >> 16;
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e60:	801a      	strh	r2, [r3, #0]
		adc_val[1] = adc_buf[3] & 0xFFFF;
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e6a:	805a      	strh	r2, [r3, #2]
		adc_val[2] = adc_buf[0] >> 16;
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0c1b      	lsrs	r3, r3, #16
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e76:	809a      	strh	r2, [r3, #4]
		adc_val[3] = adc_buf[2] & 0xFFFF;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e80:	80da      	strh	r2, [r3, #6]
		adc_val[4] = adc_buf[2] >> 16;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e8c:	811a      	strh	r2, [r3, #8]
		adc_val[5] = adc_buf[3] >> 16;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e98:	815a      	strh	r2, [r3, #10]
		adc_val[6] = adc_buf[4] >> 16;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	0c1b      	lsrs	r3, r3, #16
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ea4:	819a      	strh	r2, [r3, #12]
		adc_val[7] = adc_buf[1] & 0xFFFF;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eae:	81da      	strh	r2, [r3, #14]
		adc_val[8] = adc_buf[0] & 0xFFFF;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eb8:	821a      	strh	r2, [r3, #16]

		getAuxState(aux_current_state);
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ebc:	f001 f872 	bl	8001fa4 <getAuxState>

		STEP_TIME = HAL_GetTick();
 8000ec0:	f002 fb0a 	bl	80034d8 <HAL_GetTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x144>)
 8000ec8:	6013      	str	r3, [r2, #0]

		Update_channel(&channel[0], adc_val[0], aux_current_state[0]);
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	482c      	ldr	r0, [pc, #176]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x148>)
 8000ed8:	f00b fdca 	bl	800ca70 <Update_channel>
		Update_channel(&channel[1], adc_val[1], aux_current_state[1]);
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ede:	885b      	ldrh	r3, [r3, #2]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4828      	ldr	r0, [pc, #160]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x14c>)
 8000eea:	f00b fdc1 	bl	800ca70 <Update_channel>
		Update_channel(&channel[2], adc_val[2], aux_current_state[2]);
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ef0:	889b      	ldrh	r3, [r3, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x150>)
 8000efc:	f00b fdb8 	bl	800ca70 <Update_channel>
		Update_channel(&channel[3], adc_val[3], aux_current_state[3]);
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f02:	88db      	ldrh	r3, [r3, #6]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x154>)
 8000f0e:	f00b fdaf 	bl	800ca70 <Update_channel>
		Update_channel(&channel[4], adc_val[4], aux_current_state[4]);
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x158>)
 8000f20:	f00b fda6 	bl	800ca70 <Update_channel>
		Update_channel(&channel[5], adc_val[5], aux_current_state[5]);
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	481a      	ldr	r0, [pc, #104]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x15c>)
 8000f32:	f00b fd9d 	bl	800ca70 <Update_channel>
		Update_channel(&channel[6], adc_val[6], aux_current_state[6]);
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f38:	899b      	ldrh	r3, [r3, #12]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f3e:	799b      	ldrb	r3, [r3, #6]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f44:	f00b fd94 	bl	800ca70 <Update_channel>
		Update_channel(&channel[7], adc_val[7], aux_current_state[7]);
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f4a:	89db      	ldrh	r3, [r3, #14]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f50:	79db      	ldrb	r3, [r3, #7]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f56:	f00b fd8b 	bl	800ca70 <Update_channel>
		Update_channel(&channel[8], adc_val[8], aux_current_state[8]);
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f5c:	8a1b      	ldrh	r3, [r3, #16]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f62:	7a1b      	ldrb	r3, [r3, #8]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x168>)
 8000f68:	f00b fd82 	bl	800ca70 <Update_channel>

	}// end adc1
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000848 	.word	0x20000848
 8000f78:	20000b9c 	.word	0x20000b9c
 8000f7c:	20000668 	.word	0x20000668
 8000f80:	2000067c 	.word	0x2000067c
 8000f84:	200006d4 	.word	0x200006d4
 8000f88:	20000918 	.word	0x20000918
 8000f8c:	20000950 	.word	0x20000950
 8000f90:	20000988 	.word	0x20000988
 8000f94:	200009c0 	.word	0x200009c0
 8000f98:	200009f8 	.word	0x200009f8
 8000f9c:	20000a30 	.word	0x20000a30
 8000fa0:	20000a68 	.word	0x20000a68
 8000fa4:	20000aa0 	.word	0x20000aa0
 8000fa8:	20000ad8 	.word	0x20000ad8

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f002 fa2c 	bl	800340e <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f002 fa99 	bl	80034f0 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 fb15 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 fe29 	bl	8001c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc6:	f000 fdfd 	bl	8001bc4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 fdaf 	bl	8001b2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fce:	f000 fb79 	bl	80016c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000fd2:	f000 fd27 	bl	8001a24 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fcd7 	bl	8001988 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000fda:	f000 fc33 	bl	8001844 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000fde:	f00c ffb9 	bl	800df54 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000fe2:	f000 fd6d 	bl	8001ac0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start (&hadc1);
 8000fe6:	48b5      	ldr	r0, [pc, #724]	; (80012bc <main+0x310>)
 8000fe8:	f002 fe6c 	bl	8003cc4 <HAL_ADC_Start>
  HAL_ADC_Start (&hadc2);
 8000fec:	48b4      	ldr	r0, [pc, #720]	; (80012c0 <main+0x314>)
 8000fee:	f002 fe69 	bl	8003cc4 <HAL_ADC_Start>
  HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	; 0xc8
 8000ff4:	f002 fa7c 	bl	80034f0 <HAL_Delay>

  /// **************************
  /// ******* Defaul CFG *******
  /// **************************
  getAuxState(aux_current_state);
 8000ff8:	48b2      	ldr	r0, [pc, #712]	; (80012c4 <main+0x318>)
 8000ffa:	f000 ffd3 	bl	8001fa4 <getAuxState>

  initDrum(&channel[0], HHOPEN, HHPEDAL	, CYMBAL_HIHAT	, aux_current_state[0]);
 8000ffe:	4bb1      	ldr	r3, [pc, #708]	; (80012c4 <main+0x318>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2303      	movs	r3, #3
 8001006:	222c      	movs	r2, #44	; 0x2c
 8001008:	212e      	movs	r1, #46	; 0x2e
 800100a:	48af      	ldr	r0, [pc, #700]	; (80012c8 <main+0x31c>)
 800100c:	f00b fca6 	bl	800c95c <initDrum>
  	  channel[0].alt_voice = HHCLOSE;
 8001010:	4bad      	ldr	r3, [pc, #692]	; (80012c8 <main+0x31c>)
 8001012:	222a      	movs	r2, #42	; 0x2a
 8001014:	705a      	strb	r2, [r3, #1]

  // KICK - MESH+PEDAL - OK
  initDrum(&channel[1], KICK  , KICK	, MESH_PAD_AUTOAUX		, aux_current_state[1]);
 8001016:	4bab      	ldr	r3, [pc, #684]	; (80012c4 <main+0x318>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	2124      	movs	r1, #36	; 0x24
 8001022:	48aa      	ldr	r0, [pc, #680]	; (80012cc <main+0x320>)
 8001024:	f00b fc9a 	bl	800c95c <initDrum>
  	  channel[1].peak_volume_norm = 20;
 8001028:	4ba7      	ldr	r3, [pc, #668]	; (80012c8 <main+0x31c>)
 800102a:	2214      	movs	r2, #20
 800102c:	87da      	strh	r2, [r3, #62]	; 0x3e
  	  channel[1].peak_min_length = 3;
 800102e:	4ba6      	ldr	r3, [pc, #664]	; (80012c8 <main+0x31c>)
 8001030:	2203      	movs	r2, #3
 8001032:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  // KICK - MESH/ALT+PEDAL - OK
  initDrum(&channel[2], SNARE , KICK 	, MESH_RIM_AUTOAUX		, aux_current_state[2]);
 8001036:	4ba3      	ldr	r3, [pc, #652]	; (80012c4 <main+0x318>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2126      	movs	r1, #38	; 0x26
 8001042:	48a3      	ldr	r0, [pc, #652]	; (80012d0 <main+0x324>)
 8001044:	f00b fc8a 	bl	800c95c <initDrum>
	  channel[2].alt_voice = SNRIM;
 8001048:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <main+0x31c>)
 800104a:	2225      	movs	r2, #37	; 0x25
 800104c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  initDrum(&channel[3], SNARE , KICK 	, MESH_PAD_AUTOAUX		, aux_current_state[3]);
 8001050:	4b9c      	ldr	r3, [pc, #624]	; (80012c4 <main+0x318>)
 8001052:	78db      	ldrb	r3, [r3, #3]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	2224      	movs	r2, #36	; 0x24
 800105a:	2126      	movs	r1, #38	; 0x26
 800105c:	489d      	ldr	r0, [pc, #628]	; (80012d4 <main+0x328>)
 800105e:	f00b fc7d 	bl	800c95c <initDrum>
	  channel[3].alt_voice = SNRIM;
 8001062:	4b99      	ldr	r3, [pc, #612]	; (80012c8 <main+0x31c>)
 8001064:	2225      	movs	r2, #37	; 0x25
 8001066:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

  initDrum(&channel[4], TOM1 , TOM1  	, MESH_PAD_AUTOAUX		, aux_current_state[3]);
 800106a:	4b96      	ldr	r3, [pc, #600]	; (80012c4 <main+0x318>)
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2130      	movs	r1, #48	; 0x30
 8001076:	4898      	ldr	r0, [pc, #608]	; (80012d8 <main+0x32c>)
 8001078:	f00b fc70 	bl	800c95c <initDrum>
  initDrum(&channel[5], TOM2 , TOM2  	, MESH_PAD_AUTOAUX		, aux_current_state[4]);
 800107c:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <main+0x318>)
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	222f      	movs	r2, #47	; 0x2f
 8001086:	212f      	movs	r1, #47	; 0x2f
 8001088:	4894      	ldr	r0, [pc, #592]	; (80012dc <main+0x330>)
 800108a:	f00b fc67 	bl	800c95c <initDrum>
  initDrum(&channel[6], TOMF , TOMF  	, MESH_PAD_AUTOAUX		, aux_current_state[6]);
 800108e:	4b8d      	ldr	r3, [pc, #564]	; (80012c4 <main+0x318>)
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	222b      	movs	r2, #43	; 0x2b
 8001098:	212b      	movs	r1, #43	; 0x2b
 800109a:	4891      	ldr	r0, [pc, #580]	; (80012e0 <main+0x334>)
 800109c:	f00b fc5e 	bl	800c95c <initDrum>

  // cymbals
  initDrum(&channel[7], CRASH, CRASH 	, CYMBAL_MUTE			, aux_current_state[7]);	// CH7 aux disabled
 80010a0:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <main+0x318>)
 80010a2:	79db      	ldrb	r3, [r3, #7]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2305      	movs	r3, #5
 80010a8:	2231      	movs	r2, #49	; 0x31
 80010aa:	2131      	movs	r1, #49	; 0x31
 80010ac:	488d      	ldr	r0, [pc, #564]	; (80012e4 <main+0x338>)
 80010ae:	f00b fc55 	bl	800c95c <initDrum>
  initDrum(&channel[8], RIDE ,  BELL 	, CYMBAL_2_ZONE			, aux_current_state[8]);
 80010b2:	4b84      	ldr	r3, [pc, #528]	; (80012c4 <main+0x318>)
 80010b4:	7a1b      	ldrb	r3, [r3, #8]
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2304      	movs	r3, #4
 80010ba:	2235      	movs	r2, #53	; 0x35
 80010bc:	2133      	movs	r1, #51	; 0x33
 80010be:	488a      	ldr	r0, [pc, #552]	; (80012e8 <main+0x33c>)
 80010c0:	f00b fc4c 	bl	800c95c <initDrum>


  // === Previous Settings ===
  HAL_UART_Transmit(&huart2, ASCIILOGO, strlen((char *)ASCIILOGO) , 50);
 80010c4:	4889      	ldr	r0, [pc, #548]	; (80012ec <main+0x340>)
 80010c6:	f7ff f8ab 	bl	8000220 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	2332      	movs	r3, #50	; 0x32
 80010d0:	4986      	ldr	r1, [pc, #536]	; (80012ec <main+0x340>)
 80010d2:	4887      	ldr	r0, [pc, #540]	; (80012f0 <main+0x344>)
 80010d4:	f008 f8e4 	bl	80092a0 <HAL_UART_Transmit>
  HAL_Delay(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010dc:	f002 fa08 	bl	80034f0 <HAL_Delay>


  Load_Setting();
 80010e0:	f001 f956 	bl	8002390 <Load_Setting>




	// start waiting for serial commands
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f002 fa03 	bl	80034f0 <HAL_Delay>
	config_Mode[0] = 0;
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <main+0x348>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 80010f0:	2201      	movs	r2, #1
 80010f2:	4980      	ldr	r1, [pc, #512]	; (80012f4 <main+0x348>)
 80010f4:	487e      	ldr	r0, [pc, #504]	; (80012f0 <main+0x344>)
 80010f6:	f008 f969 	bl	80093cc <HAL_UART_Receive_IT>

	/// **************************
	/// ******* LETS ROCK! *******
	/// **************************
	HAL_TIM_Base_Start_IT(&htim2); //AS
 80010fa:	487f      	ldr	r0, [pc, #508]	; (80012f8 <main+0x34c>)
 80010fc:	f007 fb84 	bl	8008808 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4); //ADC
 8001100:	487e      	ldr	r0, [pc, #504]	; (80012fc <main+0x350>)
 8001102:	f007 fb81 	bl	8008808 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while (config_Mode[0]){
 8001106:	e03e      	b.n	8001186 <main+0x1da>

		uint8_t rs = UART_CFG();
 8001108:	f001 fae4 	bl	80026d4 <UART_CFG>
 800110c:	4603      	mov	r3, r0
 800110e:	70fb      	strb	r3, [r7, #3]

		if ((rs == 1) || (rs == 2)){
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d002      	beq.n	800111c <main+0x170>
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d114      	bne.n	8001146 <main+0x19a>
			rs = Save_Setting(0);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 ff9d 	bl	800205c <Save_Setting>
 8001122:	4603      	mov	r3, r0
 8001124:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "New configuration saved (%X)\n", rs);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	461a      	mov	r2, r3
 800112a:	4975      	ldr	r1, [pc, #468]	; (8001300 <main+0x354>)
 800112c:	4875      	ldr	r0, [pc, #468]	; (8001304 <main+0x358>)
 800112e:	f00d ff57 	bl	800efe0 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001132:	4874      	ldr	r0, [pc, #464]	; (8001304 <main+0x358>)
 8001134:	f7ff f874 	bl	8000220 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	2332      	movs	r3, #50	; 0x32
 800113e:	4971      	ldr	r1, [pc, #452]	; (8001304 <main+0x358>)
 8001140:	486b      	ldr	r0, [pc, #428]	; (80012f0 <main+0x344>)
 8001142:	f008 f8ad 	bl	80092a0 <HAL_UART_Transmit>
		}
		if (rs == 99){
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b63      	cmp	r3, #99	; 0x63
 800114a:	d114      	bne.n	8001176 <main+0x1ca>
			rs = Save_Setting(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 ff85 	bl	800205c <Save_Setting>
 8001152:	4603      	mov	r3, r0
 8001154:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "Reset to default values, restart the device (%X)\n", rs);
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	461a      	mov	r2, r3
 800115a:	496b      	ldr	r1, [pc, #428]	; (8001308 <main+0x35c>)
 800115c:	4869      	ldr	r0, [pc, #420]	; (8001304 <main+0x358>)
 800115e:	f00d ff3f 	bl	800efe0 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001162:	4868      	ldr	r0, [pc, #416]	; (8001304 <main+0x358>)
 8001164:	f7ff f85c 	bl	8000220 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	2332      	movs	r3, #50	; 0x32
 800116e:	4965      	ldr	r1, [pc, #404]	; (8001304 <main+0x358>)
 8001170:	485f      	ldr	r0, [pc, #380]	; (80012f0 <main+0x344>)
 8001172:	f008 f895 	bl	80092a0 <HAL_UART_Transmit>
		}
		config_Mode[0] = 0;
 8001176:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <main+0x348>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 800117c:	2201      	movs	r2, #1
 800117e:	495d      	ldr	r1, [pc, #372]	; (80012f4 <main+0x348>)
 8001180:	485b      	ldr	r0, [pc, #364]	; (80012f0 <main+0x344>)
 8001182:	f008 f923 	bl	80093cc <HAL_UART_Receive_IT>
	  while (config_Mode[0]){
 8001186:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <main+0x348>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1bc      	bne.n	8001108 <main+0x15c>

	  }

	  if (upd_active_sens){
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <main+0x360>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <main+0x1f4>
		  upd_active_sens = 0;
 8001196:	4b5d      	ldr	r3, [pc, #372]	; (800130c <main+0x360>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
		  sendMidiAS();
 800119c:	f000 fda2 	bl	8001ce4 <sendMidiAS>
	  }

	  for (uint8_t ch = 0; ch<9; ch++){
 80011a0:	2300      	movs	r3, #0
 80011a2:	70bb      	strb	r3, [r7, #2]
 80011a4:	e216      	b.n	80015d4 <main+0x628>

		  if (channel[ch].main_rdy){
 80011a6:	78ba      	ldrb	r2, [r7, #2]
 80011a8:	4947      	ldr	r1, [pc, #284]	; (80012c8 <main+0x31c>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	3311      	adds	r3, #17
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8151 	beq.w	8001460 <main+0x4b4>
			  channel[ch].main_rdy = 0;
 80011be:	78ba      	ldrb	r2, [r7, #2]
 80011c0:	4941      	ldr	r1, [pc, #260]	; (80012c8 <main+0x31c>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3311      	adds	r3, #17
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]

			  // custom volume calculation for mesh
			  if (channel[ch].chnl_type < 2){
 80011d2:	78ba      	ldrb	r2, [r7, #2]
 80011d4:	493c      	ldr	r1, [pc, #240]	; (80012c8 <main+0x31c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	3303      	adds	r3, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f200 8097 	bhi.w	8001318 <main+0x36c>
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm);
 80011ea:	78ba      	ldrb	r2, [r7, #2]
 80011ec:	4936      	ldr	r1, [pc, #216]	; (80012c8 <main+0x31c>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	331a      	adds	r3, #26
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	3b32      	subs	r3, #50	; 0x32
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f9c5 	bl	8000598 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <main+0x364>)
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <main+0x368>)
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <main+0x364>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	78ba      	ldrb	r2, [r7, #2]
 8001246:	4920      	ldr	r1, [pc, #128]	; (80012c8 <main+0x31c>)
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3306      	adds	r3, #6
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125e:	ee17 0a90 	vmov	r0, s15
 8001262:	f7ff f999 	bl	8000598 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff fb15 	bl	800089c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fbf7 	bl	8000a6c <__aeabi_d2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	607b      	str	r3, [r7, #4]
				  if ((channel[ch].chnl_type == MESH_RIM_AUTOAUX)&&(channel[ch].main_rdy_usealt))
 8001282:	78ba      	ldrb	r2, [r7, #2]
 8001284:	4910      	ldr	r1, [pc, #64]	; (80012c8 <main+0x31c>)
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	3303      	adds	r3, #3
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8093 	bne.w	80013c0 <main+0x414>
 800129a:	78ba      	ldrb	r2, [r7, #2]
 800129c:	490a      	ldr	r1, [pc, #40]	; (80012c8 <main+0x31c>)
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	3312      	adds	r3, #18
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8087 	beq.w	80013c0 <main+0x414>
					  vol = vol*4;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	e082      	b.n	80013c0 <main+0x414>
 80012ba:	bf00      	nop
 80012bc:	20000848 	.word	0x20000848
 80012c0:	200006d8 	.word	0x200006d8
 80012c4:	2000067c 	.word	0x2000067c
 80012c8:	20000918 	.word	0x20000918
 80012cc:	20000950 	.word	0x20000950
 80012d0:	20000988 	.word	0x20000988
 80012d4:	200009c0 	.word	0x200009c0
 80012d8:	200009f8 	.word	0x200009f8
 80012dc:	20000a30 	.word	0x20000a30
 80012e0:	20000a68 	.word	0x20000a68
 80012e4:	20000aa0 	.word	0x20000aa0
 80012e8:	20000ad8 	.word	0x20000ad8
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000bfc 	.word	0x20000bfc
 80012f4:	20000430 	.word	0x20000430
 80012f8:	20000bb0 	.word	0x20000bb0
 80012fc:	20000688 	.word	0x20000688
 8001300:	0800f854 	.word	0x0800f854
 8001304:	20000c88 	.word	0x20000c88
 8001308:	0800f874 	.word	0x0800f874
 800130c:	2000042c 	.word	0x2000042c
 8001310:	40590000 	.word	0x40590000
 8001314:	40b00000 	.word	0x40b00000
			  } else {
				  //volume for cymbals
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm * 2);
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	49b1      	ldr	r1, [pc, #708]	; (80015e0 <main+0x634>)
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	331a      	adds	r3, #26
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3b32      	subs	r3, #50	; 0x32
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f92e 	bl	8000598 <__aeabi_f2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4ba8      	ldr	r3, [pc, #672]	; (80015e4 <main+0x638>)
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <main+0x63c>)
 8001354:	f7ff faa2 	bl	800089c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b9f      	ldr	r3, [pc, #636]	; (80015e4 <main+0x638>)
 8001366:	f7ff f96f 	bl	8000648 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	499a      	ldr	r1, [pc, #616]	; (80015e0 <main+0x634>)
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3306      	adds	r3, #6
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff f902 	bl	8000598 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff fa7e 	bl	800089c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	f7fe ff96 	bl	80002dc <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb58 	bl	8000a6c <__aeabi_d2iz>
 80013bc:	4603      	mov	r3, r0
 80013be:	607b      	str	r3, [r7, #4]
			  }

			  if (vol > 127) vol = 127;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b7f      	cmp	r3, #127	; 0x7f
 80013c4:	dd01      	ble.n	80013ca <main+0x41e>
 80013c6:	237f      	movs	r3, #127	; 0x7f
 80013c8:	607b      	str	r3, [r7, #4]
			  if (vol < 1  ) vol = 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dc01      	bgt.n	80013d4 <main+0x428>
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
			  channel[ch].main_rdy_volume = (uint8_t) vol;
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	4981      	ldr	r1, [pc, #516]	; (80015e0 <main+0x634>)
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3320      	adds	r3, #32
 80013e8:	4602      	mov	r2, r0
 80013ea:	701a      	strb	r2, [r3, #0]

			  if (channel[ch].main_rdy_usealt)
 80013ec:	78ba      	ldrb	r2, [r7, #2]
 80013ee:	497c      	ldr	r1, [pc, #496]	; (80015e0 <main+0x634>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3312      	adds	r3, #18
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d015      	beq.n	800142e <main+0x482>
				  sendMidiGEN(channel[ch].alt_voice ,channel[ch].main_rdy_volume);
 8001402:	78ba      	ldrb	r2, [r7, #2]
 8001404:	4976      	ldr	r1, [pc, #472]	; (80015e0 <main+0x634>)
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3301      	adds	r3, #1
 8001412:	7818      	ldrb	r0, [r3, #0]
 8001414:	78ba      	ldrb	r2, [r7, #2]
 8001416:	4972      	ldr	r1, [pc, #456]	; (80015e0 <main+0x634>)
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3320      	adds	r3, #32
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	f000 fc6c 	bl	8001d04 <sendMidiGEN>
 800142c:	e013      	b.n	8001456 <main+0x4aa>
			  else
				  sendMidiGEN(channel[ch].main_voice,channel[ch].main_rdy_volume);
 800142e:	78ba      	ldrb	r2, [r7, #2]
 8001430:	496b      	ldr	r1, [pc, #428]	; (80015e0 <main+0x634>)
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	7818      	ldrb	r0, [r3, #0]
 800143e:	78ba      	ldrb	r2, [r7, #2]
 8001440:	4967      	ldr	r1, [pc, #412]	; (80015e0 <main+0x634>)
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3320      	adds	r3, #32
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f000 fc57 	bl	8001d04 <sendMidiGEN>

  			  sendDebug(ch,0);
 8001456:	78bb      	ldrb	r3, [r7, #2]
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fce4 	bl	8001e28 <sendDebug>


		  }


		  if (channel[ch].aux_rdy){
 8001460:	78ba      	ldrb	r2, [r7, #2]
 8001462:	495f      	ldr	r1, [pc, #380]	; (80015e0 <main+0x634>)
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3324      	adds	r3, #36	; 0x24
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80ab 	beq.w	80015ce <main+0x622>
			  channel[ch].aux_rdy = 0;
 8001478:	78ba      	ldrb	r2, [r7, #2]
 800147a:	4959      	ldr	r1, [pc, #356]	; (80015e0 <main+0x634>)
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	440b      	add	r3, r1
 8001486:	3324      	adds	r3, #36	; 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
			  sendDebug(ch,1);
 800148c:	78bb      	ldrb	r3, [r7, #2]
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fcc9 	bl	8001e28 <sendDebug>

			  switch (channel[ch].chnl_type ){
 8001496:	78ba      	ldrb	r2, [r7, #2]
 8001498:	4951      	ldr	r1, [pc, #324]	; (80015e0 <main+0x634>)
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3303      	adds	r3, #3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d014      	beq.n	80014d6 <main+0x52a>
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	dc47      	bgt.n	8001540 <main+0x594>
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d002      	beq.n	80014ba <main+0x50e>
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d02e      	beq.n	8001516 <main+0x56a>
 80014b8:	e042      	b.n	8001540 <main+0x594>
			  case CYMBAL_HIHAT:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014ba:	78ba      	ldrb	r2, [r7, #2]
 80014bc:	4948      	ldr	r1, [pc, #288]	; (80015e0 <main+0x634>)
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	332c      	adds	r3, #44	; 0x2c
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d17b      	bne.n	80015c8 <main+0x61c>
					 sendMidiHHPedalOn();
 80014d0:	f000 fc78 	bl	8001dc4 <sendMidiHHPedalOn>
//				  else
//					  sendMidiGEN(channel[ch].main_voice, 5);
				  break;
 80014d4:	e078      	b.n	80015c8 <main+0x61c>

			  case CYMBAL_MUTE:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014d6:	78ba      	ldrb	r2, [r7, #2]
 80014d8:	4941      	ldr	r1, [pc, #260]	; (80015e0 <main+0x634>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	332c      	adds	r3, #44	; 0x2c
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d16f      	bne.n	80015cc <main+0x620>
					  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 80014ec:	78ba      	ldrb	r2, [r7, #2]
 80014ee:	493c      	ldr	r1, [pc, #240]	; (80015e0 <main+0x634>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	7818      	ldrb	r0, [r3, #0]
 80014fc:	78ba      	ldrb	r2, [r7, #2]
 80014fe:	4938      	ldr	r1, [pc, #224]	; (80015e0 <main+0x634>)
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	2101      	movs	r1, #1
 8001510:	f000 fc22 	bl	8001d58 <sendMidi2>
				  break;
 8001514:	e05a      	b.n	80015cc <main+0x620>

			  case CYMBAL_2_ZONE:
				  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001516:	78ba      	ldrb	r2, [r7, #2]
 8001518:	4931      	ldr	r1, [pc, #196]	; (80015e0 <main+0x634>)
 800151a:	4613      	mov	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	7818      	ldrb	r0, [r3, #0]
 8001526:	78ba      	ldrb	r2, [r7, #2]
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <main+0x634>)
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2101      	movs	r1, #1
 800153a:	f000 fc0d 	bl	8001d58 <sendMidi2>
				  break;
 800153e:	e046      	b.n	80015ce <main+0x622>

			  // INDEPENDENT AUX INPUTS
			  default:
				  if (channel[ch].aux_type == AUX_TYPE_PAD)
 8001540:	78ba      	ldrb	r2, [r7, #2]
 8001542:	4927      	ldr	r1, [pc, #156]	; (80015e0 <main+0x634>)
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3304      	adds	r3, #4
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <main+0x5d8>
					  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 8001556:	78ba      	ldrb	r2, [r7, #2]
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <main+0x634>)
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3302      	adds	r3, #2
 8001566:	7818      	ldrb	r0, [r3, #0]
 8001568:	78ba      	ldrb	r2, [r7, #2]
 800156a:	491d      	ldr	r1, [pc, #116]	; (80015e0 <main+0x634>)
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	3302      	adds	r3, #2
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	2164      	movs	r1, #100	; 0x64
 800157e:	f000 fbeb 	bl	8001d58 <sendMidi2>
 8001582:	e024      	b.n	80015ce <main+0x622>
				  else { //PEDAL
					  // PEDAL pressed
					  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 8001584:	78ba      	ldrb	r2, [r7, #2]
 8001586:	4916      	ldr	r1, [pc, #88]	; (80015e0 <main+0x634>)
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	332c      	adds	r3, #44	; 0x2c
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d119      	bne.n	80015ce <main+0x622>
						  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 800159a:	78ba      	ldrb	r2, [r7, #2]
 800159c:	4910      	ldr	r1, [pc, #64]	; (80015e0 <main+0x634>)
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3302      	adds	r3, #2
 80015aa:	7818      	ldrb	r0, [r3, #0]
 80015ac:	78ba      	ldrb	r2, [r7, #2]
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <main+0x634>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	3302      	adds	r3, #2
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	2164      	movs	r1, #100	; 0x64
 80015c2:	f000 fbc9 	bl	8001d58 <sendMidi2>
 80015c6:	e002      	b.n	80015ce <main+0x622>
				  break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <main+0x622>
				  break;
 80015cc:	bf00      	nop
	  for (uint8_t ch = 0; ch<9; ch++){
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	3301      	adds	r3, #1
 80015d2:	70bb      	strb	r3, [r7, #2]
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	f67f ade5 	bls.w	80011a6 <main+0x1fa>
	  while (config_Mode[0]){
 80015dc:	e5d3      	b.n	8001186 <main+0x1da>
 80015de:	bf00      	nop
 80015e0:	20000918 	.word	0x20000918
 80015e4:	40590000 	.word	0x40590000
 80015e8:	40b00000 	.word	0x40b00000

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0a4      	sub	sp, #144	; 0x90
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00d fce8 	bl	800efd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2244      	movs	r2, #68	; 0x44
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fcda 	bl	800efd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800161c:	2000      	movs	r0, #0
 800161e:	f006 f8c3 	bl	80077a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001622:	2322      	movs	r3, #34	; 0x22
 8001624:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	2302      	movs	r3, #2
 8001636:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001638:	2302      	movs	r3, #2
 800163a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800163c:	2304      	movs	r3, #4
 800163e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001640:	2355      	movs	r3, #85	; 0x55
 8001642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800165c:	4618      	mov	r0, r3
 800165e:	f006 f957 	bl	8007910 <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001668:	f001 fc20 	bl	8002eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2303      	movs	r3, #3
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001684:	2104      	movs	r1, #4
 8001686:	4618      	mov	r0, r3
 8001688:	f006 fc5a 	bl	8007f40 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001692:	f001 fc0b 	bl	8002eac <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB
 8001696:	f24a 0302 	movw	r3, #40962	; 0xa002
 800169a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 fe63 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016b8:	f001 fbf8 	bl	8002eac <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	3790      	adds	r7, #144	; 0x90
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2220      	movs	r2, #32
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00d fc77 	bl	800efd0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <MX_ADC1_Init+0x168>)
 80016e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016ea:	4b50      	ldr	r3, [pc, #320]	; (800182c <MX_ADC1_Init+0x168>)
 80016ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <MX_ADC1_Init+0x168>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <MX_ADC1_Init+0x168>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <MX_ADC1_Init+0x168>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <MX_ADC1_Init+0x168>)
 8001706:	2201      	movs	r2, #1
 8001708:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <MX_ADC1_Init+0x168>)
 800170c:	2208      	movs	r2, #8
 800170e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001710:	4b46      	ldr	r3, [pc, #280]	; (800182c <MX_ADC1_Init+0x168>)
 8001712:	2200      	movs	r2, #0
 8001714:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001716:	4b45      	ldr	r3, [pc, #276]	; (800182c <MX_ADC1_Init+0x168>)
 8001718:	2200      	movs	r2, #0
 800171a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <MX_ADC1_Init+0x168>)
 800171e:	2205      	movs	r2, #5
 8001720:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <MX_ADC1_Init+0x168>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <MX_ADC1_Init+0x168>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001730:	4b3e      	ldr	r3, [pc, #248]	; (800182c <MX_ADC1_Init+0x168>)
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <MX_ADC1_Init+0x168>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <MX_ADC1_Init+0x168>)
 8001740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001744:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <MX_ADC1_Init+0x168>)
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800174e:	4837      	ldr	r0, [pc, #220]	; (800182c <MX_ADC1_Init+0x168>)
 8001750:	f002 f930 	bl	80039b4 <HAL_ADC_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800175a:	f001 fba7 	bl	8002eac <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800175e:	2306      	movs	r3, #6
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8001768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	482d      	ldr	r0, [pc, #180]	; (800182c <MX_ADC1_Init+0x168>)
 8001776:	f003 fb81 	bl	8004e7c <HAL_ADCEx_MultiModeConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001780:	f001 fb94 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <MX_ADC1_Init+0x16c>)
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001788:	2306      	movs	r3, #6
 800178a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800178c:	2301      	movs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001790:	237f      	movs	r3, #127	; 0x7f
 8001792:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001794:	2304      	movs	r3, #4
 8001796:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4822      	ldr	r0, [pc, #136]	; (800182c <MX_ADC1_Init+0x168>)
 80017a2:	f002 fd83 	bl	80042ac <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017ac:	f001 fb7e 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_ADC1_Init+0x170>)
 80017b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017b4:	230c      	movs	r3, #12
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	481b      	ldr	r0, [pc, #108]	; (800182c <MX_ADC1_Init+0x168>)
 80017be:	f002 fd75 	bl	80042ac <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80017c8:	f001 fb70 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_ADC1_Init+0x174>)
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017d0:	2312      	movs	r3, #18
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4814      	ldr	r0, [pc, #80]	; (800182c <MX_ADC1_Init+0x168>)
 80017da:	f002 fd67 	bl	80042ac <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80017e4:	f001 fb62 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_ADC1_Init+0x178>)
 80017ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017ec:	2318      	movs	r3, #24
 80017ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_ADC1_Init+0x168>)
 80017f6:	f002 fd59 	bl	80042ac <HAL_ADC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8001800:	f001 fb54 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_ADC1_Init+0x17c>)
 8001806:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_ADC1_Init+0x168>)
 8001814:	f002 fd4a 	bl	80042ac <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800181e:	f001 fb45 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000848 	.word	0x20000848
 8001830:	04300002 	.word	0x04300002
 8001834:	08600004 	.word	0x08600004
 8001838:	2a000400 	.word	0x2a000400
 800183c:	3ef08000 	.word	0x3ef08000
 8001840:	c3210000 	.word	0xc3210000

08001844 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184a:	463b      	mov	r3, r7
 800184c:	2220      	movs	r2, #32
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f00d fbbd 	bl	800efd0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <MX_ADC2_Init+0x128>)
 8001858:	4a45      	ldr	r2, [pc, #276]	; (8001970 <MX_ADC2_Init+0x12c>)
 800185a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <MX_ADC2_Init+0x128>)
 800185e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001862:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001864:	4b41      	ldr	r3, [pc, #260]	; (800196c <MX_ADC2_Init+0x128>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <MX_ADC2_Init+0x128>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001870:	4b3e      	ldr	r3, [pc, #248]	; (800196c <MX_ADC2_Init+0x128>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <MX_ADC2_Init+0x128>)
 8001878:	2201      	movs	r2, #1
 800187a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800187c:	4b3b      	ldr	r3, [pc, #236]	; (800196c <MX_ADC2_Init+0x128>)
 800187e:	2208      	movs	r2, #8
 8001880:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <MX_ADC2_Init+0x128>)
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <MX_ADC2_Init+0x128>)
 800188a:	2200      	movs	r2, #0
 800188c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <MX_ADC2_Init+0x128>)
 8001890:	2205      	movs	r2, #5
 8001892:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <MX_ADC2_Init+0x128>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <MX_ADC2_Init+0x128>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_ADC2_Init+0x128>)
 80018a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_ADC2_Init+0x128>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018b4:	482d      	ldr	r0, [pc, #180]	; (800196c <MX_ADC2_Init+0x128>)
 80018b6:	f002 f87d 	bl	80039b4 <HAL_ADC_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80018c0:	f001 faf4 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <MX_ADC2_Init+0x130>)
 80018c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c8:	2306      	movs	r3, #6
 80018ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80018cc:	2301      	movs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d0:	237f      	movs	r3, #127	; 0x7f
 80018d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d4:	2304      	movs	r3, #4
 80018d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4822      	ldr	r0, [pc, #136]	; (800196c <MX_ADC2_Init+0x128>)
 80018e2:	f002 fce3 	bl	80042ac <HAL_ADC_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80018ec:	f001 fade 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_ADC2_Init+0x134>)
 80018f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018f4:	230c      	movs	r3, #12
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	481b      	ldr	r0, [pc, #108]	; (800196c <MX_ADC2_Init+0x128>)
 80018fe:	f002 fcd5 	bl	80042ac <HAL_ADC_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001908:	f001 fad0 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_ADC2_Init+0x138>)
 800190e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001910:	2312      	movs	r3, #18
 8001912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <MX_ADC2_Init+0x128>)
 800191a:	f002 fcc7 	bl	80042ac <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001924:	f001 fac2 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_ADC2_Init+0x13c>)
 800192a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800192c:	2318      	movs	r3, #24
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_ADC2_Init+0x128>)
 8001936:	f002 fcb9 	bl	80042ac <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001940:	f001 fab4 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_ADC2_Init+0x140>)
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_ADC2_Init+0x128>)
 8001954:	f002 fcaa 	bl	80042ac <HAL_ADC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 800195e:	f001 faa5 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200006d8 	.word	0x200006d8
 8001970:	50000100 	.word	0x50000100
 8001974:	0c900008 	.word	0x0c900008
 8001978:	10c00010 	.word	0x10c00010
 800197c:	2a000400 	.word	0x2a000400
 8001980:	36902000 	.word	0x36902000
 8001984:	47520000 	.word	0x47520000

08001988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5.1E7;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019c8:	2280      	movs	r2, #128	; 0x80
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019ce:	f006 fec3 	bl	8008758 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019d8:	f001 fa68 	bl	8002eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_TIM2_Init+0x94>)
 80019ea:	f007 f8f7 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019f4:	f001 fa5a 	bl	8002eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_TIM2_Init+0x94>)
 8001a06:	f007 fb33 	bl	8009070 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f001 fa4c 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000bb0 	.word	0x20000bb0
 8001a20:	030a32c0 	.word	0x030a32c0

08001a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <MX_TIM4_Init+0x98>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 17000;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a56:	f244 2268 	movw	r2, #17000	; 0x4268
 8001a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a6a:	f006 fe75 	bl	8008758 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a74:	f001 fa1a 	bl	8002eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001a86:	f007 f8a9 	bl	8008bdc <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001a90:	f001 fa0c 	bl	8002eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM4_Init+0x94>)
 8001aa2:	f007 fae5 	bl	8009070 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f001 f9fe 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000688 	.word	0x20000688
 8001abc:	40000800 	.word	0x40000800

08001ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <MX_TIM6_Init+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ad8:	22aa      	movs	r2, #170	; 0xaa
 8001ada:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001af2:	f006 fe31 	bl	8008758 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001afc:	f001 f9d6 	bl	8002eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001b0e:	f007 faaf 	bl	8009070 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b18:	f001 f9c8 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000b50 	.word	0x20000b50
 8001b28:	40001000 	.word	0x40001000

08001b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <MX_USART2_UART_Init+0x94>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b74:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b76:	f007 fb43 	bl	8009200 <HAL_UART_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b80:	f001 f994 	bl	8002eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b88:	f008 fd51 	bl	800a62e <HAL_UARTEx_SetTxFifoThreshold>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b92:	f001 f98b 	bl	8002eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001b9a:	f008 fd86 	bl	800a6aa <HAL_UARTEx_SetRxFifoThreshold>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ba4:	f001 f982 	bl	8002eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_USART2_UART_Init+0x90>)
 8001baa:	f008 fd07 	bl	800a5bc <HAL_UARTEx_DisableFifoMode>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bb4:	f001 f97a 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000bfc 	.word	0x20000bfc
 8001bc0:	40004400 	.word	0x40004400

08001bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_DMA_Init+0x50>)
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <MX_DMA_Init+0x50>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6493      	str	r3, [r2, #72]	; 0x48
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_DMA_Init+0x50>)
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_DMA_Init+0x50>)
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <MX_DMA_Init+0x50>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6493      	str	r3, [r2, #72]	; 0x48
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_DMA_Init+0x50>)
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	200b      	movs	r0, #11
 8001c00:	f003 fab7 	bl	8005172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c04:	200b      	movs	r0, #11
 8001c06:	f003 face 	bl	80051a6 <HAL_NVIC_EnableIRQ>

}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a2a      	ldr	r2, [pc, #168]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <MX_GPIO_Init+0xc8>)
 8001c7e:	f004 f9eb 	bl	8006058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG_IN7_Pin DIG_IN1_Pin DIG_IN3_Pin DIG_IN5_Pin */
  GPIO_InitStruct.Pin = DIG_IN7_Pin|DIG_IN1_Pin|DIG_IN3_Pin|DIG_IN5_Pin;
 8001c82:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f004 f843 	bl	8005d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_IN9_Pin DIG_IN6_Pin DIG_IN4_Pin DIG_IN2_Pin */
  GPIO_InitStruct.Pin = DIG_IN9_Pin|DIG_IN6_Pin|DIG_IN4_Pin|DIG_IN2_Pin;
 8001c9e:	23f0      	movs	r3, #240	; 0xf0
 8001ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <MX_GPIO_Init+0xc8>)
 8001cb2:	f004 f837 	bl	8005d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_GPIO_Init+0xc8>)
 8001cd0:	f004 f828 	bl	8005d24 <HAL_GPIO_Init>

}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <sendMidiAS>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */

void sendMidiAS(){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  uint8_t bff[4] = {0x0F, 0xFE, 0x00, 0x00};
 8001cea:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 8001cee:	607b      	str	r3, [r7, #4]
  tx_midi((uint8_t *)bff,4);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f87b 	bl	8001df0 <tx_midi>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <sendMidiGEN>:

// MIDI generic ON/OFF message
void sendMidiGEN(uint8_t note, uint8_t vel){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	71fb      	strb	r3, [r7, #7]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71bb      	strb	r3, [r7, #6]
  uint8_t bff[8] = {TAB,  0x99, 0, 0, TAB,  0x99,0, 0x00};
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <sendMidiGEN+0x50>)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d1e:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel;
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	72fb      	strb	r3, [r7, #11]
  bff[6] = 0x7f & note;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	73bb      	strb	r3, [r7, #14]
  tx_midi((uint8_t *)bff,8);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2108      	movs	r1, #8
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f852 	bl	8001df0 <tx_midi>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	0800f8a8 	.word	0x0800f8a8

08001d58 <sendMidi2>:
  tx_midi((uint8_t *)bff,4);
}


// MIDI generic ON message
void sendMidi2(uint8_t note1, uint8_t vel1,uint8_t note2, uint8_t vel2){
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71bb      	strb	r3, [r7, #6]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	717b      	strb	r3, [r7, #5]
 8001d72:	4613      	mov	r3, r2
 8001d74:	713b      	strb	r3, [r7, #4]
  uint8_t bff[8] = {TAB,  0x99, 0x00, 0x00, TAB,  0x99, 0x00, 0x00};
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <sendMidi2+0x68>)
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d80:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note1;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel1;
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	72fb      	strb	r3, [r7, #11]
  bff[2+4] = 0x7f & note2;
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	73bb      	strb	r3, [r7, #14]
  bff[3+4] = 0x7f & vel2;
 8001da2:	793b      	ldrb	r3, [r7, #4]
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,8);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	2108      	movs	r1, #8
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f81c 	bl	8001df0 <tx_midi>
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	0800f8a8 	.word	0x0800f8a8

08001dc4 <sendMidiHHPedalOn>:

// MIDI HiHat pedal press message
void sendMidiHHPedalOn(){
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
  uint8_t bff[20] = { TAB,  0xA9, HHOPEN , 0x7F, TAB,  0xA9, HHCLOSE, 0x7F, TAB, 0xA9, 0x15, 0x7F,
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <sendMidiHHPedalOn+0x28>)
 8001dcc:	1d3c      	adds	r4, r7, #4
 8001dce:	461d      	mov	r5, r3
 8001dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	6023      	str	r3, [r4, #0]
		  	  	  	  TAB,  0x99, HHPEDAL, 0x64, TAB,  0x99, HHPEDAL, 0x00};
  tx_midi((uint8_t *)bff, 20);
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2114      	movs	r1, #20
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f807 	bl	8001df0 <tx_midi>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0800f8b0 	.word	0x0800f8b0

08001df0 <tx_midi>:
////  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//}


void tx_midi(uint8_t *_buffer, uint16_t len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  uint8_t rt = USBD_BUSY;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]

  while( rt == USBD_BUSY) {
 8001e00:	e006      	b.n	8001e10 <tx_midi+0x20>
	  rt = CDC_Transmit_FS(_buffer, len);
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f00c fc80 	bl	800e70c <CDC_Transmit_FS>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  while( rt == USBD_BUSY) {
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d0f5      	beq.n	8001e02 <tx_midi+0x12>
  };

  TIM2->CNT = 0; // restart active sense timer
 8001e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <sendDebug>:

void sendDebug(uint8_t _ch, uint8_t _aux)
{
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b08d      	sub	sp, #52	; 0x34
 8001e2c:	af06      	add	r7, sp, #24
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	4613      	mov	r3, r2
 8001e36:	73bb      	strb	r3, [r7, #14]
	uint8_t voice;
	uint8_t volume;
	uint8_t length;

  if (_aux){
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d032      	beq.n	8001ea4 <sendDebug+0x7c>
	  voice = channel[_ch].aux_voice;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	4952      	ldr	r1, [pc, #328]	; (8001f8c <sendDebug+0x164>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	75fb      	strb	r3, [r7, #23]

	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001e52:	7bf9      	ldrb	r1, [r7, #15]
 8001e54:	7df8      	ldrb	r0, [r7, #23]
	  			  voice, channel[_ch].aux_rdy_state,
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	4c4c      	ldr	r4, [pc, #304]	; (8001f8c <sendDebug+0x164>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4423      	add	r3, r4
 8001e64:	332c      	adds	r3, #44	; 0x2c
 8001e66:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001e68:	461d      	mov	r5, r3
	  			  channel[_ch].main_peaking, channel[_ch].aux_status);
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	4c47      	ldr	r4, [pc, #284]	; (8001f8c <sendDebug+0x164>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4423      	add	r3, r4
 8001e78:	3310      	adds	r3, #16
 8001e7a:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001e7c:	461e      	mov	r6, r3
	  			  channel[_ch].main_peaking, channel[_ch].aux_status);
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	4c42      	ldr	r4, [pc, #264]	; (8001f8c <sendDebug+0x164>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4423      	add	r3, r4
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	9601      	str	r6, [sp, #4]
 8001e94:	9500      	str	r5, [sp, #0]
 8001e96:	4603      	mov	r3, r0
 8001e98:	460a      	mov	r2, r1
 8001e9a:	493d      	ldr	r1, [pc, #244]	; (8001f90 <sendDebug+0x168>)
 8001e9c:	483d      	ldr	r0, [pc, #244]	; (8001f94 <sendDebug+0x16c>)
 8001e9e:	f00d f89f 	bl	800efe0 <siprintf>
 8001ea2:	e060      	b.n	8001f66 <sendDebug+0x13e>
  }else{
	  if (channel[_ch].main_rdy_usealt) voice = channel[_ch].alt_voice; else voice = channel[_ch].main_voice;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	4939      	ldr	r1, [pc, #228]	; (8001f8c <sendDebug+0x164>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3312      	adds	r3, #18
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <sendDebug+0xa8>
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	4933      	ldr	r1, [pc, #204]	; (8001f8c <sendDebug+0x164>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3301      	adds	r3, #1
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	75fb      	strb	r3, [r7, #23]
 8001ece:	e008      	b.n	8001ee2 <sendDebug+0xba>
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	492e      	ldr	r1, [pc, #184]	; (8001f8c <sendDebug+0x164>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	75fb      	strb	r3, [r7, #23]
	  volume = channel[_ch].main_rdy_volume;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <sendDebug+0x164>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3320      	adds	r3, #32
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	75bb      	strb	r3, [r7, #22]
	  length = channel[_ch].main_rdy_length;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	4924      	ldr	r1, [pc, #144]	; (8001f8c <sendDebug+0x164>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3322      	adds	r3, #34	; 0x22
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	757b      	strb	r3, [r7, #21]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f0a:	7bfc      	ldrb	r4, [r7, #15]
 8001f0c:	7dfd      	ldrb	r5, [r7, #23]
			  voice, channel[_ch].alt_voice, volume, channel[_ch].main_rdy_height,
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	491e      	ldr	r1, [pc, #120]	; (8001f8c <sendDebug+0x164>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	7db9      	ldrb	r1, [r7, #22]
			  voice, channel[_ch].alt_voice, volume, channel[_ch].main_rdy_height,
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	4819      	ldr	r0, [pc, #100]	; (8001f8c <sendDebug+0x164>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4403      	add	r3, r0
 8001f32:	331a      	adds	r3, #26
 8001f34:	881b      	ldrh	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	7d78      	ldrb	r0, [r7, #21]
			  length, channel[_ch].aux_status);
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	4e13      	ldr	r6, [pc, #76]	; (8001f8c <sendDebug+0x164>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4433      	add	r3, r6
 8001f48:	3318      	adds	r3, #24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",_ch,
 8001f4c:	9304      	str	r3, [sp, #16]
 8001f4e:	9003      	str	r0, [sp, #12]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	9101      	str	r1, [sp, #4]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <sendDebug+0x170>)
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <sendDebug+0x16c>)
 8001f62:	f00d f83d 	bl	800efe0 <siprintf>
  }
  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 5);
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <sendDebug+0x16c>)
 8001f68:	f7fe f95a 	bl	8000220 <strlen>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2305      	movs	r3, #5
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <sendDebug+0x16c>)
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <sendDebug+0x174>)
 8001f76:	f007 f993 	bl	80092a0 <HAL_UART_Transmit>

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <sendDebug+0x178>)
 8001f80:	f004 f882 	bl	8006088 <HAL_GPIO_TogglePin>

}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8c:	20000918 	.word	0x20000918
 8001f90:	0800f8c4 	.word	0x0800f8c4
 8001f94:	20000c88 	.word	0x20000c88
 8001f98:	0800f8e0 	.word	0x0800f8e0
 8001f9c:	20000bfc 	.word	0x20000bfc
 8001fa0:	48000400 	.word	0x48000400

08001fa4 <getAuxState>:


// READ Diginal state of aux channels
void getAuxState (GPIO_PinState *_state){
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	_state[0] = HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin);
 8001fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb4:	f004 f838 	bl	8006028 <HAL_GPIO_ReadPin>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	701a      	strb	r2, [r3, #0]
	_state[1] = HAL_GPIO_ReadPin(DIG_IN2_GPIO_Port, DIG_IN2_Pin);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1c5c      	adds	r4, r3, #1
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	4824      	ldr	r0, [pc, #144]	; (8002058 <getAuxState+0xb4>)
 8001fc8:	f004 f82e 	bl	8006028 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	7023      	strb	r3, [r4, #0]
	_state[2] = HAL_GPIO_ReadPin(DIG_IN3_GPIO_Port, DIG_IN3_Pin);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1c9c      	adds	r4, r3, #2
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	f004 f824 	bl	8006028 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
	_state[3] = HAL_GPIO_ReadPin(DIG_IN4_GPIO_Port, DIG_IN4_Pin);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1cdc      	adds	r4, r3, #3
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	481b      	ldr	r0, [pc, #108]	; (8002058 <getAuxState+0xb4>)
 8001fec:	f004 f81c 	bl	8006028 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	7023      	strb	r3, [r4, #0]

	_state[4] = HAL_GPIO_ReadPin(DIG_IN5_GPIO_Port, DIG_IN5_Pin);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1d1c      	adds	r4, r3, #4
 8001ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f004 f812 	bl	8006028 <HAL_GPIO_ReadPin>
 8002004:	4603      	mov	r3, r0
 8002006:	7023      	strb	r3, [r4, #0]
	_state[5] = HAL_GPIO_ReadPin(DIG_IN6_GPIO_Port, DIG_IN6_Pin);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	1d5c      	adds	r4, r3, #5
 800200c:	2120      	movs	r1, #32
 800200e:	4812      	ldr	r0, [pc, #72]	; (8002058 <getAuxState+0xb4>)
 8002010:	f004 f80a 	bl	8006028 <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	7023      	strb	r3, [r4, #0]
	_state[6] = HAL_GPIO_ReadPin(DIG_IN7_GPIO_Port, DIG_IN7_Pin);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	1d9c      	adds	r4, r3, #6
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f004 f800 	bl	8006028 <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	7023      	strb	r3, [r4, #0]
	_state[7] = 0; //HAL_GPIO_ReadPin(DIG_IN8_GPIO_Port, DIG_IN8_Pin);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3307      	adds	r3, #7
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

	_state[8] = HAL_GPIO_ReadPin(DIG_IN9_GPIO_Port, DIG_IN9_Pin);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f103 0408 	add.w	r4, r3, #8
 800203a:	2110      	movs	r1, #16
 800203c:	4806      	ldr	r0, [pc, #24]	; (8002058 <getAuxState+0xb4>)
 800203e:	f003 fff3 	bl	8006028 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	7023      	strb	r3, [r4, #0]
	_state[9] = 0;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3309      	adds	r3, #9
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	48000400 	.word	0x48000400

0800205c <Save_Setting>:

uint8_t Save_Setting(uint8_t _rst)
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205e:	b0cd      	sub	sp, #308	; 0x134
 8002060:	af00      	add	r7, sp, #0
 8002062:	4602      	mov	r2, r0
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
	uint32_t SavingBuff[64];
	uint8_t i;
	uint32_t error = 0;
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
	uint64_t val = 0;
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 800207c:	f107 0308 	add.w	r3, r7, #8
 8002080:	4abe      	ldr	r2, [pc, #760]	; (800237c <Save_Setting+0x320>)
 8002082:	461e      	mov	r6, r3
 8002084:	4613      	mov	r3, r2
 8002086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002088:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			.Banks = FLASH_BANK_1,
	        .Page = 63,
			.NbPages = 1
	};

	for (i=0;i<64;i++)
 800208c:	2300      	movs	r3, #0
 800208e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002092:	e00b      	b.n	80020ac <Save_Setting+0x50>
			SavingBuff[i] = 0;
 8002094:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	2100      	movs	r1, #0
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0;i<64;i++)
 80020a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020a6:	3301      	adds	r3, #1
 80020a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80020ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020b0:	2b3f      	cmp	r3, #63	; 0x3f
 80020b2:	d9ef      	bls.n	8002094 <Save_Setting+0x38>
//112233445566778899 AABBCCDDEEFF
	if (_rst == 0)
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <Save_Setting+0x6a>
		SavingBuff[0] = 0xC4C0FFEE; // load settings marker
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4aaf      	ldr	r2, [pc, #700]	; (8002380 <Save_Setting+0x324>)
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e004      	b.n	80020d0 <Save_Setting+0x74>
	else
		SavingBuff[0] = 0xFFFFFFFF; // do not load marker
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	f04f 32ff 	mov.w	r2, #4294967295
 80020ce:	601a      	str	r2, [r3, #0]
	SavingBuff[1] = 0xBB;
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	22bb      	movs	r2, #187	; 0xbb
 80020d6:	605a      	str	r2, [r3, #4]

	// 0x11223344
	for (i = 1; i < 10; i++){
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80020de:	e0bc      	b.n	800225a <Save_Setting+0x1fe>
		// channel configuration settings
		SavingBuff[2*i    ]  = (channel[i-1].main_voice & 0xFF)*0x01000000;
 80020e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	49a7      	ldr	r1, [pc, #668]	; (8002384 <Save_Setting+0x328>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	0619      	lsls	r1, r3, #24
 80020f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020fa:	005a      	lsls	r2, r3, #1
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].aux_voice  & 0xFF)*0x00010000;
 8002104:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002108:	005a      	lsls	r2, r3, #1
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002112:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	489a      	ldr	r0, [pc, #616]	; (8002384 <Save_Setting+0x328>)
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4403      	add	r3, r0
 8002124:	3302      	adds	r3, #2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	4618      	mov	r0, r3
 800212c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002130:	005a      	lsls	r2, r3, #1
 8002132:	4401      	add	r1, r0
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].alt_voice  & 0xFF)*0x00000100;
 800213c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002140:	005a      	lsls	r2, r3, #1
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800214a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800214e:	1e5a      	subs	r2, r3, #1
 8002150:	488c      	ldr	r0, [pc, #560]	; (8002384 <Save_Setting+0x328>)
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4403      	add	r3, r0
 800215c:	3301      	adds	r3, #1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	4618      	mov	r0, r3
 8002164:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002168:	005a      	lsls	r2, r3, #1
 800216a:	4401      	add	r1, r0
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].chnl_type   & 0xFF);
 8002174:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002178:	005a      	lsls	r2, r3, #1
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002182:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	487e      	ldr	r0, [pc, #504]	; (8002384 <Save_Setting+0x328>)
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4403      	add	r3, r0
 8002194:	3303      	adds	r3, #3
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800219e:	005a      	lsls	r2, r3, #1
 80021a0:	4401      	add	r1, r0
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// channel parameter settings
		SavingBuff[2*i + 1]  = (channel[i-1].peak_volume_norm 	& 0xFF)*0x01000000;
 80021aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	4974      	ldr	r1, [pc, #464]	; (8002384 <Save_Setting+0x328>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3306      	adds	r3, #6
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	0619      	lsls	r1, r3, #24
 80021c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_min_length 	& 0xFF)*0x00010000;
 80021d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	4866      	ldr	r0, [pc, #408]	; (8002384 <Save_Setting+0x328>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4403      	add	r3, r0
 80021f6:	330a      	adds	r3, #10
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	4618      	mov	r0, r3
 8002200:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	4401      	add	r1, r0
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_max_length  	& 0xFF)*0x00000100;
 8002212:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002222:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	4856      	ldr	r0, [pc, #344]	; (8002384 <Save_Setting+0x328>)
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4403      	add	r3, r0
 8002234:	3308      	adds	r3, #8
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	4618      	mov	r0, r3
 800223e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	4401      	add	r1, r0
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i < 10; i++){
 8002250:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002254:	3301      	adds	r3, #1
 8002256:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800225a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800225e:	2b09      	cmp	r3, #9
 8002260:	f67f af3e 	bls.w	80020e0 <Save_Setting+0x84>
//		SavingBuff[2*i + 1] += (channel[i-1].peak2peak  & 0xFF);
	}

	HAL_StatusTypeDef err;
	uint8_t st = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	err = HAL_FLASH_Unlock();
 800226a:	f003 fb4b 	bl	8005904 <HAL_FLASH_Unlock>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 8002274:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <Save_Setting+0x22a>
		st += 0b10000000;
 800227c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002280:	3b80      	subs	r3, #128	; 0x80
 8002282:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR  | FLASH_FLAG_PGSERR);
 8002286:	4b40      	ldr	r3, [pc, #256]	; (8002388 <Save_Setting+0x32c>)
 8002288:	22b3      	movs	r2, #179	; 0xb3
 800228a:	611a      	str	r2, [r3, #16]

	err = HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 800228c:	f107 0218 	add.w	r2, r7, #24
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fc20 	bl	8005adc <HAL_FLASHEx_Erase>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 80022a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <Save_Setting+0x258>
		st += 0b01000000;
 80022aa:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80022ae:	3340      	adds	r3, #64	; 0x40
 80022b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<32;i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80022ba:	e039      	b.n	8002330 <Save_Setting+0x2d4>
	{
		val = (((uint64_t)SavingBuff[i*2+1])<<32) + SavingBuff[i*2];
 80022bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	0003      	movs	r3, r0
 80022dc:	2200      	movs	r2, #0
 80022de:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 80022e2:	0048      	lsls	r0, r1, #1
 80022e4:	f107 011c 	add.w	r1, r7, #28
 80022e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80022ec:	4608      	mov	r0, r1
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	1814      	adds	r4, r2, r0
 80022f4:	eb43 0501 	adc.w	r5, r3, r1
 80022f8:	e9c7 4548 	strd	r4, r5, [r7, #288]	; 0x120
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_USER_START_ADDR + 8*i, val) != HAL_OK) st += 1;
 80022fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002300:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002304:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4619      	mov	r1, r3
 800230c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002310:	2000      	movs	r0, #0
 8002312:	f003 faa1 	bl	8005858 <HAL_FLASH_Program>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <Save_Setting+0x2ca>
 800231c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002320:	3301      	adds	r3, #1
 8002322:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	for (i=0;i<32;i++)
 8002326:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800232a:	3301      	adds	r3, #1
 800232c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002330:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002334:	2b1f      	cmp	r3, #31
 8002336:	d9c1      	bls.n	80022bc <Save_Setting+0x260>
	}
	if ( HAL_FLASH_Lock() != HAL_OK ) st += 0b00100000;
 8002338:	f003 fb06 	bl	8005948 <HAL_FLASH_Lock>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <Save_Setting+0x2f0>
 8002342:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002346:	3320      	adds	r3, #32
 8002348:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<64;i++)	saved_config[0] = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002352:	e007      	b.n	8002364 <Save_Setting+0x308>
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <Save_Setting+0x330>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800235e:	3301      	adds	r3, #1
 8002360:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002364:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002368:	2b3f      	cmp	r3, #63	; 0x3f
 800236a:	d9f3      	bls.n	8002354 <Save_Setting+0x2f8>


	return st;
 800236c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
}
 8002370:	4618      	mov	r0, r3
 8002372:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8002376:	46bd      	mov	sp, r7
 8002378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237a:	bf00      	nop
 800237c:	0800f920 	.word	0x0800f920
 8002380:	c4c0ffee 	.word	0xc4c0ffee
 8002384:	20000918 	.word	0x20000918
 8002388:	40022000 	.word	0x40022000
 800238c:	20000748 	.word	0x20000748

08002390 <Load_Setting>:


uint8_t Load_Setting()
{
 8002390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002392:	b0a3      	sub	sp, #140	; 0x8c
 8002394:	af12      	add	r7, sp, #72	; 0x48
	uint8_t i;
//	uint32_t LoadingBuff[64];

	for (i=0;i<64;i++){
 8002396:	2300      	movs	r3, #0
 8002398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800239c:	e010      	b.n	80023c0 <Load_Setting+0x30>
		saved_config[i] = *(userConfig+i);
 800239e:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <Load_Setting+0x258>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	498e      	ldr	r1, [pc, #568]	; (80025ec <Load_Setting+0x25c>)
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<64;i++){
 80023b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023ba:	3301      	adds	r3, #1
 80023bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c4:	2b3f      	cmp	r3, #63	; 0x3f
 80023c6:	d9ea      	bls.n	800239e <Load_Setting+0xe>
	}

	if (saved_config[0] != 0xC4C0FFEE) return 0;
 80023c8:	4b88      	ldr	r3, [pc, #544]	; (80025ec <Load_Setting+0x25c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a88      	ldr	r2, [pc, #544]	; (80025f0 <Load_Setting+0x260>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d001      	beq.n	80023d6 <Load_Setting+0x46>
 80023d2:	2300      	movs	r3, #0
 80023d4:	e104      	b.n	80025e0 <Load_Setting+0x250>

	for (i = 1; i < 10; i++){
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023dc:	e094      	b.n	8002508 <Load_Setting+0x178>
		channel[i-1].main_voice = 0xff & (uint8_t)(saved_config[2*i]>>24);
 80023de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4a81      	ldr	r2, [pc, #516]	; (80025ec <Load_Setting+0x25c>)
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	0e19      	lsrs	r1, r3, #24
 80023ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	b2c8      	uxtb	r0, r1
 80023f4:	497f      	ldr	r1, [pc, #508]	; (80025f4 <Load_Setting+0x264>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	4602      	mov	r2, r0
 8002402:	701a      	strb	r2, [r3, #0]
		channel[i-1].aux_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>16);
 8002404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4a78      	ldr	r2, [pc, #480]	; (80025ec <Load_Setting+0x25c>)
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	0c19      	lsrs	r1, r3, #16
 8002412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	b2c8      	uxtb	r0, r1
 800241a:	4976      	ldr	r1, [pc, #472]	; (80025f4 <Load_Setting+0x264>)
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3302      	adds	r3, #2
 8002428:	4602      	mov	r2, r0
 800242a:	701a      	strb	r2, [r3, #0]
		channel[i-1].alt_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>8);
 800242c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <Load_Setting+0x25c>)
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	0a19      	lsrs	r1, r3, #8
 800243a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	b2c8      	uxtb	r0, r1
 8002442:	496c      	ldr	r1, [pc, #432]	; (80025f4 <Load_Setting+0x264>)
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3301      	adds	r3, #1
 8002450:	4602      	mov	r2, r0
 8002452:	701a      	strb	r2, [r3, #0]
		channel[i-1].chnl_type 	= 0xff & (uint8_t)(saved_config[2*i]);
 8002454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4a64      	ldr	r2, [pc, #400]	; (80025ec <Load_Setting+0x25c>)
 800245c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	b2c8      	uxtb	r0, r1
 8002468:	4962      	ldr	r1, [pc, #392]	; (80025f4 <Load_Setting+0x264>)
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3303      	adds	r3, #3
 8002476:	4602      	mov	r2, r0
 8002478:	701a      	strb	r2, [r3, #0]

		//		channel[i-1].peak_threshold 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
		channel[i-1].peak_volume_norm 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
 800247a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	3301      	adds	r3, #1
 8002482:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <Load_Setting+0x25c>)
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	0e1b      	lsrs	r3, r3, #24
 800248a:	b2d9      	uxtb	r1, r3
 800248c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	b288      	uxth	r0, r1
 8002494:	4957      	ldr	r1, [pc, #348]	; (80025f4 <Load_Setting+0x264>)
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	3306      	adds	r3, #6
 80024a2:	4602      	mov	r2, r0
 80024a4:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_min_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>16);
 80024a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a4f      	ldr	r2, [pc, #316]	; (80025ec <Load_Setting+0x25c>)
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2d9      	uxtb	r1, r3
 80024b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	b288      	uxth	r0, r1
 80024c0:	494c      	ldr	r1, [pc, #304]	; (80025f4 <Load_Setting+0x264>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	330a      	adds	r3, #10
 80024ce:	4602      	mov	r2, r0
 80024d0:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_max_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>8);
 80024d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	3301      	adds	r3, #1
 80024da:	4a44      	ldr	r2, [pc, #272]	; (80025ec <Load_Setting+0x25c>)
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	b2d9      	uxtb	r1, r3
 80024e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	b288      	uxth	r0, r1
 80024ec:	4941      	ldr	r1, [pc, #260]	; (80025f4 <Load_Setting+0x264>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3308      	adds	r3, #8
 80024fa:	4602      	mov	r2, r0
 80024fc:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < 10; i++){
 80024fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002502:	3301      	adds	r3, #1
 8002504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002508:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800250c:	2b09      	cmp	r3, #9
 800250e:	f67f af66 	bls.w	80023de <Load_Setting+0x4e>
//		channel[i-1].time_between_peaks = 0xff & (uint8_t)(saved_config[2*i+1]);
	}

	sprintf(buffer_out, "........ Previous settings: .......\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n",
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <Load_Setting+0x25c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <Load_Setting+0x25c>)
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	6339      	str	r1, [r7, #48]	; 0x30
 800251e:	4b33      	ldr	r3, [pc, #204]	; (80025ec <Load_Setting+0x25c>)
 8002520:	6898      	ldr	r0, [r3, #8]
 8002522:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <Load_Setting+0x25c>)
 8002526:	68dc      	ldr	r4, [r3, #12]
 8002528:	62bc      	str	r4, [r7, #40]	; 0x28
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <Load_Setting+0x25c>)
 800252c:	691d      	ldr	r5, [r3, #16]
 800252e:	627d      	str	r5, [r7, #36]	; 0x24
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <Load_Setting+0x25c>)
 8002532:	695e      	ldr	r6, [r3, #20]
 8002534:	623e      	str	r6, [r7, #32]
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <Load_Setting+0x25c>)
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	61fa      	str	r2, [r7, #28]
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <Load_Setting+0x25c>)
 800253e:	69d9      	ldr	r1, [r3, #28]
 8002540:	61b9      	str	r1, [r7, #24]
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <Load_Setting+0x25c>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <Load_Setting+0x25c>)
 800254a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800254c:	6138      	str	r0, [r7, #16]
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <Load_Setting+0x25c>)
 8002550:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002552:	60fc      	str	r4, [r7, #12]
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <Load_Setting+0x25c>)
 8002556:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002558:	60bd      	str	r5, [r7, #8]
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <Load_Setting+0x25c>)
 800255c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800255e:	607e      	str	r6, [r7, #4]
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <Load_Setting+0x25c>)
 8002562:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <Load_Setting+0x25c>)
 8002566:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <Load_Setting+0x25c>)
 800256a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <Load_Setting+0x25c>)
 800256e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <Load_Setting+0x25c>)
 8002572:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <Load_Setting+0x25c>)
 8002576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <Load_Setting+0x25c>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	9311      	str	r3, [sp, #68]	; 0x44
 800257e:	9210      	str	r2, [sp, #64]	; 0x40
 8002580:	910f      	str	r1, [sp, #60]	; 0x3c
 8002582:	900e      	str	r0, [sp, #56]	; 0x38
 8002584:	940d      	str	r4, [sp, #52]	; 0x34
 8002586:	950c      	str	r5, [sp, #48]	; 0x30
 8002588:	960b      	str	r6, [sp, #44]	; 0x2c
 800258a:	687e      	ldr	r6, [r7, #4]
 800258c:	960a      	str	r6, [sp, #40]	; 0x28
 800258e:	68bd      	ldr	r5, [r7, #8]
 8002590:	9509      	str	r5, [sp, #36]	; 0x24
 8002592:	68fc      	ldr	r4, [r7, #12]
 8002594:	9408      	str	r4, [sp, #32]
 8002596:	6938      	ldr	r0, [r7, #16]
 8002598:	9007      	str	r0, [sp, #28]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	9306      	str	r3, [sp, #24]
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	9105      	str	r1, [sp, #20]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	9204      	str	r2, [sp, #16]
 80025a6:	6a3e      	ldr	r6, [r7, #32]
 80025a8:	9603      	str	r6, [sp, #12]
 80025aa:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80025ac:	9502      	str	r5, [sp, #8]
 80025ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80025b0:	9401      	str	r4, [sp, #4]
 80025b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b4:	9000      	str	r0, [sp, #0]
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ba:	490f      	ldr	r1, [pc, #60]	; (80025f8 <Load_Setting+0x268>)
 80025bc:	480f      	ldr	r0, [pc, #60]	; (80025fc <Load_Setting+0x26c>)
 80025be:	f00c fd0f 	bl	800efe0 <siprintf>
	  saved_config[4] ,saved_config[5] ,saved_config[6] ,saved_config[7] ,
	  saved_config[8] ,saved_config[9] ,saved_config[10],saved_config[11],
	  saved_config[12],saved_config[13],saved_config[14],saved_config[15],
	  saved_config[16],saved_config[17],saved_config[18],saved_config[19]);

	  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <Load_Setting+0x26c>)
 80025c4:	f7fd fe2c 	bl	8000220 <strlen>
 80025c8:	4603      	mov	r3, r0
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	2332      	movs	r3, #50	; 0x32
 80025ce:	490b      	ldr	r1, [pc, #44]	; (80025fc <Load_Setting+0x26c>)
 80025d0:	480b      	ldr	r0, [pc, #44]	; (8002600 <Load_Setting+0x270>)
 80025d2:	f006 fe65 	bl	80092a0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80025d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025da:	f000 ff89 	bl	80034f0 <HAL_Delay>

	return 1;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3744      	adds	r7, #68	; 0x44
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000748 	.word	0x20000748
 80025f0:	c4c0ffee 	.word	0xc4c0ffee
 80025f4:	20000918 	.word	0x20000918
 80025f8:	0800f930 	.word	0x0800f930
 80025fc:	20000c88 	.word	0x20000c88
 8002600:	20000bfc 	.word	0x20000bfc

08002604 <get_num_from_uart>:

//receive number from serial or a given max length
int get_num_from_uart(uint8_t _len){
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	int val = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len+1; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e006      	b.n	8002626 <get_num_from_uart+0x22>
		buffer_in[i] = 0;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <get_num_from_uart+0xc8>)
 800261c:	2100      	movs	r1, #0
 800261e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<_len+1; i++)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	3301      	adds	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	79fa      	ldrb	r2, [r7, #7]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	429a      	cmp	r2, r3
 800262c:	d2f4      	bcs.n	8002618 <get_num_from_uart+0x14>


	HAL_UART_Receive_IT (&huart2, &buffer_in[0], _len);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	4925      	ldr	r1, [pc, #148]	; (80026cc <get_num_from_uart+0xc8>)
 8002636:	4826      	ldr	r0, [pc, #152]	; (80026d0 <get_num_from_uart+0xcc>)
 8002638:	f006 fec8 	bl	80093cc <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0) {HAL_Delay(1);};
 800263c:	e002      	b.n	8002644 <get_num_from_uart+0x40>
 800263e:	2001      	movs	r0, #1
 8002640:	f000 ff56 	bl	80034f0 <HAL_Delay>
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <get_num_from_uart+0xc8>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f8      	beq.n	800263e <get_num_from_uart+0x3a>
	HAL_Delay(2); // wait for the rest of the message
 800264c:	2002      	movs	r0, #2
 800264e:	f000 ff4f 	bl	80034f0 <HAL_Delay>

	val = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e02a      	b.n	80026b2 <get_num_from_uart+0xae>
		if ((buffer_in[i] == 0) || (buffer_in[i] == 10) || (buffer_in[i] == 13)) break;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <get_num_from_uart+0xc8>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d029      	beq.n	80026ba <get_num_from_uart+0xb6>
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <get_num_from_uart+0xc8>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	2b0a      	cmp	r3, #10
 800266e:	d024      	beq.n	80026ba <get_num_from_uart+0xb6>
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <get_num_from_uart+0xc8>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	2b0d      	cmp	r3, #13
 8002678:	d01f      	beq.n	80026ba <get_num_from_uart+0xb6>
		if ((buffer_in[0]>='0') && (buffer_in[0]<='9'))
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <get_num_from_uart+0xc8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b2f      	cmp	r3, #47	; 0x2f
 8002680:	d913      	bls.n	80026aa <get_num_from_uart+0xa6>
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <get_num_from_uart+0xc8>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b39      	cmp	r3, #57	; 0x39
 8002688:	d80f      	bhi.n	80026aa <get_num_from_uart+0xa6>
			val = val*10 + (buffer_in[i]-'0');
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4619      	mov	r1, r3
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <get_num_from_uart+0xc8>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	3b30      	subs	r3, #48	; 0x30
 800269e:	440b      	add	r3, r1
 80026a0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e003      	b.n	80026b2 <get_num_from_uart+0xae>
		else{
			val = -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	60bb      	str	r3, [r7, #8]
			break;
 80026b0:	e003      	b.n	80026ba <get_num_from_uart+0xb6>
	for (i = 0; i<_len; i++){
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3d0      	bcc.n	800265c <get_num_from_uart+0x58>
		}
	}
	HAL_UART_AbortReceive(&huart2);
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <get_num_from_uart+0xcc>)
 80026bc:	f006 ff5e 	bl	800957c <HAL_UART_AbortReceive>
	return val;
 80026c0:	68bb      	ldr	r3, [r7, #8]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000b10 	.word	0x20000b10
 80026d0:	20000bfc 	.word	0x20000bfc

080026d4 <UART_CFG>:

uint8_t UART_CFG(){
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	af06      	add	r7, sp, #24

	int val = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]

	uint8_t rtrn = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]

	sprintf(buffer_out, "\nConfig mode.\nType number of the pad [1..9], or hit the drum (x - reset to default):\n");
 80026e2:	4995      	ldr	r1, [pc, #596]	; (8002938 <UART_CFG+0x264>)
 80026e4:	4895      	ldr	r0, [pc, #596]	; (800293c <UART_CFG+0x268>)
 80026e6:	f00c fc7b 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80026ea:	4894      	ldr	r0, [pc, #592]	; (800293c <UART_CFG+0x268>)
 80026ec:	f7fd fd98 	bl	8000220 <strlen>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	2332      	movs	r3, #50	; 0x32
 80026f6:	4991      	ldr	r1, [pc, #580]	; (800293c <UART_CFG+0x268>)
 80026f8:	4891      	ldr	r0, [pc, #580]	; (8002940 <UART_CFG+0x26c>)
 80026fa:	f006 fdd1 	bl	80092a0 <HAL_UART_Transmit>

	buffer_in[0] = 0;
 80026fe:	4b91      	ldr	r3, [pc, #580]	; (8002944 <UART_CFG+0x270>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8002704:	2201      	movs	r2, #1
 8002706:	498f      	ldr	r1, [pc, #572]	; (8002944 <UART_CFG+0x270>)
 8002708:	488d      	ldr	r0, [pc, #564]	; (8002940 <UART_CFG+0x26c>)
 800270a:	f006 fe5f 	bl	80093cc <HAL_UART_Receive_IT>

	uint8_t chnl = 10;
 800270e:	230a      	movs	r3, #10
 8002710:	73bb      	strb	r3, [r7, #14]
	while (chnl == 10){
 8002712:	e050      	b.n	80027b6 <UART_CFG+0xe2>
		  for (uint8_t ch = 0; ch<9; ch++)
 8002714:	2300      	movs	r3, #0
 8002716:	737b      	strb	r3, [r7, #13]
 8002718:	e031      	b.n	800277e <UART_CFG+0xaa>
			  if ((channel[ch].main_rdy)||(channel[ch].aux_rdy)){
 800271a:	7b7a      	ldrb	r2, [r7, #13]
 800271c:	498a      	ldr	r1, [pc, #552]	; (8002948 <UART_CFG+0x274>)
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	3311      	adds	r3, #17
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <UART_CFG+0x72>
 8002730:	7b7a      	ldrb	r2, [r7, #13]
 8002732:	4985      	ldr	r1, [pc, #532]	; (8002948 <UART_CFG+0x274>)
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3324      	adds	r3, #36	; 0x24
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <UART_CFG+0xa4>
				  channel[ch].main_rdy = 0;
 8002746:	7b7a      	ldrb	r2, [r7, #13]
 8002748:	497f      	ldr	r1, [pc, #508]	; (8002948 <UART_CFG+0x274>)
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	3311      	adds	r3, #17
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
				  channel[ch].aux_rdy = 0;
 800275a:	7b7a      	ldrb	r2, [r7, #13]
 800275c:	497a      	ldr	r1, [pc, #488]	; (8002948 <UART_CFG+0x274>)
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	3324      	adds	r3, #36	; 0x24
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
				  chnl = ch;
 800276e:	7b7b      	ldrb	r3, [r7, #13]
 8002770:	73bb      	strb	r3, [r7, #14]
				  HAL_UART_AbortReceive(&huart2);
 8002772:	4873      	ldr	r0, [pc, #460]	; (8002940 <UART_CFG+0x26c>)
 8002774:	f006 ff02 	bl	800957c <HAL_UART_AbortReceive>
		  for (uint8_t ch = 0; ch<9; ch++)
 8002778:	7b7b      	ldrb	r3, [r7, #13]
 800277a:	3301      	adds	r3, #1
 800277c:	737b      	strb	r3, [r7, #13]
 800277e:	7b7b      	ldrb	r3, [r7, #13]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d9ca      	bls.n	800271a <UART_CFG+0x46>
			  }
		  if (buffer_in[0]>0){
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <UART_CFG+0x270>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d014      	beq.n	80027b6 <UART_CFG+0xe2>
			  if ((buffer_in[0]>='1') && (buffer_in[0]<='9'))
 800278c:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <UART_CFG+0x270>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	d908      	bls.n	80027a6 <UART_CFG+0xd2>
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <UART_CFG+0x270>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b39      	cmp	r3, #57	; 0x39
 800279a:	d804      	bhi.n	80027a6 <UART_CFG+0xd2>
				  chnl = buffer_in[0]-'1';
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <UART_CFG+0x270>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	3b31      	subs	r3, #49	; 0x31
 80027a2:	73bb      	strb	r3, [r7, #14]
 80027a4:	e001      	b.n	80027aa <UART_CFG+0xd6>
			  else
				  chnl = 255;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	73bb      	strb	r3, [r7, #14]

			  if (buffer_in[0]=='x')
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <UART_CFG+0x270>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b78      	cmp	r3, #120	; 0x78
 80027b0:	d101      	bne.n	80027b6 <UART_CFG+0xe2>
				  return 99;
 80027b2:	2363      	movs	r3, #99	; 0x63
 80027b4:	e360      	b.n	8002e78 <UART_CFG+0x7a4>
	while (chnl == 10){
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	2b0a      	cmp	r3, #10
 80027ba:	d0ab      	beq.n	8002714 <UART_CFG+0x40>
		  }
	}

	if (chnl == 255) {
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	2bff      	cmp	r3, #255	; 0xff
 80027c0:	d11a      	bne.n	80027f8 <UART_CFG+0x124>
		HAL_UART_AbortReceive(&huart2);
 80027c2:	485f      	ldr	r0, [pc, #380]	; (8002940 <UART_CFG+0x26c>)
 80027c4:	f006 feda 	bl	800957c <HAL_UART_AbortReceive>
		sprintf(buffer_out, "Ciao\n");
 80027c8:	4960      	ldr	r1, [pc, #384]	; (800294c <UART_CFG+0x278>)
 80027ca:	485c      	ldr	r0, [pc, #368]	; (800293c <UART_CFG+0x268>)
 80027cc:	f00c fc08 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80027d0:	485a      	ldr	r0, [pc, #360]	; (800293c <UART_CFG+0x268>)
 80027d2:	f7fd fd25 	bl	8000220 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29a      	uxth	r2, r3
 80027da:	2332      	movs	r3, #50	; 0x32
 80027dc:	4957      	ldr	r1, [pc, #348]	; (800293c <UART_CFG+0x268>)
 80027de:	4858      	ldr	r0, [pc, #352]	; (8002940 <UART_CFG+0x26c>)
 80027e0:	f006 fd5e 	bl	80092a0 <HAL_UART_Transmit>
		config_Mode[0] = 0;
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <UART_CFG+0x27c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 80027ea:	2201      	movs	r2, #1
 80027ec:	4958      	ldr	r1, [pc, #352]	; (8002950 <UART_CFG+0x27c>)
 80027ee:	4854      	ldr	r0, [pc, #336]	; (8002940 <UART_CFG+0x26c>)
 80027f0:	f006 fdec 	bl	80093cc <HAL_UART_Receive_IT>
		return 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e33f      	b.n	8002e78 <UART_CFG+0x7a4>
	}

	// got the correct channel.
	// print current values
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	1c59      	adds	r1, r3, #1
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 80027fc:	7bba      	ldrb	r2, [r7, #14]
 80027fe:	4852      	ldr	r0, [pc, #328]	; (8002948 <UART_CFG+0x274>)
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4403      	add	r3, r0
 800280a:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800280c:	469c      	mov	ip, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 800280e:	7bba      	ldrb	r2, [r7, #14]
 8002810:	484d      	ldr	r0, [pc, #308]	; (8002948 <UART_CFG+0x274>)
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4403      	add	r3, r0
 800281c:	3302      	adds	r3, #2
 800281e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002820:	461c      	mov	r4, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 8002822:	7bba      	ldrb	r2, [r7, #14]
 8002824:	4848      	ldr	r0, [pc, #288]	; (8002948 <UART_CFG+0x274>)
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4403      	add	r3, r0
 8002830:	3301      	adds	r3, #1
 8002832:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002834:	461d      	mov	r5, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 8002836:	7bba      	ldrb	r2, [r7, #14]
 8002838:	4843      	ldr	r0, [pc, #268]	; (8002948 <UART_CFG+0x274>)
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4403      	add	r3, r0
 8002844:	330a      	adds	r3, #10
 8002846:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002848:	461e      	mov	r6, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 800284a:	7bba      	ldrb	r2, [r7, #14]
 800284c:	483e      	ldr	r0, [pc, #248]	; (8002948 <UART_CFG+0x274>)
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4403      	add	r3, r0
 8002858:	3308      	adds	r3, #8
 800285a:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800285c:	607b      	str	r3, [r7, #4]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 800285e:	7bba      	ldrb	r2, [r7, #14]
 8002860:	4839      	ldr	r0, [pc, #228]	; (8002948 <UART_CFG+0x274>)
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4403      	add	r3, r0
 800286c:	3304      	adds	r3, #4
 800286e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002870:	603b      	str	r3, [r7, #0]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 8002872:	7bba      	ldrb	r2, [r7, #14]
 8002874:	4834      	ldr	r0, [pc, #208]	; (8002948 <UART_CFG+0x274>)
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4403      	add	r3, r0
 8002880:	3306      	adds	r3, #6
 8002882:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002884:	9305      	str	r3, [sp, #20]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	9204      	str	r2, [sp, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	9303      	str	r3, [sp, #12]
 800288e:	9602      	str	r6, [sp, #8]
 8002890:	9501      	str	r5, [sp, #4]
 8002892:	9400      	str	r4, [sp, #0]
 8002894:	4663      	mov	r3, ip
 8002896:	460a      	mov	r2, r1
 8002898:	492e      	ldr	r1, [pc, #184]	; (8002954 <UART_CFG+0x280>)
 800289a:	4828      	ldr	r0, [pc, #160]	; (800293c <UART_CFG+0x268>)
 800289c:	f00c fba0 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80028a0:	4826      	ldr	r0, [pc, #152]	; (800293c <UART_CFG+0x268>)
 80028a2:	f7fd fcbd 	bl	8000220 <strlen>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	2332      	movs	r3, #50	; 0x32
 80028ac:	4923      	ldr	r1, [pc, #140]	; (800293c <UART_CFG+0x268>)
 80028ae:	4824      	ldr	r0, [pc, #144]	; (8002940 <UART_CFG+0x26c>)
 80028b0:	f006 fcf6 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80028b4:	20c8      	movs	r0, #200	; 0xc8
 80028b6:	f000 fe1b 	bl	80034f0 <HAL_Delay>

	// Starting to change the values
	// main voicepeak_volume_norm
	sprintf(buffer_out, "\nCH#%d Change main voice from %d:\t",chnl+1, channel[chnl].main_voice);
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	7bba      	ldrb	r2, [r7, #14]
 80028c0:	4821      	ldr	r0, [pc, #132]	; (8002948 <UART_CFG+0x274>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4403      	add	r3, r0
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	460a      	mov	r2, r1
 80028d0:	4921      	ldr	r1, [pc, #132]	; (8002958 <UART_CFG+0x284>)
 80028d2:	481a      	ldr	r0, [pc, #104]	; (800293c <UART_CFG+0x268>)
 80028d4:	f00c fb84 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80028d8:	4818      	ldr	r0, [pc, #96]	; (800293c <UART_CFG+0x268>)
 80028da:	f7fd fca1 	bl	8000220 <strlen>
 80028de:	4603      	mov	r3, r0
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	2332      	movs	r3, #50	; 0x32
 80028e4:	4915      	ldr	r1, [pc, #84]	; (800293c <UART_CFG+0x268>)
 80028e6:	4816      	ldr	r0, [pc, #88]	; (8002940 <UART_CFG+0x26c>)
 80028e8:	f006 fcda 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80028ec:	20c8      	movs	r0, #200	; 0xc8
 80028ee:	f000 fdff 	bl	80034f0 <HAL_Delay>

	 val = get_num_from_uart(2);
 80028f2:	2002      	movs	r0, #2
 80028f4:	f7ff fe86 	bl	8002604 <get_num_from_uart>
 80028f8:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b19      	cmp	r3, #25
 80028fe:	dd2f      	ble.n	8002960 <UART_CFG+0x28c>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b59      	cmp	r3, #89	; 0x59
 8002904:	dc2c      	bgt.n	8002960 <UART_CFG+0x28c>
		channel[chnl].main_voice = val & 0xFF;
 8002906:	7bba      	ldrb	r2, [r7, #14]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	b2d8      	uxtb	r0, r3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <UART_CFG+0x274>)
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	4602      	mov	r2, r0
 800291a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New main voice: %d\n", channel[chnl].main_voice);
 800291c:	7bba      	ldrb	r2, [r7, #14]
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <UART_CFG+0x274>)
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	490b      	ldr	r1, [pc, #44]	; (800295c <UART_CFG+0x288>)
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <UART_CFG+0x268>)
 8002932:	f00c fb55 	bl	800efe0 <siprintf>
 8002936:	e020      	b.n	800297a <UART_CFG+0x2a6>
 8002938:	0800f9d0 	.word	0x0800f9d0
 800293c:	20000c88 	.word	0x20000c88
 8002940:	20000bfc 	.word	0x20000bfc
 8002944:	20000b10 	.word	0x20000b10
 8002948:	20000918 	.word	0x20000918
 800294c:	0800fa28 	.word	0x0800fa28
 8002950:	20000430 	.word	0x20000430
 8002954:	0800fa30 	.word	0x0800fa30
 8002958:	0800faa8 	.word	0x0800faa8
 800295c:	0800facc 	.word	0x0800facc
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].main_voice);
 8002960:	7bba      	ldrb	r2, [r7, #14]
 8002962:	49a6      	ldr	r1, [pc, #664]	; (8002bfc <UART_CFG+0x528>)
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	49a3      	ldr	r1, [pc, #652]	; (8002c00 <UART_CFG+0x52c>)
 8002974:	48a3      	ldr	r0, [pc, #652]	; (8002c04 <UART_CFG+0x530>)
 8002976:	f00c fb33 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 800297a:	48a2      	ldr	r0, [pc, #648]	; (8002c04 <UART_CFG+0x530>)
 800297c:	f7fd fc50 	bl	8000220 <strlen>
 8002980:	4603      	mov	r3, r0
 8002982:	b29a      	uxth	r2, r3
 8002984:	2332      	movs	r3, #50	; 0x32
 8002986:	499f      	ldr	r1, [pc, #636]	; (8002c04 <UART_CFG+0x530>)
 8002988:	489f      	ldr	r0, [pc, #636]	; (8002c08 <UART_CFG+0x534>)
 800298a:	f006 fc89 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 800298e:	20c8      	movs	r0, #200	; 0xc8
 8002990:	f000 fdae 	bl	80034f0 <HAL_Delay>

	// aux voice
	sprintf(buffer_out, "\nCH#%d Change aux input voice from %d:\t",chnl+1, channel[chnl].aux_voice);
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	7bba      	ldrb	r2, [r7, #14]
 800299a:	4898      	ldr	r0, [pc, #608]	; (8002bfc <UART_CFG+0x528>)
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4403      	add	r3, r0
 80029a6:	3302      	adds	r3, #2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	460a      	mov	r2, r1
 80029ac:	4997      	ldr	r1, [pc, #604]	; (8002c0c <UART_CFG+0x538>)
 80029ae:	4895      	ldr	r0, [pc, #596]	; (8002c04 <UART_CFG+0x530>)
 80029b0:	f00c fb16 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80029b4:	4893      	ldr	r0, [pc, #588]	; (8002c04 <UART_CFG+0x530>)
 80029b6:	f7fd fc33 	bl	8000220 <strlen>
 80029ba:	4603      	mov	r3, r0
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2332      	movs	r3, #50	; 0x32
 80029c0:	4990      	ldr	r1, [pc, #576]	; (8002c04 <UART_CFG+0x530>)
 80029c2:	4891      	ldr	r0, [pc, #580]	; (8002c08 <UART_CFG+0x534>)
 80029c4:	f006 fc6c 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80029c8:	20c8      	movs	r0, #200	; 0xc8
 80029ca:	f000 fd91 	bl	80034f0 <HAL_Delay>

	 val = get_num_from_uart(2);
 80029ce:	2002      	movs	r0, #2
 80029d0:	f7ff fe18 	bl	8002604 <get_num_from_uart>
 80029d4:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b19      	cmp	r3, #25
 80029da:	dd1d      	ble.n	8002a18 <UART_CFG+0x344>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b59      	cmp	r3, #89	; 0x59
 80029e0:	dc1a      	bgt.n	8002a18 <UART_CFG+0x344>
		channel[chnl].aux_voice = val & 0xFF;
 80029e2:	7bba      	ldrb	r2, [r7, #14]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	4984      	ldr	r1, [pc, #528]	; (8002bfc <UART_CFG+0x528>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3302      	adds	r3, #2
 80029f6:	4602      	mov	r2, r0
 80029f8:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New aux voice: %d\n", channel[chnl].aux_voice);
 80029fa:	7bba      	ldrb	r2, [r7, #14]
 80029fc:	497f      	ldr	r1, [pc, #508]	; (8002bfc <UART_CFG+0x528>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3302      	adds	r3, #2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4980      	ldr	r1, [pc, #512]	; (8002c10 <UART_CFG+0x53c>)
 8002a10:	487c      	ldr	r0, [pc, #496]	; (8002c04 <UART_CFG+0x530>)
 8002a12:	f00c fae5 	bl	800efe0 <siprintf>
 8002a16:	e00d      	b.n	8002a34 <UART_CFG+0x360>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].aux_voice);
 8002a18:	7bba      	ldrb	r2, [r7, #14]
 8002a1a:	4978      	ldr	r1, [pc, #480]	; (8002bfc <UART_CFG+0x528>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3302      	adds	r3, #2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4974      	ldr	r1, [pc, #464]	; (8002c00 <UART_CFG+0x52c>)
 8002a2e:	4875      	ldr	r0, [pc, #468]	; (8002c04 <UART_CFG+0x530>)
 8002a30:	f00c fad6 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a34:	4873      	ldr	r0, [pc, #460]	; (8002c04 <UART_CFG+0x530>)
 8002a36:	f7fd fbf3 	bl	8000220 <strlen>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	2332      	movs	r3, #50	; 0x32
 8002a40:	4970      	ldr	r1, [pc, #448]	; (8002c04 <UART_CFG+0x530>)
 8002a42:	4871      	ldr	r0, [pc, #452]	; (8002c08 <UART_CFG+0x534>)
 8002a44:	f006 fc2c 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002a48:	20c8      	movs	r0, #200	; 0xc8
 8002a4a:	f000 fd51 	bl	80034f0 <HAL_Delay>

	// main alt voice
	sprintf(buffer_out, "\nCH#%d Change main alt voice (when pedal pressed) from %d:\t",chnl+1, channel[chnl].alt_voice);
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	1c59      	adds	r1, r3, #1
 8002a52:	7bba      	ldrb	r2, [r7, #14]
 8002a54:	4869      	ldr	r0, [pc, #420]	; (8002bfc <UART_CFG+0x528>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4403      	add	r3, r0
 8002a60:	3301      	adds	r3, #1
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	460a      	mov	r2, r1
 8002a66:	496b      	ldr	r1, [pc, #428]	; (8002c14 <UART_CFG+0x540>)
 8002a68:	4866      	ldr	r0, [pc, #408]	; (8002c04 <UART_CFG+0x530>)
 8002a6a:	f00c fab9 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a6e:	4865      	ldr	r0, [pc, #404]	; (8002c04 <UART_CFG+0x530>)
 8002a70:	f7fd fbd6 	bl	8000220 <strlen>
 8002a74:	4603      	mov	r3, r0
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2332      	movs	r3, #50	; 0x32
 8002a7a:	4962      	ldr	r1, [pc, #392]	; (8002c04 <UART_CFG+0x530>)
 8002a7c:	4862      	ldr	r0, [pc, #392]	; (8002c08 <UART_CFG+0x534>)
 8002a7e:	f006 fc0f 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002a82:	20c8      	movs	r0, #200	; 0xc8
 8002a84:	f000 fd34 	bl	80034f0 <HAL_Delay>

	 val = get_num_from_uart(2);
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f7ff fdbb 	bl	8002604 <get_num_from_uart>
 8002a8e:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b19      	cmp	r3, #25
 8002a94:	dd1d      	ble.n	8002ad2 <UART_CFG+0x3fe>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b59      	cmp	r3, #89	; 0x59
 8002a9a:	dc1a      	bgt.n	8002ad2 <UART_CFG+0x3fe>
		channel[chnl].alt_voice = val & 0xFF;
 8002a9c:	7bba      	ldrb	r2, [r7, #14]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	b2d8      	uxtb	r0, r3
 8002aa2:	4956      	ldr	r1, [pc, #344]	; (8002bfc <UART_CFG+0x528>)
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	3301      	adds	r3, #1
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New alt voice: %d\n", channel[chnl].alt_voice);
 8002ab4:	7bba      	ldrb	r2, [r7, #14]
 8002ab6:	4951      	ldr	r1, [pc, #324]	; (8002bfc <UART_CFG+0x528>)
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4953      	ldr	r1, [pc, #332]	; (8002c18 <UART_CFG+0x544>)
 8002aca:	484e      	ldr	r0, [pc, #312]	; (8002c04 <UART_CFG+0x530>)
 8002acc:	f00c fa88 	bl	800efe0 <siprintf>
 8002ad0:	e00d      	b.n	8002aee <UART_CFG+0x41a>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].alt_voice);
 8002ad2:	7bba      	ldrb	r2, [r7, #14]
 8002ad4:	4949      	ldr	r1, [pc, #292]	; (8002bfc <UART_CFG+0x528>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4946      	ldr	r1, [pc, #280]	; (8002c00 <UART_CFG+0x52c>)
 8002ae8:	4846      	ldr	r0, [pc, #280]	; (8002c04 <UART_CFG+0x530>)
 8002aea:	f00c fa79 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002aee:	4845      	ldr	r0, [pc, #276]	; (8002c04 <UART_CFG+0x530>)
 8002af0:	f7fd fb96 	bl	8000220 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2332      	movs	r3, #50	; 0x32
 8002afa:	4942      	ldr	r1, [pc, #264]	; (8002c04 <UART_CFG+0x530>)
 8002afc:	4842      	ldr	r0, [pc, #264]	; (8002c08 <UART_CFG+0x534>)
 8002afe:	f006 fbcf 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002b02:	20c8      	movs	r0, #200	; 0xc8
 8002b04:	f000 fcf4 	bl	80034f0 <HAL_Delay>

	// channel type
	sprintf(buffer_out, "\nCH#%d Change aux type from %d to:\n\tAUX - auto, MAIN - Mesh(0), Mesh with rim(1), or Cymbal(2),\n\t HiHat(3) with pedal, Cymbal with 2 zones(4), Cymabal with mute button(5)\n", chnl+1,  channel[chnl].chnl_type);
 8002b08:	7bbb      	ldrb	r3, [r7, #14]
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	7bba      	ldrb	r2, [r7, #14]
 8002b0e:	483b      	ldr	r0, [pc, #236]	; (8002bfc <UART_CFG+0x528>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4403      	add	r3, r0
 8002b1a:	3303      	adds	r3, #3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	460a      	mov	r2, r1
 8002b20:	493e      	ldr	r1, [pc, #248]	; (8002c1c <UART_CFG+0x548>)
 8002b22:	4838      	ldr	r0, [pc, #224]	; (8002c04 <UART_CFG+0x530>)
 8002b24:	f00c fa5c 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002b28:	4836      	ldr	r0, [pc, #216]	; (8002c04 <UART_CFG+0x530>)
 8002b2a:	f7fd fb79 	bl	8000220 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	2332      	movs	r3, #50	; 0x32
 8002b34:	4933      	ldr	r1, [pc, #204]	; (8002c04 <UART_CFG+0x530>)
 8002b36:	4834      	ldr	r0, [pc, #208]	; (8002c08 <UART_CFG+0x534>)
 8002b38:	f006 fbb2 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002b3c:	20c8      	movs	r0, #200	; 0xc8
 8002b3e:	f000 fcd7 	bl	80034f0 <HAL_Delay>

	val = get_num_from_uart(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff fd5e 	bl	8002604 <get_num_from_uart>
 8002b48:	60b8      	str	r0, [r7, #8]
	if ((val>=0)&&(val<=4)){
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db1d      	blt.n	8002b8c <UART_CFG+0x4b8>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	dc1a      	bgt.n	8002b8c <UART_CFG+0x4b8>
		channel[chnl].chnl_type = val & 0xFF;
 8002b56:	7bba      	ldrb	r2, [r7, #14]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	4927      	ldr	r1, [pc, #156]	; (8002bfc <UART_CFG+0x528>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	3303      	adds	r3, #3
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New channel type: %d\n", channel[chnl].chnl_type);
 8002b6e:	7bba      	ldrb	r2, [r7, #14]
 8002b70:	4922      	ldr	r1, [pc, #136]	; (8002bfc <UART_CFG+0x528>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4927      	ldr	r1, [pc, #156]	; (8002c20 <UART_CFG+0x54c>)
 8002b84:	481f      	ldr	r0, [pc, #124]	; (8002c04 <UART_CFG+0x530>)
 8002b86:	f00c fa2b 	bl	800efe0 <siprintf>
 8002b8a:	e00d      	b.n	8002ba8 <UART_CFG+0x4d4>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].chnl_type);
 8002b8c:	7bba      	ldrb	r2, [r7, #14]
 8002b8e:	491b      	ldr	r1, [pc, #108]	; (8002bfc <UART_CFG+0x528>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4917      	ldr	r1, [pc, #92]	; (8002c00 <UART_CFG+0x52c>)
 8002ba2:	4818      	ldr	r0, [pc, #96]	; (8002c04 <UART_CFG+0x530>)
 8002ba4:	f00c fa1c 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ba8:	4816      	ldr	r0, [pc, #88]	; (8002c04 <UART_CFG+0x530>)
 8002baa:	f7fd fb39 	bl	8000220 <strlen>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	2332      	movs	r3, #50	; 0x32
 8002bb4:	4913      	ldr	r1, [pc, #76]	; (8002c04 <UART_CFG+0x530>)
 8002bb6:	4814      	ldr	r0, [pc, #80]	; (8002c08 <UART_CFG+0x534>)
 8002bb8:	f006 fb72 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002bbc:	20c8      	movs	r0, #200	; 0xc8
 8002bbe:	f000 fc97 	bl	80034f0 <HAL_Delay>

	rtrn = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
	sprintf(buffer_out, "\nAdjust timing? y - yes, n - save settings and exit\n");
 8002bc6:	4917      	ldr	r1, [pc, #92]	; (8002c24 <UART_CFG+0x550>)
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <UART_CFG+0x530>)
 8002bca:	f00c fa09 	bl	800efe0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <UART_CFG+0x530>)
 8002bd0:	f7fd fb26 	bl	8000220 <strlen>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2332      	movs	r3, #50	; 0x32
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <UART_CFG+0x530>)
 8002bdc:	480a      	ldr	r0, [pc, #40]	; (8002c08 <UART_CFG+0x534>)
 8002bde:	f006 fb5f 	bl	80092a0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002be2:	20c8      	movs	r0, #200	; 0xc8
 8002be4:	f000 fc84 	bl	80034f0 <HAL_Delay>


	buffer_in[0] = 0;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <UART_CFG+0x554>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	490d      	ldr	r1, [pc, #52]	; (8002c28 <UART_CFG+0x554>)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <UART_CFG+0x534>)
 8002bf4:	f006 fbea 	bl	80093cc <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0){HAL_Delay(1);}
 8002bf8:	e01b      	b.n	8002c32 <UART_CFG+0x55e>
 8002bfa:	bf00      	nop
 8002bfc:	20000918 	.word	0x20000918
 8002c00:	0800fae0 	.word	0x0800fae0
 8002c04:	20000c88 	.word	0x20000c88
 8002c08:	20000bfc 	.word	0x20000bfc
 8002c0c:	0800fafc 	.word	0x0800fafc
 8002c10:	0800fb24 	.word	0x0800fb24
 8002c14:	0800fb38 	.word	0x0800fb38
 8002c18:	0800fb74 	.word	0x0800fb74
 8002c1c:	0800fb88 	.word	0x0800fb88
 8002c20:	0800fc34 	.word	0x0800fc34
 8002c24:	0800fc4c 	.word	0x0800fc4c
 8002c28:	20000b10 	.word	0x20000b10
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 fc5f 	bl	80034f0 <HAL_Delay>
 8002c32:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <UART_CFG+0x7ac>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f8      	beq.n	8002c2c <UART_CFG+0x558>
	if (buffer_in[0] == 'y'){
 8002c3a:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <UART_CFG+0x7ac>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b79      	cmp	r3, #121	; 0x79
 8002c40:	f040 8119 	bne.w	8002e76 <UART_CFG+0x7a2>

		// Peak threshold
		sprintf(buffer_out, "\nCH#%d Volume norm = %d (default 50, 0..255) (full volume point, 100~4096). New:\t",chnl+1,(int) channel[chnl].peak_volume_norm);
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	7bba      	ldrb	r2, [r7, #14]
 8002c4a:	488e      	ldr	r0, [pc, #568]	; (8002e84 <UART_CFG+0x7b0>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4403      	add	r3, r0
 8002c56:	3306      	adds	r3, #6
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	498a      	ldr	r1, [pc, #552]	; (8002e88 <UART_CFG+0x7b4>)
 8002c5e:	488b      	ldr	r0, [pc, #556]	; (8002e8c <UART_CFG+0x7b8>)
 8002c60:	f00c f9be 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002c64:	4889      	ldr	r0, [pc, #548]	; (8002e8c <UART_CFG+0x7b8>)
 8002c66:	f7fd fadb 	bl	8000220 <strlen>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	2332      	movs	r3, #50	; 0x32
 8002c70:	4986      	ldr	r1, [pc, #536]	; (8002e8c <UART_CFG+0x7b8>)
 8002c72:	4887      	ldr	r0, [pc, #540]	; (8002e90 <UART_CFG+0x7bc>)
 8002c74:	f006 fb14 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002c78:	20c8      	movs	r0, #200	; 0xc8
 8002c7a:	f000 fc39 	bl	80034f0 <HAL_Delay>

		val = get_num_from_uart(3);
 8002c7e:	2003      	movs	r0, #3
 8002c80:	f7ff fcc0 	bl	8002604 <get_num_from_uart>
 8002c84:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	dd1d      	ble.n	8002cc8 <UART_CFG+0x5f4>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	dc1a      	bgt.n	8002cc8 <UART_CFG+0x5f4>
			channel[chnl].peak_volume_norm = val;
 8002c92:	7bba      	ldrb	r2, [r7, #14]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	b298      	uxth	r0, r3
 8002c98:	497a      	ldr	r1, [pc, #488]	; (8002e84 <UART_CFG+0x7b0>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3306      	adds	r3, #6
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New threshold = %d\n", (int)channel[chnl].peak_volume_norm);
 8002caa:	7bba      	ldrb	r2, [r7, #14]
 8002cac:	4975      	ldr	r1, [pc, #468]	; (8002e84 <UART_CFG+0x7b0>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3306      	adds	r3, #6
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4975      	ldr	r1, [pc, #468]	; (8002e94 <UART_CFG+0x7c0>)
 8002cc0:	4872      	ldr	r0, [pc, #456]	; (8002e8c <UART_CFG+0x7b8>)
 8002cc2:	f00c f98d 	bl	800efe0 <siprintf>
 8002cc6:	e00d      	b.n	8002ce4 <UART_CFG+0x610>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_volume_norm);
 8002cc8:	7bba      	ldrb	r2, [r7, #14]
 8002cca:	496e      	ldr	r1, [pc, #440]	; (8002e84 <UART_CFG+0x7b0>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3306      	adds	r3, #6
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	496e      	ldr	r1, [pc, #440]	; (8002e98 <UART_CFG+0x7c4>)
 8002cde:	486b      	ldr	r0, [pc, #428]	; (8002e8c <UART_CFG+0x7b8>)
 8002ce0:	f00c f97e 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ce4:	4869      	ldr	r0, [pc, #420]	; (8002e8c <UART_CFG+0x7b8>)
 8002ce6:	f7fd fa9b 	bl	8000220 <strlen>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	2332      	movs	r3, #50	; 0x32
 8002cf0:	4966      	ldr	r1, [pc, #408]	; (8002e8c <UART_CFG+0x7b8>)
 8002cf2:	4867      	ldr	r0, [pc, #412]	; (8002e90 <UART_CFG+0x7bc>)
 8002cf4:	f006 fad4 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002cf8:	20c8      	movs	r0, #200	; 0xc8
 8002cfa:	f000 fbf9 	bl	80034f0 <HAL_Delay>

		// min peak len
		sprintf(buffer_out, "\nCH#%d Peak min length = %d (default mesh 15, cymbal 4, 1..99) [x0.1ms]. New:\t",chnl+1,(int) channel[chnl].peak_min_length);
 8002cfe:	7bbb      	ldrb	r3, [r7, #14]
 8002d00:	1c59      	adds	r1, r3, #1
 8002d02:	7bba      	ldrb	r2, [r7, #14]
 8002d04:	485f      	ldr	r0, [pc, #380]	; (8002e84 <UART_CFG+0x7b0>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4403      	add	r3, r0
 8002d10:	330a      	adds	r3, #10
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	460a      	mov	r2, r1
 8002d16:	4961      	ldr	r1, [pc, #388]	; (8002e9c <UART_CFG+0x7c8>)
 8002d18:	485c      	ldr	r0, [pc, #368]	; (8002e8c <UART_CFG+0x7b8>)
 8002d1a:	f00c f961 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002d1e:	485b      	ldr	r0, [pc, #364]	; (8002e8c <UART_CFG+0x7b8>)
 8002d20:	f7fd fa7e 	bl	8000220 <strlen>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	2332      	movs	r3, #50	; 0x32
 8002d2a:	4958      	ldr	r1, [pc, #352]	; (8002e8c <UART_CFG+0x7b8>)
 8002d2c:	4858      	ldr	r0, [pc, #352]	; (8002e90 <UART_CFG+0x7bc>)
 8002d2e:	f006 fab7 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002d32:	20c8      	movs	r0, #200	; 0xc8
 8002d34:	f000 fbdc 	bl	80034f0 <HAL_Delay>

		val = get_num_from_uart(2);
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f7ff fc63 	bl	8002604 <get_num_from_uart>
 8002d3e:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<100)){
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	dd1d      	ble.n	8002d82 <UART_CFG+0x6ae>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b63      	cmp	r3, #99	; 0x63
 8002d4a:	dc1a      	bgt.n	8002d82 <UART_CFG+0x6ae>
			channel[chnl].peak_min_length = val;
 8002d4c:	7bba      	ldrb	r2, [r7, #14]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	b298      	uxth	r0, r3
 8002d52:	494c      	ldr	r1, [pc, #304]	; (8002e84 <UART_CFG+0x7b0>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	330a      	adds	r3, #10
 8002d60:	4602      	mov	r2, r0
 8002d62:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New min length = %d\n", (int)channel[chnl].peak_min_length);
 8002d64:	7bba      	ldrb	r2, [r7, #14]
 8002d66:	4947      	ldr	r1, [pc, #284]	; (8002e84 <UART_CFG+0x7b0>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	330a      	adds	r3, #10
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4949      	ldr	r1, [pc, #292]	; (8002ea0 <UART_CFG+0x7cc>)
 8002d7a:	4844      	ldr	r0, [pc, #272]	; (8002e8c <UART_CFG+0x7b8>)
 8002d7c:	f00c f930 	bl	800efe0 <siprintf>
 8002d80:	e00d      	b.n	8002d9e <UART_CFG+0x6ca>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_min_length);
 8002d82:	7bba      	ldrb	r2, [r7, #14]
 8002d84:	493f      	ldr	r1, [pc, #252]	; (8002e84 <UART_CFG+0x7b0>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	330a      	adds	r3, #10
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4940      	ldr	r1, [pc, #256]	; (8002e98 <UART_CFG+0x7c4>)
 8002d98:	483c      	ldr	r0, [pc, #240]	; (8002e8c <UART_CFG+0x7b8>)
 8002d9a:	f00c f921 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002d9e:	483b      	ldr	r0, [pc, #236]	; (8002e8c <UART_CFG+0x7b8>)
 8002da0:	f7fd fa3e 	bl	8000220 <strlen>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	2332      	movs	r3, #50	; 0x32
 8002daa:	4938      	ldr	r1, [pc, #224]	; (8002e8c <UART_CFG+0x7b8>)
 8002dac:	4838      	ldr	r0, [pc, #224]	; (8002e90 <UART_CFG+0x7bc>)
 8002dae:	f006 fa77 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002db2:	20c8      	movs	r0, #200	; 0xc8
 8002db4:	f000 fb9c 	bl	80034f0 <HAL_Delay>

		// max peak len
		sprintf(buffer_out, "\nCH#%d Peak max length = %d (default 200, 1..255) [x0.1ms]. New:\t",chnl+1, (int)channel[chnl].peak_max_length);
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	1c59      	adds	r1, r3, #1
 8002dbc:	7bba      	ldrb	r2, [r7, #14]
 8002dbe:	4831      	ldr	r0, [pc, #196]	; (8002e84 <UART_CFG+0x7b0>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4403      	add	r3, r0
 8002dca:	3308      	adds	r3, #8
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	460a      	mov	r2, r1
 8002dd0:	4934      	ldr	r1, [pc, #208]	; (8002ea4 <UART_CFG+0x7d0>)
 8002dd2:	482e      	ldr	r0, [pc, #184]	; (8002e8c <UART_CFG+0x7b8>)
 8002dd4:	f00c f904 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002dd8:	482c      	ldr	r0, [pc, #176]	; (8002e8c <UART_CFG+0x7b8>)
 8002dda:	f7fd fa21 	bl	8000220 <strlen>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	2332      	movs	r3, #50	; 0x32
 8002de4:	4929      	ldr	r1, [pc, #164]	; (8002e8c <UART_CFG+0x7b8>)
 8002de6:	482a      	ldr	r0, [pc, #168]	; (8002e90 <UART_CFG+0x7bc>)
 8002de8:	f006 fa5a 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002dec:	20c8      	movs	r0, #200	; 0xc8
 8002dee:	f000 fb7f 	bl	80034f0 <HAL_Delay>

		val = get_num_from_uart(3);
 8002df2:	2003      	movs	r0, #3
 8002df4:	f7ff fc06 	bl	8002604 <get_num_from_uart>
 8002df8:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	dd1d      	ble.n	8002e3c <UART_CFG+0x768>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2bff      	cmp	r3, #255	; 0xff
 8002e04:	dc1a      	bgt.n	8002e3c <UART_CFG+0x768>
			channel[chnl].peak_max_length = val;
 8002e06:	7bba      	ldrb	r2, [r7, #14]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	b298      	uxth	r0, r3
 8002e0c:	491d      	ldr	r1, [pc, #116]	; (8002e84 <UART_CFG+0x7b0>)
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3308      	adds	r3, #8
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New max length = %d\n", (int)channel[chnl].peak_max_length);
 8002e1e:	7bba      	ldrb	r2, [r7, #14]
 8002e20:	4918      	ldr	r1, [pc, #96]	; (8002e84 <UART_CFG+0x7b0>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	491d      	ldr	r1, [pc, #116]	; (8002ea8 <UART_CFG+0x7d4>)
 8002e34:	4815      	ldr	r0, [pc, #84]	; (8002e8c <UART_CFG+0x7b8>)
 8002e36:	f00c f8d3 	bl	800efe0 <siprintf>
 8002e3a:	e00d      	b.n	8002e58 <UART_CFG+0x784>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_max_length);
 8002e3c:	7bba      	ldrb	r2, [r7, #14]
 8002e3e:	4911      	ldr	r1, [pc, #68]	; (8002e84 <UART_CFG+0x7b0>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4911      	ldr	r1, [pc, #68]	; (8002e98 <UART_CFG+0x7c4>)
 8002e52:	480e      	ldr	r0, [pc, #56]	; (8002e8c <UART_CFG+0x7b8>)
 8002e54:	f00c f8c4 	bl	800efe0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <UART_CFG+0x7b8>)
 8002e5a:	f7fd f9e1 	bl	8000220 <strlen>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	2332      	movs	r3, #50	; 0x32
 8002e64:	4909      	ldr	r1, [pc, #36]	; (8002e8c <UART_CFG+0x7b8>)
 8002e66:	480a      	ldr	r0, [pc, #40]	; (8002e90 <UART_CFG+0x7bc>)
 8002e68:	f006 fa1a 	bl	80092a0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002e6c:	20c8      	movs	r0, #200	; 0xc8
 8002e6e:	f000 fb3f 	bl	80034f0 <HAL_Delay>
		rtrn = 2;
 8002e72:	2302      	movs	r3, #2
 8002e74:	73fb      	strb	r3, [r7, #15]
	}
	return rtrn;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e80:	20000b10 	.word	0x20000b10
 8002e84:	20000918 	.word	0x20000918
 8002e88:	0800fc84 	.word	0x0800fc84
 8002e8c:	20000c88 	.word	0x20000c88
 8002e90:	20000bfc 	.word	0x20000bfc
 8002e94:	0800fcd8 	.word	0x0800fcd8
 8002e98:	0800fae0 	.word	0x0800fae0
 8002e9c:	0800fcec 	.word	0x0800fcec
 8002ea0:	0800fd3c 	.word	0x0800fd3c
 8002ea4:	0800fd54 	.word	0x0800fd54
 8002ea8:	0800fd98 	.word	0x0800fd98

08002eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb0:	b672      	cpsid	i
}
 8002eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <Error_Handler+0x8>
	...

08002eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_MspInit+0x44>)
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_MspInit+0x44>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_MspInit+0x44>)
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_MspInit+0x44>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <HAL_MspInit+0x44>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_MspInit+0x44>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002eee:	f004 fcff 	bl	80078f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08e      	sub	sp, #56	; 0x38
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	f040 8092 	bne.w	8003048 <HAL_ADC_MspInit+0x148>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f24:	4b74      	ldr	r3, [pc, #464]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a73      	ldr	r2, [pc, #460]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 8002f2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f2e:	4b72      	ldr	r3, [pc, #456]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10b      	bne.n	8002f4e <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f36:	4b71      	ldr	r3, [pc, #452]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a70      	ldr	r2, [pc, #448]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4b6e      	ldr	r3, [pc, #440]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f4e:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5a:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4a64      	ldr	r2, [pc, #400]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f96:	2301      	movs	r3, #1
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4855      	ldr	r0, [pc, #340]	; (8003100 <HAL_ADC_MspInit+0x200>)
 8002faa:	f002 febb 	bl	8005d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc4:	f002 feae 	bl	8005d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	484a      	ldr	r0, [pc, #296]	; (8003104 <HAL_ADC_MspInit+0x204>)
 8002fdc:	f002 fea2 	bl	8005d24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fe0:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8002fe2:	4a4a      	ldr	r2, [pc, #296]	; (800310c <HAL_ADC_MspInit+0x20c>)
 8002fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fe6:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8002fe8:	2205      	movs	r2, #5
 8002fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fec:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff2:	4b45      	ldr	r3, [pc, #276]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8003008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003014:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800301a:	483b      	ldr	r0, [pc, #236]	; (8003108 <HAL_ADC_MspInit+0x208>)
 800301c:	f002 f8de 	bl	80051dc <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8003026:	f7ff ff41 	bl	8002eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a36      	ldr	r2, [pc, #216]	; (8003108 <HAL_ADC_MspInit+0x208>)
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
 8003030:	4a35      	ldr	r2, [pc, #212]	; (8003108 <HAL_ADC_MspInit+0x208>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2012      	movs	r0, #18
 800303c:	f002 f899 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003040:	2012      	movs	r0, #18
 8003042:	f002 f8b0 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003046:	e052      	b.n	80030ee <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a30      	ldr	r2, [pc, #192]	; (8003110 <HAL_ADC_MspInit+0x210>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d14d      	bne.n	80030ee <HAL_ADC_MspInit+0x1ee>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 800305a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_ADC_MspInit+0x1f8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10b      	bne.n	800307c <HAL_ADC_MspInit+0x17c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	4a24      	ldr	r2, [pc, #144]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 800306a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800306e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8003082:	f043 0320 	orr.w	r3, r3, #32
 8003086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_ADC_MspInit+0x1fc>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030ac:	2302      	movs	r3, #2
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b0:	2303      	movs	r3, #3
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	4619      	mov	r1, r3
 80030be:	4810      	ldr	r0, [pc, #64]	; (8003100 <HAL_ADC_MspInit+0x200>)
 80030c0:	f002 fe30 	bl	8005d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030c4:	23f0      	movs	r3, #240	; 0xf0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c8:	2303      	movs	r3, #3
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d4:	4619      	mov	r1, r3
 80030d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030da:	f002 fe23 	bl	8005d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2012      	movs	r0, #18
 80030e4:	f002 f845 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80030e8:	2012      	movs	r0, #18
 80030ea:	f002 f85c 	bl	80051a6 <HAL_NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3738      	adds	r7, #56	; 0x38
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000434 	.word	0x20000434
 80030fc:	40021000 	.word	0x40021000
 8003100:	48001400 	.word	0x48001400
 8003104:	48000400 	.word	0x48000400
 8003108:	200008b8 	.word	0x200008b8
 800310c:	40020008 	.word	0x40020008
 8003110:	50000100 	.word	0x50000100

08003114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d114      	bne.n	8003150 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6593      	str	r3, [r2, #88]	; 0x58
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2100      	movs	r1, #0
 8003142:	201c      	movs	r0, #28
 8003144:	f002 f815 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003148:	201c      	movs	r0, #28
 800314a:	f002 f82c 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800314e:	e02a      	b.n	80031a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_TIM_Base_MspInit+0xa0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d114      	bne.n	8003184 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	201e      	movs	r0, #30
 8003178:	f001 fffb 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800317c:	201e      	movs	r0, #30
 800317e:	f002 f812 	bl	80051a6 <HAL_NVIC_EnableIRQ>
}
 8003182:	e010      	b.n	80031a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <HAL_TIM_Base_MspInit+0xa4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10b      	bne.n	80031a6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 8003194:	f043 0310 	orr.w	r3, r3, #16
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_TIM_Base_MspInit+0x9c>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40001000 	.word	0x40001000

080031bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_UART_MspInit+0x8c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d130      	bne.n	8003240 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_UART_MspInit+0x90>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4a1a      	ldr	r2, [pc, #104]	; (800324c <HAL_UART_MspInit+0x90>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_UART_MspInit+0x90>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_UART_MspInit+0x90>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <HAL_UART_MspInit+0x90>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_UART_MspInit+0x90>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800320e:	230c      	movs	r3, #12
 8003210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800321e:	2307      	movs	r3, #7
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322c:	f002 fd7a 	bl	8005d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	2026      	movs	r0, #38	; 0x26
 8003236:	f001 ff9c 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800323a:	2026      	movs	r0, #38	; 0x26
 800323c:	f001 ffb3 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	3728      	adds	r7, #40	; 0x28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40004400 	.word	0x40004400
 800324c:	40021000 	.word	0x40021000

08003250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <NMI_Handler+0x4>

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <HardFault_Handler+0x4>

0800325c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <MemManage_Handler+0x4>

08003262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler+0x4>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <UsageFault_Handler+0x4>

0800326e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329c:	f000 f90a 	bl	80034b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <DMA1_Channel1_IRQHandler+0x10>)
 80032aa:	f002 f97a 	bl	80055a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200008b8 	.word	0x200008b8

080032b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032bc:	4803      	ldr	r0, [pc, #12]	; (80032cc <ADC1_2_IRQHandler+0x14>)
 80032be:	f000 fdbd 	bl	8003e3c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <ADC1_2_IRQHandler+0x18>)
 80032c4:	f000 fdba 	bl	8003e3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000848 	.word	0x20000848
 80032d0:	200006d8 	.word	0x200006d8

080032d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <USB_LP_IRQHandler+0x10>)
 80032da:	f002 fff6 	bl	80062ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20001d14 	.word	0x20001d14

080032e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <TIM2_IRQHandler+0x10>)
 80032ee:	f005 faf5 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000bb0 	.word	0x20000bb0

080032fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <TIM4_IRQHandler+0x10>)
 8003302:	f005 faeb 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000688 	.word	0x20000688

08003310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <USART2_IRQHandler+0x10>)
 8003316:	f006 f98d 	bl	8009634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000bfc 	.word	0x20000bfc

08003324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <_sbrk+0x5c>)
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <_sbrk+0x60>)
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <_sbrk+0x64>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <_sbrk+0x68>)
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d207      	bcs.n	8003364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003354:	f00b fe12 	bl	800ef7c <__errno>
 8003358:	4603      	mov	r3, r0
 800335a:	220c      	movs	r2, #12
 800335c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e009      	b.n	8003378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <_sbrk+0x64>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <_sbrk+0x64>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <_sbrk+0x64>)
 8003374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20008000 	.word	0x20008000
 8003384:	00000400 	.word	0x00000400
 8003388:	20000438 	.word	0x20000438
 800338c:	20002018 	.word	0x20002018

08003390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <SystemInit+0x28>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <SystemInit+0x28>)
 800339c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <SystemInit+0x28>)
 80033a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033aa:	609a      	str	r2, [r3, #8]
#endif
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80033c2:	490e      	ldr	r1, [pc, #56]	; (80033fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <LoopForever+0xe>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033c8:	e002      	b.n	80033d0 <LoopCopyDataInit>

080033ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ce:	3304      	adds	r3, #4

080033d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d4:	d3f9      	bcc.n	80033ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033d8:	4c0b      	ldr	r4, [pc, #44]	; (8003408 <LoopForever+0x16>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033dc:	e001      	b.n	80033e2 <LoopFillZerobss>

080033de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e0:	3204      	adds	r2, #4

080033e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e4:	d3fb      	bcc.n	80033de <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033e6:	f7ff ffd3 	bl	8003390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f00b fdcd 	bl	800ef88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ee:	f7fd fddd 	bl	8000fac <main>

080033f2 <LoopForever>:

LoopForever:
    b LoopForever
 80033f2:	e7fe      	b.n	80033f2 <LoopForever>
  ldr   r0, =_estack
 80033f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8003400:	0800fe70 	.word	0x0800fe70
  ldr r2, =_sbss
 8003404:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8003408:	20002018 	.word	0x20002018

0800340c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800340c:	e7fe      	b.n	800340c <COMP1_2_3_IRQHandler>

0800340e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003418:	2003      	movs	r0, #3
 800341a:	f001 fe9f 	bl	800515c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800341e:	2000      	movs	r0, #0
 8003420:	f000 f80e 	bl	8003440 <HAL_InitTick>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	71fb      	strb	r3, [r7, #7]
 800342e:	e001      	b.n	8003434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003430:	f7ff fd42 	bl	8002eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003434:	79fb      	ldrb	r3, [r7, #7]

}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_InitTick+0x68>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d022      	beq.n	800349a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_InitTick+0x6c>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_InitTick+0x68>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003460:	fbb1 f3f3 	udiv	r3, r1, r3
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f001 feaa 	bl	80051c2 <HAL_SYSTICK_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d809      	bhi.n	800348e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347a:	2200      	movs	r2, #0
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	f001 fe76 	bl	8005172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_InitTick+0x70>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e007      	b.n	800349e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e004      	b.n	800349e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e001      	b.n	800349e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	2000019c 	.word	0x2000019c
 80034ac:	20000194 	.word	0x20000194
 80034b0:	20000198 	.word	0x20000198

080034b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_IncTick+0x1c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_IncTick+0x20>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	4a03      	ldr	r2, [pc, #12]	; (80034d0 <HAL_IncTick+0x1c>)
 80034c4:	6013      	str	r3, [r2, #0]
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	20001070 	.word	0x20001070
 80034d4:	2000019c 	.word	0x2000019c

080034d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return uwTick;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_GetTick+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20001070 	.word	0x20001070

080034f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7ff ffee 	bl	80034d8 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d004      	beq.n	8003514 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_Delay+0x40>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003514:	bf00      	nop
 8003516:	f7ff ffdf 	bl	80034d8 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d8f7      	bhi.n	8003516 <HAL_Delay+0x26>
  {
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	2000019c 	.word	0x2000019c

08003534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3360      	adds	r3, #96	; 0x60
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <LL_ADC_SetOffset+0x44>)
 80035be:	4013      	ands	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	03fff000 	.word	0x03fff000

080035e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3360      	adds	r3, #96	; 0x60
 80035f2:	461a      	mov	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3360      	adds	r3, #96	; 0x60
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	431a      	orrs	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	461a      	mov	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	431a      	orrs	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3360      	adds	r3, #96	; 0x60
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	615a      	str	r2, [r3, #20]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3330      	adds	r3, #48	; 0x30
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	211f      	movs	r1, #31
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	401a      	ands	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	f003 011f 	and.w	r1, r3, #31
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	431a      	orrs	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3314      	adds	r3, #20
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0e5b      	lsrs	r3, r3, #25
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	4413      	add	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0d1b      	lsrs	r3, r3, #20
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2107      	movs	r1, #7
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	401a      	ands	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0d1b      	lsrs	r3, r3, #20
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	43db      	mvns	r3, r3
 80037ee:	401a      	ands	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0318 	and.w	r3, r3, #24
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037f8:	40d9      	lsrs	r1, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	400b      	ands	r3, r1
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	0007ffff 	.word	0x0007ffff

0800381c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 031f 	and.w	r3, r3, #31
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6093      	str	r3, [r2, #8]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388c:	d101      	bne.n	8003892 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038dc:	d101      	bne.n	80038e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <LL_ADC_IsEnabled+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_IsEnabled+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800394e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d101      	bne.n	800397e <LL_ADC_REG_IsConversionOngoing+0x18>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d101      	bne.n	80039a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e16b      	b.n	8003ca6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fa8f 	bl	8002f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff3f 	bl	8003878 <LL_ADC_IsDeepPowerDownEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff25 	bl	8003854 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff5a 	bl	80038c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff3e 	bl	80038a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a24:	4ba2      	ldr	r3, [pc, #648]	; (8003cb0 <HAL_ADC_Init+0x2fc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	4aa2      	ldr	r2, [pc, #648]	; (8003cb4 <HAL_ADC_Init+0x300>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a34:	e002      	b.n	8003a3c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f9      	bne.n	8003a36 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff3e 	bl	80038c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff77 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 8003a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 8106 	bne.w	8003c94 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 8102 	bne.w	8003c94 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff37 	bl	8003918 <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ab0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ab4:	f7ff ff30 	bl	8003918 <LL_ADC_IsEnabled>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	487f      	ldr	r0, [pc, #508]	; (8003cb8 <HAL_ADC_Init+0x304>)
 8003abc:	f7ff ff2c 	bl	8003918 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4323      	orrs	r3, r4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	487b      	ldr	r0, [pc, #492]	; (8003cbc <HAL_ADC_Init+0x308>)
 8003ad0:	f7ff fd30 	bl	8003534 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7f5b      	ldrb	r3, [r3, #29]
 8003ad8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ade:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ae4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003aea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d106      	bne.n	8003b10 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	045b      	lsls	r3, r3, #17
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d009      	beq.n	8003b2c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_ADC_Init+0x30c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff03 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 8003b60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff10 	bl	800398c <LL_ADC_INJ_IsConversionOngoing>
 8003b6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d16d      	bne.n	8003c50 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d16a      	bne.n	8003c50 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b86:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b96:	f023 0302 	bic.w	r3, r3, #2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003bba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6911      	ldr	r1, [r2, #16]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003bda:	e013      	b.n	8003c04 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d118      	bne.n	8003c40 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c24:	4311      	orrs	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c30:	430a      	orrs	r2, r1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e007      	b.n	8003c50 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d10c      	bne.n	8003c72 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f023 010f 	bic.w	r1, r3, #15
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c70:	e007      	b.n	8003c82 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 020f 	bic.w	r2, r2, #15
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c92:	e007      	b.n	8003ca4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000194 	.word	0x20000194
 8003cb4:	053e2d63 	.word	0x053e2d63
 8003cb8:	50000100 	.word	0x50000100
 8003cbc:	50000300 	.word	0x50000300
 8003cc0:	fff04007 	.word	0xfff04007

08003cc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ccc:	4859      	ldr	r0, [pc, #356]	; (8003e34 <HAL_ADC_Start+0x170>)
 8003cce:	f7ff fda5 	bl	800381c <LL_ADC_GetMultimode>
 8003cd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fe44 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 809f 	bne.w	8003e24 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_Start+0x30>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e09a      	b.n	8003e2a <HAL_ADC_Start+0x166>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fec5 	bl	8004a8c <ADC_Enable>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 8086 	bne.w	8003e1a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a44      	ldr	r2, [pc, #272]	; (8003e38 <HAL_ADC_Start+0x174>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d002      	beq.n	8003d32 <HAL_ADC_Start+0x6e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e001      	b.n	8003d36 <HAL_ADC_Start+0x72>
 8003d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d002      	beq.n	8003d44 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d106      	bne.n	8003d6c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	f023 0206 	bic.w	r2, r3, #6
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
 8003d6a:	e002      	b.n	8003d72 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	221c      	movs	r2, #28
 8003d78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_ADC_Start+0x174>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d002      	beq.n	8003d92 <HAL_ADC_Start+0xce>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e001      	b.n	8003d96 <HAL_ADC_Start+0xd2>
 8003d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d008      	beq.n	8003db0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d002      	beq.n	8003db0 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d114      	bne.n	8003dda <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fdb3 	bl	800393e <LL_ADC_REG_StartConversion>
 8003dd8:	e026      	b.n	8003e28 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <HAL_ADC_Start+0x174>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d002      	beq.n	8003df6 <HAL_ADC_Start+0x132>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	e001      	b.n	8003dfa <HAL_ADC_Start+0x136>
 8003df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dfa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00f      	beq.n	8003e28 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e18:	e006      	b.n	8003e28 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003e22:	e001      	b.n	8003e28 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
 8003e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	50000300 	.word	0x50000300
 8003e38:	50000100 	.word	0x50000100

08003e3c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e44:	2300      	movs	r3, #0
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e58:	4883      	ldr	r0, [pc, #524]	; (8004068 <HAL_ADC_IRQHandler+0x22c>)
 8003e5a:	f7ff fcdf 	bl	800381c <LL_ADC_GetMultimode>
 8003e5e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_ADC_IRQHandler+0x5e>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 ffeb 	bl	8004e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2202      	movs	r2, #2
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_IRQHandler+0x72>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8085 	beq.w	8003fc4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07f      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fbf9 	bl	80036d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d064      	beq.n	8003fb6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5e      	ldr	r2, [pc, #376]	; (800406c <HAL_ADC_IRQHandler+0x230>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_IRQHandler+0xc0>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e001      	b.n	8003f00 <HAL_ADC_IRQHandler+0xc4>
 8003efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d008      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d002      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d104      	bne.n	8003f24 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	e00d      	b.n	8003f40 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_ADC_IRQHandler+0x230>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d002      	beq.n	8003f34 <HAL_ADC_IRQHandler+0xf8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	e001      	b.n	8003f38 <HAL_ADC_IRQHandler+0xfc>
 8003f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d135      	bne.n	8003fb6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d12e      	bne.n	8003fb6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fd02 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d11a      	bne.n	8003f9e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 020c 	bic.w	r2, r2, #12
 8003f76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f9c:	e00b      	b.n	8003fb6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc ff42 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	220c      	movs	r2, #12
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0x19c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 809e 	beq.w	8004120 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8098 	beq.w	8004120 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fba2 	bl	8003756 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004012:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fb5d 	bl	80036d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800401e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_ADC_IRQHandler+0x230>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d002      	beq.n	8004030 <HAL_ADC_IRQHandler+0x1f4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	e001      	b.n	8004034 <HAL_ADC_IRQHandler+0x1f8>
 8004030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4293      	cmp	r3, r2
 800403a:	d008      	beq.n	800404e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b06      	cmp	r3, #6
 8004046:	d002      	beq.n	800404e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b07      	cmp	r3, #7
 800404c:	d104      	bne.n	8004058 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	e011      	b.n	800407c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a03      	ldr	r2, [pc, #12]	; (800406c <HAL_ADC_IRQHandler+0x230>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d006      	beq.n	8004070 <HAL_ADC_IRQHandler+0x234>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	e005      	b.n	8004074 <HAL_ADC_IRQHandler+0x238>
 8004068:	50000300 	.word	0x50000300
 800406c:	50000100 	.word	0x50000100
 8004070:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004074:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10c      	bne.n	800409c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004088:	2b00      	cmp	r3, #0
 800408a:	d142      	bne.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d03f      	beq.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	d13a      	bne.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d133      	bne.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d12e      	bne.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fc67 	bl	800398c <LL_ADC_INJ_IsConversionOngoing>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11a      	bne.n	80040fa <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d112      	bne.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80040f8:	e00b      	b.n	8004112 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	f043 0210 	orr.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fe80 	bl	8004e18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2260      	movs	r2, #96	; 0x60
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d011      	beq.n	800414e <HAL_ADC_IRQHandler+0x312>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f89f 	bl	8004284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <HAL_ADC_IRQHandler+0x342>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fe66 	bl	8004e40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_ADC_IRQHandler+0x372>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fe58 	bl	8004e54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d036      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ea>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d031      	beq.n	8004226 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80041ca:	2301      	movs	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	e014      	b.n	80041fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041d6:	4825      	ldr	r0, [pc, #148]	; (800426c <HAL_ADC_IRQHandler+0x430>)
 80041d8:	f7ff fb2e 	bl	8003838 <LL_ADC_GetMultiDMATransfer>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80041e2:	2301      	movs	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	e008      	b.n	80041fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80041f6:	2301      	movs	r3, #1
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10e      	bne.n	800421e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	f043 0202 	orr.w	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f83d 	bl	8004298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d018      	beq.n	8004262 <HAL_ADC_IRQHandler+0x426>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	f043 0208 	orr.w	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fde5 	bl	8004e2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004262:	bf00      	nop
 8004264:	3728      	adds	r7, #40	; 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	50000300 	.word	0x50000300

08004270 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0b6      	sub	sp, #216	; 0xd8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x22>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e3c7      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x7b2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fb43 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 83ac 	bne.w	8004a40 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	f7ff fa02 	bl	80036fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fb31 	bl	8003966 <LL_ADC_REG_IsConversionOngoing>
 8004304:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fb3d 	bl	800398c <LL_ADC_INJ_IsConversionOngoing>
 8004312:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 81d9 	bne.w	80046d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 81d4 	bne.w	80046d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004332:	d10f      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	4619      	mov	r1, r3
 8004340:	f7ff fa1c 	bl	800377c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f9b0 	bl	80036b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004352:	e00e      	b.n	8004372 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	461a      	mov	r2, r3
 8004362:	f7ff fa0b 	bl	800377c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f9a0 	bl	80036b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d022      	beq.n	80043da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6919      	ldr	r1, [r3, #16]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043a4:	f7ff f8fa 	bl	800359c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6919      	ldr	r1, [r3, #16]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff f946 	bl	8003646 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6919      	ldr	r1, [r3, #16]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	7f1b      	ldrb	r3, [r3, #28]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x124>
 80043ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ce:	e000      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x126>
 80043d0:	2300      	movs	r3, #0
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7ff f952 	bl	800367c <LL_ADC_SetOffsetSaturation>
 80043d8:	e17b      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff f8ff 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x15a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f8f4 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80043fc:	4603      	mov	r3, r0
 80043fe:	0e9b      	lsrs	r3, r3, #26
 8004400:	f003 021f 	and.w	r2, r3, #31
 8004404:	e01e      	b.n	8004444 <HAL_ADC_ConfigChannel+0x198>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f8e9 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004412:	4603      	mov	r3, r0
 8004414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800442c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004434:	2320      	movs	r3, #32
 8004436:	e004      	b.n	8004442 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <HAL_ADC_ConfigChannel+0x1b0>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	e018      	b.n	800448e <HAL_ADC_ConfigChannel+0x1e2>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e004      	b.n	800448e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	429a      	cmp	r2, r3
 8004490:	d106      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f8b8 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f89c 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x220>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff f891 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	0e9b      	lsrs	r3, r3, #26
 80044c6:	f003 021f 	and.w	r2, r3, #31
 80044ca:	e01e      	b.n	800450a <HAL_ADC_ConfigChannel+0x25e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f886 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80044f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e004      	b.n	8004508 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80044fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x276>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	0e9b      	lsrs	r3, r3, #26
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	e018      	b.n	8004554 <HAL_ADC_ConfigChannel+0x2a8>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800453a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800453e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e004      	b.n	8004554 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800454a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	429a      	cmp	r2, r3
 8004556:	d106      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f855 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff f839 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x2e6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f82e 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	e01e      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x324>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f823 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800459e:	4603      	mov	r3, r0
 80045a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a8:	fa93 f3a3 	rbit	r3, r3
 80045ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80045b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	e004      	b.n	80045ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80045c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d105      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x33c>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	e016      	b.n	8004616 <HAL_ADC_ConfigChannel+0x36a>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80045fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	e004      	b.n	8004616 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800460c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	429a      	cmp	r2, r3
 8004618:	d106      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fff4 	bl	8003610 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2103      	movs	r1, #3
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe ffd8 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x3a8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2103      	movs	r1, #3
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffcd 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	f003 021f 	and.w	r2, r3, #31
 8004652:	e017      	b.n	8004684 <HAL_ADC_ConfigChannel+0x3d8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2103      	movs	r1, #3
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe ffc2 	bl	80035e4 <LL_ADC_GetOffsetChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800466c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800466e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004676:	2320      	movs	r3, #32
 8004678:	e003      	b.n	8004682 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800467a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_ADC_ConfigChannel+0x3f0>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	e011      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x414>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80046ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80046b4:	2320      	movs	r3, #32
 80046b6:	e003      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80046b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d106      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2103      	movs	r1, #3
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe ff9f 	bl	8003610 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f91e 	bl	8003918 <LL_ADC_IsEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8140 	bne.w	8004964 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f7ff f86f 	bl	80037d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4a8f      	ldr	r2, [pc, #572]	; (8004938 <HAL_ADC_ConfigChannel+0x68c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	f040 8131 	bne.w	8004964 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_ADC_ConfigChannel+0x47e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	0e9b      	lsrs	r3, r3, #26
 8004718:	3301      	adds	r3, #1
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2b09      	cmp	r3, #9
 8004720:	bf94      	ite	ls
 8004722:	2301      	movls	r3, #1
 8004724:	2300      	movhi	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	e019      	b.n	800475e <HAL_ADC_ConfigChannel+0x4b2>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800473a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800473c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004742:	2320      	movs	r3, #32
 8004744:	e003      	b.n	800474e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3301      	adds	r3, #1
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2b09      	cmp	r3, #9
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800475e:	2b00      	cmp	r3, #0
 8004760:	d079      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_ADC_ConfigChannel+0x4d2>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	3301      	adds	r3, #1
 8004776:	069b      	lsls	r3, r3, #26
 8004778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800477c:	e015      	b.n	80047aa <HAL_ADC_ConfigChannel+0x4fe>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004796:	2320      	movs	r3, #32
 8004798:	e003      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	069b      	lsls	r3, r3, #26
 80047a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x51e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	3301      	adds	r3, #1
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	e017      	b.n	80047fa <HAL_ADC_ConfigChannel+0x54e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80047dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80047e2:	2320      	movs	r3, #32
 80047e4:	e003      	b.n	80047ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80047e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e8:	fab3 f383 	clz	r3, r3
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	ea42 0103 	orr.w	r1, r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x574>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	0e9b      	lsrs	r3, r3, #26
 8004810:	3301      	adds	r3, #1
 8004812:	f003 021f 	and.w	r2, r3, #31
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	e018      	b.n	8004852 <HAL_ADC_ConfigChannel+0x5a6>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e003      	b.n	8004844 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f003 021f 	and.w	r2, r3, #31
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004852:	430b      	orrs	r3, r1
 8004854:	e081      	b.n	800495a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x5c6>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0e9b      	lsrs	r3, r3, #26
 8004868:	3301      	adds	r3, #1
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004870:	e015      	b.n	800489e <HAL_ADC_ConfigChannel+0x5f2>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800488a:	2320      	movs	r3, #32
 800488c:	e003      	b.n	8004896 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3301      	adds	r3, #1
 8004898:	069b      	lsls	r3, r3, #26
 800489a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_ADC_ConfigChannel+0x612>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	0e9b      	lsrs	r3, r3, #26
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	e017      	b.n	80048ee <HAL_ADC_ConfigChannel+0x642>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	61fb      	str	r3, [r7, #28]
  return result;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80048d6:	2320      	movs	r3, #32
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	ea42 0103 	orr.w	r1, r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <HAL_ADC_ConfigChannel+0x66e>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	0e9b      	lsrs	r3, r3, #26
 8004904:	3301      	adds	r3, #1
 8004906:	f003 021f 	and.w	r2, r3, #31
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	3b1e      	subs	r3, #30
 8004912:	051b      	lsls	r3, r3, #20
 8004914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004918:	e01e      	b.n	8004958 <HAL_ADC_ConfigChannel+0x6ac>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	613b      	str	r3, [r7, #16]
  return result;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004932:	2320      	movs	r3, #32
 8004934:	e006      	b.n	8004944 <HAL_ADC_ConfigChannel+0x698>
 8004936:	bf00      	nop
 8004938:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f003 021f 	and.w	r2, r3, #31
 800494a:	4613      	mov	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	3b1e      	subs	r3, #30
 8004952:	051b      	lsls	r3, r3, #20
 8004954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004958:	430b      	orrs	r3, r1
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	4619      	mov	r1, r3
 8004960:	f7fe ff0c 	bl	800377c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <HAL_ADC_ConfigChannel+0x7bc>)
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d070      	beq.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004970:	483e      	ldr	r0, [pc, #248]	; (8004a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004972:	f7fe fe05 	bl	8003580 <LL_ADC_GetCommonPathInternalCh>
 8004976:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <HAL_ADC_ConfigChannel+0x7c4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_ADC_ConfigChannel+0x6e2>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3a      	ldr	r2, [pc, #232]	; (8004a74 <HAL_ADC_ConfigChannel+0x7c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d126      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800498e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d120      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a2:	d156      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ac:	4619      	mov	r1, r3
 80049ae:	482f      	ldr	r0, [pc, #188]	; (8004a6c <HAL_ADC_ConfigChannel+0x7c0>)
 80049b0:	f7fe fdd3 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80049b4:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <HAL_ADC_ConfigChannel+0x7cc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	4a30      	ldr	r2, [pc, #192]	; (8004a7c <HAL_ADC_ConfigChannel+0x7d0>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	099a      	lsrs	r2, r3, #6
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049cc:	e002      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f9      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049da:	e03a      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <HAL_ADC_ConfigChannel+0x7d4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d113      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x762>
 80049e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <HAL_ADC_ConfigChannel+0x7d8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02a      	beq.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a04:	4619      	mov	r1, r3
 8004a06:	4819      	ldr	r0, [pc, #100]	; (8004a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004a08:	f7fe fda7 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a0c:	e021      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d11c      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d011      	beq.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a36:	4619      	mov	r1, r3
 8004a38:	480c      	ldr	r0, [pc, #48]	; (8004a6c <HAL_ADC_ConfigChannel+0x7c0>)
 8004a3a:	f7fe fd8e 	bl	800355a <LL_ADC_SetCommonPathInternalCh>
 8004a3e:	e008      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	37d8      	adds	r7, #216	; 0xd8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	80080000 	.word	0x80080000
 8004a6c:	50000300 	.word	0x50000300
 8004a70:	c3210000 	.word	0xc3210000
 8004a74:	90c00010 	.word	0x90c00010
 8004a78:	20000194 	.word	0x20000194
 8004a7c:	053e2d63 	.word	0x053e2d63
 8004a80:	c7520000 	.word	0xc7520000
 8004a84:	50000100 	.word	0x50000100
 8004a88:	cb840000 	.word	0xcb840000

08004a8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe ff3d 	bl	8003918 <LL_ADC_IsEnabled>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d146      	bne.n	8004b32 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <ADC_Enable+0xb0>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	f043 0210 	orr.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e032      	b.n	8004b34 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe ff0c 	bl	80038f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fcfe 	bl	80034d8 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ade:	e021      	b.n	8004b24 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe ff17 	bl	8003918 <LL_ADC_IsEnabled>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fefb 	bl	80038f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004afa:	f7fe fced 	bl	80034d8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d90d      	bls.n	8004b24 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	f043 0210 	orr.w	r2, r3, #16
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d1d6      	bne.n	8004ae0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	8000003f 	.word	0x8000003f

08004b40 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d14b      	bne.n	8004bf2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d021      	beq.n	8004bb8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fdad 	bl	80036d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d032      	beq.n	8004bea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d12b      	bne.n	8004bea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11f      	bne.n	8004bea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bb6:	e018      	b.n	8004bea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d111      	bne.n	8004bea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d105      	bne.n	8004bea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7fc f928 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bf0:	e00e      	b.n	8004c10 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff fb4a 	bl	8004298 <HAL_ADC_ErrorCallback>
}
 8004c04:	e004      	b.n	8004c10 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff fb22 	bl	8004270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	f043 0204 	orr.w	r2, r3, #4
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff fb1c 	bl	8004298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <LL_ADC_IsEnabled>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <LL_ADC_IsEnabled+0x18>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <LL_ADC_IsEnabled+0x1a>
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <LL_ADC_REG_StartConversion>:
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ca2:	f043 0204 	orr.w	r2, r3, #4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d101      	bne.n	8004cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b0a2      	sub	sp, #136	; 0x88
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ffe2 	bl	8004cb6 <LL_ADC_REG_IsConversionOngoing>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e07e      	b.n	8004dfa <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e077      	b.n	8004dfa <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d1a:	d102      	bne.n	8004d22 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8004d1c:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e001      	b.n	8004d26 <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e05a      	b.n	8004dfa <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fea1 	bl	8004a8c <ADC_Enable>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8004d50:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fe95 	bl	8004a8c <ADC_Enable>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004d68:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d13e      	bne.n	8004dee <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8004da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	221c      	movs	r2, #28
 8004dae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0210 	orr.w	r2, r2, #16
 8004dc6:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f000 faa8 	bl	800532c <HAL_DMA_Start_IT>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff ff51 	bl	8004c8e <LL_ADC_REG_StartConversion>
 8004dec:	e003      	b.n	8004df6 <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004df6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3788      	adds	r7, #136	; 0x88
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	50000100 	.word	0x50000100
 8004e08:	08004b41 	.word	0x08004b41
 8004e0c:	08004c19 	.word	0x08004c19
 8004e10:	08004c35 	.word	0x08004c35
 8004e14:	50000300 	.word	0x50000300

08004e18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b0a1      	sub	sp, #132	; 0x84
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e087      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eaa:	d102      	bne.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004eac:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	e001      	b.n	8004eb6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e06a      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff feed 	bl	8004cb6 <LL_ADC_REG_IsConversionOngoing>
 8004edc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fee7 	bl	8004cb6 <LL_ADC_REG_IsConversionOngoing>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d14c      	bne.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d149      	bne.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004ef6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d028      	beq.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f12:	035b      	lsls	r3, r3, #13
 8004f14:	430b      	orrs	r3, r1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f20:	f7ff fea2 	bl	8004c68 <LL_ADC_IsEnabled>
 8004f24:	4604      	mov	r4, r0
 8004f26:	4823      	ldr	r0, [pc, #140]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004f28:	f7ff fe9e 	bl	8004c68 <LL_ADC_IsEnabled>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4323      	orrs	r3, r4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d133      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f3c:	f023 030f 	bic.w	r3, r3, #15
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	6811      	ldr	r1, [r2, #0]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f4e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f50:	e024      	b.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f62:	f7ff fe81 	bl	8004c68 <LL_ADC_IsEnabled>
 8004f66:	4604      	mov	r4, r0
 8004f68:	4812      	ldr	r0, [pc, #72]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004f6a:	f7ff fe7d 	bl	8004c68 <LL_ADC_IsEnabled>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4323      	orrs	r3, r4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d112      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f86:	e009      	b.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f9a:	e000      	b.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3784      	adds	r7, #132	; 0x84
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	50000100 	.word	0x50000100
 8004fb8:	50000300 	.word	0x50000300

08004fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fee:	4a04      	ldr	r2, [pc, #16]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	60d3      	str	r3, [r2, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__NVIC_GetPriorityGrouping+0x18>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	f003 0307 	and.w	r3, r3, #7
}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db0b      	blt.n	800504a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	f003 021f 	and.w	r2, r3, #31
 8005038:	4907      	ldr	r1, [pc, #28]	; (8005058 <__NVIC_EnableIRQ+0x38>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2001      	movs	r0, #1
 8005042:	fa00 f202 	lsl.w	r2, r0, r2
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e100 	.word	0xe000e100

0800505c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db0a      	blt.n	8005086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	490c      	ldr	r1, [pc, #48]	; (80050a8 <__NVIC_SetPriority+0x4c>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	440b      	add	r3, r1
 8005080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005084:	e00a      	b.n	800509c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4908      	ldr	r1, [pc, #32]	; (80050ac <__NVIC_SetPriority+0x50>)
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	3b04      	subs	r3, #4
 8005094:	0112      	lsls	r2, r2, #4
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	440b      	add	r3, r1
 800509a:	761a      	strb	r2, [r3, #24]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000e100 	.word	0xe000e100
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f1c3 0307 	rsb	r3, r3, #7
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf28      	it	cs
 80050ce:	2304      	movcs	r3, #4
 80050d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3304      	adds	r3, #4
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d902      	bls.n	80050e0 <NVIC_EncodePriority+0x30>
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3b03      	subs	r3, #3
 80050de:	e000      	b.n	80050e2 <NVIC_EncodePriority+0x32>
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	401a      	ands	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f8:	f04f 31ff 	mov.w	r1, #4294967295
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	43d9      	mvns	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	4313      	orrs	r3, r2
         );
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005128:	d301      	bcc.n	800512e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800512a:	2301      	movs	r3, #1
 800512c:	e00f      	b.n	800514e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <SysTick_Config+0x40>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005136:	210f      	movs	r1, #15
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	f7ff ff8e 	bl	800505c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <SysTick_Config+0x40>)
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <SysTick_Config+0x40>)
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000e010 	.word	0xe000e010

0800515c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ff29 	bl	8004fbc <__NVIC_SetPriorityGrouping>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005180:	f7ff ff40 	bl	8005004 <__NVIC_GetPriorityGrouping>
 8005184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff ff90 	bl	80050b0 <NVIC_EncodePriority>
 8005190:	4602      	mov	r2, r0
 8005192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff5f 	bl	800505c <__NVIC_SetPriority>
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff33 	bl	8005020 <__NVIC_EnableIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ffa4 	bl	8005118 <SysTick_Config>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e08d      	b.n	800530a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b47      	ldr	r3, [pc, #284]	; (8005314 <HAL_DMA_Init+0x138>)
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d80f      	bhi.n	800521a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <HAL_DMA_Init+0x13c>)
 8005202:	4413      	add	r3, r2
 8005204:	4a45      	ldr	r2, [pc, #276]	; (800531c <HAL_DMA_Init+0x140>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	009a      	lsls	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a42      	ldr	r2, [pc, #264]	; (8005320 <HAL_DMA_Init+0x144>)
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
 8005218:	e00e      	b.n	8005238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_DMA_Init+0x148>)
 8005222:	4413      	add	r3, r2
 8005224:	4a3d      	ldr	r2, [pc, #244]	; (800531c <HAL_DMA_Init+0x140>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <HAL_DMA_Init+0x14c>)
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa82 	bl	8005794 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005298:	d102      	bne.n	80052a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_DMA_Init+0x104>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d80c      	bhi.n	80052e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 faa2 	bl	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e008      	b.n	80052f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40020407 	.word	0x40020407
 8005318:	bffdfff8 	.word	0xbffdfff8
 800531c:	cccccccd 	.word	0xcccccccd
 8005320:	40020000 	.word	0x40020000
 8005324:	bffdfbf8 	.word	0xbffdfbf8
 8005328:	40020400 	.word	0x40020400

0800532c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_DMA_Start_IT+0x20>
 8005348:	2302      	movs	r3, #2
 800534a:	e066      	b.n	800541a <HAL_DMA_Start_IT+0xee>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d155      	bne.n	800540c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f9c7 	bl	8005718 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 020e 	orr.w	r2, r2, #14
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e00f      	b.n	80053c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 020a 	orr.w	r2, r2, #10
 80053c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e005      	b.n	8005418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005414:	2302      	movs	r3, #2
 8005416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d005      	beq.n	8005446 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e037      	b.n	80054b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 020e 	bic.w	r2, r2, #14
 8005454:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005464:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f003 021f 	and.w	r2, r3, #31
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005492:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d00d      	beq.n	8005508 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2204      	movs	r2, #4
 80054f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e047      	b.n	8005598 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 020e 	bic.w	r2, r2, #14
 8005516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 021f 	and.w	r2, r3, #31
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f202 	lsl.w	r2, r1, r2
 800554a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005554:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800556c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005576:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
    }
  }
  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2204      	movs	r2, #4
 80055c4:	409a      	lsls	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d026      	beq.n	800561c <HAL_DMA_IRQHandler+0x7a>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d021      	beq.n	800561c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0204 	bic.w	r2, r2, #4
 80055f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f003 021f 	and.w	r2, r3, #31
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2104      	movs	r1, #4
 8005604:	fa01 f202 	lsl.w	r2, r1, r2
 8005608:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	d071      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800561a:	e06c      	b.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2202      	movs	r2, #2
 8005626:	409a      	lsls	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02e      	beq.n	800568e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d029      	beq.n	800568e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 020a 	bic.w	r2, r2, #10
 8005656:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f003 021f 	and.w	r2, r3, #31
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2102      	movs	r1, #2
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d038      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800568c:	e033      	b.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2208      	movs	r2, #8
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02a      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d025      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 020e 	bic.w	r2, r2, #14
 80056ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	f003 021f 	and.w	r2, r3, #31
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f202 	lsl.w	r2, r1, r2
 80056ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
}
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800572e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005740:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f003 021f 	and.w	r2, r3, #31
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	2101      	movs	r1, #1
 8005750:	fa01 f202 	lsl.w	r2, r1, r2
 8005754:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b10      	cmp	r3, #16
 8005764:	d108      	bne.n	8005778 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005776:	e007      	b.n	8005788 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	60da      	str	r2, [r3, #12]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d802      	bhi.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e001      	b.n	80057b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80057b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3b08      	subs	r3, #8
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	009a      	lsls	r2, r3, #2
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a0b      	ldr	r2, [pc, #44]	; (800580c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2201      	movs	r2, #1
 80057e8:	409a      	lsls	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40020407 	.word	0x40020407
 8005800:	40020800 	.word	0x40020800
 8005804:	40020820 	.word	0x40020820
 8005808:	cccccccd 	.word	0xcccccccd
 800580c:	40020880 	.word	0x40020880

08005810 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005832:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b01      	subs	r3, #1
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	1000823f 	.word	0x1000823f
 8005854:	40020940 	.word	0x40020940

08005858 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_FLASH_Program+0xa4>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_FLASH_Program+0x1e>
 8005872:	2302      	movs	r3, #2
 8005874:	e03e      	b.n	80058f4 <HAL_FLASH_Program+0x9c>
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <HAL_FLASH_Program+0xa4>)
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800587c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005880:	f000 f87c 	bl	800597c <FLASH_WaitForLastOperation>
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d12e      	bne.n	80058ec <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_FLASH_Program+0xa4>)
 8005890:	2200      	movs	r2, #0
 8005892:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d107      	bne.n	80058aa <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800589a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589e:	68b8      	ldr	r0, [r7, #8]
 80058a0:	f000 f8c0 	bl	8005a24 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80058a4:	2301      	movs	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	e010      	b.n	80058cc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d002      	beq.n	80058b6 <HAL_FLASH_Program+0x5e>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d10a      	bne.n	80058cc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	68b8      	ldr	r0, [r7, #8]
 80058bc:	f000 f8d8 	bl	8005a70 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d102      	bne.n	80058cc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80058c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058ca:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058d0:	f000 f854 	bl	800597c <FLASH_WaitForLastOperation>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HAL_FLASH_Program+0xa8>)
 80058e0:	695a      	ldr	r2, [r3, #20]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	4906      	ldr	r1, [pc, #24]	; (8005900 <HAL_FLASH_Program+0xa8>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <HAL_FLASH_Program+0xa4>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200001a0 	.word	0x200001a0
 8005900:	40022000 	.word	0x40022000

08005904 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_FLASH_Unlock+0x38>)
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da0b      	bge.n	800592e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_FLASH_Unlock+0x38>)
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <HAL_FLASH_Unlock+0x3c>)
 800591a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <HAL_FLASH_Unlock+0x38>)
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <HAL_FLASH_Unlock+0x40>)
 8005920:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_FLASH_Unlock+0x38>)
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	da01      	bge.n	800592e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800592e:	79fb      	ldrb	r3, [r7, #7]
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40022000 	.word	0x40022000
 8005940:	45670123 	.word	0x45670123
 8005944:	cdef89ab 	.word	0xcdef89ab

08005948 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_FLASH_Lock+0x30>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <HAL_FLASH_Lock+0x30>)
 8005958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800595c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_FLASH_Lock+0x30>)
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da01      	bge.n	800596a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800596a:	79fb      	ldrb	r3, [r7, #7]
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40022000 	.word	0x40022000

0800597c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005984:	f7fd fda8 	bl	80034d8 <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800598a:	e009      	b.n	80059a0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800598c:	f7fd fda4 	bl	80034d8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d201      	bcs.n	80059a0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e038      	b.n	8005a12 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059a0:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ac:	d0ee      	beq.n	800598c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059ae:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80059b6:	4013      	ands	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <FLASH_WaitForLastOperation+0xa4>)
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <FLASH_WaitForLastOperation+0xa4>)
 80059ca:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <FLASH_WaitForLastOperation+0x6a>
 80059d6:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <FLASH_WaitForLastOperation+0x7e>
 80059f0:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059f8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e009      	b.n	8005a12 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <FLASH_WaitForLastOperation+0xa0>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	200001a0 	.word	0x200001a0

08005a24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a30:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <FLASH_Program_DoubleWord+0x48>)
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <FLASH_Program_DoubleWord+0x48>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005a42:	f3bf 8f6f 	isb	sy
}
 8005a46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	000a      	movs	r2, r1
 8005a56:	2300      	movs	r3, #0
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	3104      	adds	r1, #4
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40022000 	.word	0x40022000

08005a70 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a7a:	2340      	movs	r3, #64	; 0x40
 8005a7c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <FLASH_Program_Fast+0x68>)
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <FLASH_Program_Fast+0x68>)
 8005a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a92:	f3ef 8310 	mrs	r3, PRIMASK
 8005a96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a98:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a9c:	b672      	cpsid	i
}
 8005a9e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	617b      	str	r3, [r7, #20]
    row_index--;
 8005ab4:	7ffb      	ldrb	r3, [r7, #31]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005aba:	7ffb      	ldrb	r3, [r7, #31]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ef      	bne.n	8005aa0 <FLASH_Program_Fast+0x30>
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005acc:	bf00      	nop
 8005ace:	3724      	adds	r7, #36	; 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40022000 	.word	0x40022000

08005adc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_FLASHEx_Erase+0x16>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e089      	b.n	8005c06 <HAL_FLASHEx_Erase+0x12a>
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005afc:	f7ff ff3e 	bl	800597c <FLASH_WaitForLastOperation>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d179      	bne.n	8005bfe <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b10:	4b40      	ldr	r3, [pc, #256]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b1c:	4b3d      	ldr	r3, [pc, #244]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a3c      	ldr	r2, [pc, #240]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b26:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b28:	4b3a      	ldr	r3, [pc, #232]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b34:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a36      	ldr	r2, [pc, #216]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005b40:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005b42:	2203      	movs	r2, #3
 8005b44:	771a      	strb	r2, [r3, #28]
 8005b46:	e016      	b.n	8005b76 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005b48:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	771a      	strb	r2, [r3, #28]
 8005b4e:	e012      	b.n	8005b76 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b50:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b5c:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a2c      	ldr	r2, [pc, #176]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b66:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005b68:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	771a      	strb	r2, [r3, #28]
 8005b6e:	e002      	b.n	8005b76 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b70:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d111      	bne.n	8005ba2 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f848 	bl	8005c18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b8c:	f7ff fef6 	bl	800597c <FLASH_WaitForLastOperation>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005b9a:	f023 0304 	bic.w	r3, r3, #4
 8005b9e:	6153      	str	r3, [r2, #20]
 8005ba0:	e02b      	b.n	8005bfa <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	e01b      	b.n	8005bea <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	f000 f84b 	bl	8005c54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bc2:	f7ff fedb 	bl	800597c <FLASH_WaitForLastOperation>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <HAL_FLASHEx_Erase+0x138>)
 8005bd0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005bd4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	601a      	str	r2, [r3, #0]
          break;
 8005be2:	e00a      	b.n	8005bfa <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3db      	bcc.n	8005bb2 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005bfa:	f000 f84f 	bl	8005c9c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <HAL_FLASHEx_Erase+0x134>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]

  return status;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200001a0 	.word	0x200001a0
 8005c14:	40022000 	.word	0x40022000

08005c18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <FLASH_MassErase+0x38>)
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <FLASH_MassErase+0x38>)
 8005c30:	f043 0304 	orr.w	r3, r3, #4
 8005c34:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <FLASH_MassErase+0x38>)
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <FLASH_MassErase+0x38>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	6153      	str	r3, [r2, #20]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40022000 	.word	0x40022000

08005c54 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c6e:	490a      	ldr	r1, [pc, #40]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	4a07      	ldr	r2, [pc, #28]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c7a:	f043 0302 	orr.w	r3, r3, #2
 8005c7e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <FLASH_PageErase+0x44>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	6153      	str	r3, [r2, #20]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40022000 	.word	0x40022000

08005c9c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <FLASH_FlushCaches+0x80>)
 8005ca4:	7f1b      	ldrb	r3, [r3, #28]
 8005ca6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d002      	beq.n	8005cb4 <FLASH_FlushCaches+0x18>
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d111      	bne.n	8005cd8 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d002      	beq.n	8005ce4 <FLASH_FlushCaches+0x48>
 8005cde:	79fb      	ldrb	r3, [r7, #7]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d111      	bne.n	8005d08 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ce4:	4b0e      	ldr	r3, [pc, #56]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cfc:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <FLASH_FlushCaches+0x84>)
 8005d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d06:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <FLASH_FlushCaches+0x80>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	200001a0 	.word	0x200001a0
 8005d20:	40022000 	.word	0x40022000

08005d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d32:	e15a      	b.n	8005fea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 814c 	beq.w	8005fe4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d00b      	beq.n	8005d6c <HAL_GPIO_Init+0x48>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d007      	beq.n	8005d6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d60:	2b11      	cmp	r3, #17
 8005d62:	d003      	beq.n	8005d6c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b12      	cmp	r3, #18
 8005d6a:	d130      	bne.n	8005dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	2203      	movs	r2, #3
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005da2:	2201      	movs	r2, #1
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4013      	ands	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0201 	and.w	r2, r3, #1
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	2203      	movs	r2, #3
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0xea>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b12      	cmp	r3, #18
 8005e0c:	d123      	bne.n	8005e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	08da      	lsrs	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3208      	adds	r2, #8
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	220f      	movs	r2, #15
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	08da      	lsrs	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3208      	adds	r2, #8
 8005e50:	6939      	ldr	r1, [r7, #16]
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	2203      	movs	r2, #3
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 0203 	and.w	r2, r3, #3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a6 	beq.w	8005fe4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e98:	4b5b      	ldr	r3, [pc, #364]	; (8006008 <HAL_GPIO_Init+0x2e4>)
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	4a5a      	ldr	r2, [pc, #360]	; (8006008 <HAL_GPIO_Init+0x2e4>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8005ea4:	4b58      	ldr	r3, [pc, #352]	; (8006008 <HAL_GPIO_Init+0x2e4>)
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eb0:	4a56      	ldr	r2, [pc, #344]	; (800600c <HAL_GPIO_Init+0x2e8>)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	089b      	lsrs	r3, r3, #2
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	220f      	movs	r2, #15
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eda:	d01f      	beq.n	8005f1c <HAL_GPIO_Init+0x1f8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a4c      	ldr	r2, [pc, #304]	; (8006010 <HAL_GPIO_Init+0x2ec>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d019      	beq.n	8005f18 <HAL_GPIO_Init+0x1f4>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a4b      	ldr	r2, [pc, #300]	; (8006014 <HAL_GPIO_Init+0x2f0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_GPIO_Init+0x1f0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a4a      	ldr	r2, [pc, #296]	; (8006018 <HAL_GPIO_Init+0x2f4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00d      	beq.n	8005f10 <HAL_GPIO_Init+0x1ec>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a49      	ldr	r2, [pc, #292]	; (800601c <HAL_GPIO_Init+0x2f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <HAL_GPIO_Init+0x1e8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a48      	ldr	r2, [pc, #288]	; (8006020 <HAL_GPIO_Init+0x2fc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_GPIO_Init+0x1e4>
 8005f04:	2305      	movs	r3, #5
 8005f06:	e00a      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f08:	2306      	movs	r3, #6
 8005f0a:	e008      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	e006      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f10:	2303      	movs	r3, #3
 8005f12:	e004      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e002      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <HAL_GPIO_Init+0x1fa>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	f002 0203 	and.w	r2, r2, #3
 8005f24:	0092      	lsls	r2, r2, #2
 8005f26:	4093      	lsls	r3, r2
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f2e:	4937      	ldr	r1, [pc, #220]	; (800600c <HAL_GPIO_Init+0x2e8>)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	3302      	adds	r3, #2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f3c:	4b39      	ldr	r3, [pc, #228]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f60:	4a30      	ldr	r2, [pc, #192]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4013      	ands	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f8a:	4a26      	ldr	r2, [pc, #152]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f90:	4b24      	ldr	r3, [pc, #144]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fde:	4a11      	ldr	r2, [pc, #68]	; (8006024 <HAL_GPIO_Init+0x300>)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f47f ae9d 	bne.w	8005d34 <HAL_GPIO_Init+0x10>
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40021000 	.word	0x40021000
 800600c:	40010000 	.word	0x40010000
 8006010:	48000400 	.word	0x48000400
 8006014:	48000800 	.word	0x48000800
 8006018:	48000c00 	.word	0x48000c00
 800601c:	48001000 	.word	0x48001000
 8006020:	48001400 	.word	0x48001400
 8006024:	40010400 	.word	0x40010400

08006028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	887b      	ldrh	r3, [r7, #2]
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
 8006044:	e001      	b.n	800604a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
 8006064:	4613      	mov	r3, r2
 8006066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800606e:	887a      	ldrh	r2, [r7, #2]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006074:	e002      	b.n	800607c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4013      	ands	r3, r2
 80060a0:	041a      	lsls	r2, r3, #16
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	43d9      	mvns	r1, r3
 80060a6:	887b      	ldrh	r3, [r7, #2]
 80060a8:	400b      	ands	r3, r1
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	619a      	str	r2, [r3, #24]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	b08b      	sub	sp, #44	; 0x2c
 80060c0:	af06      	add	r7, sp, #24
 80060c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0d7      	b.n	800627e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f008 fc5a 	bl	800e99c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2203      	movs	r2, #3
 80060ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f004 fb96 	bl	800a826 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	e04c      	b.n	800619a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	440b      	add	r3, r1
 8006110:	3301      	adds	r3, #1
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	b298      	uxth	r0, r3
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	440b      	add	r3, r1
 800613c:	3336      	adds	r3, #54	; 0x36
 800613e:	4602      	mov	r2, r0
 8006140:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	3303      	adds	r3, #3
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	440b      	add	r3, r1
 8006166:	3338      	adds	r3, #56	; 0x38
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	440b      	add	r3, r1
 800617a:	333c      	adds	r3, #60	; 0x3c
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	3340      	adds	r3, #64	; 0x40
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	3301      	adds	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3ad      	bcc.n	8006100 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e044      	b.n	8006234 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	440b      	add	r3, r1
 80061b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061d6:	7bfa      	ldrb	r2, [r7, #15]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	440b      	add	r3, r1
 80061e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	440b      	add	r3, r1
 80061fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006202:	7bfa      	ldrb	r2, [r7, #15]
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	440b      	add	r3, r1
 8006210:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006218:	7bfa      	ldrb	r2, [r7, #15]
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	3301      	adds	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d3b5      	bcc.n	80061aa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	687e      	ldr	r6, [r7, #4]
 8006246:	466d      	mov	r5, sp
 8006248:	f106 0410 	add.w	r4, r6, #16
 800624c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800624e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	1d33      	adds	r3, r6, #4
 8006256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f004 faff 	bl	800a85c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d102      	bne.n	800627c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fa6c 	bl	8007754 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006286 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_PCD_Start+0x16>
 8006298:	2302      	movs	r3, #2
 800629a:	e012      	b.n	80062c2 <HAL_PCD_Start+0x3c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f004 faa5 	bl	800a7f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f006 fa91 	bl	800c7da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f006 fa96 	bl	800c808 <USB_ReadInterrupts>
 80062dc:	4603      	mov	r3, r0
 80062de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e6:	d102      	bne.n	80062ee <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fb5b 	bl	80069a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f006 fa88 	bl	800c808 <USB_ReadInterrupts>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d112      	bne.n	800632a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006316:	b292      	uxth	r2, r2
 8006318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f008 fbb8 	bl	800ea92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006322:	2100      	movs	r1, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f91e 	bl	8006566 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f006 fa6a 	bl	800c808 <USB_ReadInterrupts>
 8006334:	4603      	mov	r3, r0
 8006336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633e:	d10b      	bne.n	8006358 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006352:	b292      	uxth	r2, r2
 8006354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f006 fa53 	bl	800c808 <USB_ReadInterrupts>
 8006362:	4603      	mov	r3, r0
 8006364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636c:	d10b      	bne.n	8006386 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006380:	b292      	uxth	r2, r2
 8006382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f006 fa3c 	bl	800c808 <USB_ReadInterrupts>
 8006390:	4603      	mov	r3, r0
 8006392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639a:	d133      	bne.n	8006404 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	b292      	uxth	r2, r2
 80063b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0208 	bic.w	r2, r2, #8
 80063c6:	b292      	uxth	r2, r2
 80063c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d107      	bne.n	80063e6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063de:	2100      	movs	r1, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f008 fd4b 	bl	800ee7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f008 fb8c 	bl	800eb04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063fe:	b292      	uxth	r2, r2
 8006400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f006 f9fd 	bl	800c808 <USB_ReadInterrupts>
 800640e:	4603      	mov	r3, r0
 8006410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006418:	d126      	bne.n	8006468 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	b292      	uxth	r2, r2
 800642e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006444:	b292      	uxth	r2, r2
 8006446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0204 	orr.w	r2, r2, #4
 800645c:	b292      	uxth	r2, r2
 800645e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f008 fb34 	bl	800ead0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f006 f9cb 	bl	800c808 <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	d13f      	bne.n	80064fc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648e:	b292      	uxth	r2, r2
 8006490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d12b      	bne.n	80064f6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0204 	orr.w	r2, r2, #4
 80064b0:	b292      	uxth	r2, r2
 80064b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0208 	orr.w	r2, r2, #8
 80064c8:	b292      	uxth	r2, r2
 80064ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80064de:	b29b      	uxth	r3, r3
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80064ec:	2101      	movs	r1, #1
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f008 fcc4 	bl	800ee7c <HAL_PCDEx_LPM_Callback>
 80064f4:	e002      	b.n	80064fc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f008 faea 	bl	800ead0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f006 f981 	bl	800c808 <USB_ReadInterrupts>
 8006506:	4603      	mov	r3, r0
 8006508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006510:	d10e      	bne.n	8006530 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006524:	b292      	uxth	r2, r2
 8006526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f008 faa3 	bl	800ea76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f006 f967 	bl	800c808 <USB_ReadInterrupts>
 800653a:	4603      	mov	r3, r0
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d10b      	bne.n	800655e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006558:	b292      	uxth	r2, r2
 800655a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_PCD_SetAddress+0x1a>
 800657c:	2302      	movs	r3, #2
 800657e:	e013      	b.n	80065a8 <HAL_PCD_SetAddress+0x42>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	4611      	mov	r1, r2
 8006598:	4618      	mov	r0, r3
 800659a:	f006 f90a 	bl	800c7b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	70fb      	strb	r3, [r7, #3]
 80065c2:	460b      	mov	r3, r1
 80065c4:	803b      	strh	r3, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da0e      	bge.n	80065f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	705a      	strb	r2, [r3, #1]
 80065f2:	e00e      	b.n	8006612 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 0207 	and.w	r2, r3, #7
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800661e:	883a      	ldrh	r2, [r7, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	78ba      	ldrb	r2, [r7, #2]
 8006628:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800663c:	78bb      	ldrb	r3, [r7, #2]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d102      	bne.n	8006648 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_PCD_EP_Open+0xa6>
 8006652:	2302      	movs	r3, #2
 8006654:	e00e      	b.n	8006674 <HAL_PCD_EP_Open+0xc4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	4618      	mov	r0, r3
 8006666:	f004 f91b 	bl	800a8a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006672:	7afb      	ldrb	r3, [r7, #11]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da0e      	bge.n	80066ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	705a      	strb	r2, [r3, #1]
 80066ac:	e00e      	b.n	80066cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 0207 	and.w	r2, r3, #7
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_PCD_EP_Close+0x6a>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e00e      	b.n	8006704 <HAL_PCD_EP_Close+0x88>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f004 fc41 	bl	800af7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	460b      	mov	r3, r1
 800671a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	f003 0207 	and.w	r2, r3, #7
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2200      	movs	r2, #0
 800674a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	b2da      	uxtb	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6979      	ldr	r1, [r7, #20]
 8006768:	4618      	mov	r0, r3
 800676a:	f004 fdf4 	bl	800b356 <USB_EPStartXfer>
 800676e:	e005      	b.n	800677c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	4618      	mov	r0, r3
 8006778:	f004 fded 	bl	800b356 <USB_EPStartXfer>
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f003 0207 	and.w	r2, r3, #7
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	440b      	add	r3, r1
 80067a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80067a8:	681b      	ldr	r3, [r3, #0]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	460b      	mov	r3, r1
 80067c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067c6:	7afb      	ldrb	r3, [r7, #11]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2200      	movs	r2, #0
 80067fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2201      	movs	r2, #1
 8006800:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	b2da      	uxtb	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6979      	ldr	r1, [r7, #20]
 800681e:	4618      	mov	r0, r3
 8006820:	f004 fd99 	bl	800b356 <USB_EPStartXfer>
 8006824:	e005      	b.n	8006832 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6979      	ldr	r1, [r7, #20]
 800682c:	4618      	mov	r0, r3
 800682e:	f004 fd92 	bl	800b356 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 0207 	and.w	r2, r3, #7
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d901      	bls.n	800685a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e04c      	b.n	80068f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800685a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685e:	2b00      	cmp	r3, #0
 8006860:	da0e      	bge.n	8006880 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4413      	add	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	705a      	strb	r2, [r3, #1]
 800687e:	e00c      	b.n	800689a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_PCD_EP_SetStall+0x7e>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e01c      	b.n	80068f4 <HAL_PCD_EP_SetStall+0xb8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fe73 	bl	800c5b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d108      	bne.n	80068ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f005 ff9f 	bl	800c828 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d901      	bls.n	800691a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e040      	b.n	800699c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800691a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da0e      	bge.n	8006940 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	705a      	strb	r2, [r3, #1]
 800693e:	e00e      	b.n	800695e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 0207 	and.w	r2, r3, #7
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_PCD_EP_ClrStall+0x82>
 800697a:	2302      	movs	r3, #2
 800697c:	e00e      	b.n	800699c <HAL_PCD_EP_ClrStall+0xa0>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	4618      	mov	r0, r3
 800698e:	f005 fe62 	bl	800c656 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069ac:	e2d1      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80069b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80069c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8152 	bne.w	8006c72 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80069ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d150      	bne.n	8006a7a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80069e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3328      	adds	r3, #40	; 0x28
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	441a      	add	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f008 f801 	bl	800ea42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8282 	beq.w	8006f52 <PCD_EP_ISR_Handler+0x5ae>
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 827d 	bne.w	8006f52 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a78:	e26b      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006a8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d032      	beq.n	8006afa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	4413      	add	r3, r2
 8006aae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f005 fef8 	bl	800c8c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	823b      	strh	r3, [r7, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	8a3a      	ldrh	r2, [r7, #16]
 8006aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aee:	b292      	uxth	r2, r2
 8006af0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f007 ff78 	bl	800e9e8 <HAL_PCD_SetupStageCallback>
 8006af8:	e22b      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006afa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f280 8227 	bge.w	8006f52 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b10:	4013      	ands	r3, r2
 8006b12:	83bb      	strh	r3, [r7, #28]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	8bba      	ldrh	r2, [r7, #28]
 8006b1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d019      	beq.n	8006b86 <PCD_EP_ISR_Handler+0x1e2>
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	6959      	ldr	r1, [r3, #20]
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f005 feaa 	bl	800c8c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	441a      	add	r2, r3
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f007 ff43 	bl	800ea0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d112      	bne.n	8006bd4 <PCD_EP_ISR_Handler+0x230>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e02f      	b.n	8006c34 <PCD_EP_ISR_Handler+0x290>
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bda:	d813      	bhi.n	8006c04 <PCD_EP_ISR_Handler+0x260>
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <PCD_EP_ISR_Handler+0x252>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	029b      	lsls	r3, r3, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e017      	b.n	8006c34 <PCD_EP_ISR_Handler+0x290>
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <PCD_EP_ISR_Handler+0x27a>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	827b      	strh	r3, [r7, #18]
 8006c46:	8a7b      	ldrh	r3, [r7, #18]
 8006c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c4c:	827b      	strh	r3, [r7, #18]
 8006c4e:	8a7b      	ldrh	r3, [r7, #18]
 8006c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c54:	827b      	strh	r3, [r7, #18]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	8a7b      	ldrh	r3, [r7, #18]
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
 8006c70:	e16f      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f280 80e4 	bge.w	8006e56 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cbc:	b292      	uxth	r2, r2
 8006cbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006cc0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	7b1b      	ldrb	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d120      	bne.n	8006d20 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d02:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006d04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8083 	beq.w	8006e12 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	6959      	ldr	r1, [r3, #20]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	88da      	ldrh	r2, [r3, #6]
 8006d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d1a:	f005 fdd3 	bl	800c8c4 <USB_ReadPMA>
 8006d1e:	e078      	b.n	8006e12 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d108      	bne.n	8006d3a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f91d 	bl	8006f6e <HAL_PCD_EP_DB_Receive>
 8006d34:	4603      	mov	r3, r0
 8006d36:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d38:	e06b      	b.n	8006e12 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01f      	beq.n	8006dd4 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006dba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d028      	beq.n	8006e12 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	6959      	ldr	r1, [r3, #20]
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	891a      	ldrh	r2, [r3, #8]
 8006dcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dce:	f005 fd79 	bl	800c8c4 <USB_ReadPMA>
 8006dd2:	e01e      	b.n	8006e12 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	4413      	add	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	4413      	add	r3, r2
 8006dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	6959      	ldr	r1, [r3, #20]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	895a      	ldrh	r2, [r3, #10]
 8006e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e0e:	f005 fd59 	bl	800c8c4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	69da      	ldr	r2, [r3, #28]
 8006e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e18:	441a      	add	r2, r3
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	695a      	ldr	r2, [r3, #20]
 8006e22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e24:	441a      	add	r2, r3
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <PCD_EP_ISR_Handler+0x498>
 8006e32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d206      	bcs.n	8006e4a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f007 fde2 	bl	800ea0c <HAL_PCD_DataOutStageCallback>
 8006e48:	e005      	b.n	8006e56 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f004 fa80 	bl	800b356 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d078      	beq.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8006e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	843b      	strh	r3, [r7, #32]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	8c3b      	ldrh	r3, [r7, #32]
 8006ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d108      	bne.n	8006ec6 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d144      	bne.n	8006f46 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006ebc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d13f      	bne.n	8006f46 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4413      	add	r3, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eea:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d906      	bls.n	8006f04 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	8bfb      	ldrh	r3, [r7, #30]
 8006efc:	1ad2      	subs	r2, r2, r3
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	619a      	str	r2, [r3, #24]
 8006f02:	e002      	b.n	8006f0a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	2200      	movs	r2, #0
 8006f08:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f007 fd92 	bl	800ea42 <HAL_PCD_DataInStageCallback>
 8006f1e:	e018      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	8bfb      	ldrh	r3, [r7, #30]
 8006f26:	441a      	add	r2, r3
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	8bfb      	ldrh	r3, [r7, #30]
 8006f32:	441a      	add	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f004 fa09 	bl	800b356 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006f44:	e005      	b.n	8006f52 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006f46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f917 	bl	8007180 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	b21b      	sxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f6ff ad25 	blt.w	80069ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3738      	adds	r7, #56	; 0x38
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b088      	sub	sp, #32
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d07c      	beq.n	8007080 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4413      	add	r3, r2
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006faa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	8b7b      	ldrh	r3, [r7, #26]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d306      	bcc.n	8006fc4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	8b7b      	ldrh	r3, [r7, #26]
 8006fbc:	1ad2      	subs	r2, r2, r3
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	619a      	str	r2, [r3, #24]
 8006fc2:	e002      	b.n	8006fca <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d123      	bne.n	800701a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fec:	833b      	strh	r3, [r7, #24]
 8006fee:	8b3b      	ldrh	r3, [r7, #24]
 8006ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ff4:	833b      	strh	r3, [r7, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	8b3b      	ldrh	r3, [r7, #24]
 8007006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800700e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	b29b      	uxth	r3, r3
 8007018:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01f      	beq.n	8007064 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	82fb      	strh	r3, [r7, #22]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	441a      	add	r2, r3
 800704e:	8afb      	ldrh	r3, [r7, #22]
 8007050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007060:	b29b      	uxth	r3, r3
 8007062:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007064:	8b7b      	ldrh	r3, [r7, #26]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8085 	beq.w	8007176 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6959      	ldr	r1, [r3, #20]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	891a      	ldrh	r2, [r3, #8]
 8007078:	8b7b      	ldrh	r3, [r7, #26]
 800707a:	f005 fc23 	bl	800c8c4 <USB_ReadPMA>
 800707e:	e07a      	b.n	8007176 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	4413      	add	r3, r2
 800709a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	8b7b      	ldrh	r3, [r7, #26]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d306      	bcc.n	80070be <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	8b7b      	ldrh	r3, [r7, #26]
 80070b6:	1ad2      	subs	r2, r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	619a      	str	r2, [r3, #24]
 80070bc:	e002      	b.n	80070c4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d123      	bne.n	8007114 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	83fb      	strh	r3, [r7, #30]
 80070e8:	8bfb      	ldrh	r3, [r7, #30]
 80070ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070ee:	83fb      	strh	r3, [r7, #30]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	441a      	add	r2, r3
 80070fe:	8bfb      	ldrh	r3, [r7, #30]
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11f      	bne.n	800715e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007138:	83bb      	strh	r3, [r7, #28]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	8bbb      	ldrh	r3, [r7, #28]
 800714a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800715a:	b29b      	uxth	r3, r3
 800715c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800715e:	8b7b      	ldrh	r3, [r7, #26]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6959      	ldr	r1, [r3, #20]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	895a      	ldrh	r2, [r3, #10]
 8007170:	8b7b      	ldrh	r3, [r7, #26]
 8007172:	f005 fba7 	bl	800c8c4 <USB_ReadPMA>
    }
  }

  return count;
 8007176:	8b7b      	ldrh	r3, [r7, #26]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b094      	sub	sp, #80	; 0x50
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8136 	beq.w	8007406 <HAL_PCD_EP_DB_Transmit+0x286>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4413      	add	r3, r2
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	4413      	add	r3, r2
 80071b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d907      	bls.n	80071de <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	619a      	str	r2, [r3, #24]
 80071dc:	e002      	b.n	80071e4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d12c      	bne.n	8007246 <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f007 fc25 	bl	800ea42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8238 	beq.w	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	82fb      	strh	r3, [r7, #22]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	8afb      	ldrh	r3, [r7, #22]
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]
 8007244:	e216      	b.n	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01f      	beq.n	8007290 <HAL_PCD_EP_DB_Transmit+0x110>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007296:	2b01      	cmp	r3, #1
 8007298:	f040 81ec 	bne.w	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072a4:	441a      	add	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	69da      	ldr	r2, [r3, #28]
 80072ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072b2:	441a      	add	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d309      	bcc.n	80072d8 <HAL_PCD_EP_DB_Transmit+0x158>
        {
          len = ep->maxpacket;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	1ad2      	subs	r2, r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	621a      	str	r2, [r3, #32]
 80072d6:	e015      	b.n	8007304 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else if (ep->xfer_len_db == 0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d107      	bne.n	80072f0 <HAL_PCD_EP_DB_Transmit+0x170>
        {
          len = TxByteNbre;
 80072e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80072ee:	e009      	b.n	8007304 <HAL_PCD_EP_DB_Transmit+0x184>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2200      	movs	r2, #0
 8007302:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d155      	bne.n	80073b8 <HAL_PCD_EP_DB_Transmit+0x238>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	00da      	lsls	r2, r3, #3
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007336:	2b00      	cmp	r3, #0
 8007338:	d112      	bne.n	8007360 <HAL_PCD_EP_DB_Transmit+0x1e0>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007344:	b29a      	uxth	r2, r3
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007358:	b29a      	uxth	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e047      	b.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x270>
 8007360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007362:	2b3e      	cmp	r3, #62	; 0x3e
 8007364:	d811      	bhi.n	800738a <HAL_PCD_EP_DB_Transmit+0x20a>
 8007366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_PCD_EP_DB_Transmit+0x1fc>
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	3301      	adds	r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e032      	b.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x270>
 800738a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <HAL_PCD_EP_DB_Transmit+0x220>
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	3b01      	subs	r3, #1
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	029b      	lsls	r3, r3, #10
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	e01b      	b.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x270>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d117      	bne.n	80073f0 <HAL_PCD_EP_DB_Transmit+0x270>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	4413      	add	r3, r2
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	00da      	lsls	r2, r3, #3
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6959      	ldr	r1, [r3, #20]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	891a      	ldrh	r2, [r3, #8]
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f005 fa1e 	bl	800c840 <USB_WritePMA>
 8007404:	e136      	b.n	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740e:	b29b      	uxth	r3, r3
 8007410:	461a      	mov	r2, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	4413      	add	r3, r2
 8007420:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800742a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007436:	429a      	cmp	r2, r3
 8007438:	d307      	bcc.n	800744a <HAL_PCD_EP_DB_Transmit+0x2ca>
    {
      ep->xfer_len -= TxByteNbre;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	619a      	str	r2, [r3, #24]
 8007448:	e002      	b.n	8007450 <HAL_PCD_EP_DB_Transmit+0x2d0>
    }
    else
    {
      ep->xfer_len = 0U;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d12e      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x336>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	4619      	mov	r1, r3
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f007 faef 	bl	800ea42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8102 	bne.w	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]
 80074b4:	e0de      	b.n	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d11f      	bne.n	8007500 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	867b      	strh	r3, [r7, #50]	; 0x32
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	441a      	add	r2, r3
 80074ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80074ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007506:	2b01      	cmp	r3, #1
 8007508:	f040 80b4 	bne.w	8007674 <HAL_PCD_EP_DB_Transmit+0x4f4>
      {
        ep->xfer_buff += TxByteNbre;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007514:	441a      	add	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007522:	441a      	add	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d309      	bcc.n	8007548 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007540:	1ad2      	subs	r2, r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	621a      	str	r2, [r3, #32]
 8007546:	e015      	b.n	8007574 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else if (ep->xfer_len_db == 0U)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <HAL_PCD_EP_DB_Transmit+0x3e0>
        {
          len = TxByteNbre;
 8007550:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007554:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800755e:	e009      	b.n	8007574 <HAL_PCD_EP_DB_Transmit+0x3f4>
        }
        else
        {
          len = ep->xfer_len_db;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	643b      	str	r3, [r7, #64]	; 0x40
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d155      	bne.n	800762e <HAL_PCD_EP_DB_Transmit+0x4ae>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007590:	b29b      	uxth	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	4413      	add	r3, r2
 8007598:	63bb      	str	r3, [r7, #56]	; 0x38
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	00da      	lsls	r2, r3, #3
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	4413      	add	r3, r2
 80075a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
 80075aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d112      	bne.n	80075d6 <HAL_PCD_EP_DB_Transmit+0x456>
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e044      	b.n	8007660 <HAL_PCD_EP_DB_Transmit+0x4e0>
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d8:	2b3e      	cmp	r3, #62	; 0x3e
 80075da:	d811      	bhi.n	8007600 <HAL_PCD_EP_DB_Transmit+0x480>
 80075dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x472>
 80075ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ee:	3301      	adds	r3, #1
 80075f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	029b      	lsls	r3, r3, #10
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e02f      	b.n	8007660 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <HAL_PCD_EP_DB_Transmit+0x496>
 8007610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007612:	3b01      	subs	r3, #1
 8007614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	b29b      	uxth	r3, r3
 800761a:	029b      	lsls	r3, r3, #10
 800761c:	b29b      	uxth	r3, r3
 800761e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007626:	b29a      	uxth	r2, r3
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	e018      	b.n	8007660 <HAL_PCD_EP_DB_Transmit+0x4e0>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d114      	bne.n	8007660 <HAL_PCD_EP_DB_Transmit+0x4e0>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007644:	4413      	add	r3, r2
 8007646:	643b      	str	r3, [r7, #64]	; 0x40
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	00da      	lsls	r2, r3, #3
 800764e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007650:	4413      	add	r3, r2
 8007652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765a:	b29a      	uxth	r2, r3
 800765c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6959      	ldr	r1, [r3, #20]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	895a      	ldrh	r2, [r3, #10]
 800766c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766e:	b29b      	uxth	r3, r3
 8007670:	f005 f8e6 	bl	800c840 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	82bb      	strh	r3, [r7, #20]
 8007690:	8abb      	ldrh	r3, [r7, #20]
 8007692:	f083 0310 	eor.w	r3, r3, #16
 8007696:	82bb      	strh	r3, [r7, #20]
 8007698:	8abb      	ldrh	r3, [r7, #20]
 800769a:	f083 0320 	eor.w	r3, r3, #32
 800769e:	82bb      	strh	r3, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	8abb      	ldrh	r3, [r7, #20]
 80076b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3750      	adds	r7, #80	; 0x50
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	817b      	strh	r3, [r7, #10]
 80076dc:	4613      	mov	r3, r2
 80076de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80076e0:	897b      	ldrh	r3, [r7, #10]
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ec:	897b      	ldrh	r3, [r7, #10]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e009      	b.n	8007718 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007704:	897a      	ldrh	r2, [r7, #10]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007718:	893b      	ldrh	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d107      	bne.n	800772e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2200      	movs	r2, #0
 8007722:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	b29a      	uxth	r2, r3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	80da      	strh	r2, [r3, #6]
 800772c:	e00b      	b.n	8007746 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2201      	movs	r2, #1
 8007732:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	b29a      	uxth	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	b29a      	uxth	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007778:	b29b      	uxth	r3, r3
 800777a:	f043 0301 	orr.w	r3, r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800778c:	b29b      	uxth	r3, r3
 800778e:	f043 0302 	orr.w	r3, r3, #2
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d141      	bne.n	800783a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077b6:	4b4b      	ldr	r3, [pc, #300]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c2:	d131      	bne.n	8007828 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077c4:	4b47      	ldr	r3, [pc, #284]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ca:	4a46      	ldr	r2, [pc, #280]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80077d4:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077dc:	4a41      	ldr	r2, [pc, #260]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077e4:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2232      	movs	r2, #50	; 0x32
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	4a3f      	ldr	r2, [pc, #252]	; (80078ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80077f0:	fba2 2303 	umull	r2, r3, r2, r3
 80077f4:	0c9b      	lsrs	r3, r3, #18
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077fa:	e002      	b.n	8007802 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3b01      	subs	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007802:	4b38      	ldr	r3, [pc, #224]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780e:	d102      	bne.n	8007816 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f2      	bne.n	80077fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007816:	4b33      	ldr	r3, [pc, #204]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d158      	bne.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e057      	b.n	80078d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007828:	4b2e      	ldr	r3, [pc, #184]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800782a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782e:	4a2d      	ldr	r2, [pc, #180]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007838:	e04d      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007840:	d141      	bne.n	80078c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007842:	4b28      	ldr	r3, [pc, #160]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800784a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784e:	d131      	bne.n	80078b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007850:	4b24      	ldr	r3, [pc, #144]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007856:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007860:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007868:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800786a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800786e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007870:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2232      	movs	r2, #50	; 0x32
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	0c9b      	lsrs	r3, r3, #18
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007886:	e002      	b.n	800788e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3b01      	subs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800788e:	4b15      	ldr	r3, [pc, #84]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789a:	d102      	bne.n	80078a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f2      	bne.n	8007888 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ae:	d112      	bne.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e011      	b.n	80078d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ba:	4a0a      	ldr	r2, [pc, #40]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80078c4:	e007      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40007000 	.word	0x40007000
 80078e8:	20000194 	.word	0x20000194
 80078ec:	431bde83 	.word	0x431bde83

080078f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	4a04      	ldr	r2, [pc, #16]	; (800790c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80078fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078fe:	6093      	str	r3, [r2, #8]
}
 8007900:	bf00      	nop
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40007000 	.word	0x40007000

08007910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e308      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d075      	beq.n	8007a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800792e:	4ba3      	ldr	r3, [pc, #652]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 030c 	and.w	r3, r3, #12
 8007936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007938:	4ba0      	ldr	r3, [pc, #640]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d102      	bne.n	800794e <HAL_RCC_OscConfig+0x3e>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d002      	beq.n	8007954 <HAL_RCC_OscConfig+0x44>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b08      	cmp	r3, #8
 8007952:	d10b      	bne.n	800796c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007954:	4b99      	ldr	r3, [pc, #612]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d05b      	beq.n	8007a18 <HAL_RCC_OscConfig+0x108>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d157      	bne.n	8007a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e2e3      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d106      	bne.n	8007984 <HAL_RCC_OscConfig+0x74>
 8007976:	4b91      	ldr	r3, [pc, #580]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a90      	ldr	r2, [pc, #576]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 800797c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e01d      	b.n	80079c0 <HAL_RCC_OscConfig+0xb0>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800798c:	d10c      	bne.n	80079a8 <HAL_RCC_OscConfig+0x98>
 800798e:	4b8b      	ldr	r3, [pc, #556]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a8a      	ldr	r2, [pc, #552]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	4b88      	ldr	r3, [pc, #544]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a87      	ldr	r2, [pc, #540]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	e00b      	b.n	80079c0 <HAL_RCC_OscConfig+0xb0>
 80079a8:	4b84      	ldr	r3, [pc, #528]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a83      	ldr	r2, [pc, #524]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	4b81      	ldr	r3, [pc, #516]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a80      	ldr	r2, [pc, #512]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d013      	beq.n	80079f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c8:	f7fb fd86 	bl	80034d8 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d0:	f7fb fd82 	bl	80034d8 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b64      	cmp	r3, #100	; 0x64
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e2a8      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079e2:	4b76      	ldr	r3, [pc, #472]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f0      	beq.n	80079d0 <HAL_RCC_OscConfig+0xc0>
 80079ee:	e014      	b.n	8007a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fb fd72 	bl	80034d8 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079f8:	f7fb fd6e 	bl	80034d8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b64      	cmp	r3, #100	; 0x64
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e294      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a0a:	4b6c      	ldr	r3, [pc, #432]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f0      	bne.n	80079f8 <HAL_RCC_OscConfig+0xe8>
 8007a16:	e000      	b.n	8007a1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d075      	beq.n	8007b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a26:	4b65      	ldr	r3, [pc, #404]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 030c 	and.w	r3, r3, #12
 8007a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a30:	4b62      	ldr	r3, [pc, #392]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2b0c      	cmp	r3, #12
 8007a3e:	d102      	bne.n	8007a46 <HAL_RCC_OscConfig+0x136>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d002      	beq.n	8007a4c <HAL_RCC_OscConfig+0x13c>
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d11f      	bne.n	8007a8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a4c:	4b5b      	ldr	r3, [pc, #364]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_RCC_OscConfig+0x154>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e267      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a64:	4b55      	ldr	r3, [pc, #340]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	061b      	lsls	r3, r3, #24
 8007a72:	4952      	ldr	r1, [pc, #328]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a78:	4b51      	ldr	r3, [pc, #324]	; (8007bc0 <HAL_RCC_OscConfig+0x2b0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fb fcdf 	bl	8003440 <HAL_InitTick>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d043      	beq.n	8007b10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e253      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d023      	beq.n	8007adc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a94:	4b49      	ldr	r3, [pc, #292]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a48      	ldr	r2, [pc, #288]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fb fd1a 	bl	80034d8 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa8:	f7fb fd16 	bl	80034d8 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e23c      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aba:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac6:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	061b      	lsls	r3, r3, #24
 8007ad4:	4939      	ldr	r1, [pc, #228]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	604b      	str	r3, [r1, #4]
 8007ada:	e01a      	b.n	8007b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007adc:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a36      	ldr	r2, [pc, #216]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fb fcf6 	bl	80034d8 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af0:	f7fb fcf2 	bl	80034d8 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e218      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b02:	4b2e      	ldr	r3, [pc, #184]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x1e0>
 8007b0e:	e000      	b.n	8007b12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d03c      	beq.n	8007b98 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d01c      	beq.n	8007b60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b26:	4b25      	ldr	r3, [pc, #148]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2c:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b36:	f7fb fccf 	bl	80034d8 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b3e:	f7fb fccb 	bl	80034d8 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e1f1      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b50:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0ef      	beq.n	8007b3e <HAL_RCC_OscConfig+0x22e>
 8007b5e:	e01b      	b.n	8007b98 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b60:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b66:	4a15      	ldr	r2, [pc, #84]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b68:	f023 0301 	bic.w	r3, r3, #1
 8007b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b70:	f7fb fcb2 	bl	80034d8 <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b78:	f7fb fcae 	bl	80034d8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e1d4      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1ef      	bne.n	8007b78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80ab 	beq.w	8007cfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007baa:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <HAL_RCC_OscConfig+0x2ac>)
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x2b4>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e005      	b.n	8007bc6 <HAL_RCC_OscConfig+0x2b6>
 8007bba:	bf00      	nop
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	20000198 	.word	0x20000198
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bca:	4baf      	ldr	r3, [pc, #700]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	4aae      	ldr	r2, [pc, #696]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8007bd6:	4bac      	ldr	r3, [pc, #688]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007be2:	2301      	movs	r3, #1
 8007be4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be6:	4ba9      	ldr	r3, [pc, #676]	; (8007e8c <HAL_RCC_OscConfig+0x57c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d118      	bne.n	8007c24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bf2:	4ba6      	ldr	r3, [pc, #664]	; (8007e8c <HAL_RCC_OscConfig+0x57c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4aa5      	ldr	r2, [pc, #660]	; (8007e8c <HAL_RCC_OscConfig+0x57c>)
 8007bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bfe:	f7fb fc6b 	bl	80034d8 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c06:	f7fb fc67 	bl	80034d8 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e18d      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c18:	4b9c      	ldr	r3, [pc, #624]	; (8007e8c <HAL_RCC_OscConfig+0x57c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d108      	bne.n	8007c3e <HAL_RCC_OscConfig+0x32e>
 8007c2c:	4b96      	ldr	r3, [pc, #600]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	4a95      	ldr	r2, [pc, #596]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c3c:	e024      	b.n	8007c88 <HAL_RCC_OscConfig+0x378>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d110      	bne.n	8007c68 <HAL_RCC_OscConfig+0x358>
 8007c46:	4b90      	ldr	r3, [pc, #576]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4c:	4a8e      	ldr	r2, [pc, #568]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c4e:	f043 0304 	orr.w	r3, r3, #4
 8007c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c56:	4b8c      	ldr	r3, [pc, #560]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	4a8a      	ldr	r2, [pc, #552]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c66:	e00f      	b.n	8007c88 <HAL_RCC_OscConfig+0x378>
 8007c68:	4b87      	ldr	r3, [pc, #540]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	4a86      	ldr	r2, [pc, #536]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c70:	f023 0301 	bic.w	r3, r3, #1
 8007c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c78:	4b83      	ldr	r3, [pc, #524]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	4a82      	ldr	r2, [pc, #520]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007c80:	f023 0304 	bic.w	r3, r3, #4
 8007c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c90:	f7fb fc22 	bl	80034d8 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c96:	e00a      	b.n	8007cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c98:	f7fb fc1e 	bl	80034d8 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e142      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cae:	4b76      	ldr	r3, [pc, #472]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0ed      	beq.n	8007c98 <HAL_RCC_OscConfig+0x388>
 8007cbc:	e015      	b.n	8007cea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cbe:	f7fb fc0b 	bl	80034d8 <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cc4:	e00a      	b.n	8007cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc6:	f7fb fc07 	bl	80034d8 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e12b      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cdc:	4b6a      	ldr	r3, [pc, #424]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1ed      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cea:	7ffb      	ldrb	r3, [r7, #31]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d105      	bne.n	8007cfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cf0:	4b65      	ldr	r3, [pc, #404]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf4:	4a64      	ldr	r2, [pc, #400]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d03c      	beq.n	8007d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01c      	beq.n	8007d4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d10:	4b5d      	ldr	r3, [pc, #372]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d16:	4a5c      	ldr	r2, [pc, #368]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d20:	f7fb fbda 	bl	80034d8 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d28:	f7fb fbd6 	bl	80034d8 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e0fc      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d3a:	4b53      	ldr	r3, [pc, #332]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ef      	beq.n	8007d28 <HAL_RCC_OscConfig+0x418>
 8007d48:	e01b      	b.n	8007d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d50:	4a4d      	ldr	r2, [pc, #308]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d52:	f023 0301 	bic.w	r3, r3, #1
 8007d56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d5a:	f7fb fbbd 	bl	80034d8 <HAL_GetTick>
 8007d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d62:	f7fb fbb9 	bl	80034d8 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e0df      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d74:	4b44      	ldr	r3, [pc, #272]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1ef      	bne.n	8007d62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80d3 	beq.w	8007f32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d8c:	4b3e      	ldr	r3, [pc, #248]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 030c 	and.w	r3, r3, #12
 8007d94:	2b0c      	cmp	r3, #12
 8007d96:	f000 808d 	beq.w	8007eb4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d15a      	bne.n	8007e58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dae:	f7fb fb93 	bl	80034d8 <HAL_GetTick>
 8007db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db6:	f7fb fb8f 	bl	80034d8 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0b5      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dc8:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f0      	bne.n	8007db6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dd4:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	; (8007e90 <HAL_RCC_OscConfig+0x580>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6a11      	ldr	r1, [r2, #32]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0112      	lsls	r2, r2, #4
 8007de8:	4311      	orrs	r1, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007dee:	0212      	lsls	r2, r2, #8
 8007df0:	4311      	orrs	r1, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007df6:	0852      	lsrs	r2, r2, #1
 8007df8:	3a01      	subs	r2, #1
 8007dfa:	0552      	lsls	r2, r2, #21
 8007dfc:	4311      	orrs	r1, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e02:	0852      	lsrs	r2, r2, #1
 8007e04:	3a01      	subs	r2, #1
 8007e06:	0652      	lsls	r2, r2, #25
 8007e08:	4311      	orrs	r1, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e0e:	06d2      	lsls	r2, r2, #27
 8007e10:	430a      	orrs	r2, r1
 8007e12:	491d      	ldr	r1, [pc, #116]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e18:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1a      	ldr	r2, [pc, #104]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e24:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fb fb52 	bl	80034d8 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e38:	f7fb fb4e 	bl	80034d8 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e074      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x528>
 8007e56:	e06c      	b.n	8007f32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a07      	ldr	r2, [pc, #28]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_RCC_OscConfig+0x578>)
 8007e76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fb fb2a 	bl	80034d8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e86:	e00e      	b.n	8007ea6 <HAL_RCC_OscConfig+0x596>
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40007000 	.word	0x40007000
 8007e90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e94:	f7fb fb20 	bl	80034d8 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e046      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ea6:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <HAL_RCC_OscConfig+0x62c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f0      	bne.n	8007e94 <HAL_RCC_OscConfig+0x584>
 8007eb2:	e03e      	b.n	8007f32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e039      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <HAL_RCC_OscConfig+0x62c>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f003 0203 	and.w	r2, r3, #3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d12c      	bne.n	8007f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d123      	bne.n	8007f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d11b      	bne.n	8007f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d113      	bne.n	8007f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	085b      	lsrs	r3, r3, #1
 8007f12:	3b01      	subs	r3, #1
 8007f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d109      	bne.n	8007f2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	3b01      	subs	r3, #1
 8007f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40021000 	.word	0x40021000

08007f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e11e      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f58:	4b91      	ldr	r3, [pc, #580]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d910      	bls.n	8007f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f66:	4b8e      	ldr	r3, [pc, #568]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f023 020f 	bic.w	r2, r3, #15
 8007f6e:	498c      	ldr	r1, [pc, #560]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f76:	4b8a      	ldr	r3, [pc, #552]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d001      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e106      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d073      	beq.n	800807c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d129      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9c:	4b81      	ldr	r3, [pc, #516]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0f4      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007fac:	f000 f99e 	bl	80082ec <RCC_GetSysClockFreqFromPLLSource>
 8007fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	4a7c      	ldr	r2, [pc, #496]	; (80081a8 <HAL_RCC_ClockConfig+0x268>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d93f      	bls.n	800803a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007fba:	4b7a      	ldr	r3, [pc, #488]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d033      	beq.n	800803a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d12f      	bne.n	800803a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007fda:	4b72      	ldr	r3, [pc, #456]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fe2:	4a70      	ldr	r2, [pc, #448]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007fea:	2380      	movs	r3, #128	; 0x80
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	e024      	b.n	800803a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d107      	bne.n	8008008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ff8:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e0c6      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008008:	4b66      	ldr	r3, [pc, #408]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0be      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008018:	f000 f8ce 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 800801c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4a61      	ldr	r2, [pc, #388]	; (80081a8 <HAL_RCC_ClockConfig+0x268>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d909      	bls.n	800803a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008026:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800802e:	4a5d      	ldr	r2, [pc, #372]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008036:	2380      	movs	r3, #128	; 0x80
 8008038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800803a:	4b5a      	ldr	r3, [pc, #360]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f023 0203 	bic.w	r2, r3, #3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	4957      	ldr	r1, [pc, #348]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008048:	4313      	orrs	r3, r2
 800804a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804c:	f7fb fa44 	bl	80034d8 <HAL_GetTick>
 8008050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008052:	e00a      	b.n	800806a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008054:	f7fb fa40 	bl	80034d8 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e095      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800806a:	4b4e      	ldr	r3, [pc, #312]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 020c 	and.w	r2, r3, #12
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	429a      	cmp	r2, r3
 800807a:	d1eb      	bne.n	8008054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d023      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008094:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	4a42      	ldr	r2, [pc, #264]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 800809a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800809e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d007      	beq.n	80080bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080ac:	4b3d      	ldr	r3, [pc, #244]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080b4:	4a3b      	ldr	r2, [pc, #236]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080bc:	4b39      	ldr	r3, [pc, #228]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4936      	ldr	r1, [pc, #216]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d105      	bne.n	80080e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80080d6:	4b33      	ldr	r3, [pc, #204]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	4a32      	ldr	r2, [pc, #200]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 80080dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080e2:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d21d      	bcs.n	800812c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f0:	4b2b      	ldr	r3, [pc, #172]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f023 020f 	bic.w	r2, r3, #15
 80080f8:	4929      	ldr	r1, [pc, #164]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008100:	f7fb f9ea 	bl	80034d8 <HAL_GetTick>
 8008104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008106:	e00a      	b.n	800811e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008108:	f7fb f9e6 	bl	80034d8 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	f241 3288 	movw	r2, #5000	; 0x1388
 8008116:	4293      	cmp	r3, r2
 8008118:	d901      	bls.n	800811e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e03b      	b.n	8008196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCC_ClockConfig+0x260>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d1ed      	bne.n	8008108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008138:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4917      	ldr	r1, [pc, #92]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	490f      	ldr	r1, [pc, #60]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008166:	4313      	orrs	r3, r2
 8008168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800816a:	f000 f825 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 800816e:	4602      	mov	r2, r0
 8008170:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <HAL_RCC_ClockConfig+0x264>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	091b      	lsrs	r3, r3, #4
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	490c      	ldr	r1, [pc, #48]	; (80081ac <HAL_RCC_ClockConfig+0x26c>)
 800817c:	5ccb      	ldrb	r3, [r1, r3]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <HAL_RCC_ClockConfig+0x270>)
 8008188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_RCC_ClockConfig+0x274>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7fb f956 	bl	8003440 <HAL_InitTick>
 8008194:	4603      	mov	r3, r0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40022000 	.word	0x40022000
 80081a4:	40021000 	.word	0x40021000
 80081a8:	04c4b400 	.word	0x04c4b400
 80081ac:	0800fdfc 	.word	0x0800fdfc
 80081b0:	20000194 	.word	0x20000194
 80081b4:	20000198 	.word	0x20000198

080081b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081be:	4b2c      	ldr	r3, [pc, #176]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 030c 	and.w	r3, r3, #12
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d102      	bne.n	80081d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	e047      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80081d0:	4b27      	ldr	r3, [pc, #156]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 030c 	and.w	r3, r3, #12
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d102      	bne.n	80081e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80081dc:	4b26      	ldr	r3, [pc, #152]	; (8008278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	e03e      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80081e2:	4b23      	ldr	r3, [pc, #140]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 030c 	and.w	r3, r3, #12
 80081ea:	2b0c      	cmp	r3, #12
 80081ec:	d136      	bne.n	800825c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081ee:	4b20      	ldr	r3, [pc, #128]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	3301      	adds	r3, #1
 8008204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d10c      	bne.n	8008226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800820c:	4a1a      	ldr	r2, [pc, #104]	; (8008278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008216:	68d2      	ldr	r2, [r2, #12]
 8008218:	0a12      	lsrs	r2, r2, #8
 800821a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	617b      	str	r3, [r7, #20]
      break;
 8008224:	e00c      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	fbb2 f3f3 	udiv	r3, r2, r3
 800822e:	4a10      	ldr	r2, [pc, #64]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008230:	68d2      	ldr	r2, [r2, #12]
 8008232:	0a12      	lsrs	r2, r2, #8
 8008234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]
      break;
 800823e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	0e5b      	lsrs	r3, r3, #25
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	3301      	adds	r3, #1
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	e001      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008260:	693b      	ldr	r3, [r7, #16]
}
 8008262:	4618      	mov	r0, r3
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40021000 	.word	0x40021000
 8008274:	00f42400 	.word	0x00f42400
 8008278:	007a1200 	.word	0x007a1200

0800827c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <HAL_RCC_GetHCLKFreq+0x14>)
 8008282:	681b      	ldr	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000194 	.word	0x20000194

08008294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008298:	f7ff fff0 	bl	800827c <HAL_RCC_GetHCLKFreq>
 800829c:	4602      	mov	r2, r0
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	4904      	ldr	r1, [pc, #16]	; (80082bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80082aa:	5ccb      	ldrb	r3, [r1, r3]
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40021000 	.word	0x40021000
 80082bc:	0800fe0c 	.word	0x0800fe0c

080082c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082c4:	f7ff ffda 	bl	800827c <HAL_RCC_GetHCLKFreq>
 80082c8:	4602      	mov	r2, r0
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	0adb      	lsrs	r3, r3, #11
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	4904      	ldr	r1, [pc, #16]	; (80082e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80082d6:	5ccb      	ldrb	r3, [r1, r3]
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40021000 	.word	0x40021000
 80082e8:	0800fe0c 	.word	0x0800fe0c

080082ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082f2:	4b1e      	ldr	r3, [pc, #120]	; (800836c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082fc:	4b1b      	ldr	r3, [pc, #108]	; (800836c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	091b      	lsrs	r3, r3, #4
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	3301      	adds	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b03      	cmp	r3, #3
 800830e:	d10c      	bne.n	800832a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008310:	4a17      	ldr	r2, [pc, #92]	; (8008370 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	fbb2 f3f3 	udiv	r3, r2, r3
 8008318:	4a14      	ldr	r2, [pc, #80]	; (800836c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800831a:	68d2      	ldr	r2, [r2, #12]
 800831c:	0a12      	lsrs	r2, r2, #8
 800831e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	617b      	str	r3, [r7, #20]
    break;
 8008328:	e00c      	b.n	8008344 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800832a:	4a12      	ldr	r2, [pc, #72]	; (8008374 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	4a0e      	ldr	r2, [pc, #56]	; (800836c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008334:	68d2      	ldr	r2, [r2, #12]
 8008336:	0a12      	lsrs	r2, r2, #8
 8008338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	617b      	str	r3, [r7, #20]
    break;
 8008342:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008344:	4b09      	ldr	r3, [pc, #36]	; (800836c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	0e5b      	lsrs	r3, r3, #25
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	3301      	adds	r3, #1
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	fbb2 f3f3 	udiv	r3, r2, r3
 800835c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800835e:	687b      	ldr	r3, [r7, #4]
}
 8008360:	4618      	mov	r0, r3
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40021000 	.word	0x40021000
 8008370:	007a1200 	.word	0x007a1200
 8008374:	00f42400 	.word	0x00f42400

08008378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008380:	2300      	movs	r3, #0
 8008382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008384:	2300      	movs	r3, #0
 8008386:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8098 	beq.w	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008396:	2300      	movs	r3, #0
 8008398:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800839a:	4b43      	ldr	r3, [pc, #268]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083a6:	4b40      	ldr	r3, [pc, #256]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b0:	6593      	str	r3, [r2, #88]	; 0x58
 80083b2:	4b3d      	ldr	r3, [pc, #244]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ba:	60bb      	str	r3, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083be:	2301      	movs	r3, #1
 80083c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083c2:	4b3a      	ldr	r3, [pc, #232]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a39      	ldr	r2, [pc, #228]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083ce:	f7fb f883 	bl	80034d8 <HAL_GetTick>
 80083d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083d4:	e009      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083d6:	f7fb f87f 	bl	80034d8 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d902      	bls.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	74fb      	strb	r3, [r7, #19]
        break;
 80083e8:	e005      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ea:	4b30      	ldr	r3, [pc, #192]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0ef      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80083f6:	7cfb      	ldrb	r3, [r7, #19]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d159      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083fc:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008406:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01e      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	429a      	cmp	r2, r3
 8008416:	d019      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008418:	4b23      	ldr	r3, [pc, #140]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800841a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008424:	4b20      	ldr	r3, [pc, #128]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842a:	4a1f      	ldr	r2, [pc, #124]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800842c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843a:	4a1b      	ldr	r2, [pc, #108]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800843c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008444:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008456:	f7fb f83f 	bl	80034d8 <HAL_GetTick>
 800845a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800845c:	e00b      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800845e:	f7fb f83b 	bl	80034d8 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	f241 3288 	movw	r2, #5000	; 0x1388
 800846c:	4293      	cmp	r3, r2
 800846e:	d902      	bls.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	74fb      	strb	r3, [r7, #19]
            break;
 8008474:	e006      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0ec      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800848c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	4903      	ldr	r1, [pc, #12]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80084a0:	e008      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084a2:	7cfb      	ldrb	r3, [r7, #19]
 80084a4:	74bb      	strb	r3, [r7, #18]
 80084a6:	e005      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80084a8:	40021000 	.word	0x40021000
 80084ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b0:	7cfb      	ldrb	r3, [r7, #19]
 80084b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084b4:	7c7b      	ldrb	r3, [r7, #17]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d105      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ba:	4ba6      	ldr	r3, [pc, #664]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	4aa5      	ldr	r2, [pc, #660]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084d2:	4ba0      	ldr	r3, [pc, #640]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d8:	f023 0203 	bic.w	r2, r3, #3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	499c      	ldr	r1, [pc, #624]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084f4:	4b97      	ldr	r3, [pc, #604]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fa:	f023 020c 	bic.w	r2, r3, #12
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	4994      	ldr	r1, [pc, #592]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008504:	4313      	orrs	r3, r2
 8008506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008516:	4b8f      	ldr	r3, [pc, #572]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	498b      	ldr	r1, [pc, #556]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008538:	4b86      	ldr	r3, [pc, #536]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	4983      	ldr	r1, [pc, #524]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800855a:	4b7e      	ldr	r3, [pc, #504]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	497a      	ldr	r1, [pc, #488]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800857c:	4b75      	ldr	r3, [pc, #468]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	4972      	ldr	r1, [pc, #456]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800859e:	4b6d      	ldr	r3, [pc, #436]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	4969      	ldr	r1, [pc, #420]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085c0:	4b64      	ldr	r3, [pc, #400]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	4961      	ldr	r1, [pc, #388]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085e2:	4b5c      	ldr	r3, [pc, #368]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	4958      	ldr	r1, [pc, #352]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008600:	2b00      	cmp	r3, #0
 8008602:	d015      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008604:	4b53      	ldr	r3, [pc, #332]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	4950      	ldr	r1, [pc, #320]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008622:	d105      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008624:	4b4b      	ldr	r3, [pc, #300]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4a4a      	ldr	r2, [pc, #296]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800862e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008638:	2b00      	cmp	r3, #0
 800863a:	d015      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800863c:	4b45      	ldr	r3, [pc, #276]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800863e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008642:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	4942      	ldr	r1, [pc, #264]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800865a:	d105      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800865c:	4b3d      	ldr	r3, [pc, #244]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	4a3c      	ldr	r2, [pc, #240]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008666:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d015      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008674:	4b37      	ldr	r3, [pc, #220]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	4934      	ldr	r1, [pc, #208]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008692:	d105      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008694:	4b2f      	ldr	r3, [pc, #188]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4a2e      	ldr	r2, [pc, #184]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d015      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ba:	4926      	ldr	r1, [pc, #152]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ca:	d105      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086cc:	4b21      	ldr	r3, [pc, #132]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	4a20      	ldr	r2, [pc, #128]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d015      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	4918      	ldr	r1, [pc, #96]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008702:	d105      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008704:	4b13      	ldr	r3, [pc, #76]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4a12      	ldr	r2, [pc, #72]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800870a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800870e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d015      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800871c:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800871e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872a:	490a      	ldr	r1, [pc, #40]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800872c:	4313      	orrs	r3, r2
 800872e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873a:	d105      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4a04      	ldr	r2, [pc, #16]	; (8008754 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008746:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008748:	7cbb      	ldrb	r3, [r7, #18]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40021000 	.word	0x40021000

08008758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e049      	b.n	80087fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fa fcc8 	bl	8003114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f000 fb3e 	bl	8008e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	d001      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e04a      	b.n	80088b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a21      	ldr	r2, [pc, #132]	; (80088c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d018      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x6c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884a:	d013      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x6c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00e      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x6c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_TIM_Base_Start_IT+0xc4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d009      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x6c>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1a      	ldr	r2, [pc, #104]	; (80088d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d004      	beq.n	8008874 <HAL_TIM_Base_Start_IT+0x6c>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d115      	bne.n	80088a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800887c:	4013      	ands	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b06      	cmp	r3, #6
 8008884:	d015      	beq.n	80088b2 <HAL_TIM_Base_Start_IT+0xaa>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888c:	d011      	beq.n	80088b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889e:	e008      	b.n	80088b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e000      	b.n	80088b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40012c00 	.word	0x40012c00
 80088c8:	40000400 	.word	0x40000400
 80088cc:	40000800 	.word	0x40000800
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40014000 	.word	0x40014000
 80088d8:	00010007 	.word	0x00010007

080088dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d122      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d11b      	bne.n	8008938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0202 	mvn.w	r2, #2
 8008908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa5c 	bl	8008ddc <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa4e 	bl	8008dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa5f 	bl	8008df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d122      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11b      	bne.n	800898c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0204 	mvn.w	r2, #4
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa32 	bl	8008ddc <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa24 	bl	8008dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fa35 	bl	8008df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b08      	cmp	r3, #8
 8008998:	d122      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d11b      	bne.n	80089e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0208 	mvn.w	r2, #8
 80089b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2204      	movs	r2, #4
 80089b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa08 	bl	8008ddc <HAL_TIM_IC_CaptureCallback>
 80089cc:	e005      	b.n	80089da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9fa 	bl	8008dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fa0b 	bl	8008df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0310 	and.w	r3, r3, #16
 80089ea:	2b10      	cmp	r3, #16
 80089ec:	d122      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d11b      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f06f 0210 	mvn.w	r2, #16
 8008a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9de 	bl	8008ddc <HAL_TIM_IC_CaptureCallback>
 8008a20:	e005      	b.n	8008a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9d0 	bl	8008dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9e1 	bl	8008df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d10e      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d107      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0201 	mvn.w	r2, #1
 8008a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7f8 f9aa 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b80      	cmp	r3, #128	; 0x80
 8008a6c:	d10e      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb7e 	bl	8009188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9a:	d10e      	bne.n	8008aba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa6:	2b80      	cmp	r3, #128	; 0x80
 8008aa8:	d107      	bne.n	8008aba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fb71 	bl	800919c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	d10e      	bne.n	8008ae6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d107      	bne.n	8008ae6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f98f 	bl	8008e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d10e      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d107      	bne.n	8008b12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f06f 0220 	mvn.w	r2, #32
 8008b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb31 	bl	8009174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b20:	d10f      	bne.n	8008b42 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b30:	d107      	bne.n	8008b42 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb37 	bl	80091b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b50:	d10f      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b60:	d107      	bne.n	8008b72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fb29 	bl	80091c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b80:	d10f      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b90:	d107      	bne.n	8008ba2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb1b 	bl	80091d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bc0:	d107      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fb0d 	bl	80091ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_TIM_ConfigClockSource+0x18>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e0dd      	b.n	8008db0 <HAL_TIM_ConfigClockSource+0x1d4>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a62      	ldr	r2, [pc, #392]	; (8008db8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	f000 80a9 	beq.w	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c34:	4a60      	ldr	r2, [pc, #384]	; (8008db8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	f200 80ae 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c3c:	4a5f      	ldr	r2, [pc, #380]	; (8008dbc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f000 80a1 	beq.w	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c44:	4a5d      	ldr	r2, [pc, #372]	; (8008dbc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	f200 80a6 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c4c:	4a5c      	ldr	r2, [pc, #368]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f000 8099 	beq.w	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c54:	4a5a      	ldr	r2, [pc, #360]	; (8008dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f200 809e 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c5c:	4a59      	ldr	r2, [pc, #356]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 8091 	beq.w	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c64:	4a57      	ldr	r2, [pc, #348]	; (8008dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f200 8096 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c70:	f000 8089 	beq.w	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c78:	f200 808e 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c80:	d03e      	beq.n	8008d00 <HAL_TIM_ConfigClockSource+0x124>
 8008c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c86:	f200 8087 	bhi.w	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8e:	f000 8085 	beq.w	8008d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d87f      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c98:	2b70      	cmp	r3, #112	; 0x70
 8008c9a:	d01a      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0xf6>
 8008c9c:	2b70      	cmp	r3, #112	; 0x70
 8008c9e:	d87b      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ca0:	2b60      	cmp	r3, #96	; 0x60
 8008ca2:	d050      	beq.n	8008d46 <HAL_TIM_ConfigClockSource+0x16a>
 8008ca4:	2b60      	cmp	r3, #96	; 0x60
 8008ca6:	d877      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ca8:	2b50      	cmp	r3, #80	; 0x50
 8008caa:	d03c      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x14a>
 8008cac:	2b50      	cmp	r3, #80	; 0x50
 8008cae:	d873      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d058      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x18a>
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d86f      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cb8:	2b30      	cmp	r3, #48	; 0x30
 8008cba:	d064      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cbc:	2b30      	cmp	r3, #48	; 0x30
 8008cbe:	d86b      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d060      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	d867      	bhi.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d05c      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d05a      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008cd0:	e062      	b.n	8008d98 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6899      	ldr	r1, [r3, #8]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f000 f9a5 	bl	8009030 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cf4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	609a      	str	r2, [r3, #8]
      break;
 8008cfe:	e04e      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	6899      	ldr	r1, [r3, #8]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f000 f98e 	bl	8009030 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d22:	609a      	str	r2, [r3, #8]
      break;
 8008d24:	e03b      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	6859      	ldr	r1, [r3, #4]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	461a      	mov	r2, r3
 8008d34:	f000 f900 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2150      	movs	r1, #80	; 0x50
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f959 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008d44:	e02b      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6859      	ldr	r1, [r3, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f000 f91f 	bl	8008f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2160      	movs	r1, #96	; 0x60
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f949 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008d64:	e01b      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	6859      	ldr	r1, [r3, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f000 f8e0 	bl	8008f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2140      	movs	r1, #64	; 0x40
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 f939 	bl	8008ff6 <TIM_ITRx_SetConfig>
      break;
 8008d84:	e00b      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f000 f930 	bl	8008ff6 <TIM_ITRx_SetConfig>
        break;
 8008d96:	e002      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8008d98:	bf00      	nop
 8008d9a:	e000      	b.n	8008d9e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8008d9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	00100070 	.word	0x00100070
 8008dbc:	00100040 	.word	0x00100040
 8008dc0:	00100030 	.word	0x00100030
 8008dc4:	00100020 	.word	0x00100020

08008dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a3c      	ldr	r2, [pc, #240]	; (8008f1c <TIM_Base_SetConfig+0x104>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_Base_SetConfig+0x38>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d00b      	beq.n	8008e50 <TIM_Base_SetConfig+0x38>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a39      	ldr	r2, [pc, #228]	; (8008f20 <TIM_Base_SetConfig+0x108>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_Base_SetConfig+0x38>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a38      	ldr	r2, [pc, #224]	; (8008f24 <TIM_Base_SetConfig+0x10c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_Base_SetConfig+0x38>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a37      	ldr	r2, [pc, #220]	; (8008f28 <TIM_Base_SetConfig+0x110>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d108      	bne.n	8008e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2d      	ldr	r2, [pc, #180]	; (8008f1c <TIM_Base_SetConfig+0x104>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01b      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e70:	d017      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2a      	ldr	r2, [pc, #168]	; (8008f20 <TIM_Base_SetConfig+0x108>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d013      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <TIM_Base_SetConfig+0x10c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00f      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a28      	ldr	r2, [pc, #160]	; (8008f28 <TIM_Base_SetConfig+0x110>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00b      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a27      	ldr	r2, [pc, #156]	; (8008f2c <TIM_Base_SetConfig+0x114>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d007      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <TIM_Base_SetConfig+0x118>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d003      	beq.n	8008ea2 <TIM_Base_SetConfig+0x8a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a25      	ldr	r2, [pc, #148]	; (8008f34 <TIM_Base_SetConfig+0x11c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d108      	bne.n	8008eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a10      	ldr	r2, [pc, #64]	; (8008f1c <TIM_Base_SetConfig+0x104>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d00f      	beq.n	8008f00 <TIM_Base_SetConfig+0xe8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a11      	ldr	r2, [pc, #68]	; (8008f28 <TIM_Base_SetConfig+0x110>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00b      	beq.n	8008f00 <TIM_Base_SetConfig+0xe8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a10      	ldr	r2, [pc, #64]	; (8008f2c <TIM_Base_SetConfig+0x114>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d007      	beq.n	8008f00 <TIM_Base_SetConfig+0xe8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <TIM_Base_SetConfig+0x118>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d003      	beq.n	8008f00 <TIM_Base_SetConfig+0xe8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a0e      	ldr	r2, [pc, #56]	; (8008f34 <TIM_Base_SetConfig+0x11c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d103      	bne.n	8008f08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	615a      	str	r2, [r3, #20]
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	40012c00 	.word	0x40012c00
 8008f20:	40000400 	.word	0x40000400
 8008f24:	40000800 	.word	0x40000800
 8008f28:	40013400 	.word	0x40013400
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800

08008f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f023 030a 	bic.w	r3, r3, #10
 8008f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b087      	sub	sp, #28
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0210 	bic.w	r2, r3, #16
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800900c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	f043 0307 	orr.w	r3, r3, #7
 800901c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	609a      	str	r2, [r3, #8]
}
 8009024:	bf00      	nop
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800904a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	021a      	lsls	r2, r3, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	431a      	orrs	r2, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4313      	orrs	r3, r2
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	609a      	str	r2, [r3, #8]
}
 8009064:	bf00      	nop
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009084:	2302      	movs	r3, #2
 8009086:	e065      	b.n	8009154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a2c      	ldr	r2, [pc, #176]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a2b      	ldr	r2, [pc, #172]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d108      	bne.n	80090ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80090d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1b      	ldr	r2, [pc, #108]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d018      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fe:	d013      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a18      	ldr	r2, [pc, #96]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00e      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a17      	ldr	r2, [pc, #92]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d009      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a12      	ldr	r2, [pc, #72]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a13      	ldr	r2, [pc, #76]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d10c      	bne.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	4313      	orrs	r3, r2
 8009138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	40012c00 	.word	0x40012c00
 8009164:	40013400 	.word	0x40013400
 8009168:	40000400 	.word	0x40000400
 800916c:	40000800 	.word	0x40000800
 8009170:	40014000 	.word	0x40014000

08009174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e042      	b.n	8009298 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7f9 ffc9 	bl	80031bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2224      	movs	r2, #36	; 0x24
 800922e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0201 	bic.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fb88 	bl	8009958 <UART_SetConfig>
 8009248:	4603      	mov	r3, r0
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e022      	b.n	8009298 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fe20 	bl	8009ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800926e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800927e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0201 	orr.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fea7 	bl	8009fe4 <UART_CheckIdleState>
 8009296:	4603      	mov	r3, r0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	f040 8083 	bne.w	80093c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HAL_UART_Transmit+0x28>
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e07b      	b.n	80093c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UART_Transmit+0x3a>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e074      	b.n	80093c4 <HAL_UART_Transmit+0x124>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2221      	movs	r2, #33	; 0x21
 80092ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092f2:	f7fa f8f1 	bl	80034d8 <HAL_GetTick>
 80092f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	88fa      	ldrh	r2, [r7, #6]
 80092fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009310:	d108      	bne.n	8009324 <HAL_UART_Transmit+0x84>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	e003      	b.n	800932c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009334:	e02c      	b.n	8009390 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2200      	movs	r2, #0
 800933e:	2180      	movs	r1, #128	; 0x80
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fe97 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e039      	b.n	80093c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	3302      	adds	r3, #2
 800936a:	61bb      	str	r3, [r7, #24]
 800936c:	e007      	b.n	800937e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	781a      	ldrb	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	3301      	adds	r3, #1
 800937c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009396:	b29b      	uxth	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1cc      	bne.n	8009336 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	2140      	movs	r1, #64	; 0x40
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fe64 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e006      	b.n	80093c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	e000      	b.n	80093c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80093c2:	2302      	movs	r3, #2
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	f040 80bc 	bne.w	800955e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <HAL_UART_Receive_IT+0x26>
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e0b4      	b.n	8009560 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d101      	bne.n	8009404 <HAL_UART_Receive_IT+0x38>
 8009400:	2302      	movs	r3, #2
 8009402:	e0ad      	b.n	8009560 <HAL_UART_Receive_IT+0x194>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	88fa      	ldrh	r2, [r7, #6]
 8009416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	88fa      	ldrh	r2, [r7, #6]
 800941e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009430:	d10e      	bne.n	8009450 <HAL_UART_Receive_IT+0x84>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <HAL_UART_Receive_IT+0x7a>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009444:	e02d      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	22ff      	movs	r2, #255	; 0xff
 800944a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800944e:	e028      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10d      	bne.n	8009474 <HAL_UART_Receive_IT+0xa8>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_UART_Receive_IT+0x9e>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	22ff      	movs	r2, #255	; 0xff
 8009464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009468:	e01b      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	227f      	movs	r2, #127	; 0x7f
 800946e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009472:	e016      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800947c:	d10d      	bne.n	800949a <HAL_UART_Receive_IT+0xce>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d104      	bne.n	8009490 <HAL_UART_Receive_IT+0xc4>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	227f      	movs	r2, #127	; 0x7f
 800948a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800948e:	e008      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	223f      	movs	r2, #63	; 0x3f
 8009494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009498:	e003      	b.n	80094a2 <HAL_UART_Receive_IT+0xd6>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2222      	movs	r2, #34	; 0x22
 80094ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ca:	d12a      	bne.n	8009522 <HAL_UART_Receive_IT+0x156>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d324      	bcc.n	8009522 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e0:	d107      	bne.n	80094f2 <HAL_UART_Receive_IT+0x126>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4a1f      	ldr	r2, [pc, #124]	; (800956c <HAL_UART_Receive_IT+0x1a0>)
 80094ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80094f0:	e002      	b.n	80094f8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a1e      	ldr	r2, [pc, #120]	; (8009570 <HAL_UART_Receive_IT+0x1a4>)
 80094f6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800950e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800951e:	609a      	str	r2, [r3, #8]
 8009520:	e01b      	b.n	800955a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952a:	d107      	bne.n	800953c <HAL_UART_Receive_IT+0x170>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a0f      	ldr	r2, [pc, #60]	; (8009574 <HAL_UART_Receive_IT+0x1a8>)
 8009538:	66da      	str	r2, [r3, #108]	; 0x6c
 800953a:	e002      	b.n	8009542 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4a0e      	ldr	r2, [pc, #56]	; (8009578 <HAL_UART_Receive_IT+0x1ac>)
 8009540:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009558:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	e000      	b.n	8009560 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800955e:	2302      	movs	r3, #2
  }
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	0800a479 	.word	0x0800a479
 8009570:	0800a371 	.word	0x0800a371
 8009574:	0800a2c5 	.word	0x0800a2c5
 8009578:	0800a21b 	.word	0x0800a21b

0800957c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009592:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	6093      	str	r3, [r2, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d125      	bne.n	8009602 <HAL_UART_AbortReceive+0x86>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d019      	beq.n	8009602 <HAL_UART_AbortReceive+0x86>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095d2:	2200      	movs	r2, #0
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fb ff21 	bl	8005422 <HAL_DMA_Abort>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00d      	beq.n	8009602 <HAL_UART_AbortReceive+0x86>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fc f888 	bl	8005700 <HAL_DMA_GetError>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d105      	bne.n	8009602 <HAL_UART_AbortReceive+0x86>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2210      	movs	r2, #16
 80095fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e014      	b.n	800962c <HAL_UART_AbortReceive+0xb0>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	220f      	movs	r2, #15
 8009610:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0208 	orr.w	r2, r2, #8
 8009620:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009654:	69fa      	ldr	r2, [r7, #28]
 8009656:	f640 030f 	movw	r3, #2063	; 0x80f
 800965a:	4013      	ands	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d118      	bne.n	8009696 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d013      	beq.n	8009696 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	d104      	bne.n	8009682 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8144 	beq.w	8009914 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	4798      	blx	r3
      }
      return;
 8009694:	e13e      	b.n	8009914 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80e8 	beq.w	800986e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4ba0      	ldr	r3, [pc, #640]	; (8009924 <HAL_UART_IRQHandler+0x2f0>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d105      	bne.n	80096b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	4b9f      	ldr	r3, [pc, #636]	; (8009928 <HAL_UART_IRQHandler+0x2f4>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 80dd 	beq.w	800986e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d010      	beq.n	80096e0 <HAL_UART_IRQHandler+0xac>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d6:	f043 0201 	orr.w	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d010      	beq.n	800970c <HAL_UART_IRQHandler+0xd8>
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2202      	movs	r2, #2
 80096fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	f043 0204 	orr.w	r2, r3, #4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d010      	beq.n	8009738 <HAL_UART_IRQHandler+0x104>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2204      	movs	r2, #4
 8009726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	f043 0202 	orr.w	r2, r3, #2
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d015      	beq.n	800976e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f003 0320 	and.w	r3, r3, #32
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	4b75      	ldr	r3, [pc, #468]	; (8009924 <HAL_UART_IRQHandler+0x2f0>)
 8009750:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2208      	movs	r2, #8
 800975c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009764:	f043 0208 	orr.w	r2, r3, #8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009774:	2b00      	cmp	r3, #0
 8009776:	d011      	beq.n	800979c <HAL_UART_IRQHandler+0x168>
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00c      	beq.n	800979c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800978a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009792:	f043 0220 	orr.w	r2, r3, #32
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 80b8 	beq.w	8009918 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d011      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d004      	beq.n	80097f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d031      	beq.n	800985a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fcbc 	bl	800a174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d123      	bne.n	8009852 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009818:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800981e:	2b00      	cmp	r3, #0
 8009820:	d013      	beq.n	800984a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009826:	4a41      	ldr	r2, [pc, #260]	; (800992c <HAL_UART_IRQHandler+0x2f8>)
 8009828:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800982e:	4618      	mov	r0, r3
 8009830:	f7fb fe50 	bl	80054d4 <HAL_DMA_Abort_IT>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d017      	beq.n	800986a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009848:	e00f      	b.n	800986a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f87a 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009850:	e00b      	b.n	800986a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f876 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009858:	e007      	b.n	800986a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f872 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009868:	e056      	b.n	8009918 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986a:	bf00      	nop
    return;
 800986c:	e054      	b.n	8009918 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00d      	beq.n	8009894 <HAL_UART_IRQHandler+0x260>
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800988a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fe77 	bl	800a580 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009892:	e044      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d012      	beq.n	80098c4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d030      	beq.n	800991c <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
    }
    return;
 80098c2:	e02b      	b.n	800991c <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <HAL_UART_IRQHandler+0x2ac>
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc84 	bl	800a1e6 <UART_EndTransmit_IT>
    return;
 80098de:	e01e      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d008      	beq.n	80098fc <HAL_UART_IRQHandler+0x2c8>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fe57 	bl	800a5a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fa:	e010      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <HAL_UART_IRQHandler+0x2ea>
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da08      	bge.n	800991e <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fe41 	bl	800a594 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009912:	e004      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
      return;
 8009914:	bf00      	nop
 8009916:	e002      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
    return;
 8009918:	bf00      	nop
 800991a:	e000      	b.n	800991e <HAL_UART_IRQHandler+0x2ea>
    return;
 800991c:	bf00      	nop
  }
}
 800991e:	3720      	adds	r7, #32
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	10000001 	.word	0x10000001
 8009928:	04000120 	.word	0x04000120
 800992c:	0800a1bb 	.word	0x0800a1bb

08009930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009958:	b5b0      	push	{r4, r5, r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	4313      	orrs	r3, r2
 800997a:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	4313      	orrs	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	4baf      	ldr	r3, [pc, #700]	; (8009c4c <UART_SetConfig+0x2f4>)
 800998e:	4013      	ands	r3, r2
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	69f9      	ldr	r1, [r7, #28]
 8009996:	430b      	orrs	r3, r1
 8009998:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68da      	ldr	r2, [r3, #12]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4aa5      	ldr	r2, [pc, #660]	; (8009c50 <UART_SetConfig+0x2f8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d004      	beq.n	80099ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80099d4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	6812      	ldr	r2, [r2, #0]
 80099dc:	69f9      	ldr	r1, [r7, #28]
 80099de:	430b      	orrs	r3, r1
 80099e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	f023 010f 	bic.w	r1, r3, #15
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a95      	ldr	r2, [pc, #596]	; (8009c54 <UART_SetConfig+0x2fc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d121      	bne.n	8009a46 <UART_SetConfig+0xee>
 8009a02:	4b95      	ldr	r3, [pc, #596]	; (8009c58 <UART_SetConfig+0x300>)
 8009a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d817      	bhi.n	8009a40 <UART_SetConfig+0xe8>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0xc0>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a35 	.word	0x08009a35
 8009a20:	08009a2f 	.word	0x08009a2f
 8009a24:	08009a3b 	.word	0x08009a3b
 8009a28:	2301      	movs	r3, #1
 8009a2a:	76fb      	strb	r3, [r7, #27]
 8009a2c:	e0bc      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	76fb      	strb	r3, [r7, #27]
 8009a32:	e0b9      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a34:	2304      	movs	r3, #4
 8009a36:	76fb      	strb	r3, [r7, #27]
 8009a38:	e0b6      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	76fb      	strb	r3, [r7, #27]
 8009a3e:	e0b3      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a40:	2310      	movs	r3, #16
 8009a42:	76fb      	strb	r3, [r7, #27]
 8009a44:	e0b0      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a84      	ldr	r2, [pc, #528]	; (8009c5c <UART_SetConfig+0x304>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d132      	bne.n	8009ab6 <UART_SetConfig+0x15e>
 8009a50:	4b81      	ldr	r3, [pc, #516]	; (8009c58 <UART_SetConfig+0x300>)
 8009a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a56:	f003 030c 	and.w	r3, r3, #12
 8009a5a:	2b0c      	cmp	r3, #12
 8009a5c:	d828      	bhi.n	8009ab0 <UART_SetConfig+0x158>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <UART_SetConfig+0x10c>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a99 	.word	0x08009a99
 8009a68:	08009ab1 	.word	0x08009ab1
 8009a6c:	08009ab1 	.word	0x08009ab1
 8009a70:	08009ab1 	.word	0x08009ab1
 8009a74:	08009aa5 	.word	0x08009aa5
 8009a78:	08009ab1 	.word	0x08009ab1
 8009a7c:	08009ab1 	.word	0x08009ab1
 8009a80:	08009ab1 	.word	0x08009ab1
 8009a84:	08009a9f 	.word	0x08009a9f
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab1 	.word	0x08009ab1
 8009a94:	08009aab 	.word	0x08009aab
 8009a98:	2300      	movs	r3, #0
 8009a9a:	76fb      	strb	r3, [r7, #27]
 8009a9c:	e084      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	76fb      	strb	r3, [r7, #27]
 8009aa2:	e081      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	76fb      	strb	r3, [r7, #27]
 8009aa8:	e07e      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009aaa:	2308      	movs	r3, #8
 8009aac:	76fb      	strb	r3, [r7, #27]
 8009aae:	e07b      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	76fb      	strb	r3, [r7, #27]
 8009ab4:	e078      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a69      	ldr	r2, [pc, #420]	; (8009c60 <UART_SetConfig+0x308>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d120      	bne.n	8009b02 <UART_SetConfig+0x1aa>
 8009ac0:	4b65      	ldr	r3, [pc, #404]	; (8009c58 <UART_SetConfig+0x300>)
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009aca:	2b30      	cmp	r3, #48	; 0x30
 8009acc:	d013      	beq.n	8009af6 <UART_SetConfig+0x19e>
 8009ace:	2b30      	cmp	r3, #48	; 0x30
 8009ad0:	d814      	bhi.n	8009afc <UART_SetConfig+0x1a4>
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	d009      	beq.n	8009aea <UART_SetConfig+0x192>
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d810      	bhi.n	8009afc <UART_SetConfig+0x1a4>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <UART_SetConfig+0x18c>
 8009ade:	2b10      	cmp	r3, #16
 8009ae0:	d006      	beq.n	8009af0 <UART_SetConfig+0x198>
 8009ae2:	e00b      	b.n	8009afc <UART_SetConfig+0x1a4>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	76fb      	strb	r3, [r7, #27]
 8009ae8:	e05e      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009aea:	2302      	movs	r3, #2
 8009aec:	76fb      	strb	r3, [r7, #27]
 8009aee:	e05b      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009af0:	2304      	movs	r3, #4
 8009af2:	76fb      	strb	r3, [r7, #27]
 8009af4:	e058      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009af6:	2308      	movs	r3, #8
 8009af8:	76fb      	strb	r3, [r7, #27]
 8009afa:	e055      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009afc:	2310      	movs	r3, #16
 8009afe:	76fb      	strb	r3, [r7, #27]
 8009b00:	e052      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a57      	ldr	r2, [pc, #348]	; (8009c64 <UART_SetConfig+0x30c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d120      	bne.n	8009b4e <UART_SetConfig+0x1f6>
 8009b0c:	4b52      	ldr	r3, [pc, #328]	; (8009c58 <UART_SetConfig+0x300>)
 8009b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b16:	2bc0      	cmp	r3, #192	; 0xc0
 8009b18:	d013      	beq.n	8009b42 <UART_SetConfig+0x1ea>
 8009b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009b1c:	d814      	bhi.n	8009b48 <UART_SetConfig+0x1f0>
 8009b1e:	2b80      	cmp	r3, #128	; 0x80
 8009b20:	d009      	beq.n	8009b36 <UART_SetConfig+0x1de>
 8009b22:	2b80      	cmp	r3, #128	; 0x80
 8009b24:	d810      	bhi.n	8009b48 <UART_SetConfig+0x1f0>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <UART_SetConfig+0x1d8>
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d006      	beq.n	8009b3c <UART_SetConfig+0x1e4>
 8009b2e:	e00b      	b.n	8009b48 <UART_SetConfig+0x1f0>
 8009b30:	2300      	movs	r3, #0
 8009b32:	76fb      	strb	r3, [r7, #27]
 8009b34:	e038      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b36:	2302      	movs	r3, #2
 8009b38:	76fb      	strb	r3, [r7, #27]
 8009b3a:	e035      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	76fb      	strb	r3, [r7, #27]
 8009b40:	e032      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b42:	2308      	movs	r3, #8
 8009b44:	76fb      	strb	r3, [r7, #27]
 8009b46:	e02f      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	76fb      	strb	r3, [r7, #27]
 8009b4c:	e02c      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a3f      	ldr	r2, [pc, #252]	; (8009c50 <UART_SetConfig+0x2f8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d125      	bne.n	8009ba4 <UART_SetConfig+0x24c>
 8009b58:	4b3f      	ldr	r3, [pc, #252]	; (8009c58 <UART_SetConfig+0x300>)
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b66:	d017      	beq.n	8009b98 <UART_SetConfig+0x240>
 8009b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b6c:	d817      	bhi.n	8009b9e <UART_SetConfig+0x246>
 8009b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b72:	d00b      	beq.n	8009b8c <UART_SetConfig+0x234>
 8009b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b78:	d811      	bhi.n	8009b9e <UART_SetConfig+0x246>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <UART_SetConfig+0x22e>
 8009b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b82:	d006      	beq.n	8009b92 <UART_SetConfig+0x23a>
 8009b84:	e00b      	b.n	8009b9e <UART_SetConfig+0x246>
 8009b86:	2300      	movs	r3, #0
 8009b88:	76fb      	strb	r3, [r7, #27]
 8009b8a:	e00d      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	76fb      	strb	r3, [r7, #27]
 8009b90:	e00a      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b92:	2304      	movs	r3, #4
 8009b94:	76fb      	strb	r3, [r7, #27]
 8009b96:	e007      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	76fb      	strb	r3, [r7, #27]
 8009b9c:	e004      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	76fb      	strb	r3, [r7, #27]
 8009ba2:	e001      	b.n	8009ba8 <UART_SetConfig+0x250>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a28      	ldr	r2, [pc, #160]	; (8009c50 <UART_SetConfig+0x2f8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	f040 809e 	bne.w	8009cf0 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bb4:	7efb      	ldrb	r3, [r7, #27]
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d823      	bhi.n	8009c02 <UART_SetConfig+0x2aa>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x268>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009c03 	.word	0x08009c03
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009c03 	.word	0x08009c03
 8009bd0:	08009bf3 	.word	0x08009bf3
 8009bd4:	08009c03 	.word	0x08009c03
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009c03 	.word	0x08009c03
 8009be0:	08009bfb 	.word	0x08009bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be4:	f7fe fb56 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 8009be8:	6178      	str	r0, [r7, #20]
        break;
 8009bea:	e00f      	b.n	8009c0c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bec:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <UART_SetConfig+0x310>)
 8009bee:	617b      	str	r3, [r7, #20]
        break;
 8009bf0:	e00c      	b.n	8009c0c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf2:	f7fe fae1 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8009bf6:	6178      	str	r0, [r7, #20]
        break;
 8009bf8:	e008      	b.n	8009c0c <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfe:	617b      	str	r3, [r7, #20]
        break;
 8009c00:	e004      	b.n	8009c0c <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	76bb      	strb	r3, [r7, #26]
        break;
 8009c0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 812e 	beq.w	8009e70 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <UART_SetConfig+0x314>)
 8009c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	4413      	add	r3, r2
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d305      	bcc.n	8009c44 <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d915      	bls.n	8009c70 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	76bb      	strb	r3, [r7, #26]
 8009c48:	e112      	b.n	8009e70 <UART_SetConfig+0x518>
 8009c4a:	bf00      	nop
 8009c4c:	cfff69f3 	.word	0xcfff69f3
 8009c50:	40008000 	.word	0x40008000
 8009c54:	40013800 	.word	0x40013800
 8009c58:	40021000 	.word	0x40021000
 8009c5c:	40004400 	.word	0x40004400
 8009c60:	40004800 	.word	0x40004800
 8009c64:	40004c00 	.word	0x40004c00
 8009c68:	00f42400 	.word	0x00f42400
 8009c6c:	0800fe14 	.word	0x0800fe14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f04f 0100 	mov.w	r1, #0
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	4a86      	ldr	r2, [pc, #536]	; (8009e98 <UART_SetConfig+0x540>)
 8009c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	f04f 0300 	mov.w	r3, #0
 8009c88:	f7f6 ff18 	bl	8000abc <__aeabi_uldivmod>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4610      	mov	r0, r2
 8009c92:	4619      	mov	r1, r3
 8009c94:	f04f 0200 	mov.w	r2, #0
 8009c98:	f04f 0300 	mov.w	r3, #0
 8009c9c:	020b      	lsls	r3, r1, #8
 8009c9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ca2:	0202      	lsls	r2, r0, #8
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	6849      	ldr	r1, [r1, #4]
 8009ca8:	0849      	lsrs	r1, r1, #1
 8009caa:	4608      	mov	r0, r1
 8009cac:	f04f 0100 	mov.w	r1, #0
 8009cb0:	1814      	adds	r4, r2, r0
 8009cb2:	eb43 0501 	adc.w	r5, r3, r1
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f7f6 fefa 	bl	8000abc <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd6:	d308      	bcc.n	8009cea <UART_SetConfig+0x392>
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cde:	d204      	bcs.n	8009cea <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e0c2      	b.n	8009e70 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	76bb      	strb	r3, [r7, #26]
 8009cee:	e0bf      	b.n	8009e70 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf8:	d165      	bne.n	8009dc6 <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 8009cfa:	7efb      	ldrb	r3, [r7, #27]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d828      	bhi.n	8009d52 <UART_SetConfig+0x3fa>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x3b0>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d3d 	.word	0x08009d3d
 8009d14:	08009d53 	.word	0x08009d53
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d53 	.word	0x08009d53
 8009d20:	08009d53 	.word	0x08009d53
 8009d24:	08009d53 	.word	0x08009d53
 8009d28:	08009d4b 	.word	0x08009d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d2c:	f7fe fab2 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 8009d30:	6178      	str	r0, [r7, #20]
        break;
 8009d32:	e013      	b.n	8009d5c <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d34:	f7fe fac4 	bl	80082c0 <HAL_RCC_GetPCLK2Freq>
 8009d38:	6178      	str	r0, [r7, #20]
        break;
 8009d3a:	e00f      	b.n	8009d5c <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d3c:	4b57      	ldr	r3, [pc, #348]	; (8009e9c <UART_SetConfig+0x544>)
 8009d3e:	617b      	str	r3, [r7, #20]
        break;
 8009d40:	e00c      	b.n	8009d5c <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d42:	f7fe fa39 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8009d46:	6178      	str	r0, [r7, #20]
        break;
 8009d48:	e008      	b.n	8009d5c <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d4e:	617b      	str	r3, [r7, #20]
        break;
 8009d50:	e004      	b.n	8009d5c <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	76bb      	strb	r3, [r7, #26]
        break;
 8009d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8086 	beq.w	8009e70 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	4a4b      	ldr	r2, [pc, #300]	; (8009e98 <UART_SetConfig+0x540>)
 8009d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d76:	005a      	lsls	r2, r3, #1
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	085b      	lsrs	r3, r3, #1
 8009d7e:	441a      	add	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d916      	bls.n	8009dc0 <UART_SetConfig+0x468>
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d212      	bcs.n	8009dc0 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f023 030f 	bic.w	r3, r3, #15
 8009da2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	89fb      	ldrh	r3, [r7, #14]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	89fa      	ldrh	r2, [r7, #14]
 8009dbc:	60da      	str	r2, [r3, #12]
 8009dbe:	e057      	b.n	8009e70 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	76bb      	strb	r3, [r7, #26]
 8009dc4:	e054      	b.n	8009e70 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dc6:	7efb      	ldrb	r3, [r7, #27]
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d828      	bhi.n	8009e1e <UART_SetConfig+0x4c6>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0x47c>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e1f 	.word	0x08009e1f
 8009de4:	08009e0f 	.word	0x08009e0f
 8009de8:	08009e1f 	.word	0x08009e1f
 8009dec:	08009e1f 	.word	0x08009e1f
 8009df0:	08009e1f 	.word	0x08009e1f
 8009df4:	08009e17 	.word	0x08009e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df8:	f7fe fa4c 	bl	8008294 <HAL_RCC_GetPCLK1Freq>
 8009dfc:	6178      	str	r0, [r7, #20]
        break;
 8009dfe:	e013      	b.n	8009e28 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e00:	f7fe fa5e 	bl	80082c0 <HAL_RCC_GetPCLK2Freq>
 8009e04:	6178      	str	r0, [r7, #20]
        break;
 8009e06:	e00f      	b.n	8009e28 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b24      	ldr	r3, [pc, #144]	; (8009e9c <UART_SetConfig+0x544>)
 8009e0a:	617b      	str	r3, [r7, #20]
        break;
 8009e0c:	e00c      	b.n	8009e28 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e0e:	f7fe f9d3 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8009e12:	6178      	str	r0, [r7, #20]
        break;
 8009e14:	e008      	b.n	8009e28 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e1a:	617b      	str	r3, [r7, #20]
        break;
 8009e1c:	e004      	b.n	8009e28 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	76bb      	strb	r3, [r7, #26]
        break;
 8009e26:	bf00      	nop
    }

    if (pclk != 0U)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d020      	beq.n	8009e70 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	4a19      	ldr	r2, [pc, #100]	; (8009e98 <UART_SetConfig+0x540>)
 8009e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	085b      	lsrs	r3, r3, #1
 8009e46:	441a      	add	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d908      	bls.n	8009e6c <UART_SetConfig+0x514>
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e60:	d204      	bcs.n	8009e6c <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e001      	b.n	8009e70 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009e8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bdb0      	pop	{r4, r5, r7, pc}
 8009e96:	bf00      	nop
 8009e98:	0800fe14 	.word	0x0800fe14
 8009e9c:	00f42400 	.word	0x00f42400

08009ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ece:	f003 0302 	and.w	r3, r3, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01a      	beq.n	8009fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f9e:	d10a      	bne.n	8009fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	605a      	str	r2, [r3, #4]
  }
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ff4:	f7f9 fa70 	bl	80034d8 <HAL_GetTick>
 8009ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0308 	and.w	r3, r3, #8
 800a004:	2b08      	cmp	r3, #8
 800a006:	d10e      	bne.n	800a026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f82c 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e022      	b.n	800a06c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d10e      	bne.n	800a052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f816 	bl	800a074 <UART_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e00c      	b.n	800a06c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	4613      	mov	r3, r2
 800a082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a084:	e062      	b.n	800a14c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d05e      	beq.n	800a14c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a08e:	f7f9 fa23 	bl	80034d8 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d302      	bcc.n	800a0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d11d      	bne.n	800a0e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0201 	bic.w	r2, r2, #1
 800a0c2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e045      	b.n	800a16c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d02e      	beq.n	800a14c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69db      	ldr	r3, [r3, #28]
 800a0f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0fc:	d126      	bne.n	800a14c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a106:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a116:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689a      	ldr	r2, [r3, #8]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f022 0201 	bic.w	r2, r2, #1
 800a126:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2220      	movs	r2, #32
 800a13c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e00f      	b.n	800a16c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	69da      	ldr	r2, [r3, #28]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4013      	ands	r3, r2
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	429a      	cmp	r2, r3
 800a15a:	bf0c      	ite	eq
 800a15c:	2301      	moveq	r3, #1
 800a15e:	2300      	movne	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	429a      	cmp	r2, r3
 800a168:	d08d      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a18a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a19a:	f023 0301 	bic.w	r3, r3, #1
 800a19e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fbb3 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1de:	bf00      	nop
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1fc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff fb8f 	bl	8009930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a228:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a230:	2b22      	cmp	r3, #34	; 0x22
 800a232:	d13b      	bne.n	800a2ac <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a23c:	89bb      	ldrh	r3, [r7, #12]
 800a23e:	b2d9      	uxtb	r1, r3
 800a240:	89fb      	ldrh	r3, [r7, #14]
 800a242:	b2da      	uxtb	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a248:	400a      	ands	r2, r1
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3b01      	subs	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a270:	b29b      	uxth	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d122      	bne.n	800a2bc <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a284:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7f6 fdb3 	bl	8000e10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2aa:	e007      	b.n	800a2bc <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0208 	orr.w	r2, r2, #8
 800a2ba:	619a      	str	r2, [r3, #24]
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a2d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2da:	2b22      	cmp	r3, #34	; 0x22
 800a2dc:	d13b      	bne.n	800a356 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ea:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2ec:	89ba      	ldrh	r2, [r7, #12]
 800a2ee:	89fb      	ldrh	r3, [r7, #14]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2fc:	1c9a      	adds	r2, r3, #2
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d122      	bne.n	800a366 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a32e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689a      	ldr	r2, [r3, #8]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f022 0201 	bic.w	r2, r2, #1
 800a33e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7f6 fd5e 	bl	8000e10 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a354:	e007      	b.n	800a366 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0208 	orr.w	r2, r2, #8
 800a364:	619a      	str	r2, [r3, #24]
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a37e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a386:	2b22      	cmp	r3, #34	; 0x22
 800a388:	d168      	bne.n	800a45c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a390:	81fb      	strh	r3, [r7, #14]
 800a392:	e03f      	b.n	800a414 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a39c:	893b      	ldrh	r3, [r7, #8]
 800a39e:	b2d9      	uxtb	r1, r3
 800a3a0:	89bb      	ldrh	r3, [r7, #12]
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a8:	400a      	ands	r2, r1
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d11b      	bne.n	800a40e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6812      	ldr	r2, [r2, #0]
 800a3f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7f6 fd01 	bl	8000e10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a40e:	89fb      	ldrh	r3, [r7, #14]
 800a410:	3b01      	subs	r3, #1
 800a412:	81fb      	strh	r3, [r7, #14]
 800a414:	89fb      	ldrh	r3, [r7, #14]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1bc      	bne.n	800a394 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a420:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a422:	897b      	ldrh	r3, [r7, #10]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d021      	beq.n	800a46c <UART_RxISR_8BIT_FIFOEN+0xfc>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a42e:	897a      	ldrh	r2, [r7, #10]
 800a430:	429a      	cmp	r2, r3
 800a432:	d21b      	bcs.n	800a46c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a442:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a0b      	ldr	r2, [pc, #44]	; (800a474 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800a448:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0220 	orr.w	r2, r2, #32
 800a458:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a45a:	e007      	b.n	800a46c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0208 	orr.w	r2, r2, #8
 800a46a:	619a      	str	r2, [r3, #24]
}
 800a46c:	bf00      	nop
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	0800a21b 	.word	0x0800a21b

0800a478 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a486:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48e:	2b22      	cmp	r3, #34	; 0x22
 800a490:	d168      	bne.n	800a564 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a498:	82fb      	strh	r3, [r7, #22]
 800a49a:	e03f      	b.n	800a51c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a4aa:	8a3a      	ldrh	r2, [r7, #16]
 800a4ac:	8abb      	ldrh	r3, [r7, #20]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ba:	1c9a      	adds	r2, r3, #2
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11b      	bne.n	800a516 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ec:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6812      	ldr	r2, [r2, #0]
 800a4f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4fc:	f023 0301 	bic.w	r3, r3, #1
 800a500:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7f6 fc7d 	bl	8000e10 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a516:	8afb      	ldrh	r3, [r7, #22]
 800a518:	3b01      	subs	r3, #1
 800a51a:	82fb      	strh	r3, [r7, #22]
 800a51c:	8afb      	ldrh	r3, [r7, #22]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1bc      	bne.n	800a49c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a528:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a52a:	8a7b      	ldrh	r3, [r7, #18]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d021      	beq.n	800a574 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a536:	8a7a      	ldrh	r2, [r7, #18]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d21b      	bcs.n	800a574 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a54a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a0b      	ldr	r2, [pc, #44]	; (800a57c <UART_RxISR_16BIT_FIFOEN+0x104>)
 800a550:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 0220 	orr.w	r2, r2, #32
 800a560:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a562:	e007      	b.n	800a574 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0208 	orr.w	r2, r2, #8
 800a572:	619a      	str	r2, [r3, #24]
}
 800a574:	bf00      	nop
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	0800a2c5 	.word	0x0800a2c5

0800a580 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e027      	b.n	800a622 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2224      	movs	r2, #36	; 0x24
 800a5de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0201 	bic.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a600:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2220      	movs	r2, #32
 800a614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a642:	2302      	movs	r3, #2
 800a644:	e02d      	b.n	800a6a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2224      	movs	r2, #36	; 0x24
 800a652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f850 	bl	800a728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e02d      	b.n	800a71e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2224      	movs	r2, #36	; 0x24
 800a6ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f022 0201 	bic.w	r2, r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f812 	bl	800a728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2220      	movs	r2, #32
 800a710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b089      	sub	sp, #36	; 0x24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a730:	4a2f      	ldr	r2, [pc, #188]	; (800a7f0 <UARTEx_SetNbDataToProcess+0xc8>)
 800a732:	f107 0314 	add.w	r3, r7, #20
 800a736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a73a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a73e:	4a2d      	ldr	r2, [pc, #180]	; (800a7f4 <UARTEx_SetNbDataToProcess+0xcc>)
 800a740:	f107 030c 	add.w	r3, r7, #12
 800a744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a748:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a764:	e03d      	b.n	800a7e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a766:	2308      	movs	r3, #8
 800a768:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a76a:	2308      	movs	r3, #8
 800a76c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	0e5b      	lsrs	r3, r3, #25
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	0f5b      	lsrs	r3, r3, #29
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a78e:	7fbb      	ldrb	r3, [r7, #30]
 800a790:	7f3a      	ldrb	r2, [r7, #28]
 800a792:	f107 0120 	add.w	r1, r7, #32
 800a796:	440a      	add	r2, r1
 800a798:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a79c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7a0:	7f3a      	ldrb	r2, [r7, #28]
 800a7a2:	f107 0120 	add.w	r1, r7, #32
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7b8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ba:	7f7a      	ldrb	r2, [r7, #29]
 800a7bc:	f107 0120 	add.w	r1, r7, #32
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a7ca:	7f7a      	ldrb	r2, [r7, #29]
 800a7cc:	f107 0120 	add.w	r1, r7, #32
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7e2:	bf00      	nop
 800a7e4:	3724      	adds	r7, #36	; 0x24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	0800fdb0 	.word	0x0800fdb0
 800a7f4:	0800fdb8 	.word	0x0800fdb8

0800a7f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a808:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a80c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a82e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a832:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	43db      	mvns	r3, r3
 800a842:	b29b      	uxth	r3, r3
 800a844:	4013      	ands	r3, r2
 800a846:	b29a      	uxth	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a85c:	b084      	sub	sp, #16
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	f107 0014 	add.w	r0, r7, #20
 800a86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	b004      	add	sp, #16
 800a89c:	4770      	bx	lr
	...

0800a8a0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b09b      	sub	sp, #108	; 0x6c
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	78db      	ldrb	r3, [r3, #3]
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d81f      	bhi.n	800a912 <USB_ActivateEndpoint+0x72>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <USB_ActivateEndpoint+0x38>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8e9 	.word	0x0800a8e9
 800a8dc:	0800a905 	.word	0x0800a905
 800a8e0:	0800a91b 	.word	0x0800a91b
 800a8e4:	0800a8f7 	.word	0x0800a8f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a8e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a8ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a8f4:	e012      	b.n	800a91c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a8f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a8fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a8fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a902:	e00b      	b.n	800a91c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a904:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a90c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800a910:	e004      	b.n	800a91c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800a918:	e000      	b.n	800a91c <USB_ActivateEndpoint+0x7c>
      break;
 800a91a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	441a      	add	r2, r3
 800a926:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b21b      	sxth	r3, r3
 800a94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a956:	b21a      	sxth	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b21b      	sxth	r3, r3
 800a962:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	441a      	add	r2, r3
 800a970:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a97c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a984:	b29b      	uxth	r3, r3
 800a986:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	7b1b      	ldrb	r3, [r3, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f040 8149 	bne.w	800ac24 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	785b      	ldrb	r3, [r3, #1]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 8084 	beq.w	800aaa4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	00da      	lsls	r2, r3, #3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	88db      	ldrh	r3, [r3, #6]
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4413      	add	r3, r2
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	81fb      	strh	r3, [r7, #14]
 800a9de:	89fb      	ldrh	r3, [r7, #14]
 800a9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01b      	beq.n	800aa20 <USB_ActivateEndpoint+0x180>
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9fe:	81bb      	strh	r3, [r7, #12]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	441a      	add	r2, r3
 800aa0a:	89bb      	ldrh	r3, [r7, #12]
 800aa0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	78db      	ldrb	r3, [r3, #3]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d020      	beq.n	800aa6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa3e:	813b      	strh	r3, [r7, #8]
 800aa40:	893b      	ldrh	r3, [r7, #8]
 800aa42:	f083 0320 	eor.w	r3, r3, #32
 800aa46:	813b      	strh	r3, [r7, #8]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	441a      	add	r2, r3
 800aa52:	893b      	ldrh	r3, [r7, #8]
 800aa54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	8013      	strh	r3, [r2, #0]
 800aa68:	e27f      	b.n	800af6a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa80:	817b      	strh	r3, [r7, #10]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	441a      	add	r2, r3
 800aa8c:	897b      	ldrh	r3, [r7, #10]
 800aa8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	8013      	strh	r3, [r2, #0]
 800aaa2:	e262      	b.n	800af6a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	461a      	mov	r2, r3
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	4413      	add	r3, r2
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	00da      	lsls	r2, r3, #3
 800aabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac0:	4413      	add	r3, r2
 800aac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aac6:	62bb      	str	r3, [r7, #40]	; 0x28
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	88db      	ldrh	r3, [r3, #6]
 800aacc:	085b      	lsrs	r3, r3, #1
 800aace:	b29b      	uxth	r3, r3
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	4413      	add	r3, r2
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	00da      	lsls	r2, r3, #3
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aafa:	623b      	str	r3, [r7, #32]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d112      	bne.n	800ab2a <USB_ActivateEndpoint+0x28a>
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	801a      	strh	r2, [r3, #0]
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	801a      	strh	r2, [r3, #0]
 800ab28:	e02f      	b.n	800ab8a <USB_ActivateEndpoint+0x2ea>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b3e      	cmp	r3, #62	; 0x3e
 800ab30:	d813      	bhi.n	800ab5a <USB_ActivateEndpoint+0x2ba>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	663b      	str	r3, [r7, #96]	; 0x60
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <USB_ActivateEndpoint+0x2ac>
 800ab46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab48:	3301      	adds	r3, #1
 800ab4a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	029b      	lsls	r3, r3, #10
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	801a      	strh	r2, [r3, #0]
 800ab58:	e017      	b.n	800ab8a <USB_ActivateEndpoint+0x2ea>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	663b      	str	r3, [r7, #96]	; 0x60
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f003 031f 	and.w	r3, r3, #31
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <USB_ActivateEndpoint+0x2d4>
 800ab6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab70:	3b01      	subs	r3, #1
 800ab72:	663b      	str	r3, [r7, #96]	; 0x60
 800ab74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	029b      	lsls	r3, r3, #10
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	83fb      	strh	r3, [r7, #30]
 800ab98:	8bfb      	ldrh	r3, [r7, #30]
 800ab9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d01b      	beq.n	800abda <USB_ActivateEndpoint+0x33a>
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb8:	83bb      	strh	r3, [r7, #28]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	441a      	add	r2, r3
 800abc4:	8bbb      	ldrh	r3, [r7, #28]
 800abc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf0:	837b      	strh	r3, [r7, #26]
 800abf2:	8b7b      	ldrh	r3, [r7, #26]
 800abf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abf8:	837b      	strh	r3, [r7, #26]
 800abfa:	8b7b      	ldrh	r3, [r7, #26]
 800abfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac00:	837b      	strh	r3, [r7, #26]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	441a      	add	r2, r3
 800ac0c:	8b7b      	ldrh	r3, [r7, #26]
 800ac0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	8013      	strh	r3, [r2, #0]
 800ac22:	e1a2      	b.n	800af6a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	441a      	add	r2, r3
 800ac48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ac4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ac58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac70:	4413      	add	r3, r2
 800ac72:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	00da      	lsls	r2, r3, #3
 800ac7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac82:	657b      	str	r3, [r7, #84]	; 0x54
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	891b      	ldrh	r3, [r3, #8]
 800ac88:	085b      	lsrs	r3, r3, #1
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	653b      	str	r3, [r7, #80]	; 0x50
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	461a      	mov	r2, r3
 800aca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca4:	4413      	add	r3, r2
 800aca6:	653b      	str	r3, [r7, #80]	; 0x50
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00da      	lsls	r2, r3, #3
 800acae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb0:	4413      	add	r3, r2
 800acb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	895b      	ldrh	r3, [r3, #10]
 800acbc:	085b      	lsrs	r3, r3, #1
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	785b      	ldrb	r3, [r3, #1]
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 8091 	bne.w	800adf4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ace0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ace2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01b      	beq.n	800ad22 <USB_ActivateEndpoint+0x482>
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad00:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	441a      	add	r2, r3
 800ad0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ad30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ad32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d01b      	beq.n	800ad72 <USB_ActivateEndpoint+0x4d2>
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad50:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	441a      	add	r2, r3
 800ad5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad88:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ad8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad90:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ad92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad98:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	441a      	add	r2, r3
 800ada4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ada6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800add0:	867b      	strh	r3, [r7, #50]	; 0x32
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	441a      	add	r2, r3
 800addc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8013      	strh	r3, [r2, #0]
 800adf2:	e0ba      	b.n	800af6a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ae04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ae08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01d      	beq.n	800ae4c <USB_ActivateEndpoint+0x5ac>
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	441a      	add	r2, r3
 800ae34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ae38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ae5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ae60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01d      	beq.n	800aea4 <USB_ActivateEndpoint+0x604>
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	441a      	add	r2, r3
 800ae8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	78db      	ldrb	r3, [r3, #3]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d024      	beq.n	800aef6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aec6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aeca:	f083 0320 	eor.w	r3, r3, #32
 800aece:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	441a      	add	r2, r3
 800aedc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	8013      	strh	r3, [r2, #0]
 800aef4:	e01d      	b.n	800af32 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	441a      	add	r2, r3
 800af1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2e:	b29b      	uxth	r3, r3
 800af30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af48:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	441a      	add	r2, r3
 800af54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af66:	b29b      	uxth	r3, r3
 800af68:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800af6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800af6e:	4618      	mov	r0, r3
 800af70:	376c      	adds	r7, #108	; 0x6c
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop

0800af7c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b08d      	sub	sp, #52	; 0x34
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	7b1b      	ldrb	r3, [r3, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f040 808e 	bne.w	800b0ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d044      	beq.n	800b022 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	81bb      	strh	r3, [r7, #12]
 800afa6:	89bb      	ldrh	r3, [r7, #12]
 800afa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01b      	beq.n	800afe8 <USB_DeactivateEndpoint+0x6c>
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc6:	817b      	strh	r3, [r7, #10]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	441a      	add	r2, r3
 800afd2:	897b      	ldrh	r3, [r7, #10]
 800afd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800affa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800affe:	813b      	strh	r3, [r7, #8]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	441a      	add	r2, r3
 800b00a:	893b      	ldrh	r3, [r7, #8]
 800b00c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	8013      	strh	r3, [r2, #0]
 800b020:	e192      	b.n	800b348 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	827b      	strh	r3, [r7, #18]
 800b030:	8a7b      	ldrh	r3, [r7, #18]
 800b032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01b      	beq.n	800b072 <USB_DeactivateEndpoint+0xf6>
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	b29b      	uxth	r3, r3
 800b048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b050:	823b      	strh	r3, [r7, #16]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	441a      	add	r2, r3
 800b05c:	8a3b      	ldrh	r3, [r7, #16]
 800b05e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06e:	b29b      	uxth	r3, r3
 800b070:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	81fb      	strh	r3, [r7, #14]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	441a      	add	r2, r3
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b09e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	8013      	strh	r3, [r2, #0]
 800b0aa:	e14d      	b.n	800b348 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	785b      	ldrb	r3, [r3, #1]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 80a5 	bne.w	800b200 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	843b      	strh	r3, [r7, #32]
 800b0c4:	8c3b      	ldrh	r3, [r7, #32]
 800b0c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d01b      	beq.n	800b106 <USB_DeactivateEndpoint+0x18a>
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0e4:	83fb      	strh	r3, [r7, #30]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	441a      	add	r2, r3
 800b0f0:	8bfb      	ldrh	r3, [r7, #30]
 800b0f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b102:	b29b      	uxth	r3, r3
 800b104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	83bb      	strh	r3, [r7, #28]
 800b114:	8bbb      	ldrh	r3, [r7, #28]
 800b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d01b      	beq.n	800b156 <USB_DeactivateEndpoint+0x1da>
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b134:	837b      	strh	r3, [r7, #26]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	8b7b      	ldrh	r3, [r7, #26]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	833b      	strh	r3, [r7, #24]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	441a      	add	r2, r3
 800b178:	8b3b      	ldrh	r3, [r7, #24]
 800b17a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b17e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a4:	82fb      	strh	r3, [r7, #22]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	441a      	add	r2, r3
 800b1b0:	8afb      	ldrh	r3, [r7, #22]
 800b1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1dc:	82bb      	strh	r3, [r7, #20]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	441a      	add	r2, r3
 800b1e8:	8abb      	ldrh	r3, [r7, #20]
 800b1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	8013      	strh	r3, [r2, #0]
 800b1fe:	e0a3      	b.n	800b348 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b20e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01b      	beq.n	800b250 <USB_DeactivateEndpoint+0x2d4>
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	b29b      	uxth	r3, r3
 800b226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b22e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	441a      	add	r2, r3
 800b23a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b23c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b25e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b264:	2b00      	cmp	r3, #0
 800b266:	d01b      	beq.n	800b2a0 <USB_DeactivateEndpoint+0x324>
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	b29b      	uxth	r3, r3
 800b276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	441a      	add	r2, r3
 800b28a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b28c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b298:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	441a      	add	r2, r3
 800b2c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	441a      	add	r2, r3
 800b2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b326:	847b      	strh	r3, [r7, #34]	; 0x22
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	441a      	add	r2, r3
 800b332:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b33c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b344:	b29b      	uxth	r3, r3
 800b346:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3734      	adds	r7, #52	; 0x34
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b0c4      	sub	sp, #272	; 0x110
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	1d3b      	adds	r3, r7, #4
 800b35e:	6018      	str	r0, [r3, #0]
 800b360:	463b      	mov	r3, r7
 800b362:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b364:	463b      	mov	r3, r7
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	f040 8566 	bne.w	800be3c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b370:	463b      	mov	r3, r7
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	463b      	mov	r3, r7
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d905      	bls.n	800b38c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800b380:	463b      	mov	r3, r7
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b38a:	e004      	b.n	800b396 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b38c:	463b      	mov	r3, r7
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b396:	463b      	mov	r3, r7
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	7b1b      	ldrb	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d12c      	bne.n	800b3fa <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b3a0:	463b      	mov	r3, r7
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6959      	ldr	r1, [r3, #20]
 800b3a6:	463b      	mov	r3, r7
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	88da      	ldrh	r2, [r3, #6]
 800b3ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	1d38      	adds	r0, r7, #4
 800b3b4:	6800      	ldr	r0, [r0, #0]
 800b3b6:	f001 fa43 	bl	800c840 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b3ba:	1d3b      	adds	r3, r7, #4
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	1d3b      	adds	r3, r7, #4
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	00da      	lsls	r2, r3, #3
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800b3e2:	f107 0310 	add.w	r3, r7, #16
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	f107 0310 	add.w	r3, r7, #16
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	801a      	strh	r2, [r3, #0]
 800b3f6:	f000 bcec 	b.w	800bdd2 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b3fa:	463b      	mov	r3, r7
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	78db      	ldrb	r3, [r3, #3]
 800b400:	2b02      	cmp	r3, #2
 800b402:	f040 8356 	bne.w	800bab2 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b406:	463b      	mov	r3, r7
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6a1a      	ldr	r2, [r3, #32]
 800b40c:	463b      	mov	r3, r7
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	429a      	cmp	r2, r3
 800b414:	f240 82fa 	bls.w	800ba0c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800b418:	1d3b      	adds	r3, r7, #4
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	463b      	mov	r3, r7
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	b29b      	uxth	r3, r3
 800b42a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b432:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800b436:	1d3b      	adds	r3, r7, #4
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	463b      	mov	r3, r7
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	441a      	add	r2, r3
 800b444:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b44c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b450:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b458:	b29b      	uxth	r3, r3
 800b45a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800b45c:	463b      	mov	r3, r7
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b466:	463b      	mov	r3, r7
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6a1a      	ldr	r2, [r3, #32]
 800b46c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b470:	1ad2      	subs	r2, r2, r3
 800b472:	463b      	mov	r3, r7
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b478:	1d3b      	adds	r3, r7, #4
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	463b      	mov	r3, r7
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 815e 	beq.w	800b750 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b494:	1d3b      	adds	r3, r7, #4
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
 800b49a:	463b      	mov	r3, r7
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	785b      	ldrb	r3, [r3, #1]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d164      	bne.n	800b56e <USB_EPStartXfer+0x218>
 800b4a4:	1d3b      	adds	r3, r7, #4
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4aa:	1d3b      	adds	r3, r7, #4
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	4413      	add	r3, r2
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4bc:	463b      	mov	r3, r7
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	00da      	lsls	r2, r3, #3
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d112      	bne.n	800b4fc <USB_EPStartXfer+0x1a6>
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	801a      	strh	r2, [r3, #0]
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	e054      	b.n	800b5a6 <USB_EPStartXfer+0x250>
 800b4fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b500:	2b3e      	cmp	r3, #62	; 0x3e
 800b502:	d817      	bhi.n	800b534 <USB_EPStartXfer+0x1de>
 800b504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b508:	085b      	lsrs	r3, r3, #1
 800b50a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b50e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <USB_EPStartXfer+0x1ce>
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	3301      	adds	r3, #1
 800b520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	b29b      	uxth	r3, r3
 800b52a:	029b      	lsls	r3, r3, #10
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	801a      	strh	r2, [r3, #0]
 800b532:	e038      	b.n	800b5a6 <USB_EPStartXfer+0x250>
 800b534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b538:	095b      	lsrs	r3, r3, #5
 800b53a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b53e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b542:	f003 031f 	and.w	r3, r3, #31
 800b546:	2b00      	cmp	r3, #0
 800b548:	d104      	bne.n	800b554 <USB_EPStartXfer+0x1fe>
 800b54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54e:	3b01      	subs	r3, #1
 800b550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	b29b      	uxth	r3, r3
 800b55a:	029b      	lsls	r3, r3, #10
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b566:	b29a      	uxth	r2, r3
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e01b      	b.n	800b5a6 <USB_EPStartXfer+0x250>
 800b56e:	463b      	mov	r3, r7
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d116      	bne.n	800b5a6 <USB_EPStartXfer+0x250>
 800b578:	1d3b      	adds	r3, r7, #4
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b580:	b29b      	uxth	r3, r3
 800b582:	461a      	mov	r2, r3
 800b584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b586:	4413      	add	r3, r2
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
 800b58a:	463b      	mov	r3, r7
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	00da      	lsls	r2, r3, #3
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	4413      	add	r3, r2
 800b596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b59a:	633b      	str	r3, [r7, #48]	; 0x30
 800b59c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5a6:	463b      	mov	r3, r7
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	895b      	ldrh	r3, [r3, #10]
 800b5ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6959      	ldr	r1, [r3, #20]
 800b5b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b5c0:	1d38      	adds	r0, r7, #4
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	f001 f93c 	bl	800c840 <USB_WritePMA>
            ep->xfer_buff += len;
 800b5c8:	463b      	mov	r3, r7
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695a      	ldr	r2, [r3, #20]
 800b5ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5d2:	441a      	add	r2, r3
 800b5d4:	463b      	mov	r3, r7
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b5da:	463b      	mov	r3, r7
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	6a1a      	ldr	r2, [r3, #32]
 800b5e0:	463b      	mov	r3, r7
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d90e      	bls.n	800b608 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6a1a      	ldr	r2, [r3, #32]
 800b5fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b5fe:	1ad2      	subs	r2, r2, r3
 800b600:	463b      	mov	r3, r7
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	621a      	str	r2, [r3, #32]
 800b606:	e008      	b.n	800b61a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b608:	463b      	mov	r3, r7
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b612:	463b      	mov	r3, r7
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2200      	movs	r2, #0
 800b618:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b61a:	463b      	mov	r3, r7
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	785b      	ldrb	r3, [r3, #1]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d164      	bne.n	800b6ee <USB_EPStartXfer+0x398>
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	1d3b      	adds	r3, r7, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b632:	b29b      	uxth	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	4413      	add	r3, r2
 800b63a:	61fb      	str	r3, [r7, #28]
 800b63c:	463b      	mov	r3, r7
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	00da      	lsls	r2, r3, #3
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	4413      	add	r3, r2
 800b648:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b64c:	61bb      	str	r3, [r7, #24]
 800b64e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b652:	2b00      	cmp	r3, #0
 800b654:	d112      	bne.n	800b67c <USB_EPStartXfer+0x326>
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	881b      	ldrh	r3, [r3, #0]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b660:	b29a      	uxth	r2, r3
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	801a      	strh	r2, [r3, #0]
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b674:	b29a      	uxth	r2, r3
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	e057      	b.n	800b72c <USB_EPStartXfer+0x3d6>
 800b67c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b680:	2b3e      	cmp	r3, #62	; 0x3e
 800b682:	d817      	bhi.n	800b6b4 <USB_EPStartXfer+0x35e>
 800b684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b68e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <USB_EPStartXfer+0x34e>
 800b69a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b69e:	3301      	adds	r3, #1
 800b6a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	029b      	lsls	r3, r3, #10
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	801a      	strh	r2, [r3, #0]
 800b6b2:	e03b      	b.n	800b72c <USB_EPStartXfer+0x3d6>
 800b6b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6b8:	095b      	lsrs	r3, r3, #5
 800b6ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b6c2:	f003 031f 	and.w	r3, r3, #31
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d104      	bne.n	800b6d4 <USB_EPStartXfer+0x37e>
 800b6ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	029b      	lsls	r3, r3, #10
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	801a      	strh	r2, [r3, #0]
 800b6ec:	e01e      	b.n	800b72c <USB_EPStartXfer+0x3d6>
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d119      	bne.n	800b72c <USB_EPStartXfer+0x3d6>
 800b6f8:	1d3b      	adds	r3, r7, #4
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b6fe:	1d3b      	adds	r3, r7, #4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b706:	b29b      	uxth	r3, r3
 800b708:	461a      	mov	r2, r3
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	4413      	add	r3, r2
 800b70e:	627b      	str	r3, [r7, #36]	; 0x24
 800b710:	463b      	mov	r3, r7
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	00da      	lsls	r2, r3, #3
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	4413      	add	r3, r2
 800b71c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b720:	623b      	str	r3, [r7, #32]
 800b722:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b726:	b29a      	uxth	r2, r3
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b72c:	463b      	mov	r3, r7
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	891b      	ldrh	r3, [r3, #8]
 800b732:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b736:	463b      	mov	r3, r7
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6959      	ldr	r1, [r3, #20]
 800b73c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b740:	b29b      	uxth	r3, r3
 800b742:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b746:	1d38      	adds	r0, r7, #4
 800b748:	6800      	ldr	r0, [r0, #0]
 800b74a:	f001 f879 	bl	800c840 <USB_WritePMA>
 800b74e:	e340      	b.n	800bdd2 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b750:	463b      	mov	r3, r7
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d164      	bne.n	800b824 <USB_EPStartXfer+0x4ce>
 800b75a:	1d3b      	adds	r3, r7, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b760:	1d3b      	adds	r3, r7, #4
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b768:	b29b      	uxth	r3, r3
 800b76a:	461a      	mov	r2, r3
 800b76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76e:	4413      	add	r3, r2
 800b770:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b772:	463b      	mov	r3, r7
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	00da      	lsls	r2, r3, #3
 800b77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77c:	4413      	add	r3, r2
 800b77e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b782:	64bb      	str	r3, [r7, #72]	; 0x48
 800b784:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d112      	bne.n	800b7b2 <USB_EPStartXfer+0x45c>
 800b78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b796:	b29a      	uxth	r2, r3
 800b798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b79a:	801a      	strh	r2, [r3, #0]
 800b79c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ae:	801a      	strh	r2, [r3, #0]
 800b7b0:	e057      	b.n	800b862 <USB_EPStartXfer+0x50c>
 800b7b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7b6:	2b3e      	cmp	r3, #62	; 0x3e
 800b7b8:	d817      	bhi.n	800b7ea <USB_EPStartXfer+0x494>
 800b7ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7be:	085b      	lsrs	r3, r3, #1
 800b7c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d004      	beq.n	800b7da <USB_EPStartXfer+0x484>
 800b7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	029b      	lsls	r3, r3, #10
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e6:	801a      	strh	r2, [r3, #0]
 800b7e8:	e03b      	b.n	800b862 <USB_EPStartXfer+0x50c>
 800b7ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b7f8:	f003 031f 	and.w	r3, r3, #31
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d104      	bne.n	800b80a <USB_EPStartXfer+0x4b4>
 800b800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b804:	3b01      	subs	r3, #1
 800b806:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b80a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b80e:	b29b      	uxth	r3, r3
 800b810:	029b      	lsls	r3, r3, #10
 800b812:	b29b      	uxth	r3, r3
 800b814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b820:	801a      	strh	r2, [r3, #0]
 800b822:	e01e      	b.n	800b862 <USB_EPStartXfer+0x50c>
 800b824:	463b      	mov	r3, r7
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d119      	bne.n	800b862 <USB_EPStartXfer+0x50c>
 800b82e:	1d3b      	adds	r3, r7, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	657b      	str	r3, [r7, #84]	; 0x54
 800b834:	1d3b      	adds	r3, r7, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	461a      	mov	r2, r3
 800b840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b842:	4413      	add	r3, r2
 800b844:	657b      	str	r3, [r7, #84]	; 0x54
 800b846:	463b      	mov	r3, r7
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	00da      	lsls	r2, r3, #3
 800b84e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b850:	4413      	add	r3, r2
 800b852:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b856:	653b      	str	r3, [r7, #80]	; 0x50
 800b858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b862:	463b      	mov	r3, r7
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	891b      	ldrh	r3, [r3, #8]
 800b868:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b86c:	463b      	mov	r3, r7
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6959      	ldr	r1, [r3, #20]
 800b872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b876:	b29b      	uxth	r3, r3
 800b878:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800b87c:	1d38      	adds	r0, r7, #4
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	f000 ffde 	bl	800c840 <USB_WritePMA>
            ep->xfer_buff += len;
 800b884:	463b      	mov	r3, r7
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695a      	ldr	r2, [r3, #20]
 800b88a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b88e:	441a      	add	r2, r3
 800b890:	463b      	mov	r3, r7
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b896:	463b      	mov	r3, r7
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6a1a      	ldr	r2, [r3, #32]
 800b89c:	463b      	mov	r3, r7
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d90e      	bls.n	800b8c4 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800b8a6:	463b      	mov	r3, r7
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6a1a      	ldr	r2, [r3, #32]
 800b8b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8ba:	1ad2      	subs	r2, r2, r3
 800b8bc:	463b      	mov	r3, r7
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	621a      	str	r2, [r3, #32]
 800b8c2:	e008      	b.n	800b8d6 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800b8c4:	463b      	mov	r3, r7
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b8d6:	1d3b      	adds	r3, r7, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	647b      	str	r3, [r7, #68]	; 0x44
 800b8dc:	463b      	mov	r3, r7
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	785b      	ldrb	r3, [r3, #1]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d164      	bne.n	800b9b0 <USB_EPStartXfer+0x65a>
 800b8e6:	1d3b      	adds	r3, r7, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8ec:	1d3b      	adds	r3, r7, #4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fa:	4413      	add	r3, r2
 800b8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8fe:	463b      	mov	r3, r7
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	00da      	lsls	r2, r3, #3
 800b906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b908:	4413      	add	r3, r2
 800b90a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b914:	2b00      	cmp	r3, #0
 800b916:	d112      	bne.n	800b93e <USB_EPStartXfer+0x5e8>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b922:	b29a      	uxth	r2, r3
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	801a      	strh	r2, [r3, #0]
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b936:	b29a      	uxth	r2, r3
 800b938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93a:	801a      	strh	r2, [r3, #0]
 800b93c:	e054      	b.n	800b9e8 <USB_EPStartXfer+0x692>
 800b93e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b942:	2b3e      	cmp	r3, #62	; 0x3e
 800b944:	d817      	bhi.n	800b976 <USB_EPStartXfer+0x620>
 800b946:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b94a:	085b      	lsrs	r3, r3, #1
 800b94c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b950:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d004      	beq.n	800b966 <USB_EPStartXfer+0x610>
 800b95c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b960:	3301      	adds	r3, #1
 800b962:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	029b      	lsls	r3, r3, #10
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	e038      	b.n	800b9e8 <USB_EPStartXfer+0x692>
 800b976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b97a:	095b      	lsrs	r3, r3, #5
 800b97c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b984:	f003 031f 	and.w	r3, r3, #31
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d104      	bne.n	800b996 <USB_EPStartXfer+0x640>
 800b98c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b990:	3b01      	subs	r3, #1
 800b992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	029b      	lsls	r3, r3, #10
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	801a      	strh	r2, [r3, #0]
 800b9ae:	e01b      	b.n	800b9e8 <USB_EPStartXfer+0x692>
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d116      	bne.n	800b9e8 <USB_EPStartXfer+0x692>
 800b9ba:	1d3b      	adds	r3, r7, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c8:	4413      	add	r3, r2
 800b9ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b9cc:	463b      	mov	r3, r7
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	00da      	lsls	r2, r3, #3
 800b9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b9de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b9e8:	463b      	mov	r3, r7
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	895b      	ldrh	r3, [r3, #10]
 800b9ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6959      	ldr	r1, [r3, #20]
 800b9f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800ba02:	1d38      	adds	r0, r7, #4
 800ba04:	6800      	ldr	r0, [r0, #0]
 800ba06:	f000 ff1b 	bl	800c840 <USB_WritePMA>
 800ba0a:	e1e2      	b.n	800bdd2 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800ba16:	1d3b      	adds	r3, r7, #4
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	463b      	mov	r3, r7
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ba2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ba34:	1d3b      	adds	r3, r7, #4
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	463b      	mov	r3, r7
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	441a      	add	r2, r3
 800ba42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ba46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ba5a:	1d3b      	adds	r3, r7, #4
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	663b      	str	r3, [r7, #96]	; 0x60
 800ba60:	1d3b      	adds	r3, r7, #4
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba6e:	4413      	add	r3, r2
 800ba70:	663b      	str	r3, [r7, #96]	; 0x60
 800ba72:	463b      	mov	r3, r7
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	00da      	lsls	r2, r3, #3
 800ba7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba8e:	463b      	mov	r3, r7
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	891b      	ldrh	r3, [r3, #8]
 800ba94:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba98:	463b      	mov	r3, r7
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6959      	ldr	r1, [r3, #20]
 800ba9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800baa8:	1d38      	adds	r0, r7, #4
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	f000 fec8 	bl	800c840 <USB_WritePMA>
 800bab0:	e18f      	b.n	800bdd2 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bab2:	1d3b      	adds	r3, r7, #4
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	463b      	mov	r3, r7
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 808f 	beq.w	800bbec <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bace:	1d3b      	adds	r3, r7, #4
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bad4:	463b      	mov	r3, r7
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	785b      	ldrb	r3, [r3, #1]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d164      	bne.n	800bba8 <USB_EPStartXfer+0x852>
 800bade:	1d3b      	adds	r3, r7, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	673b      	str	r3, [r7, #112]	; 0x70
 800bae4:	1d3b      	adds	r3, r7, #4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baec:	b29b      	uxth	r3, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf2:	4413      	add	r3, r2
 800baf4:	673b      	str	r3, [r7, #112]	; 0x70
 800baf6:	463b      	mov	r3, r7
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	00da      	lsls	r2, r3, #3
 800bafe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb00:	4413      	add	r3, r2
 800bb02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d112      	bne.n	800bb36 <USB_EPStartXfer+0x7e0>
 800bb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb1e:	801a      	strh	r2, [r3, #0]
 800bb20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb32:	801a      	strh	r2, [r3, #0]
 800bb34:	e054      	b.n	800bbe0 <USB_EPStartXfer+0x88a>
 800bb36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb3a:	2b3e      	cmp	r3, #62	; 0x3e
 800bb3c:	d817      	bhi.n	800bb6e <USB_EPStartXfer+0x818>
 800bb3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d004      	beq.n	800bb5e <USB_EPStartXfer+0x808>
 800bb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb58:	3301      	adds	r3, #1
 800bb5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	029b      	lsls	r3, r3, #10
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb6a:	801a      	strh	r2, [r3, #0]
 800bb6c:	e038      	b.n	800bbe0 <USB_EPStartXfer+0x88a>
 800bb6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb72:	095b      	lsrs	r3, r3, #5
 800bb74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bb7c:	f003 031f 	and.w	r3, r3, #31
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d104      	bne.n	800bb8e <USB_EPStartXfer+0x838>
 800bb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	029b      	lsls	r3, r3, #10
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba4:	801a      	strh	r2, [r3, #0]
 800bba6:	e01b      	b.n	800bbe0 <USB_EPStartXfer+0x88a>
 800bba8:	463b      	mov	r3, r7
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d116      	bne.n	800bbe0 <USB_EPStartXfer+0x88a>
 800bbb2:	1d3b      	adds	r3, r7, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbc0:	4413      	add	r3, r2
 800bbc2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbc4:	463b      	mov	r3, r7
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	00da      	lsls	r2, r3, #3
 800bbcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbce:	4413      	add	r3, r2
 800bbd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbd4:	677b      	str	r3, [r7, #116]	; 0x74
 800bbd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bbe0:	463b      	mov	r3, r7
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	895b      	ldrh	r3, [r3, #10]
 800bbe6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800bbea:	e097      	b.n	800bd1c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbec:	463b      	mov	r3, r7
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d168      	bne.n	800bcc8 <USB_EPStartXfer+0x972>
 800bbf6:	1d3b      	adds	r3, r7, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbfe:	1d3b      	adds	r3, r7, #4
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc0e:	4413      	add	r3, r2
 800bc10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc14:	463b      	mov	r3, r7
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	00da      	lsls	r2, r3, #3
 800bc1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc20:	4413      	add	r3, r2
 800bc22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d112      	bne.n	800bc56 <USB_EPStartXfer+0x900>
 800bc30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc3e:	801a      	strh	r2, [r3, #0]
 800bc40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc52:	801a      	strh	r2, [r3, #0]
 800bc54:	e05d      	b.n	800bd12 <USB_EPStartXfer+0x9bc>
 800bc56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc5a:	2b3e      	cmp	r3, #62	; 0x3e
 800bc5c:	d817      	bhi.n	800bc8e <USB_EPStartXfer+0x938>
 800bc5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc62:	085b      	lsrs	r3, r3, #1
 800bc64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bc68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <USB_EPStartXfer+0x928>
 800bc74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bc78:	3301      	adds	r3, #1
 800bc7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bc7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	029b      	lsls	r3, r3, #10
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	e041      	b.n	800bd12 <USB_EPStartXfer+0x9bc>
 800bc8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bc98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bc9c:	f003 031f 	and.w	r3, r3, #31
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <USB_EPStartXfer+0x958>
 800bca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	029b      	lsls	r3, r3, #10
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcc4:	801a      	strh	r2, [r3, #0]
 800bcc6:	e024      	b.n	800bd12 <USB_EPStartXfer+0x9bc>
 800bcc8:	463b      	mov	r3, r7
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d11f      	bne.n	800bd12 <USB_EPStartXfer+0x9bc>
 800bcd2:	1d3b      	adds	r3, r7, #4
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcda:	1d3b      	adds	r3, r7, #4
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcea:	4413      	add	r3, r2
 800bcec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcf0:	463b      	mov	r3, r7
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	00da      	lsls	r2, r3, #3
 800bcf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd12:	463b      	mov	r3, r7
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	891b      	ldrh	r3, [r3, #8]
 800bd18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6959      	ldr	r1, [r3, #20]
 800bd22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800bd2c:	1d38      	adds	r0, r7, #4
 800bd2e:	6800      	ldr	r0, [r0, #0]
 800bd30:	f000 fd86 	bl	800c840 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800bd34:	463b      	mov	r3, r7
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	785b      	ldrb	r3, [r3, #1]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d122      	bne.n	800bd84 <USB_EPStartXfer+0xa2e>
 800bd3e:	1d3b      	adds	r3, r7, #4
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	463b      	mov	r3, r7
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4413      	add	r3, r2
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800bd5c:	1d3b      	adds	r3, r7, #4
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	463b      	mov	r3, r7
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	441a      	add	r2, r3
 800bd6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800bd6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	8013      	strh	r3, [r2, #0]
 800bd82:	e026      	b.n	800bdd2 <USB_EPStartXfer+0xa7c>
 800bd84:	463b      	mov	r3, r7
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d121      	bne.n	800bdd2 <USB_EPStartXfer+0xa7c>
 800bd8e:	1d3b      	adds	r3, r7, #4
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	463b      	mov	r3, r7
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bda8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	441a      	add	r2, r3
 800bdba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800bdbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bdd2:	1d3b      	adds	r3, r7, #4
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	f107 020e 	add.w	r2, r7, #14
 800bde8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdf0:	8013      	strh	r3, [r2, #0]
 800bdf2:	f107 030e 	add.w	r3, r7, #14
 800bdf6:	f107 020e 	add.w	r2, r7, #14
 800bdfa:	8812      	ldrh	r2, [r2, #0]
 800bdfc:	f082 0210 	eor.w	r2, r2, #16
 800be00:	801a      	strh	r2, [r3, #0]
 800be02:	f107 030e 	add.w	r3, r7, #14
 800be06:	f107 020e 	add.w	r2, r7, #14
 800be0a:	8812      	ldrh	r2, [r2, #0]
 800be0c:	f082 0220 	eor.w	r2, r2, #32
 800be10:	801a      	strh	r2, [r3, #0]
 800be12:	1d3b      	adds	r3, r7, #4
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	463b      	mov	r3, r7
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	441a      	add	r2, r3
 800be20:	f107 030e 	add.w	r3, r7, #14
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be36:	b29b      	uxth	r3, r3
 800be38:	8013      	strh	r3, [r2, #0]
 800be3a:	e3b5      	b.n	800c5a8 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800be3c:	463b      	mov	r3, r7
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	7b1b      	ldrb	r3, [r3, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 8090 	bne.w	800bf68 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800be48:	463b      	mov	r3, r7
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	463b      	mov	r3, r7
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	429a      	cmp	r2, r3
 800be56:	d90e      	bls.n	800be76 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800be58:	463b      	mov	r3, r7
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800be62:	463b      	mov	r3, r7
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	699a      	ldr	r2, [r3, #24]
 800be68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800be6c:	1ad2      	subs	r2, r2, r3
 800be6e:	463b      	mov	r3, r7
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	619a      	str	r2, [r3, #24]
 800be74:	e008      	b.n	800be88 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800be76:	463b      	mov	r3, r7
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800be80:	463b      	mov	r3, r7
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2200      	movs	r2, #0
 800be86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be88:	1d3b      	adds	r3, r7, #4
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be90:	1d3b      	adds	r3, r7, #4
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be98:	b29b      	uxth	r3, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bea0:	4413      	add	r3, r2
 800bea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bea6:	463b      	mov	r3, r7
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	00da      	lsls	r2, r3, #3
 800beae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beb2:	4413      	add	r3, r2
 800beb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800beb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bebc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d116      	bne.n	800bef2 <USB_EPStartXfer+0xb9c>
 800bec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	b29b      	uxth	r3, r3
 800becc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bed6:	801a      	strh	r2, [r3, #0]
 800bed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bee8:	b29a      	uxth	r2, r3
 800beea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beee:	801a      	strh	r2, [r3, #0]
 800bef0:	e32c      	b.n	800c54c <USB_EPStartXfer+0x11f6>
 800bef2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bef6:	2b3e      	cmp	r3, #62	; 0x3e
 800bef8:	d818      	bhi.n	800bf2c <USB_EPStartXfer+0xbd6>
 800befa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d004      	beq.n	800bf1a <USB_EPStartXfer+0xbc4>
 800bf10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf14:	3301      	adds	r3, #1
 800bf16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	029b      	lsls	r3, r3, #10
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	e30f      	b.n	800c54c <USB_EPStartXfer+0x11f6>
 800bf2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf30:	095b      	lsrs	r3, r3, #5
 800bf32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bf3a:	f003 031f 	and.w	r3, r3, #31
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d104      	bne.n	800bf4c <USB_EPStartXfer+0xbf6>
 800bf42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf46:	3b01      	subs	r3, #1
 800bf48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bf4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	029b      	lsls	r3, r3, #10
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	e2f1      	b.n	800c54c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800bf68:	463b      	mov	r3, r7
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	78db      	ldrb	r3, [r3, #3]
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	f040 818f 	bne.w	800c292 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf74:	463b      	mov	r3, r7
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d175      	bne.n	800c06a <USB_EPStartXfer+0xd14>
 800bf7e:	1d3b      	adds	r3, r7, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf86:	1d3b      	adds	r3, r7, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	461a      	mov	r2, r3
 800bf92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bf96:	4413      	add	r3, r2
 800bf98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	00da      	lsls	r2, r3, #3
 800bfa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfb2:	463b      	mov	r3, r7
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d116      	bne.n	800bfea <USB_EPStartXfer+0xc94>
 800bfbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfce:	801a      	strh	r2, [r3, #0]
 800bfd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	e065      	b.n	800c0b6 <USB_EPStartXfer+0xd60>
 800bfea:	463b      	mov	r3, r7
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	2b3e      	cmp	r3, #62	; 0x3e
 800bff2:	d81a      	bhi.n	800c02a <USB_EPStartXfer+0xcd4>
 800bff4:	463b      	mov	r3, r7
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c000:	463b      	mov	r3, r7
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <USB_EPStartXfer+0xcc2>
 800c00e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c012:	3301      	adds	r3, #1
 800c014:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c018:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	029b      	lsls	r3, r3, #10
 800c020:	b29a      	uxth	r2, r3
 800c022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c026:	801a      	strh	r2, [r3, #0]
 800c028:	e045      	b.n	800c0b6 <USB_EPStartXfer+0xd60>
 800c02a:	463b      	mov	r3, r7
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c036:	463b      	mov	r3, r7
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f003 031f 	and.w	r3, r3, #31
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <USB_EPStartXfer+0xcf8>
 800c044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c048:	3b01      	subs	r3, #1
 800c04a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c04e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c052:	b29b      	uxth	r3, r3
 800c054:	029b      	lsls	r3, r3, #10
 800c056:	b29b      	uxth	r3, r3
 800c058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c060:	b29a      	uxth	r2, r3
 800c062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c066:	801a      	strh	r2, [r3, #0]
 800c068:	e025      	b.n	800c0b6 <USB_EPStartXfer+0xd60>
 800c06a:	463b      	mov	r3, r7
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d120      	bne.n	800c0b6 <USB_EPStartXfer+0xd60>
 800c074:	1d3b      	adds	r3, r7, #4
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c07c:	1d3b      	adds	r3, r7, #4
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c084:	b29b      	uxth	r3, r3
 800c086:	461a      	mov	r2, r3
 800c088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c08c:	4413      	add	r3, r2
 800c08e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c092:	463b      	mov	r3, r7
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	00da      	lsls	r2, r3, #3
 800c09a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c09e:	4413      	add	r3, r2
 800c0a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c0b4:	801a      	strh	r2, [r3, #0]
 800c0b6:	1d3b      	adds	r3, r7, #4
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0be:	463b      	mov	r3, r7
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	785b      	ldrb	r3, [r3, #1]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d175      	bne.n	800c1b4 <USB_EPStartXfer+0xe5e>
 800c0c8:	1d3b      	adds	r3, r7, #4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0d0:	1d3b      	adds	r3, r7, #4
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	00da      	lsls	r2, r3, #3
 800c0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d116      	bne.n	800c134 <USB_EPStartXfer+0xdde>
 800c106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c112:	b29a      	uxth	r2, r3
 800c114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c118:	801a      	strh	r2, [r3, #0]
 800c11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	b29b      	uxth	r3, r3
 800c122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c130:	801a      	strh	r2, [r3, #0]
 800c132:	e061      	b.n	800c1f8 <USB_EPStartXfer+0xea2>
 800c134:	463b      	mov	r3, r7
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	2b3e      	cmp	r3, #62	; 0x3e
 800c13c:	d81a      	bhi.n	800c174 <USB_EPStartXfer+0xe1e>
 800c13e:	463b      	mov	r3, r7
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	085b      	lsrs	r3, r3, #1
 800c146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c14a:	463b      	mov	r3, r7
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <USB_EPStartXfer+0xe0c>
 800c158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c15c:	3301      	adds	r3, #1
 800c15e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c166:	b29b      	uxth	r3, r3
 800c168:	029b      	lsls	r3, r3, #10
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c170:	801a      	strh	r2, [r3, #0]
 800c172:	e041      	b.n	800c1f8 <USB_EPStartXfer+0xea2>
 800c174:	463b      	mov	r3, r7
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c180:	463b      	mov	r3, r7
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 031f 	and.w	r3, r3, #31
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d104      	bne.n	800c198 <USB_EPStartXfer+0xe42>
 800c18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c192:	3b01      	subs	r3, #1
 800c194:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	029b      	lsls	r3, r3, #10
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1b0:	801a      	strh	r2, [r3, #0]
 800c1b2:	e021      	b.n	800c1f8 <USB_EPStartXfer+0xea2>
 800c1b4:	463b      	mov	r3, r7
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d11c      	bne.n	800c1f8 <USB_EPStartXfer+0xea2>
 800c1be:	1d3b      	adds	r3, r7, #4
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1d4:	463b      	mov	r3, r7
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	00da      	lsls	r2, r3, #3
 800c1dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1f6:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800c1f8:	463b      	mov	r3, r7
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 81a4 	beq.w	800c54c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c204:	1d3b      	adds	r3, r7, #4
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	463b      	mov	r3, r7
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c218:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c21c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <USB_EPStartXfer+0xeda>
 800c224:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10d      	bne.n	800c24c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c230:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f040 8187 	bne.w	800c54c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c23e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c246:	2b00      	cmp	r3, #0
 800c248:	f040 8180 	bne.w	800c54c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800c24c:	1d3b      	adds	r3, r7, #4
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	463b      	mov	r3, r7
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c266:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800c26a:	1d3b      	adds	r3, r7, #4
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	463b      	mov	r3, r7
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	441a      	add	r2, r3
 800c278:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800c27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	8013      	strh	r3, [r2, #0]
 800c290:	e15c      	b.n	800c54c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c292:	463b      	mov	r3, r7
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	78db      	ldrb	r3, [r3, #3]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	f040 8155 	bne.w	800c548 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800c29e:	463b      	mov	r3, r7
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	699a      	ldr	r2, [r3, #24]
 800c2a4:	463b      	mov	r3, r7
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d90e      	bls.n	800c2cc <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800c2ae:	463b      	mov	r3, r7
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c2c2:	1ad2      	subs	r2, r2, r3
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	619a      	str	r2, [r3, #24]
 800c2ca:	e008      	b.n	800c2de <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800c2cc:	463b      	mov	r3, r7
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800c2d6:	463b      	mov	r3, r7
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c2de:	463b      	mov	r3, r7
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	785b      	ldrb	r3, [r3, #1]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d16f      	bne.n	800c3c8 <USB_EPStartXfer+0x1072>
 800c2e8:	1d3b      	adds	r3, r7, #4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2f0:	1d3b      	adds	r3, r7, #4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c300:	4413      	add	r3, r2
 800c302:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c306:	463b      	mov	r3, r7
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	00da      	lsls	r2, r3, #3
 800c30e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c312:	4413      	add	r3, r2
 800c314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c31c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c320:	2b00      	cmp	r3, #0
 800c322:	d116      	bne.n	800c352 <USB_EPStartXfer+0xffc>
 800c324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c330:	b29a      	uxth	r2, r3
 800c332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c336:	801a      	strh	r2, [r3, #0]
 800c338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c348:	b29a      	uxth	r2, r3
 800c34a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c34e:	801a      	strh	r2, [r3, #0]
 800c350:	e05f      	b.n	800c412 <USB_EPStartXfer+0x10bc>
 800c352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c356:	2b3e      	cmp	r3, #62	; 0x3e
 800c358:	d818      	bhi.n	800c38c <USB_EPStartXfer+0x1036>
 800c35a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c35e:	085b      	lsrs	r3, r3, #1
 800c360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c364:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <USB_EPStartXfer+0x1024>
 800c370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c374:	3301      	adds	r3, #1
 800c376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c37a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c37e:	b29b      	uxth	r3, r3
 800c380:	029b      	lsls	r3, r3, #10
 800c382:	b29a      	uxth	r2, r3
 800c384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c388:	801a      	strh	r2, [r3, #0]
 800c38a:	e042      	b.n	800c412 <USB_EPStartXfer+0x10bc>
 800c38c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c390:	095b      	lsrs	r3, r3, #5
 800c392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c396:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c39a:	f003 031f 	and.w	r3, r3, #31
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d104      	bne.n	800c3ac <USB_EPStartXfer+0x1056>
 800c3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	029b      	lsls	r3, r3, #10
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3c4:	801a      	strh	r2, [r3, #0]
 800c3c6:	e024      	b.n	800c412 <USB_EPStartXfer+0x10bc>
 800c3c8:	463b      	mov	r3, r7
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d11f      	bne.n	800c412 <USB_EPStartXfer+0x10bc>
 800c3d2:	1d3b      	adds	r3, r7, #4
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3da:	1d3b      	adds	r3, r7, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3f0:	463b      	mov	r3, r7
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	00da      	lsls	r2, r3, #3
 800c3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c410:	801a      	strh	r2, [r3, #0]
 800c412:	1d3b      	adds	r3, r7, #4
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c41a:	463b      	mov	r3, r7
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d16f      	bne.n	800c504 <USB_EPStartXfer+0x11ae>
 800c424:	1d3b      	adds	r3, r7, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c42c:	1d3b      	adds	r3, r7, #4
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c434:	b29b      	uxth	r3, r3
 800c436:	461a      	mov	r2, r3
 800c438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c43c:	4413      	add	r3, r2
 800c43e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c442:	463b      	mov	r3, r7
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	00da      	lsls	r2, r3, #3
 800c44a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c44e:	4413      	add	r3, r2
 800c450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d116      	bne.n	800c48e <USB_EPStartXfer+0x1138>
 800c460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c46c:	b29a      	uxth	r2, r3
 800c46e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c472:	801a      	strh	r2, [r3, #0]
 800c474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c484:	b29a      	uxth	r2, r3
 800c486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c48a:	801a      	strh	r2, [r3, #0]
 800c48c:	e05e      	b.n	800c54c <USB_EPStartXfer+0x11f6>
 800c48e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c492:	2b3e      	cmp	r3, #62	; 0x3e
 800c494:	d818      	bhi.n	800c4c8 <USB_EPStartXfer+0x1172>
 800c496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c49a:	085b      	lsrs	r3, r3, #1
 800c49c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <USB_EPStartXfer+0x1160>
 800c4ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	029b      	lsls	r3, r3, #10
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c4c4:	801a      	strh	r2, [r3, #0]
 800c4c6:	e041      	b.n	800c54c <USB_EPStartXfer+0x11f6>
 800c4c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4cc:	095b      	lsrs	r3, r3, #5
 800c4ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c4d6:	f003 031f 	and.w	r3, r3, #31
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d104      	bne.n	800c4e8 <USB_EPStartXfer+0x1192>
 800c4de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	029b      	lsls	r3, r3, #10
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c500:	801a      	strh	r2, [r3, #0]
 800c502:	e023      	b.n	800c54c <USB_EPStartXfer+0x11f6>
 800c504:	463b      	mov	r3, r7
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d11e      	bne.n	800c54c <USB_EPStartXfer+0x11f6>
 800c50e:	1d3b      	adds	r3, r7, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c516:	b29b      	uxth	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c51e:	4413      	add	r3, r2
 800c520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c524:	463b      	mov	r3, r7
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	00da      	lsls	r2, r3, #3
 800c52c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c530:	4413      	add	r3, r2
 800c532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c53a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c53e:	b29a      	uxth	r2, r3
 800c540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c544:	801a      	strh	r2, [r3, #0]
 800c546:	e001      	b.n	800c54c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e02e      	b.n	800c5aa <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c54c:	1d3b      	adds	r3, r7, #4
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	463b      	mov	r3, r7
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c566:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c56a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c56e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c572:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c576:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c57a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c57e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800c582:	1d3b      	adds	r3, r7, #4
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	463b      	mov	r3, r7
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	441a      	add	r2, r3
 800c590:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d020      	beq.n	800c608 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5dc:	81bb      	strh	r3, [r7, #12]
 800c5de:	89bb      	ldrh	r3, [r7, #12]
 800c5e0:	f083 0310 	eor.w	r3, r3, #16
 800c5e4:	81bb      	strh	r3, [r7, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	441a      	add	r2, r3
 800c5f0:	89bb      	ldrh	r3, [r7, #12]
 800c5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c602:	b29b      	uxth	r3, r3
 800c604:	8013      	strh	r3, [r2, #0]
 800c606:	e01f      	b.n	800c648 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61e:	81fb      	strh	r3, [r7, #14]
 800c620:	89fb      	ldrh	r3, [r7, #14]
 800c622:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c626:	81fb      	strh	r3, [r7, #14]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	441a      	add	r2, r3
 800c632:	89fb      	ldrh	r3, [r7, #14]
 800c634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c63c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c644:	b29b      	uxth	r3, r3
 800c646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c656:	b480      	push	{r7}
 800c658:	b087      	sub	sp, #28
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	7b1b      	ldrb	r3, [r3, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 809d 	bne.w	800c7a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d04c      	beq.n	800c70c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	823b      	strh	r3, [r7, #16]
 800c680:	8a3b      	ldrh	r3, [r7, #16]
 800c682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d01b      	beq.n	800c6c2 <USB_EPClearStall+0x6c>
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	b29b      	uxth	r3, r3
 800c698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c69c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6a0:	81fb      	strh	r3, [r7, #14]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	441a      	add	r2, r3
 800c6ac:	89fb      	ldrh	r3, [r7, #14]
 800c6ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	78db      	ldrb	r3, [r3, #3]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d06c      	beq.n	800c7a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e0:	81bb      	strh	r3, [r7, #12]
 800c6e2:	89bb      	ldrh	r3, [r7, #12]
 800c6e4:	f083 0320 	eor.w	r3, r3, #32
 800c6e8:	81bb      	strh	r3, [r7, #12]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	441a      	add	r2, r3
 800c6f4:	89bb      	ldrh	r3, [r7, #12]
 800c6f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c706:	b29b      	uxth	r3, r3
 800c708:	8013      	strh	r3, [r2, #0]
 800c70a:	e04b      	b.n	800c7a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	82fb      	strh	r3, [r7, #22]
 800c71a:	8afb      	ldrh	r3, [r7, #22]
 800c71c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01b      	beq.n	800c75c <USB_EPClearStall+0x106>
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	881b      	ldrh	r3, [r3, #0]
 800c730:	b29b      	uxth	r3, r3
 800c732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c73a:	82bb      	strh	r3, [r7, #20]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	441a      	add	r2, r3
 800c746:	8abb      	ldrh	r3, [r7, #20]
 800c748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c74c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	b29b      	uxth	r3, r3
 800c75a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c772:	827b      	strh	r3, [r7, #18]
 800c774:	8a7b      	ldrh	r3, [r7, #18]
 800c776:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c77a:	827b      	strh	r3, [r7, #18]
 800c77c:	8a7b      	ldrh	r3, [r7, #18]
 800c77e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c782:	827b      	strh	r3, [r7, #18]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	441a      	add	r2, r3
 800c78e:	8a7b      	ldrh	r3, [r7, #18]
 800c790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	371c      	adds	r7, #28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr

0800c7b2 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c7be:	78fb      	ldrb	r3, [r7, #3]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d103      	bne.n	800c7cc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2280      	movs	r2, #128	; 0x80
 800c7c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c816:	b29b      	uxth	r3, r3
 800c818:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c81a:	68fb      	ldr	r3, [r7, #12]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c840:	b480      	push	{r7}
 800c842:	b08d      	sub	sp, #52	; 0x34
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	460b      	mov	r3, r1
 800c850:	80fb      	strh	r3, [r7, #6]
 800c852:	4613      	mov	r3, r2
 800c854:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c856:	88bb      	ldrh	r3, [r7, #4]
 800c858:	3301      	adds	r3, #1
 800c85a:	085b      	lsrs	r3, r3, #1
 800c85c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c866:	88fa      	ldrh	r2, [r7, #6]
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c870:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c872:	6a3b      	ldr	r3, [r7, #32]
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c876:	e01b      	b.n	800c8b0 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	3301      	adds	r3, #1
 800c882:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	b29b      	uxth	r3, r3
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	461a      	mov	r2, r3
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	4313      	orrs	r3, r2
 800c894:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	b29a      	uxth	r2, r3
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	3302      	adds	r3, #2
 800c8a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e0      	bne.n	800c878 <USB_WritePMA+0x38>
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	3734      	adds	r7, #52	; 0x34
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b08b      	sub	sp, #44	; 0x2c
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	80fb      	strh	r3, [r7, #6]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c8da:	88bb      	ldrh	r3, [r7, #4]
 800c8dc:	085b      	lsrs	r3, r3, #1
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c8ea:	88fa      	ldrh	r2, [r7, #6]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8fa:	e018      	b.n	800c92e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b29b      	uxth	r3, r3
 800c902:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	3302      	adds	r3, #2
 800c908:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	3301      	adds	r3, #1
 800c916:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	0a1b      	lsrs	r3, r3, #8
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	3301      	adds	r3, #1
 800c926:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	3b01      	subs	r3, #1
 800c92c:	627b      	str	r3, [r7, #36]	; 0x24
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1e3      	bne.n	800c8fc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c934:	88bb      	ldrh	r3, [r7, #4]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d007      	beq.n	800c950 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	b29b      	uxth	r3, r3
 800c946:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	701a      	strb	r2, [r3, #0]
  }
}
 800c950:	bf00      	nop
 800c952:	372c      	adds	r7, #44	; 0x2c
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <initDrum>:
" |___/|_|  \\_,_|_|_|_|_\\__,_|\\_, |\n"
"                             |__/ \n";
*/

void initDrum(DRUM* _chnl, DRM_voice _main_voice, DRM_voice _aux_voice, DRM_type _chnl_type, GPIO_PinState _aux_state)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	4608      	mov	r0, r1
 800c966:	4611      	mov	r1, r2
 800c968:	461a      	mov	r2, r3
 800c96a:	4603      	mov	r3, r0
 800c96c:	70fb      	strb	r3, [r7, #3]
 800c96e:	460b      	mov	r3, r1
 800c970:	70bb      	strb	r3, [r7, #2]
 800c972:	4613      	mov	r3, r2
 800c974:	707b      	strb	r3, [r7, #1]
	// main configuration
	_chnl->main_voice 			= _main_voice;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	701a      	strb	r2, [r3, #0]
	_chnl->aux_voice  			= _aux_voice;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	78ba      	ldrb	r2, [r7, #2]
 800c980:	709a      	strb	r2, [r3, #2]
	_chnl->chnl_type   			= _chnl_type;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	787a      	ldrb	r2, [r7, #1]
 800c986:	70da      	strb	r2, [r3, #3]

	// parameters default values for cymbal
	_chnl->peak_volume_norm		= 50;		// full volume at 4096*50%=2048
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2232      	movs	r2, #50	; 0x32
 800c98c:	80da      	strh	r2, [r3, #6]
	_chnl->peak_max_length		= 201;		// 201 	x0.1=20.1ms
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	22c9      	movs	r2, #201	; 0xc9
 800c992:	811a      	strh	r2, [r3, #8]
	_chnl->peak_min_length		= 3; 		// 15 	x0.1=1.5ms
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2203      	movs	r2, #3
 800c998:	815a      	strh	r2, [r3, #10]
	_chnl->peak2peak 			= 2048; 	//512 mute and 2048 ramp-down
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9a0:	819a      	strh	r2, [r3, #12]
	// if the main pad is mesh, peaks are much longer
	if ((_chnl_type == MESH_PAD_AUTOAUX) || (_chnl_type == MESH_RIM_AUTOAUX))
 800c9a2:	787b      	ldrb	r3, [r7, #1]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <initDrum+0x52>
 800c9a8:	787b      	ldrb	r3, [r7, #1]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d102      	bne.n	800c9b4 <initDrum+0x58>
		_chnl->peak_min_length	= 8; 		// 8 	x0.1=0.8ms
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2208      	movs	r2, #8
 800c9b2:	815a      	strh	r2, [r3, #10]

	// likely to overwrite
	_chnl->alt_voice  			= _main_voice;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	78fa      	ldrb	r2, [r7, #3]
 800c9b8:	705a      	strb	r2, [r3, #1]

	// update all variables
	_chnl->cooldown		 		= 0;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	81da      	strh	r2, [r3, #14]
	_chnl->main_peaking			= 0;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	741a      	strb	r2, [r3, #16]
	_chnl->main_rdy	 			= 0;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	745a      	strb	r2, [r3, #17]
	_chnl->main_rdy_usealt		= 0;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	749a      	strb	r2, [r3, #18]

	_chnl->main_active_max 	 	= 0;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	829a      	strh	r2, [r3, #20]
	_chnl->main_active_length	= 0;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	82da      	strh	r2, [r3, #22]


	_chnl->main_rdy_height 	 	= 0;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	835a      	strh	r2, [r3, #26]
	_chnl->main_rdy_time	 	= 0;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	61da      	str	r2, [r3, #28]
	_chnl->main_rdy_volume	 	= 0;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 2020 	strb.w	r2, [r3, #32]
	_chnl->main_rdy_length	 	= 0;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	845a      	strh	r2, [r3, #34]	; 0x22


	_chnl->aux_rdy				= 0;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_chnl->aux_rdy_time			= 0;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	629a      	str	r2, [r3, #40]	; 0x28
	_chnl->aux_active_time		= 0;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	631a      	str	r2, [r3, #48]	; 0x30

	_chnl->aux_status 			= CHANNEL_STATUS_IDLE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	761a      	strb	r2, [r3, #24]

	if ((_aux_state == GPIO_PIN_RESET)||(_chnl_type == CYMBAL_2_ZONE)){
 800ca12:	7c3b      	ldrb	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <initDrum+0xc2>
 800ca18:	787b      	ldrb	r3, [r7, #1]
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d10a      	bne.n	800ca34 <initDrum+0xd8>
		// LOW state, pad input
		_chnl->aux_type = AUX_TYPE_PAD;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PAD_IDLE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PAD_IDLE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if ((_aux_state == GPIO_PIN_SET)||(_chnl_type == CYMBAL_HIHAT)||(_chnl_type == CYMBAL_MUTE)){
 800ca34:	7c3b      	ldrb	r3, [r7, #16]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d005      	beq.n	800ca46 <initDrum+0xea>
 800ca3a:	787b      	ldrb	r3, [r7, #1]
 800ca3c:	2b03      	cmp	r3, #3
 800ca3e:	d002      	beq.n	800ca46 <initDrum+0xea>
 800ca40:	787b      	ldrb	r3, [r7, #1]
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d10a      	bne.n	800ca5c <initDrum+0x100>
		// HIGH state, pedal input
		_chnl->aux_type = AUX_TYPE_PEDAL;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PEDAL_IDLE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	_chnl->aux_last_state	= _aux_state;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7c3a      	ldrb	r2, [r7, #16]
 800ca60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <Update_channel>:

// V 4.0
uint8_t Update_channel(DRUM* _chnl, uint32_t _adc_reading, GPIO_PinState _aux_state){
 800ca70:	b480      	push	{r7}
 800ca72:	b087      	sub	sp, #28
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	71fb      	strb	r3, [r7, #7]

	// ### MAIN INPUT ###
	uint16_t thresh = PEAK_THRESHOLD;
 800ca7e:	2332      	movs	r3, #50	; 0x32
 800ca80:	82fb      	strh	r3, [r7, #22]
	if (_chnl->cooldown) {
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	89db      	ldrh	r3, [r3, #14]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d024      	beq.n	800cad4 <Update_channel+0x64>
		_chnl->cooldown--;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	89db      	ldrh	r3, [r3, #14]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	81da      	strh	r2, [r3, #14]

		// if the peak is happening - no threshold
		if ( _chnl->main_peaking )
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	7c1b      	ldrb	r3, [r3, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <Update_channel+0x34>
			thresh = 1;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	82fb      	strh	r3, [r7, #22]
 800caa2:	e017      	b.n	800cad4 <Update_channel+0x64>
		// until 50ms threshold = (2x max height)
		else if ( _chnl->cooldown > (_chnl->peak2peak - 512) )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	89d2      	ldrh	r2, [r2, #14]
 800cab0:	4293      	cmp	r3, r2
 800cab2:	dc04      	bgt.n	800cabe <Update_channel+0x4e>
			thresh = (_chnl->main_rdy_height<<1);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	8b5b      	ldrh	r3, [r3, #26]
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	82fb      	strh	r3, [r7, #22]
 800cabc:	e00a      	b.n	800cad4 <Update_channel+0x64>
		// after 50ms, gradually lower the threshold from 75% until 0 after 150ms
		else
			thresh = (uint16_t)(_chnl->main_rdy_height>>5)*(uint16_t)(_chnl->cooldown>>6);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	8b5b      	ldrh	r3, [r3, #26]
 800cac2:	095b      	lsrs	r3, r3, #5
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	89db      	ldrh	r3, [r3, #14]
 800caca:	099b      	lsrs	r3, r3, #6
 800cacc:	b29b      	uxth	r3, r3
 800cace:	fb12 f303 	smulbb	r3, r2, r3
 800cad2:	82fb      	strh	r3, [r7, #22]
	}


	if (_adc_reading > thresh){
 800cad4:	8afb      	ldrh	r3, [r7, #22]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	429a      	cmp	r2, r3
 800cada:	f240 8091 	bls.w	800cc00 <Update_channel+0x190>
		// new peak, restart cooldown timer
		if (_chnl->cooldown < (_chnl->peak2peak - 512)){
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	89db      	ldrh	r3, [r3, #14]
 800cae2:	461a      	mov	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	899b      	ldrh	r3, [r3, #12]
 800cae8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800caec:	429a      	cmp	r2, r3
 800caee:	da0c      	bge.n	800cb0a <Update_channel+0x9a>
			_chnl->main_peaking  = 1;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	741a      	strb	r2, [r3, #16]

			_chnl->cooldown = _chnl->peak2peak;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	899a      	ldrh	r2, [r3, #12]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	81da      	strh	r2, [r3, #14]
			_chnl->main_active_length 	= 0;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	829a      	strh	r2, [r3, #20]
		}

		// increment peak length until max length is reached
		_chnl->main_active_length +=1;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	8adb      	ldrh	r3, [r3, #22]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	82da      	strh	r2, [r3, #22]

		// if the value is bigger then max, update max
		if (_adc_reading > _chnl->main_active_max)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	8a9b      	ldrh	r3, [r3, #20]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d903      	bls.n	800cb2a <Update_channel+0xba>
			_chnl->main_active_max  = _adc_reading;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	829a      	strh	r2, [r3, #20]

		// CHECKING END CONDITION
		// End of peak, if the point is lower then half of the max
		if (_adc_reading < (_chnl->main_active_max>>1)) {
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8a9b      	ldrh	r3, [r3, #20]
 800cb2e:	085b      	lsrs	r3, r3, #1
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	461a      	mov	r2, r3
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d262      	bcs.n	800cc00 <Update_channel+0x190>
			_chnl->main_peaking = 0;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	741a      	strb	r2, [r3, #16]

			// option 1. short peaks higher than 40% of max volume (50*8=400 ADC)
			if ((_chnl->main_active_length < _chnl->peak_min_length) && (_chnl->main_active_max > (_chnl->peak_volume_norm<<3)) ) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	8ada      	ldrh	r2, [r3, #22]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	895b      	ldrh	r3, [r3, #10]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d221      	bcs.n	800cb90 <Update_channel+0x120>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	8a9b      	ldrh	r3, [r3, #20]
 800cb50:	461a      	mov	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	88db      	ldrh	r3, [r3, #6]
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	dd19      	ble.n	800cb90 <Update_channel+0x120>
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	78db      	ldrb	r3, [r3, #3]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d147      	bne.n	800cbf4 <Update_channel+0x184>
					_chnl->main_rdy 		= 1;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2201      	movs	r2, #1
 800cb68:	745a      	strb	r2, [r3, #17]
					_chnl->main_rdy_usealt 	= 0;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	749a      	strb	r2, [r3, #18]
					_chnl->main_rdy_time	= STEP_TIME;
 800cb70:	4b78      	ldr	r3, [pc, #480]	; (800cd54 <Update_channel+0x2e4>)
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	61da      	str	r2, [r3, #28]
					_chnl->main_rdy_height 	= _chnl->main_active_max;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	8a9a      	ldrh	r2, [r3, #20]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	835a      	strh	r2, [r3, #26]
					_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	8ada      	ldrh	r2, [r3, #22]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	845a      	strh	r2, [r3, #34]	; 0x22
					_chnl->main_rdy_usealt = 1;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800cb8e:	e031      	b.n	800cbf4 <Update_channel+0x184>
				}
			// option 2. normal length peaks
			} else if ( ((_chnl->main_active_length >= _chnl->peak_min_length)  ) //|| (_chnl->main_active_max < (_chnl->peak_volume_norm<<2))
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	8ada      	ldrh	r2, [r3, #22]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	895b      	ldrh	r3, [r3, #10]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d323      	bcc.n	800cbe4 <Update_channel+0x174>
					  && (_chnl->main_active_length <  _chnl->peak_max_length)) {
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	8ada      	ldrh	r2, [r3, #22]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	891b      	ldrh	r3, [r3, #8]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d21d      	bcs.n	800cbe4 <Update_channel+0x174>
				_chnl->main_rdy 		= 1;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	745a      	strb	r2, [r3, #17]
				_chnl->main_rdy_usealt 	= 0;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	749a      	strb	r2, [r3, #18]
				_chnl->main_rdy_time	= STEP_TIME;
 800cbb4:	4b67      	ldr	r3, [pc, #412]	; (800cd54 <Update_channel+0x2e4>)
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	61da      	str	r2, [r3, #28]
				_chnl->main_rdy_height 	= _chnl->main_active_max;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	8a9a      	ldrh	r2, [r3, #20]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	835a      	strh	r2, [r3, #26]
				_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8ada      	ldrh	r2, [r3, #22]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	845a      	strh	r2, [r3, #34]	; 0x22

				// handle hihat case
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	78db      	ldrb	r3, [r3, #3]
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d10e      	bne.n	800cbf2 <Update_channel+0x182>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	7e1b      	ldrb	r3, [r3, #24]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d10a      	bne.n	800cbf2 <Update_channel+0x182>
					_chnl->main_rdy_usealt = 1;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cbe2:	e006      	b.n	800cbf2 <Update_channel+0x182>
			// option 3 - inconsistent peak:
			}else{
//				if (_chnl->cooldown < (_chnl->peak2peak - 512)){
					_chnl->cooldown = 0;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	81da      	strh	r2, [r3, #14]
					_chnl->main_rdy_height 	= 0;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	835a      	strh	r2, [r3, #26]
 800cbf0:	e000      	b.n	800cbf4 <Update_channel+0x184>
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800cbf2:	bf00      	nop
//				}
			}

			// reset process
			_chnl->main_active_length 	= 0;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	829a      	strh	r2, [r3, #20]
		}//end adc<max/2
	}

	// ### AUX INPUT ###

	if (_chnl->aux_type == AUX_TYPE_PAD){
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	791b      	ldrb	r3, [r3, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d141      	bne.n	800cc8c <Update_channel+0x21c>

		if (_aux_state == GPIO_PIN_RESET)
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d104      	bne.n	800cc18 <Update_channel+0x1a8>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800cc16:	e003      	b.n	800cc20 <Update_channel+0x1b0>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		// new peak started
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d107      	bne.n	800cc3a <Update_channel+0x1ca>
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d102      	bne.n	800cc3a <Update_channel+0x1ca>
			_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2201      	movs	r2, #1
 800cc38:	761a      	strb	r2, [r3, #24]
		}

		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d11c      	bne.n	800cc7e <Update_channel+0x20e>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d117      	bne.n	800cc7e <Update_channel+0x20e>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800cc4e:	4b41      	ldr	r3, [pc, #260]	; (800cd54 <Update_channel+0x2e4>)
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	2b32      	cmp	r3, #50	; 0x32
 800cc5a:	d90d      	bls.n	800cc78 <Update_channel+0x208>
				_chnl->aux_rdy			 = 1;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800cc64:	4b3b      	ldr	r3, [pc, #236]	; (800cd54 <Update_channel+0x2e4>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	629a      	str	r2, [r3, #40]	; 0x28
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800cc8a:	e055      	b.n	800cd38 <Update_channel+0x2c8>

	} else { //AUX_TYPE_PEDAL

		if (_aux_state == GPIO_PIN_SET)
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d104      	bne.n	800cc9c <Update_channel+0x22c>
			_chnl->aux_active_state = CHANNEL_PEDAL_IDLE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2202      	movs	r2, #2
 800cc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800cc9a:	e003      	b.n	800cca4 <Update_channel+0x234>
		else
			_chnl->aux_active_state = CHANNEL_PEDAL_PRESSED;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2203      	movs	r2, #3
 800cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


		// pedal pressed
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_PRESSED) && (_chnl->aux_last_state == CHANNEL_PEDAL_IDLE)){
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d11c      	bne.n	800cce8 <Update_channel+0x278>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d117      	bne.n	800cce8 <Update_channel+0x278>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800ccb8:	4b26      	ldr	r3, [pc, #152]	; (800cd54 <Update_channel+0x2e4>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b32      	cmp	r3, #50	; 0x32
 800ccc4:	d907      	bls.n	800ccd6 <Update_channel+0x266>
				_chnl->aux_rdy			 = 1;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800ccce:	4b21      	ldr	r3, [pc, #132]	; (800cd54 <Update_channel+0x2e4>)
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_PRESSED;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2202      	movs	r2, #2
 800cce6:	761a      	strb	r2, [r3, #24]

		}

		// pedal released
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_IDLE) && (_chnl->aux_last_state == CHANNEL_PEDAL_PRESSED)){
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d11c      	bne.n	800cd2c <Update_channel+0x2bc>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d117      	bne.n	800cd2c <Update_channel+0x2bc>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800ccfc:	4b15      	ldr	r3, [pc, #84]	; (800cd54 <Update_channel+0x2e4>)
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	2b32      	cmp	r3, #50	; 0x32
 800cd08:	d907      	bls.n	800cd1a <Update_channel+0x2aa>
				_chnl->aux_rdy			 = 1;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <Update_channel+0x2e4>)
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// for fun return 1 if there is data to report
	return (_chnl->main_rdy | _chnl->aux_rdy);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	7c5a      	ldrb	r2, [r3, #17]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd42:	4313      	orrs	r3, r2
 800cd44:	b2db      	uxtb	r3, r3
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	200006d4 	.word	0x200006d4

0800cd58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e01f      	b.n	800cdb0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	79fa      	ldrb	r2, [r7, #7]
 800cda2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f001 fec9 	bl	800eb3c <USBD_LL_Init>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e016      	b.n	800cdfe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00b      	beq.n	800cdfc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	f107 020e 	add.w	r2, r7, #14
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f001 fef4 	bl	800ebfc <USBD_LL_Start>
 800ce14:	4603      	mov	r3, r0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ce40:	2303      	movs	r3, #3
 800ce42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	78fa      	ldrb	r2, [r7, #3]
 800ce58:	4611      	mov	r1, r2
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	4798      	blx	r3
 800ce5e:	4603      	mov	r3, r0
 800ce60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	78fa      	ldrb	r2, [r7, #3]
 800ce8c:	4611      	mov	r1, r2
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	4798      	blx	r3
  }

  return USBD_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 ff25 	bl	800dcfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cec2:	461a      	mov	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ced0:	f003 031f 	and.w	r3, r3, #31
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d01a      	beq.n	800cf0e <USBD_LL_SetupStage+0x72>
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d822      	bhi.n	800cf22 <USBD_LL_SetupStage+0x86>
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <USBD_LL_SetupStage+0x4a>
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d00a      	beq.n	800cefa <USBD_LL_SetupStage+0x5e>
 800cee4:	e01d      	b.n	800cf22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f9d6 	bl	800d2a0 <USBD_StdDevReq>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]
      break;
 800cef8:	e020      	b.n	800cf3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf00:	4619      	mov	r1, r3
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fa3a 	bl	800d37c <USBD_StdItfReq>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf0c:	e016      	b.n	800cf3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fa78 	bl	800d40c <USBD_StdEPReq>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf20:	e00c      	b.n	800cf3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 fec3 	bl	800ecbc <USBD_LL_StallEP>
 800cf36:	4603      	mov	r3, r0
 800cf38:	73fb      	strb	r3, [r7, #15]
      break;
 800cf3a:	bf00      	nop
  }

  return ret;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b086      	sub	sp, #24
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	607a      	str	r2, [r7, #4]
 800cf52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf54:	7afb      	ldrb	r3, [r7, #11]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d137      	bne.n	800cfca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d14a      	bne.n	800d002 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	689a      	ldr	r2, [r3, #8]
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d913      	bls.n	800cfa0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	1ad2      	subs	r2, r2, r3
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	68da      	ldr	r2, [r3, #12]
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	bf28      	it	cs
 800cf92:	4613      	movcs	r3, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 ffa4 	bl	800dee6 <USBD_CtlContinueRx>
 800cf9e:	e030      	b.n	800d002 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d105      	bne.n	800cfc2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f000 ffa0 	bl	800df08 <USBD_CtlSendStatus>
 800cfc8:	e01b      	b.n	800d002 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d013      	beq.n	800cffe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d10e      	bne.n	800cffe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	7afa      	ldrb	r2, [r7, #11]
 800cfea:	4611      	mov	r1, r2
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	4798      	blx	r3
 800cff0:	4603      	mov	r3, r0
 800cff2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800cff4:	7dfb      	ldrb	r3, [r7, #23]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	e002      	b.n	800d004 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	e000      	b.n	800d004 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	460b      	mov	r3, r1
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d01a:	7afb      	ldrb	r3, [r7, #11]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d16a      	bne.n	800d0f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	3314      	adds	r3, #20
 800d024:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d155      	bne.n	800d0dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	689a      	ldr	r2, [r3, #8]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d914      	bls.n	800d066 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	689a      	ldr	r2, [r3, #8]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	1ad2      	subs	r2, r2, r3
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	461a      	mov	r2, r3
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 ff19 	bl	800de8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d058:	2300      	movs	r3, #0
 800d05a:	2200      	movs	r2, #0
 800d05c:	2100      	movs	r1, #0
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f001 fed7 	bl	800ee12 <USBD_LL_PrepareReceive>
 800d064:	e03a      	b.n	800d0dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	68da      	ldr	r2, [r3, #12]
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d11c      	bne.n	800d0ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	685a      	ldr	r2, [r3, #4]
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d316      	bcc.n	800d0ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d088:	429a      	cmp	r2, r3
 800d08a:	d20f      	bcs.n	800d0ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d08c:	2200      	movs	r2, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 fefa 	bl	800de8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d09e:	2300      	movs	r3, #0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f001 feb4 	bl	800ee12 <USBD_LL_PrepareReceive>
 800d0aa:	e017      	b.n	800d0dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00a      	beq.n	800d0ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d105      	bne.n	800d0ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0ce:	2180      	movs	r1, #128	; 0x80
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f001 fdf3 	bl	800ecbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f000 ff29 	bl	800df2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d123      	bne.n	800d12e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f7ff fe99 	bl	800ce1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d0f4:	e01b      	b.n	800d12e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d013      	beq.n	800d12a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d10e      	bne.n	800d12a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	7afa      	ldrb	r2, [r7, #11]
 800d116:	4611      	mov	r1, r2
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	4798      	blx	r3
 800d11c:	4603      	mov	r3, r0
 800d11e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d120:	7dfb      	ldrb	r3, [r7, #23]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	e002      	b.n	800d130 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e000      	b.n	800d130 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d164:	2b00      	cmp	r3, #0
 800d166:	d009      	beq.n	800d17c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	6852      	ldr	r2, [r2, #4]
 800d174:	b2d2      	uxtb	r2, r2
 800d176:	4611      	mov	r1, r2
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d17c:	2340      	movs	r3, #64	; 0x40
 800d17e:	2200      	movs	r2, #0
 800d180:	2100      	movs	r1, #0
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f001 fd55 	bl	800ec32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2240      	movs	r2, #64	; 0x40
 800d194:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	2200      	movs	r2, #0
 800d19c:	2180      	movs	r1, #128	; 0x80
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f001 fd47 	bl	800ec32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2240      	movs	r2, #64	; 0x40
 800d1ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2204      	movs	r2, #4
 800d1f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d212:	2b04      	cmp	r3, #4
 800d214:	d105      	bne.n	800d222 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d10b      	bne.n	800d25a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d005      	beq.n	800d25a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	3301      	adds	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d282:	8a3b      	ldrh	r3, [r7, #16]
 800d284:	021b      	lsls	r3, r3, #8
 800d286:	b21a      	sxth	r2, r3
 800d288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	b21b      	sxth	r3, r3
 800d290:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d292:	89fb      	ldrh	r3, [r7, #14]
}
 800d294:	4618      	mov	r0, r3
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2b6:	2b40      	cmp	r3, #64	; 0x40
 800d2b8:	d005      	beq.n	800d2c6 <USBD_StdDevReq+0x26>
 800d2ba:	2b40      	cmp	r3, #64	; 0x40
 800d2bc:	d853      	bhi.n	800d366 <USBD_StdDevReq+0xc6>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00b      	beq.n	800d2da <USBD_StdDevReq+0x3a>
 800d2c2:	2b20      	cmp	r3, #32
 800d2c4:	d14f      	bne.n	800d366 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	4798      	blx	r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d8:	e04a      	b.n	800d370 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	785b      	ldrb	r3, [r3, #1]
 800d2de:	2b09      	cmp	r3, #9
 800d2e0:	d83b      	bhi.n	800d35a <USBD_StdDevReq+0xba>
 800d2e2:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <USBD_StdDevReq+0x48>)
 800d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e8:	0800d33d 	.word	0x0800d33d
 800d2ec:	0800d351 	.word	0x0800d351
 800d2f0:	0800d35b 	.word	0x0800d35b
 800d2f4:	0800d347 	.word	0x0800d347
 800d2f8:	0800d35b 	.word	0x0800d35b
 800d2fc:	0800d31b 	.word	0x0800d31b
 800d300:	0800d311 	.word	0x0800d311
 800d304:	0800d35b 	.word	0x0800d35b
 800d308:	0800d333 	.word	0x0800d333
 800d30c:	0800d325 	.word	0x0800d325
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d310:	6839      	ldr	r1, [r7, #0]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f9da 	bl	800d6cc <USBD_GetDescriptor>
      break;
 800d318:	e024      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d31a:	6839      	ldr	r1, [r7, #0]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fb69 	bl	800d9f4 <USBD_SetAddress>
      break;
 800d322:	e01f      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fba8 	bl	800da7c <USBD_SetConfig>
 800d32c:	4603      	mov	r3, r0
 800d32e:	73fb      	strb	r3, [r7, #15]
      break;
 800d330:	e018      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fc45 	bl	800dbc4 <USBD_GetConfig>
      break;
 800d33a:	e013      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fc75 	bl	800dc2e <USBD_GetStatus>
      break;
 800d344:	e00e      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fca3 	bl	800dc94 <USBD_SetFeature>
      break;
 800d34e:	e009      	b.n	800d364 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fcb2 	bl	800dcbc <USBD_ClrFeature>
      break;
 800d358:	e004      	b.n	800d364 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fd08 	bl	800dd72 <USBD_CtlError>
      break;
 800d362:	bf00      	nop
    }
    break;
 800d364:	e004      	b.n	800d370 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fd02 	bl	800dd72 <USBD_CtlError>
    break;
 800d36e:	bf00      	nop
  }

  return ret;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop

0800d37c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d392:	2b40      	cmp	r3, #64	; 0x40
 800d394:	d005      	beq.n	800d3a2 <USBD_StdItfReq+0x26>
 800d396:	2b40      	cmp	r3, #64	; 0x40
 800d398:	d82e      	bhi.n	800d3f8 <USBD_StdItfReq+0x7c>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <USBD_StdItfReq+0x26>
 800d39e:	2b20      	cmp	r3, #32
 800d3a0:	d12a      	bne.n	800d3f8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d81d      	bhi.n	800d3ea <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	889b      	ldrh	r3, [r3, #4]
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d813      	bhi.n	800d3e0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	4798      	blx	r3
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	88db      	ldrh	r3, [r3, #6]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d110      	bne.n	800d3f4 <USBD_StdItfReq+0x78>
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10d      	bne.n	800d3f4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fd95 	bl	800df08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d3de:	e009      	b.n	800d3f4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fcc5 	bl	800dd72 <USBD_CtlError>
      break;
 800d3e8:	e004      	b.n	800d3f4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fcc0 	bl	800dd72 <USBD_CtlError>
      break;
 800d3f2:	e000      	b.n	800d3f6 <USBD_StdItfReq+0x7a>
      break;
 800d3f4:	bf00      	nop
    }
    break;
 800d3f6:	e004      	b.n	800d402 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fcb9 	bl	800dd72 <USBD_CtlError>
    break;
 800d400:	bf00      	nop
  }

  return ret;
 800d402:	7bfb      	ldrb	r3, [r7, #15]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	889b      	ldrh	r3, [r3, #4]
 800d41e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d428:	2b40      	cmp	r3, #64	; 0x40
 800d42a:	d007      	beq.n	800d43c <USBD_StdEPReq+0x30>
 800d42c:	2b40      	cmp	r3, #64	; 0x40
 800d42e:	f200 8142 	bhi.w	800d6b6 <USBD_StdEPReq+0x2aa>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00c      	beq.n	800d450 <USBD_StdEPReq+0x44>
 800d436:	2b20      	cmp	r3, #32
 800d438:	f040 813d 	bne.w	800d6b6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	73fb      	strb	r3, [r7, #15]
    break;
 800d44e:	e137      	b.n	800d6c0 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	2b03      	cmp	r3, #3
 800d456:	d007      	beq.n	800d468 <USBD_StdEPReq+0x5c>
 800d458:	2b03      	cmp	r3, #3
 800d45a:	f300 8126 	bgt.w	800d6aa <USBD_StdEPReq+0x29e>
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d07d      	beq.n	800d55e <USBD_StdEPReq+0x152>
 800d462:	2b01      	cmp	r3, #1
 800d464:	d03b      	beq.n	800d4de <USBD_StdEPReq+0xd2>
 800d466:	e120      	b.n	800d6aa <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d002      	beq.n	800d478 <USBD_StdEPReq+0x6c>
 800d472:	2b03      	cmp	r3, #3
 800d474:	d016      	beq.n	800d4a4 <USBD_StdEPReq+0x98>
 800d476:	e02c      	b.n	800d4d2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d478:	7bbb      	ldrb	r3, [r7, #14]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00d      	beq.n	800d49a <USBD_StdEPReq+0x8e>
 800d47e:	7bbb      	ldrb	r3, [r7, #14]
 800d480:	2b80      	cmp	r3, #128	; 0x80
 800d482:	d00a      	beq.n	800d49a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d484:	7bbb      	ldrb	r3, [r7, #14]
 800d486:	4619      	mov	r1, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f001 fc17 	bl	800ecbc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d48e:	2180      	movs	r1, #128	; 0x80
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f001 fc13 	bl	800ecbc <USBD_LL_StallEP>
 800d496:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d498:	e020      	b.n	800d4dc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fc68 	bl	800dd72 <USBD_CtlError>
        break;
 800d4a2:	e01b      	b.n	800d4dc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	885b      	ldrh	r3, [r3, #2]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10e      	bne.n	800d4ca <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00b      	beq.n	800d4ca <USBD_StdEPReq+0xbe>
 800d4b2:	7bbb      	ldrb	r3, [r7, #14]
 800d4b4:	2b80      	cmp	r3, #128	; 0x80
 800d4b6:	d008      	beq.n	800d4ca <USBD_StdEPReq+0xbe>
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	88db      	ldrh	r3, [r3, #6]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d104      	bne.n	800d4ca <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f001 fbf9 	bl	800ecbc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fd1c 	bl	800df08 <USBD_CtlSendStatus>

        break;
 800d4d0:	e004      	b.n	800d4dc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc4c 	bl	800dd72 <USBD_CtlError>
        break;
 800d4da:	bf00      	nop
      }
      break;
 800d4dc:	e0ea      	b.n	800d6b4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d002      	beq.n	800d4ee <USBD_StdEPReq+0xe2>
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	d016      	beq.n	800d51a <USBD_StdEPReq+0x10e>
 800d4ec:	e030      	b.n	800d550 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00d      	beq.n	800d510 <USBD_StdEPReq+0x104>
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
 800d4f6:	2b80      	cmp	r3, #128	; 0x80
 800d4f8:	d00a      	beq.n	800d510 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4fa:	7bbb      	ldrb	r3, [r7, #14]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 fbdc 	bl	800ecbc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d504:	2180      	movs	r1, #128	; 0x80
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fbd8 	bl	800ecbc <USBD_LL_StallEP>
 800d50c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d50e:	e025      	b.n	800d55c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fc2d 	bl	800dd72 <USBD_CtlError>
        break;
 800d518:	e020      	b.n	800d55c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	885b      	ldrh	r3, [r3, #2]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d11b      	bne.n	800d55a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f001 fbe2 	bl	800ecfa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fce6 	bl	800df08 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	6839      	ldr	r1, [r7, #0]
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	4798      	blx	r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d54e:	e004      	b.n	800d55a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800d550:	6839      	ldr	r1, [r7, #0]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fc0d 	bl	800dd72 <USBD_CtlError>
        break;
 800d558:	e000      	b.n	800d55c <USBD_StdEPReq+0x150>
        break;
 800d55a:	bf00      	nop
      }
      break;
 800d55c:	e0aa      	b.n	800d6b4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d564:	2b02      	cmp	r3, #2
 800d566:	d002      	beq.n	800d56e <USBD_StdEPReq+0x162>
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d032      	beq.n	800d5d2 <USBD_StdEPReq+0x1c6>
 800d56c:	e097      	b.n	800d69e <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <USBD_StdEPReq+0x178>
 800d574:	7bbb      	ldrb	r3, [r7, #14]
 800d576:	2b80      	cmp	r3, #128	; 0x80
 800d578:	d004      	beq.n	800d584 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800d57a:	6839      	ldr	r1, [r7, #0]
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fbf8 	bl	800dd72 <USBD_CtlError>
          break;
 800d582:	e091      	b.n	800d6a8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	da0b      	bge.n	800d5a4 <USBD_StdEPReq+0x198>
 800d58c:	7bbb      	ldrb	r3, [r7, #14]
 800d58e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d592:	4613      	mov	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	3310      	adds	r3, #16
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	4413      	add	r3, r2
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	e00b      	b.n	800d5bc <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
 800d5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fc42 	bl	800de54 <USBD_CtlSendData>
        break;
 800d5d0:	e06a      	b.n	800d6a8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d5d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da11      	bge.n	800d5fe <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5da:	7bbb      	ldrb	r3, [r7, #14]
 800d5dc:	f003 020f 	and.w	r2, r3, #15
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	440b      	add	r3, r1
 800d5ec:	3324      	adds	r3, #36	; 0x24
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d117      	bne.n	800d624 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fbbb 	bl	800dd72 <USBD_CtlError>
            break;
 800d5fc:	e054      	b.n	800d6a8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	f003 020f 	and.w	r2, r3, #15
 800d604:	6879      	ldr	r1, [r7, #4]
 800d606:	4613      	mov	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	4413      	add	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	440b      	add	r3, r1
 800d610:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d104      	bne.n	800d624 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fba8 	bl	800dd72 <USBD_CtlError>
            break;
 800d622:	e041      	b.n	800d6a8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	da0b      	bge.n	800d644 <USBD_StdEPReq+0x238>
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d632:	4613      	mov	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	4413      	add	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	3310      	adds	r3, #16
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	4413      	add	r3, r2
 800d640:	3304      	adds	r3, #4
 800d642:	e00b      	b.n	800d65c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	4413      	add	r3, r2
 800d65a:	3304      	adds	r3, #4
 800d65c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <USBD_StdEPReq+0x25e>
 800d664:	7bbb      	ldrb	r3, [r7, #14]
 800d666:	2b80      	cmp	r3, #128	; 0x80
 800d668:	d103      	bne.n	800d672 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2200      	movs	r2, #0
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	e00e      	b.n	800d690 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d672:	7bbb      	ldrb	r3, [r7, #14]
 800d674:	4619      	mov	r1, r3
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f001 fb5e 	bl	800ed38 <USBD_LL_IsStallEP>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	2201      	movs	r2, #1
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	e002      	b.n	800d690 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2200      	movs	r2, #0
 800d68e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2202      	movs	r2, #2
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 fbdc 	bl	800de54 <USBD_CtlSendData>
          break;
 800d69c:	e004      	b.n	800d6a8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fb66 	bl	800dd72 <USBD_CtlError>
        break;
 800d6a6:	bf00      	nop
      }
      break;
 800d6a8:	e004      	b.n	800d6b4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fb60 	bl	800dd72 <USBD_CtlError>
      break;
 800d6b2:	bf00      	nop
    }
    break;
 800d6b4:	e004      	b.n	800d6c0 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fb5a 	bl	800dd72 <USBD_CtlError>
    break;
 800d6be:	bf00      	nop
  }

  return ret;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	885b      	ldrh	r3, [r3, #2]
 800d6e6:	0a1b      	lsrs	r3, r3, #8
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	2b0e      	cmp	r3, #14
 800d6ee:	f200 8152 	bhi.w	800d996 <USBD_GetDescriptor+0x2ca>
 800d6f2:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <USBD_GetDescriptor+0x2c>)
 800d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f8:	0800d769 	.word	0x0800d769
 800d6fc:	0800d781 	.word	0x0800d781
 800d700:	0800d7c1 	.word	0x0800d7c1
 800d704:	0800d997 	.word	0x0800d997
 800d708:	0800d997 	.word	0x0800d997
 800d70c:	0800d937 	.word	0x0800d937
 800d710:	0800d963 	.word	0x0800d963
 800d714:	0800d997 	.word	0x0800d997
 800d718:	0800d997 	.word	0x0800d997
 800d71c:	0800d997 	.word	0x0800d997
 800d720:	0800d997 	.word	0x0800d997
 800d724:	0800d997 	.word	0x0800d997
 800d728:	0800d997 	.word	0x0800d997
 800d72c:	0800d997 	.word	0x0800d997
 800d730:	0800d735 	.word	0x0800d735
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00b      	beq.n	800d758 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	7c12      	ldrb	r2, [r2, #16]
 800d74c:	f107 0108 	add.w	r1, r7, #8
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d756:	e126      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fb09 	bl	800dd72 <USBD_CtlError>
      err++;
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	3301      	adds	r3, #1
 800d764:	72fb      	strb	r3, [r7, #11]
    break;
 800d766:	e11e      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	7c12      	ldrb	r2, [r2, #16]
 800d774:	f107 0108 	add.w	r1, r7, #8
 800d778:	4610      	mov	r0, r2
 800d77a:	4798      	blx	r3
 800d77c:	60f8      	str	r0, [r7, #12]
    break;
 800d77e:	e112      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7c1b      	ldrb	r3, [r3, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10d      	bne.n	800d7a4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d790:	f107 0208 	add.w	r2, r7, #8
 800d794:	4610      	mov	r0, r2
 800d796:	4798      	blx	r3
 800d798:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3301      	adds	r3, #1
 800d79e:	2202      	movs	r2, #2
 800d7a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d7a2:	e100      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	f107 0208 	add.w	r2, r7, #8
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4798      	blx	r3
 800d7b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	701a      	strb	r2, [r3, #0]
    break;
 800d7be:	e0f2      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	885b      	ldrh	r3, [r3, #2]
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b05      	cmp	r3, #5
 800d7c8:	f200 80ac 	bhi.w	800d924 <USBD_GetDescriptor+0x258>
 800d7cc:	a201      	add	r2, pc, #4	; (adr r2, 800d7d4 <USBD_GetDescriptor+0x108>)
 800d7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d2:	bf00      	nop
 800d7d4:	0800d7ed 	.word	0x0800d7ed
 800d7d8:	0800d821 	.word	0x0800d821
 800d7dc:	0800d855 	.word	0x0800d855
 800d7e0:	0800d889 	.word	0x0800d889
 800d7e4:	0800d8bd 	.word	0x0800d8bd
 800d7e8:	0800d8f1 	.word	0x0800d8f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00b      	beq.n	800d810 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	7c12      	ldrb	r2, [r2, #16]
 800d804:	f107 0108 	add.w	r1, r7, #8
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d80e:	e091      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 faad 	bl	800dd72 <USBD_CtlError>
        err++;
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	3301      	adds	r3, #1
 800d81c:	72fb      	strb	r3, [r7, #11]
      break;
 800d81e:	e089      	b.n	800d934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00b      	beq.n	800d844 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	7c12      	ldrb	r2, [r2, #16]
 800d838:	f107 0108 	add.w	r1, r7, #8
 800d83c:	4610      	mov	r0, r2
 800d83e:	4798      	blx	r3
 800d840:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d842:	e077      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fa93 	bl	800dd72 <USBD_CtlError>
        err++;
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	3301      	adds	r3, #1
 800d850:	72fb      	strb	r3, [r7, #11]
      break;
 800d852:	e06f      	b.n	800d934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00b      	beq.n	800d878 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	7c12      	ldrb	r2, [r2, #16]
 800d86c:	f107 0108 	add.w	r1, r7, #8
 800d870:	4610      	mov	r0, r2
 800d872:	4798      	blx	r3
 800d874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d876:	e05d      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fa79 	bl	800dd72 <USBD_CtlError>
        err++;
 800d880:	7afb      	ldrb	r3, [r7, #11]
 800d882:	3301      	adds	r3, #1
 800d884:	72fb      	strb	r3, [r7, #11]
      break;
 800d886:	e055      	b.n	800d934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88e:	691b      	ldr	r3, [r3, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	7c12      	ldrb	r2, [r2, #16]
 800d8a0:	f107 0108 	add.w	r1, r7, #8
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	4798      	blx	r3
 800d8a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8aa:	e043      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa5f 	bl	800dd72 <USBD_CtlError>
        err++;
 800d8b4:	7afb      	ldrb	r3, [r7, #11]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ba:	e03b      	b.n	800d934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00b      	beq.n	800d8e0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	7c12      	ldrb	r2, [r2, #16]
 800d8d4:	f107 0108 	add.w	r1, r7, #8
 800d8d8:	4610      	mov	r0, r2
 800d8da:	4798      	blx	r3
 800d8dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8de:	e029      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d8e0:	6839      	ldr	r1, [r7, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fa45 	bl	800dd72 <USBD_CtlError>
        err++;
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ee:	e021      	b.n	800d934 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00b      	beq.n	800d914 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d902:	699b      	ldr	r3, [r3, #24]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	7c12      	ldrb	r2, [r2, #16]
 800d908:	f107 0108 	add.w	r1, r7, #8
 800d90c:	4610      	mov	r0, r2
 800d90e:	4798      	blx	r3
 800d910:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d912:	e00f      	b.n	800d934 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fa2b 	bl	800dd72 <USBD_CtlError>
        err++;
 800d91c:	7afb      	ldrb	r3, [r7, #11]
 800d91e:	3301      	adds	r3, #1
 800d920:	72fb      	strb	r3, [r7, #11]
      break;
 800d922:	e007      	b.n	800d934 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fa23 	bl	800dd72 <USBD_CtlError>
      err++;
 800d92c:	7afb      	ldrb	r3, [r7, #11]
 800d92e:	3301      	adds	r3, #1
 800d930:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d932:	bf00      	nop
    }
    break;
 800d934:	e037      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7c1b      	ldrb	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d109      	bne.n	800d952 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d946:	f107 0208 	add.w	r2, r7, #8
 800d94a:	4610      	mov	r0, r2
 800d94c:	4798      	blx	r3
 800d94e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d950:	e029      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa0c 	bl	800dd72 <USBD_CtlError>
      err++;
 800d95a:	7afb      	ldrb	r3, [r7, #11]
 800d95c:	3301      	adds	r3, #1
 800d95e:	72fb      	strb	r3, [r7, #11]
    break;
 800d960:	e021      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	7c1b      	ldrb	r3, [r3, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10d      	bne.n	800d986 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d972:	f107 0208 	add.w	r2, r7, #8
 800d976:	4610      	mov	r0, r2
 800d978:	4798      	blx	r3
 800d97a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3301      	adds	r3, #1
 800d980:	2207      	movs	r2, #7
 800d982:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d984:	e00f      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f9f2 	bl	800dd72 <USBD_CtlError>
      err++;
 800d98e:	7afb      	ldrb	r3, [r7, #11]
 800d990:	3301      	adds	r3, #1
 800d992:	72fb      	strb	r3, [r7, #11]
    break;
 800d994:	e007      	b.n	800d9a6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f9ea 	bl	800dd72 <USBD_CtlError>
    err++;
 800d99e:	7afb      	ldrb	r3, [r7, #11]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	72fb      	strb	r3, [r7, #11]
    break;
 800d9a4:	bf00      	nop
  }

  if (err != 0U)
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d11e      	bne.n	800d9ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	88db      	ldrh	r3, [r3, #6]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d016      	beq.n	800d9e2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800d9b4:	893b      	ldrh	r3, [r7, #8]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00e      	beq.n	800d9d8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	88da      	ldrh	r2, [r3, #6]
 800d9be:	893b      	ldrh	r3, [r7, #8]
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	bf28      	it	cs
 800d9c4:	4613      	movcs	r3, r2
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800d9ca:	893b      	ldrh	r3, [r7, #8]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	68f9      	ldr	r1, [r7, #12]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 fa3f 	bl	800de54 <USBD_CtlSendData>
 800d9d6:	e009      	b.n	800d9ec <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f9c9 	bl	800dd72 <USBD_CtlError>
 800d9e0:	e004      	b.n	800d9ec <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fa90 	bl	800df08 <USBD_CtlSendStatus>
 800d9e8:	e000      	b.n	800d9ec <USBD_GetDescriptor+0x320>
    return;
 800d9ea:	bf00      	nop
    }
  }
}
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop

0800d9f4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	889b      	ldrh	r3, [r3, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d130      	bne.n	800da68 <USBD_SetAddress+0x74>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	88db      	ldrh	r3, [r3, #6]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d12c      	bne.n	800da68 <USBD_SetAddress+0x74>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	885b      	ldrh	r3, [r3, #2]
 800da12:	2b7f      	cmp	r3, #127	; 0x7f
 800da14:	d828      	bhi.n	800da68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	885b      	ldrh	r3, [r3, #2]
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d104      	bne.n	800da36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f99f 	bl	800dd72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da34:	e01d      	b.n	800da72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7bfa      	ldrb	r2, [r7, #15]
 800da3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f001 f9a5 	bl	800ed92 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fa5d 	bl	800df08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d004      	beq.n	800da5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2202      	movs	r2, #2
 800da58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da5c:	e009      	b.n	800da72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da66:	e004      	b.n	800da72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da68:	6839      	ldr	r1, [r7, #0]
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f981 	bl	800dd72 <USBD_CtlError>
  }
}
 800da70:	bf00      	nop
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da86:	2300      	movs	r3, #0
 800da88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	885b      	ldrh	r3, [r3, #2]
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	4b4b      	ldr	r3, [pc, #300]	; (800dbc0 <USBD_SetConfig+0x144>)
 800da92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da94:	4b4a      	ldr	r3, [pc, #296]	; (800dbc0 <USBD_SetConfig+0x144>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d905      	bls.n	800daa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f967 	bl	800dd72 <USBD_CtlError>
    return USBD_FAIL;
 800daa4:	2303      	movs	r3, #3
 800daa6:	e087      	b.n	800dbb8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d002      	beq.n	800dab8 <USBD_SetConfig+0x3c>
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	d025      	beq.n	800db02 <USBD_SetConfig+0x86>
 800dab6:	e071      	b.n	800db9c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800dab8:	4b41      	ldr	r3, [pc, #260]	; (800dbc0 <USBD_SetConfig+0x144>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d01c      	beq.n	800dafa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800dac0:	4b3f      	ldr	r3, [pc, #252]	; (800dbc0 <USBD_SetConfig+0x144>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	461a      	mov	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800daca:	4b3d      	ldr	r3, [pc, #244]	; (800dbc0 <USBD_SetConfig+0x144>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff f9af 	bl	800ce34 <USBD_SetClassConfig>
 800dad6:	4603      	mov	r3, r0
 800dad8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800dada:	7bfb      	ldrb	r3, [r7, #15]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d004      	beq.n	800daea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f945 	bl	800dd72 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dae8:	e065      	b.n	800dbb6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fa0c 	bl	800df08 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2203      	movs	r2, #3
 800daf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800daf8:	e05d      	b.n	800dbb6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa04 	bl	800df08 <USBD_CtlSendStatus>
    break;
 800db00:	e059      	b.n	800dbb6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800db02:	4b2f      	ldr	r3, [pc, #188]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d112      	bne.n	800db30 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2202      	movs	r2, #2
 800db0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800db12:	4b2b      	ldr	r3, [pc, #172]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	461a      	mov	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db1c:	4b28      	ldr	r3, [pc, #160]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff f9a2 	bl	800ce6c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f9ed 	bl	800df08 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800db2e:	e042      	b.n	800dbb6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800db30:	4b23      	ldr	r3, [pc, #140]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d02a      	beq.n	800db94 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	4619      	mov	r1, r3
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff f990 	bl	800ce6c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800db4c:	4b1c      	ldr	r3, [pc, #112]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	461a      	mov	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800db56:	4b1a      	ldr	r3, [pc, #104]	; (800dbc0 <USBD_SetConfig+0x144>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff f969 	bl	800ce34 <USBD_SetClassConfig>
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00f      	beq.n	800db8c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800db6c:	6839      	ldr	r1, [r7, #0]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f8ff 	bl	800dd72 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff f975 	bl	800ce6c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2202      	movs	r2, #2
 800db86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800db8a:	e014      	b.n	800dbb6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 f9bb 	bl	800df08 <USBD_CtlSendStatus>
    break;
 800db92:	e010      	b.n	800dbb6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f9b7 	bl	800df08 <USBD_CtlSendStatus>
    break;
 800db9a:	e00c      	b.n	800dbb6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8e7 	bl	800dd72 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dba4:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <USBD_SetConfig+0x144>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff f95e 	bl	800ce6c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dbb0:	2303      	movs	r3, #3
 800dbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb4:	bf00      	nop
  }

  return ret;
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	2000043c 	.word	0x2000043c

0800dbc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	88db      	ldrh	r3, [r3, #6]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d004      	beq.n	800dbe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f8ca 	bl	800dd72 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800dbde:	e022      	b.n	800dc26 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	dc02      	bgt.n	800dbf0 <USBD_GetConfig+0x2c>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dc03      	bgt.n	800dbf6 <USBD_GetConfig+0x32>
 800dbee:	e015      	b.n	800dc1c <USBD_GetConfig+0x58>
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d00b      	beq.n	800dc0c <USBD_GetConfig+0x48>
 800dbf4:	e012      	b.n	800dc1c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3308      	adds	r3, #8
 800dc00:	2201      	movs	r2, #1
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 f925 	bl	800de54 <USBD_CtlSendData>
      break;
 800dc0a:	e00c      	b.n	800dc26 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	2201      	movs	r2, #1
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f91d 	bl	800de54 <USBD_CtlSendData>
      break;
 800dc1a:	e004      	b.n	800dc26 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f8a7 	bl	800dd72 <USBD_CtlError>
      break;
 800dc24:	bf00      	nop
}
 800dc26:	bf00      	nop
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d81e      	bhi.n	800dc82 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	88db      	ldrh	r3, [r3, #6]
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d004      	beq.n	800dc56 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f88f 	bl	800dd72 <USBD_CtlError>
      break;
 800dc54:	e01a      	b.n	800dc8c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	f043 0202 	orr.w	r2, r3, #2
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	330c      	adds	r3, #12
 800dc76:	2202      	movs	r2, #2
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f8ea 	bl	800de54 <USBD_CtlSendData>
    break;
 800dc80:	e004      	b.n	800dc8c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f874 	bl	800dd72 <USBD_CtlError>
    break;
 800dc8a:	bf00      	nop
  }
}
 800dc8c:	bf00      	nop
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	885b      	ldrh	r3, [r3, #2]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d106      	bne.n	800dcb4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f92a 	bl	800df08 <USBD_CtlSendStatus>
  }
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dccc:	3b01      	subs	r3, #1
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d80b      	bhi.n	800dcea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	885b      	ldrh	r3, [r3, #2]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10c      	bne.n	800dcf4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f910 	bl	800df08 <USBD_CtlSendStatus>
      }
      break;
 800dce8:	e004      	b.n	800dcf4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f840 	bl	800dd72 <USBD_CtlError>
      break;
 800dcf2:	e000      	b.n	800dcf6 <USBD_ClrFeature+0x3a>
      break;
 800dcf4:	bf00      	nop
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	781a      	ldrb	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	781a      	ldrb	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3301      	adds	r3, #1
 800dd26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f7ff fa9b 	bl	800d264 <SWAPBYTE>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	461a      	mov	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f7ff fa8e 	bl	800d264 <SWAPBYTE>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3301      	adds	r3, #1
 800dd54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f7ff fa81 	bl	800d264 <SWAPBYTE>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	80da      	strh	r2, [r3, #6]
}
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd7c:	2180      	movs	r1, #128	; 0x80
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 ff9c 	bl	800ecbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd84:	2100      	movs	r1, #0
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 ff98 	bl	800ecbc <USBD_LL_StallEP>
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dda0:	2300      	movs	r3, #0
 800dda2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d036      	beq.n	800de18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ddae:	6938      	ldr	r0, [r7, #16]
 800ddb0:	f000 f836 	bl	800de20 <USBD_GetLen>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	005b      	lsls	r3, r3, #1
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	7812      	ldrb	r2, [r2, #0]
 800ddcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	4413      	add	r3, r2
 800ddda:	2203      	movs	r2, #3
 800dddc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	3301      	adds	r3, #1
 800dde2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dde4:	e013      	b.n	800de0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	4413      	add	r3, r2
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	7812      	ldrb	r2, [r2, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	613b      	str	r3, [r7, #16]
    idx++;
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	4413      	add	r3, r2
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
    idx++;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	3301      	adds	r3, #1
 800de0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e7      	bne.n	800dde6 <USBD_GetString+0x52>
 800de16:	e000      	b.n	800de1a <USBD_GetString+0x86>
    return;
 800de18:	bf00      	nop
  }
}
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de30:	e005      	b.n	800de3e <USBD_GetLen+0x1e>
  {
    len++;
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	3301      	adds	r3, #1
 800de36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1f5      	bne.n	800de32 <USBD_GetLen+0x12>
  }

  return len;
 800de46:	7bfb      	ldrb	r3, [r7, #15]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2202      	movs	r2, #2
 800de64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	2100      	movs	r1, #0
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f000 ffa8 	bl	800edd0 <USBD_LL_Transmit>

  return USBD_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b084      	sub	sp, #16
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	2100      	movs	r1, #0
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 ff97 	bl	800edd0 <USBD_LL_Transmit>

  return USBD_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2203      	movs	r2, #3
 800debc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	2100      	movs	r1, #0
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f000 ff9b 	bl	800ee12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	60f8      	str	r0, [r7, #12]
 800deee:	60b9      	str	r1, [r7, #8]
 800def0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	2100      	movs	r1, #0
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 ff8a 	bl	800ee12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2204      	movs	r2, #4
 800df14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df18:	2300      	movs	r3, #0
 800df1a:	2200      	movs	r2, #0
 800df1c:	2100      	movs	r1, #0
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 ff56 	bl	800edd0 <USBD_LL_Transmit>

  return USBD_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b082      	sub	sp, #8
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2205      	movs	r2, #5
 800df3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df3e:	2300      	movs	r3, #0
 800df40:	2200      	movs	r2, #0
 800df42:	2100      	movs	r1, #0
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 ff64 	bl	800ee12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800df58:	2200      	movs	r2, #0
 800df5a:	4912      	ldr	r1, [pc, #72]	; (800dfa4 <MX_USB_Device_Init+0x50>)
 800df5c:	4812      	ldr	r0, [pc, #72]	; (800dfa8 <MX_USB_Device_Init+0x54>)
 800df5e:	f7fe fefb 	bl	800cd58 <USBD_Init>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800df68:	f7f4 ffa0 	bl	8002eac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800df6c:	490f      	ldr	r1, [pc, #60]	; (800dfac <MX_USB_Device_Init+0x58>)
 800df6e:	480e      	ldr	r0, [pc, #56]	; (800dfa8 <MX_USB_Device_Init+0x54>)
 800df70:	f7fe ff22 	bl	800cdb8 <USBD_RegisterClass>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800df7a:	f7f4 ff97 	bl	8002eac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800df7e:	490c      	ldr	r1, [pc, #48]	; (800dfb0 <MX_USB_Device_Init+0x5c>)
 800df80:	4809      	ldr	r0, [pc, #36]	; (800dfa8 <MX_USB_Device_Init+0x54>)
 800df82:	f000 fa85 	bl	800e490 <USBD_CDC_RegisterInterface>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800df8c:	f7f4 ff8e 	bl	8002eac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800df90:	4805      	ldr	r0, [pc, #20]	; (800dfa8 <MX_USB_Device_Init+0x54>)
 800df92:	f7fe ff38 	bl	800ce06 <USBD_Start>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800df9c:	f7f4 ff86 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dfa0:	bf00      	nop
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	20000358 	.word	0x20000358
 800dfa8:	20001074 	.word	0x20001074
 800dfac:	200001cc 	.word	0x200001cc
 800dfb0:	20000344 	.word	0x20000344

0800dfb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dfc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dfc4:	f000 ff90 	bl	800eee8 <USBD_static_malloc>
 800dfc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d105      	bne.n	800dfdc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800dfd8:	2302      	movs	r3, #2
 800dfda:	e066      	b.n	800e0aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	7c1b      	ldrb	r3, [r3, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d119      	bne.n	800e020 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dff0:	2202      	movs	r2, #2
 800dff2:	2181      	movs	r1, #129	; 0x81
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 fe1c 	bl	800ec32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e004:	2202      	movs	r2, #2
 800e006:	2101      	movs	r1, #1
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fe12 	bl	800ec32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2201      	movs	r2, #1
 800e012:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2210      	movs	r2, #16
 800e01a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e01e:	e016      	b.n	800e04e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e020:	2340      	movs	r3, #64	; 0x40
 800e022:	2202      	movs	r2, #2
 800e024:	2181      	movs	r1, #129	; 0x81
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fe03 	bl	800ec32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e032:	2340      	movs	r3, #64	; 0x40
 800e034:	2202      	movs	r2, #2
 800e036:	2101      	movs	r1, #1
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 fdfa 	bl	800ec32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2210      	movs	r2, #16
 800e04a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e04e:	2308      	movs	r3, #8
 800e050:	2203      	movs	r2, #3
 800e052:	2182      	movs	r1, #130	; 0x82
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 fdec 	bl	800ec32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7c1b      	ldrb	r3, [r3, #16]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d109      	bne.n	800e098 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e08a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e08e:	2101      	movs	r1, #1
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 febe 	bl	800ee12 <USBD_LL_PrepareReceive>
 800e096:	e007      	b.n	800e0a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e09e:	2340      	movs	r3, #64	; 0x40
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 feb5 	bl	800ee12 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e0be:	2181      	movs	r1, #129	; 0x81
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fddc 	bl	800ec7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fdd5 	bl	800ec7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e0dc:	2182      	movs	r1, #130	; 0x82
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fdcd 	bl	800ec7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00e      	beq.n	800e11c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 fef8 	bl	800ef04 <USBD_static_free>
    pdev->pClassData = NULL;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e138:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e13e:	2300      	movs	r3, #0
 800e140:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d03a      	beq.n	800e1c8 <USBD_CDC_Setup+0xa0>
 800e152:	2b20      	cmp	r3, #32
 800e154:	f040 8097 	bne.w	800e286 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	88db      	ldrh	r3, [r3, #6]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d029      	beq.n	800e1b4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	b25b      	sxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	da11      	bge.n	800e18e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e176:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	88d2      	ldrh	r2, [r2, #6]
 800e17c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e17e:	6939      	ldr	r1, [r7, #16]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	88db      	ldrh	r3, [r3, #6]
 800e184:	461a      	mov	r2, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff fe64 	bl	800de54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e18c:	e082      	b.n	800e294 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	785a      	ldrb	r2, [r3, #1]
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	88db      	ldrh	r3, [r3, #6]
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e1a4:	6939      	ldr	r1, [r7, #16]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	88db      	ldrh	r3, [r3, #6]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff fe7d 	bl	800deac <USBD_CtlPrepareRx>
      break;
 800e1b2:	e06f      	b.n	800e294 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	7850      	ldrb	r0, [r2, #1]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	4798      	blx	r3
      break;
 800e1c6:	e065      	b.n	800e294 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	785b      	ldrb	r3, [r3, #1]
 800e1cc:	2b0b      	cmp	r3, #11
 800e1ce:	d84f      	bhi.n	800e270 <USBD_CDC_Setup+0x148>
 800e1d0:	a201      	add	r2, pc, #4	; (adr r2, 800e1d8 <USBD_CDC_Setup+0xb0>)
 800e1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d6:	bf00      	nop
 800e1d8:	0800e209 	.word	0x0800e209
 800e1dc:	0800e27f 	.word	0x0800e27f
 800e1e0:	0800e271 	.word	0x0800e271
 800e1e4:	0800e271 	.word	0x0800e271
 800e1e8:	0800e271 	.word	0x0800e271
 800e1ec:	0800e271 	.word	0x0800e271
 800e1f0:	0800e271 	.word	0x0800e271
 800e1f4:	0800e271 	.word	0x0800e271
 800e1f8:	0800e271 	.word	0x0800e271
 800e1fc:	0800e271 	.word	0x0800e271
 800e200:	0800e231 	.word	0x0800e231
 800e204:	0800e259 	.word	0x0800e259
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d107      	bne.n	800e222 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e212:	f107 030c 	add.w	r3, r7, #12
 800e216:	2202      	movs	r2, #2
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fe1a 	bl	800de54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e220:	e030      	b.n	800e284 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff fda4 	bl	800dd72 <USBD_CtlError>
            ret = USBD_FAIL;
 800e22a:	2303      	movs	r3, #3
 800e22c:	75fb      	strb	r3, [r7, #23]
          break;
 800e22e:	e029      	b.n	800e284 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e236:	2b03      	cmp	r3, #3
 800e238:	d107      	bne.n	800e24a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e23a:	f107 030f 	add.w	r3, r7, #15
 800e23e:	2201      	movs	r2, #1
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fe06 	bl	800de54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e248:	e01c      	b.n	800e284 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff fd90 	bl	800dd72 <USBD_CtlError>
            ret = USBD_FAIL;
 800e252:	2303      	movs	r3, #3
 800e254:	75fb      	strb	r3, [r7, #23]
          break;
 800e256:	e015      	b.n	800e284 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d00f      	beq.n	800e282 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff fd84 	bl	800dd72 <USBD_CtlError>
            ret = USBD_FAIL;
 800e26a:	2303      	movs	r3, #3
 800e26c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e26e:	e008      	b.n	800e282 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fd7d 	bl	800dd72 <USBD_CtlError>
          ret = USBD_FAIL;
 800e278:	2303      	movs	r3, #3
 800e27a:	75fb      	strb	r3, [r7, #23]
          break;
 800e27c:	e002      	b.n	800e284 <USBD_CDC_Setup+0x15c>
          break;
 800e27e:	bf00      	nop
 800e280:	e008      	b.n	800e294 <USBD_CDC_Setup+0x16c>
          break;
 800e282:	bf00      	nop
      }
      break;
 800e284:	e006      	b.n	800e294 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff fd72 	bl	800dd72 <USBD_CtlError>
      ret = USBD_FAIL;
 800e28e:	2303      	movs	r3, #3
 800e290:	75fb      	strb	r3, [r7, #23]
      break;
 800e292:	bf00      	nop
  }

  return (uint8_t)ret;
 800e294:	7dfb      	ldrb	r3, [r7, #23]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop

0800e2a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2be:	2303      	movs	r3, #3
 800e2c0:	e04f      	b.n	800e362 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2ca:	78fa      	ldrb	r2, [r7, #3]
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	440b      	add	r3, r1
 800e2d8:	3318      	adds	r3, #24
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d029      	beq.n	800e334 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e2e0:	78fa      	ldrb	r2, [r7, #3]
 800e2e2:	6879      	ldr	r1, [r7, #4]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	440b      	add	r3, r1
 800e2ee:	3318      	adds	r3, #24
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	78f9      	ldrb	r1, [r7, #3]
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	440b      	add	r3, r1
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	4403      	add	r3, r0
 800e300:	3338      	adds	r3, #56	; 0x38
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	fbb2 f1f3 	udiv	r1, r2, r3
 800e308:	fb03 f301 	mul.w	r3, r3, r1
 800e30c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d110      	bne.n	800e334 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e312:	78fa      	ldrb	r2, [r7, #3]
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	4613      	mov	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	440b      	add	r3, r1
 800e320:	3318      	adds	r3, #24
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e326:	78f9      	ldrb	r1, [r7, #3]
 800e328:	2300      	movs	r3, #0
 800e32a:	2200      	movs	r2, #0
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fd4f 	bl	800edd0 <USBD_LL_Transmit>
 800e332:	e015      	b.n	800e360 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2200      	movs	r2, #0
 800e338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00b      	beq.n	800e360 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	460b      	mov	r3, r1
 800e374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e37c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e388:	2303      	movs	r3, #3
 800e38a:	e015      	b.n	800e3b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e38c:	78fb      	ldrb	r3, [r7, #3]
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fd5f 	bl	800ee54 <USBD_LL_GetRxDataSize>
 800e396:	4602      	mov	r2, r0
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d015      	beq.n	800e406 <USBD_CDC_EP0_RxReady+0x46>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3e0:	2bff      	cmp	r3, #255	; 0xff
 800e3e2:	d010      	beq.n	800e406 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e3f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3fa:	b292      	uxth	r2, r2
 800e3fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	22ff      	movs	r2, #255	; 0xff
 800e402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2265      	movs	r2, #101	; 0x65
 800e41c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e41e:	4b03      	ldr	r3, [pc, #12]	; (800e42c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	2000026c 	.word	0x2000026c

0800e430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2265      	movs	r2, #101	; 0x65
 800e43c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e43e:	4b03      	ldr	r3, [pc, #12]	; (800e44c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e440:	4618      	mov	r0, r3
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	20000204 	.word	0x20000204

0800e450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2265      	movs	r2, #101	; 0x65
 800e45c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200002d4 	.word	0x200002d4

0800e470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	220a      	movs	r2, #10
 800e47c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e47e:	4b03      	ldr	r3, [pc, #12]	; (800e48c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e480:	4618      	mov	r0, r3
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	200001c0 	.word	0x200001c0

0800e490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e004      	b.n	800e4ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b087      	sub	sp, #28
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4fc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e522:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e524:	2301      	movs	r3, #1
 800e526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d101      	bne.n	800e536 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e532:	2303      	movs	r3, #3
 800e534:	e01a      	b.n	800e56c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d114      	bne.n	800e56a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	2201      	movs	r2, #1
 800e544:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e55e:	2181      	movs	r1, #129	; 0x81
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fc35 	bl	800edd0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e582:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e58e:	2303      	movs	r3, #3
 800e590:	e016      	b.n	800e5c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7c1b      	ldrb	r3, [r3, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d109      	bne.n	800e5ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fc33 	bl	800ee12 <USBD_LL_PrepareReceive>
 800e5ac:	e007      	b.n	800e5be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5b4:	2340      	movs	r3, #64	; 0x40
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fc2a 	bl	800ee12 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4905      	ldr	r1, [pc, #20]	; (800e5e4 <CDC_Init_FS+0x1c>)
 800e5d0:	4805      	ldr	r0, [pc, #20]	; (800e5e8 <CDC_Init_FS+0x20>)
 800e5d2:	f7ff ff72 	bl	800e4ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e5d6:	4905      	ldr	r1, [pc, #20]	; (800e5ec <CDC_Init_FS+0x24>)
 800e5d8:	4803      	ldr	r0, [pc, #12]	; (800e5e8 <CDC_Init_FS+0x20>)
 800e5da:	f7ff ff87 	bl	800e4ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e5de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	2000172c 	.word	0x2000172c
 800e5e8:	20001074 	.word	0x20001074
 800e5ec:	20001344 	.word	0x20001344

0800e5f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e5f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	6039      	str	r1, [r7, #0]
 800e60a:	71fb      	strb	r3, [r7, #7]
 800e60c:	4613      	mov	r3, r2
 800e60e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	2b23      	cmp	r3, #35	; 0x23
 800e614:	d85c      	bhi.n	800e6d0 <CDC_Control_FS+0xd0>
 800e616:	a201      	add	r2, pc, #4	; (adr r2, 800e61c <CDC_Control_FS+0x1c>)
 800e618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61c:	0800e6d1 	.word	0x0800e6d1
 800e620:	0800e6d1 	.word	0x0800e6d1
 800e624:	0800e6d1 	.word	0x0800e6d1
 800e628:	0800e6d1 	.word	0x0800e6d1
 800e62c:	0800e6d1 	.word	0x0800e6d1
 800e630:	0800e6d1 	.word	0x0800e6d1
 800e634:	0800e6d1 	.word	0x0800e6d1
 800e638:	0800e6d1 	.word	0x0800e6d1
 800e63c:	0800e6d1 	.word	0x0800e6d1
 800e640:	0800e6d1 	.word	0x0800e6d1
 800e644:	0800e6d1 	.word	0x0800e6d1
 800e648:	0800e6d1 	.word	0x0800e6d1
 800e64c:	0800e6d1 	.word	0x0800e6d1
 800e650:	0800e6d1 	.word	0x0800e6d1
 800e654:	0800e6d1 	.word	0x0800e6d1
 800e658:	0800e6d1 	.word	0x0800e6d1
 800e65c:	0800e6d1 	.word	0x0800e6d1
 800e660:	0800e6d1 	.word	0x0800e6d1
 800e664:	0800e6d1 	.word	0x0800e6d1
 800e668:	0800e6d1 	.word	0x0800e6d1
 800e66c:	0800e6d1 	.word	0x0800e6d1
 800e670:	0800e6d1 	.word	0x0800e6d1
 800e674:	0800e6d1 	.word	0x0800e6d1
 800e678:	0800e6d1 	.word	0x0800e6d1
 800e67c:	0800e6d1 	.word	0x0800e6d1
 800e680:	0800e6d1 	.word	0x0800e6d1
 800e684:	0800e6d1 	.word	0x0800e6d1
 800e688:	0800e6d1 	.word	0x0800e6d1
 800e68c:	0800e6d1 	.word	0x0800e6d1
 800e690:	0800e6d1 	.word	0x0800e6d1
 800e694:	0800e6d1 	.word	0x0800e6d1
 800e698:	0800e6d1 	.word	0x0800e6d1
 800e69c:	0800e6ad 	.word	0x0800e6ad
 800e6a0:	0800e6bf 	.word	0x0800e6bf
 800e6a4:	0800e6d1 	.word	0x0800e6d1
 800e6a8:	0800e6d1 	.word	0x0800e6d1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 800e6ac:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <CDC_Control_FS+0xe0>)
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	6810      	ldr	r0, [r2, #0]
 800e6b2:	6018      	str	r0, [r3, #0]
 800e6b4:	8891      	ldrh	r1, [r2, #4]
 800e6b6:	7992      	ldrb	r2, [r2, #6]
 800e6b8:	8099      	strh	r1, [r3, #4]
 800e6ba:	719a      	strb	r2, [r3, #6]

    break;
 800e6bc:	e009      	b.n	800e6d2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	4a07      	ldr	r2, [pc, #28]	; (800e6e0 <CDC_Control_FS+0xe0>)
 800e6c2:	6810      	ldr	r0, [r2, #0]
 800e6c4:	6018      	str	r0, [r3, #0]
 800e6c6:	8891      	ldrh	r1, [r2, #4]
 800e6c8:	7992      	ldrb	r2, [r2, #6]
 800e6ca:	8099      	strh	r1, [r3, #4]
 800e6cc:	719a      	strb	r2, [r3, #6]

    case CDC_SET_CONTROL_LINE_STATE:

    break;
 800e6ce:	e000      	b.n	800e6d2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e6d0:	bf00      	nop
  }

  return (USBD_OK);
 800e6d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	2000033c 	.word	0x2000033c

0800e6e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	4805      	ldr	r0, [pc, #20]	; (800e708 <CDC_Receive_FS+0x24>)
 800e6f2:	f7ff fefb 	bl	800e4ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e6f6:	4804      	ldr	r0, [pc, #16]	; (800e708 <CDC_Receive_FS+0x24>)
 800e6f8:	f7ff ff3c 	bl	800e574 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e6fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20001074 	.word	0x20001074

0800e70c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e718:	2300      	movs	r3, #0
 800e71a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e71c:	4b0d      	ldr	r3, [pc, #52]	; (800e754 <CDC_Transmit_FS+0x48>)
 800e71e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e722:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e72e:	2301      	movs	r3, #1
 800e730:	e00b      	b.n	800e74a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e732:	887b      	ldrh	r3, [r7, #2]
 800e734:	461a      	mov	r2, r3
 800e736:	6879      	ldr	r1, [r7, #4]
 800e738:	4806      	ldr	r0, [pc, #24]	; (800e754 <CDC_Transmit_FS+0x48>)
 800e73a:	f7ff febe 	bl	800e4ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e73e:	4805      	ldr	r0, [pc, #20]	; (800e754 <CDC_Transmit_FS+0x48>)
 800e740:	f7ff fee8 	bl	800e514 <USBD_CDC_TransmitPacket>
 800e744:	4603      	mov	r3, r0
 800e746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	20001074 	.word	0x20001074

0800e758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e758:	b480      	push	{r7}
 800e75a:	b087      	sub	sp, #28
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	4613      	mov	r3, r2
 800e764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	371c      	adds	r7, #28
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
	...

0800e77c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	6039      	str	r1, [r7, #0]
 800e786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2212      	movs	r2, #18
 800e78c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e78e:	4b03      	ldr	r3, [pc, #12]	; (800e79c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e790:	4618      	mov	r0, r3
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	20000378 	.word	0x20000378

0800e7a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	6039      	str	r1, [r7, #0]
 800e7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2204      	movs	r2, #4
 800e7b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e7b2:	4b03      	ldr	r3, [pc, #12]	; (800e7c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	2000038c 	.word	0x2000038c

0800e7c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d105      	bne.n	800e7e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	4907      	ldr	r1, [pc, #28]	; (800e7f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e7da:	4808      	ldr	r0, [pc, #32]	; (800e7fc <USBD_CDC_ProductStrDescriptor+0x38>)
 800e7dc:	f7ff fada 	bl	800dd94 <USBD_GetString>
 800e7e0:	e004      	b.n	800e7ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	4904      	ldr	r1, [pc, #16]	; (800e7f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e7e6:	4805      	ldr	r0, [pc, #20]	; (800e7fc <USBD_CDC_ProductStrDescriptor+0x38>)
 800e7e8:	f7ff fad4 	bl	800dd94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7ec:	4b02      	ldr	r3, [pc, #8]	; (800e7f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3708      	adds	r7, #8
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20001b14 	.word	0x20001b14
 800e7fc:	0800fdc0 	.word	0x0800fdc0

0800e800 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	6039      	str	r1, [r7, #0]
 800e80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	4904      	ldr	r1, [pc, #16]	; (800e820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e810:	4804      	ldr	r0, [pc, #16]	; (800e824 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e812:	f7ff fabf 	bl	800dd94 <USBD_GetString>
  return USBD_StrDesc;
 800e816:	4b02      	ldr	r3, [pc, #8]	; (800e820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20001b14 	.word	0x20001b14
 800e824:	0800fdcc 	.word	0x0800fdcc

0800e828 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	4603      	mov	r3, r0
 800e830:	6039      	str	r1, [r7, #0]
 800e832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	221a      	movs	r2, #26
 800e838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e83a:	f000 f843 	bl	800e8c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e83e:	4b02      	ldr	r3, [pc, #8]	; (800e848 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20000390 	.word	0x20000390

0800e84c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	4603      	mov	r3, r0
 800e854:	6039      	str	r1, [r7, #0]
 800e856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d105      	bne.n	800e86a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	4907      	ldr	r1, [pc, #28]	; (800e880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e862:	4808      	ldr	r0, [pc, #32]	; (800e884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e864:	f7ff fa96 	bl	800dd94 <USBD_GetString>
 800e868:	e004      	b.n	800e874 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	4904      	ldr	r1, [pc, #16]	; (800e880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e86e:	4805      	ldr	r0, [pc, #20]	; (800e884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e870:	f7ff fa90 	bl	800dd94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e874:	4b02      	ldr	r3, [pc, #8]	; (800e880 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20001b14 	.word	0x20001b14
 800e884:	0800fde0 	.word	0x0800fde0

0800e888 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	6039      	str	r1, [r7, #0]
 800e892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d105      	bne.n	800e8a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	4907      	ldr	r1, [pc, #28]	; (800e8bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e89e:	4808      	ldr	r0, [pc, #32]	; (800e8c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e8a0:	f7ff fa78 	bl	800dd94 <USBD_GetString>
 800e8a4:	e004      	b.n	800e8b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	4904      	ldr	r1, [pc, #16]	; (800e8bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e8aa:	4805      	ldr	r0, [pc, #20]	; (800e8c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e8ac:	f7ff fa72 	bl	800dd94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8b0:	4b02      	ldr	r3, [pc, #8]	; (800e8bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20001b14 	.word	0x20001b14
 800e8c0:	0800fdec 	.word	0x0800fdec

0800e8c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <Get_SerialNum+0x44>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e8d0:	4b0e      	ldr	r3, [pc, #56]	; (800e90c <Get_SerialNum+0x48>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e8d6:	4b0e      	ldr	r3, [pc, #56]	; (800e910 <Get_SerialNum+0x4c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d009      	beq.n	800e8fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	4909      	ldr	r1, [pc, #36]	; (800e914 <Get_SerialNum+0x50>)
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f000 f814 	bl	800e91c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e8f4:	2204      	movs	r2, #4
 800e8f6:	4908      	ldr	r1, [pc, #32]	; (800e918 <Get_SerialNum+0x54>)
 800e8f8:	68b8      	ldr	r0, [r7, #8]
 800e8fa:	f000 f80f 	bl	800e91c <IntToUnicode>
  }
}
 800e8fe:	bf00      	nop
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	1fff7590 	.word	0x1fff7590
 800e90c:	1fff7594 	.word	0x1fff7594
 800e910:	1fff7598 	.word	0x1fff7598
 800e914:	20000392 	.word	0x20000392
 800e918:	200003a2 	.word	0x200003a2

0800e91c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	4613      	mov	r3, r2
 800e928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e92e:	2300      	movs	r3, #0
 800e930:	75fb      	strb	r3, [r7, #23]
 800e932:	e027      	b.n	800e984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	0f1b      	lsrs	r3, r3, #28
 800e938:	2b09      	cmp	r3, #9
 800e93a:	d80b      	bhi.n	800e954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	0f1b      	lsrs	r3, r3, #28
 800e940:	b2da      	uxtb	r2, r3
 800e942:	7dfb      	ldrb	r3, [r7, #23]
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	4619      	mov	r1, r3
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	440b      	add	r3, r1
 800e94c:	3230      	adds	r2, #48	; 0x30
 800e94e:	b2d2      	uxtb	r2, r2
 800e950:	701a      	strb	r2, [r3, #0]
 800e952:	e00a      	b.n	800e96a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	0f1b      	lsrs	r3, r3, #28
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	4619      	mov	r1, r3
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	440b      	add	r3, r1
 800e964:	3237      	adds	r2, #55	; 0x37
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e970:	7dfb      	ldrb	r3, [r7, #23]
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	3301      	adds	r3, #1
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e97e:	7dfb      	ldrb	r3, [r7, #23]
 800e980:	3301      	adds	r3, #1
 800e982:	75fb      	strb	r3, [r7, #23]
 800e984:	7dfa      	ldrb	r2, [r7, #23]
 800e986:	79fb      	ldrb	r3, [r7, #7]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d3d3      	bcc.n	800e934 <IntToUnicode+0x18>
  }
}
 800e98c:	bf00      	nop
 800e98e:	bf00      	nop
 800e990:	371c      	adds	r7, #28
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
	...

0800e99c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a0d      	ldr	r2, [pc, #52]	; (800e9e0 <HAL_PCD_MspInit+0x44>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d113      	bne.n	800e9d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e9ae:	4b0d      	ldr	r3, [pc, #52]	; (800e9e4 <HAL_PCD_MspInit+0x48>)
 800e9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9b2:	4a0c      	ldr	r2, [pc, #48]	; (800e9e4 <HAL_PCD_MspInit+0x48>)
 800e9b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e9b8:	6593      	str	r3, [r2, #88]	; 0x58
 800e9ba:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <HAL_PCD_MspInit+0x48>)
 800e9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	2014      	movs	r0, #20
 800e9cc:	f7f6 fbd1 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e9d0:	2014      	movs	r0, #20
 800e9d2:	f7f6 fbe8 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e9d6:	bf00      	nop
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	40005c00 	.word	0x40005c00
 800e9e4:	40021000 	.word	0x40021000

0800e9e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	4610      	mov	r0, r2
 800ea00:	f7fe fa4c 	bl	800ce9c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ea1e:	78fa      	ldrb	r2, [r7, #3]
 800ea20:	6879      	ldr	r1, [r7, #4]
 800ea22:	4613      	mov	r3, r2
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	4413      	add	r3, r2
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	440b      	add	r3, r1
 800ea2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	78fb      	ldrb	r3, [r7, #3]
 800ea34:	4619      	mov	r1, r3
 800ea36:	f7fe fa86 	bl	800cf46 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b082      	sub	sp, #8
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ea54:	78fa      	ldrb	r2, [r7, #3]
 800ea56:	6879      	ldr	r1, [r7, #4]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	440b      	add	r3, r1
 800ea62:	333c      	adds	r3, #60	; 0x3c
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	78fb      	ldrb	r3, [r7, #3]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	f7fe facf 	bl	800d00c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b082      	sub	sp, #8
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe fbd3 	bl	800d230 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ea8a:	bf00      	nop
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b084      	sub	sp, #16
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d001      	beq.n	800eaaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eaa6:	f7f4 fa01 	bl	8002eac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eab0:	7bfa      	ldrb	r2, [r7, #15]
 800eab2:	4611      	mov	r1, r2
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fe fb80 	bl	800d1ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe fb39 	bl	800d138 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800eac6:	bf00      	nop
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fb7b 	bl	800d1da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d005      	beq.n	800eaf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaec:	4b04      	ldr	r3, [pc, #16]	; (800eb00 <HAL_PCD_SuspendCallback+0x30>)
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	4a03      	ldr	r2, [pc, #12]	; (800eb00 <HAL_PCD_SuspendCallback+0x30>)
 800eaf2:	f043 0306 	orr.w	r3, r3, #6
 800eaf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	e000ed00 	.word	0xe000ed00

0800eb04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb14:	4b08      	ldr	r3, [pc, #32]	; (800eb38 <HAL_PCD_ResumeCallback+0x34>)
 800eb16:	691b      	ldr	r3, [r3, #16]
 800eb18:	4a07      	ldr	r2, [pc, #28]	; (800eb38 <HAL_PCD_ResumeCallback+0x34>)
 800eb1a:	f023 0306 	bic.w	r3, r3, #6
 800eb1e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eb20:	f000 f9fa 	bl	800ef18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fe fb6a 	bl	800d204 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	e000ed00 	.word	0xe000ed00

0800eb3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800eb44:	4a2b      	ldr	r2, [pc, #172]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a29      	ldr	r2, [pc, #164]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eb54:	4b27      	ldr	r3, [pc, #156]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb56:	4a28      	ldr	r2, [pc, #160]	; (800ebf8 <USBD_LL_Init+0xbc>)
 800eb58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eb5a:	4b26      	ldr	r3, [pc, #152]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb5c:	2208      	movs	r2, #8
 800eb5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eb60:	4b24      	ldr	r3, [pc, #144]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb62:	2202      	movs	r2, #2
 800eb64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb66:	4b23      	ldr	r3, [pc, #140]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb68:	2202      	movs	r2, #2
 800eb6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eb6c:	4b21      	ldr	r3, [pc, #132]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eb78:	4b1e      	ldr	r3, [pc, #120]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eb7e:	4b1d      	ldr	r3, [pc, #116]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800eb84:	481b      	ldr	r0, [pc, #108]	; (800ebf4 <USBD_LL_Init+0xb8>)
 800eb86:	f7f7 fa99 	bl	80060bc <HAL_PCD_Init>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800eb90:	f7f4 f98c 	bl	8002eac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb9a:	2318      	movs	r3, #24
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f7f8 fd95 	bl	80076ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebaa:	2358      	movs	r3, #88	; 0x58
 800ebac:	2200      	movs	r2, #0
 800ebae:	2180      	movs	r1, #128	; 0x80
 800ebb0:	f7f8 fd8d 	bl	80076ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebba:	23c0      	movs	r3, #192	; 0xc0
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2181      	movs	r1, #129	; 0x81
 800ebc0:	f7f8 fd85 	bl	80076ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	f7f8 fd7c 	bl	80076ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	2182      	movs	r1, #130	; 0x82
 800ebe4:	f7f8 fd73 	bl	80076ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20001d14 	.word	0x20001d14
 800ebf8:	40005c00 	.word	0x40005c00

0800ebfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7f7 fb37 	bl	8006286 <HAL_PCD_Start>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec1c:	7bfb      	ldrb	r3, [r7, #15]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 f980 	bl	800ef24 <USBD_Get_USB_Status>
 800ec24:	4603      	mov	r3, r0
 800ec26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4603      	mov	r3, r0
 800ec42:	70fb      	strb	r3, [r7, #3]
 800ec44:	460b      	mov	r3, r1
 800ec46:	70bb      	strb	r3, [r7, #2]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ec5a:	78bb      	ldrb	r3, [r7, #2]
 800ec5c:	883a      	ldrh	r2, [r7, #0]
 800ec5e:	78f9      	ldrb	r1, [r7, #3]
 800ec60:	f7f7 fca6 	bl	80065b0 <HAL_PCD_EP_Open>
 800ec64:	4603      	mov	r3, r0
 800ec66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec68:	7bfb      	ldrb	r3, [r7, #15]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 f95a 	bl	800ef24 <USBD_Get_USB_Status>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	460b      	mov	r3, r1
 800ec88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec98:	78fa      	ldrb	r2, [r7, #3]
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7f7 fced 	bl	800667c <HAL_PCD_EP_Close>
 800eca2:	4603      	mov	r3, r0
 800eca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 f93b 	bl	800ef24 <USBD_Get_USB_Status>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecd6:	78fa      	ldrb	r2, [r7, #3]
 800ecd8:	4611      	mov	r1, r2
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7f7 fdae 	bl	800683c <HAL_PCD_EP_SetStall>
 800ece0:	4603      	mov	r3, r0
 800ece2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 f91c 	bl	800ef24 <USBD_Get_USB_Status>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b084      	sub	sp, #16
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	460b      	mov	r3, r1
 800ed04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed14:	78fa      	ldrb	r2, [r7, #3]
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f7 fdef 	bl	80068fc <HAL_PCD_EP_ClrStall>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed22:	7bfb      	ldrb	r3, [r7, #15]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f000 f8fd 	bl	800ef24 <USBD_Get_USB_Status>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	da0c      	bge.n	800ed6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed54:	78fb      	ldrb	r3, [r7, #3]
 800ed56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	4613      	mov	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	440b      	add	r3, r1
 800ed68:	3302      	adds	r3, #2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	e00b      	b.n	800ed86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed6e:	78fb      	ldrb	r3, [r7, #3]
 800ed70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed74:	68f9      	ldr	r1, [r7, #12]
 800ed76:	4613      	mov	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	440b      	add	r3, r1
 800ed80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ed84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr

0800ed92 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edac:	78fa      	ldrb	r2, [r7, #3]
 800edae:	4611      	mov	r1, r2
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7f7 fbd8 	bl	8006566 <HAL_PCD_SetAddress>
 800edb6:	4603      	mov	r3, r0
 800edb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edba:	7bfb      	ldrb	r3, [r7, #15]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f000 f8b1 	bl	800ef24 <USBD_Get_USB_Status>
 800edc2:	4603      	mov	r3, r0
 800edc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	607a      	str	r2, [r7, #4]
 800edda:	603b      	str	r3, [r7, #0]
 800eddc:	460b      	mov	r3, r1
 800edde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ede4:	2300      	movs	r3, #0
 800ede6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edee:	7af9      	ldrb	r1, [r7, #11]
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	f7f7 fcdf 	bl	80067b6 <HAL_PCD_EP_Transmit>
 800edf8:	4603      	mov	r3, r0
 800edfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edfc:	7dfb      	ldrb	r3, [r7, #23]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 f890 	bl	800ef24 <USBD_Get_USB_Status>
 800ee04:	4603      	mov	r3, r0
 800ee06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b086      	sub	sp, #24
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	60f8      	str	r0, [r7, #12]
 800ee1a:	607a      	str	r2, [r7, #4]
 800ee1c:	603b      	str	r3, [r7, #0]
 800ee1e:	460b      	mov	r3, r1
 800ee20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ee30:	7af9      	ldrb	r1, [r7, #11]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	f7f7 fc69 	bl	800670c <HAL_PCD_EP_Receive>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 f86f 	bl	800ef24 <USBD_Get_USB_Status>
 800ee46:	4603      	mov	r3, r0
 800ee48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3718      	adds	r7, #24
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f7 fc8b 	bl	8006786 <HAL_PCD_EP_GetRxCount>
 800ee70:	4603      	mov	r3, r0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
	...

0800ee7c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d002      	beq.n	800ee94 <HAL_PCDEx_LPM_Callback+0x18>
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d013      	beq.n	800eeba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ee92:	e023      	b.n	800eedc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d007      	beq.n	800eeac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee9c:	f000 f83c 	bl	800ef18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea0:	4b10      	ldr	r3, [pc, #64]	; (800eee4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4a0f      	ldr	r2, [pc, #60]	; (800eee4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eea6:	f023 0306 	bic.w	r3, r3, #6
 800eeaa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe f9a6 	bl	800d204 <USBD_LL_Resume>
    break;
 800eeb8:	e010      	b.n	800eedc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe f98a 	bl	800d1da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d005      	beq.n	800eeda <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eece:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	4a04      	ldr	r2, [pc, #16]	; (800eee4 <HAL_PCDEx_LPM_Callback+0x68>)
 800eed4:	f043 0306 	orr.w	r3, r3, #6
 800eed8:	6113      	str	r3, [r2, #16]
    break;
 800eeda:	bf00      	nop
}
 800eedc:	bf00      	nop
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	e000ed00 	.word	0xe000ed00

0800eee8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eef0:	4b03      	ldr	r3, [pc, #12]	; (800ef00 <USBD_static_malloc+0x18>)
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	20000440 	.word	0x20000440

0800ef04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]

}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ef1c:	f7f2 fb66 	bl	80015ec <SystemClock_Config>
}
 800ef20:	bf00      	nop
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d817      	bhi.n	800ef68 <USBD_Get_USB_Status+0x44>
 800ef38:	a201      	add	r2, pc, #4	; (adr r2, 800ef40 <USBD_Get_USB_Status+0x1c>)
 800ef3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef3e:	bf00      	nop
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef57 	.word	0x0800ef57
 800ef48:	0800ef5d 	.word	0x0800ef5d
 800ef4c:	0800ef63 	.word	0x0800ef63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]
    break;
 800ef54:	e00b      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef56:	2303      	movs	r3, #3
 800ef58:	73fb      	strb	r3, [r7, #15]
    break;
 800ef5a:	e008      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef60:	e005      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef62:	2303      	movs	r3, #3
 800ef64:	73fb      	strb	r3, [r7, #15]
    break;
 800ef66:	e002      	b.n	800ef6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef6c:	bf00      	nop
  }
  return usb_status;
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <__errno>:
 800ef7c:	4b01      	ldr	r3, [pc, #4]	; (800ef84 <__errno+0x8>)
 800ef7e:	6818      	ldr	r0, [r3, #0]
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	200003ac 	.word	0x200003ac

0800ef88 <__libc_init_array>:
 800ef88:	b570      	push	{r4, r5, r6, lr}
 800ef8a:	4d0d      	ldr	r5, [pc, #52]	; (800efc0 <__libc_init_array+0x38>)
 800ef8c:	4c0d      	ldr	r4, [pc, #52]	; (800efc4 <__libc_init_array+0x3c>)
 800ef8e:	1b64      	subs	r4, r4, r5
 800ef90:	10a4      	asrs	r4, r4, #2
 800ef92:	2600      	movs	r6, #0
 800ef94:	42a6      	cmp	r6, r4
 800ef96:	d109      	bne.n	800efac <__libc_init_array+0x24>
 800ef98:	4d0b      	ldr	r5, [pc, #44]	; (800efc8 <__libc_init_array+0x40>)
 800ef9a:	4c0c      	ldr	r4, [pc, #48]	; (800efcc <__libc_init_array+0x44>)
 800ef9c:	f000 fc4e 	bl	800f83c <_init>
 800efa0:	1b64      	subs	r4, r4, r5
 800efa2:	10a4      	asrs	r4, r4, #2
 800efa4:	2600      	movs	r6, #0
 800efa6:	42a6      	cmp	r6, r4
 800efa8:	d105      	bne.n	800efb6 <__libc_init_array+0x2e>
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	f855 3b04 	ldr.w	r3, [r5], #4
 800efb0:	4798      	blx	r3
 800efb2:	3601      	adds	r6, #1
 800efb4:	e7ee      	b.n	800ef94 <__libc_init_array+0xc>
 800efb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efba:	4798      	blx	r3
 800efbc:	3601      	adds	r6, #1
 800efbe:	e7f2      	b.n	800efa6 <__libc_init_array+0x1e>
 800efc0:	0800fe68 	.word	0x0800fe68
 800efc4:	0800fe68 	.word	0x0800fe68
 800efc8:	0800fe68 	.word	0x0800fe68
 800efcc:	0800fe6c 	.word	0x0800fe6c

0800efd0 <memset>:
 800efd0:	4402      	add	r2, r0
 800efd2:	4603      	mov	r3, r0
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d100      	bne.n	800efda <memset+0xa>
 800efd8:	4770      	bx	lr
 800efda:	f803 1b01 	strb.w	r1, [r3], #1
 800efde:	e7f9      	b.n	800efd4 <memset+0x4>

0800efe0 <siprintf>:
 800efe0:	b40e      	push	{r1, r2, r3}
 800efe2:	b500      	push	{lr}
 800efe4:	b09c      	sub	sp, #112	; 0x70
 800efe6:	ab1d      	add	r3, sp, #116	; 0x74
 800efe8:	9002      	str	r0, [sp, #8]
 800efea:	9006      	str	r0, [sp, #24]
 800efec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eff0:	4809      	ldr	r0, [pc, #36]	; (800f018 <siprintf+0x38>)
 800eff2:	9107      	str	r1, [sp, #28]
 800eff4:	9104      	str	r1, [sp, #16]
 800eff6:	4909      	ldr	r1, [pc, #36]	; (800f01c <siprintf+0x3c>)
 800eff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800effc:	9105      	str	r1, [sp, #20]
 800effe:	6800      	ldr	r0, [r0, #0]
 800f000:	9301      	str	r3, [sp, #4]
 800f002:	a902      	add	r1, sp, #8
 800f004:	f000 f868 	bl	800f0d8 <_svfiprintf_r>
 800f008:	9b02      	ldr	r3, [sp, #8]
 800f00a:	2200      	movs	r2, #0
 800f00c:	701a      	strb	r2, [r3, #0]
 800f00e:	b01c      	add	sp, #112	; 0x70
 800f010:	f85d eb04 	ldr.w	lr, [sp], #4
 800f014:	b003      	add	sp, #12
 800f016:	4770      	bx	lr
 800f018:	200003ac 	.word	0x200003ac
 800f01c:	ffff0208 	.word	0xffff0208

0800f020 <__ssputs_r>:
 800f020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f024:	688e      	ldr	r6, [r1, #8]
 800f026:	429e      	cmp	r6, r3
 800f028:	4682      	mov	sl, r0
 800f02a:	460c      	mov	r4, r1
 800f02c:	4690      	mov	r8, r2
 800f02e:	461f      	mov	r7, r3
 800f030:	d838      	bhi.n	800f0a4 <__ssputs_r+0x84>
 800f032:	898a      	ldrh	r2, [r1, #12]
 800f034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f038:	d032      	beq.n	800f0a0 <__ssputs_r+0x80>
 800f03a:	6825      	ldr	r5, [r4, #0]
 800f03c:	6909      	ldr	r1, [r1, #16]
 800f03e:	eba5 0901 	sub.w	r9, r5, r1
 800f042:	6965      	ldr	r5, [r4, #20]
 800f044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f04c:	3301      	adds	r3, #1
 800f04e:	444b      	add	r3, r9
 800f050:	106d      	asrs	r5, r5, #1
 800f052:	429d      	cmp	r5, r3
 800f054:	bf38      	it	cc
 800f056:	461d      	movcc	r5, r3
 800f058:	0553      	lsls	r3, r2, #21
 800f05a:	d531      	bpl.n	800f0c0 <__ssputs_r+0xa0>
 800f05c:	4629      	mov	r1, r5
 800f05e:	f000 fb47 	bl	800f6f0 <_malloc_r>
 800f062:	4606      	mov	r6, r0
 800f064:	b950      	cbnz	r0, 800f07c <__ssputs_r+0x5c>
 800f066:	230c      	movs	r3, #12
 800f068:	f8ca 3000 	str.w	r3, [sl]
 800f06c:	89a3      	ldrh	r3, [r4, #12]
 800f06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	f04f 30ff 	mov.w	r0, #4294967295
 800f078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f07c:	6921      	ldr	r1, [r4, #16]
 800f07e:	464a      	mov	r2, r9
 800f080:	f000 fabe 	bl	800f600 <memcpy>
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f08e:	81a3      	strh	r3, [r4, #12]
 800f090:	6126      	str	r6, [r4, #16]
 800f092:	6165      	str	r5, [r4, #20]
 800f094:	444e      	add	r6, r9
 800f096:	eba5 0509 	sub.w	r5, r5, r9
 800f09a:	6026      	str	r6, [r4, #0]
 800f09c:	60a5      	str	r5, [r4, #8]
 800f09e:	463e      	mov	r6, r7
 800f0a0:	42be      	cmp	r6, r7
 800f0a2:	d900      	bls.n	800f0a6 <__ssputs_r+0x86>
 800f0a4:	463e      	mov	r6, r7
 800f0a6:	4632      	mov	r2, r6
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	4641      	mov	r1, r8
 800f0ac:	f000 fab6 	bl	800f61c <memmove>
 800f0b0:	68a3      	ldr	r3, [r4, #8]
 800f0b2:	6822      	ldr	r2, [r4, #0]
 800f0b4:	1b9b      	subs	r3, r3, r6
 800f0b6:	4432      	add	r2, r6
 800f0b8:	60a3      	str	r3, [r4, #8]
 800f0ba:	6022      	str	r2, [r4, #0]
 800f0bc:	2000      	movs	r0, #0
 800f0be:	e7db      	b.n	800f078 <__ssputs_r+0x58>
 800f0c0:	462a      	mov	r2, r5
 800f0c2:	f000 fb6f 	bl	800f7a4 <_realloc_r>
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d1e1      	bne.n	800f090 <__ssputs_r+0x70>
 800f0cc:	6921      	ldr	r1, [r4, #16]
 800f0ce:	4650      	mov	r0, sl
 800f0d0:	f000 fabe 	bl	800f650 <_free_r>
 800f0d4:	e7c7      	b.n	800f066 <__ssputs_r+0x46>
	...

0800f0d8 <_svfiprintf_r>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	4698      	mov	r8, r3
 800f0de:	898b      	ldrh	r3, [r1, #12]
 800f0e0:	061b      	lsls	r3, r3, #24
 800f0e2:	b09d      	sub	sp, #116	; 0x74
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	460d      	mov	r5, r1
 800f0e8:	4614      	mov	r4, r2
 800f0ea:	d50e      	bpl.n	800f10a <_svfiprintf_r+0x32>
 800f0ec:	690b      	ldr	r3, [r1, #16]
 800f0ee:	b963      	cbnz	r3, 800f10a <_svfiprintf_r+0x32>
 800f0f0:	2140      	movs	r1, #64	; 0x40
 800f0f2:	f000 fafd 	bl	800f6f0 <_malloc_r>
 800f0f6:	6028      	str	r0, [r5, #0]
 800f0f8:	6128      	str	r0, [r5, #16]
 800f0fa:	b920      	cbnz	r0, 800f106 <_svfiprintf_r+0x2e>
 800f0fc:	230c      	movs	r3, #12
 800f0fe:	603b      	str	r3, [r7, #0]
 800f100:	f04f 30ff 	mov.w	r0, #4294967295
 800f104:	e0d1      	b.n	800f2aa <_svfiprintf_r+0x1d2>
 800f106:	2340      	movs	r3, #64	; 0x40
 800f108:	616b      	str	r3, [r5, #20]
 800f10a:	2300      	movs	r3, #0
 800f10c:	9309      	str	r3, [sp, #36]	; 0x24
 800f10e:	2320      	movs	r3, #32
 800f110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f114:	f8cd 800c 	str.w	r8, [sp, #12]
 800f118:	2330      	movs	r3, #48	; 0x30
 800f11a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2c4 <_svfiprintf_r+0x1ec>
 800f11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f122:	f04f 0901 	mov.w	r9, #1
 800f126:	4623      	mov	r3, r4
 800f128:	469a      	mov	sl, r3
 800f12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f12e:	b10a      	cbz	r2, 800f134 <_svfiprintf_r+0x5c>
 800f130:	2a25      	cmp	r2, #37	; 0x25
 800f132:	d1f9      	bne.n	800f128 <_svfiprintf_r+0x50>
 800f134:	ebba 0b04 	subs.w	fp, sl, r4
 800f138:	d00b      	beq.n	800f152 <_svfiprintf_r+0x7a>
 800f13a:	465b      	mov	r3, fp
 800f13c:	4622      	mov	r2, r4
 800f13e:	4629      	mov	r1, r5
 800f140:	4638      	mov	r0, r7
 800f142:	f7ff ff6d 	bl	800f020 <__ssputs_r>
 800f146:	3001      	adds	r0, #1
 800f148:	f000 80aa 	beq.w	800f2a0 <_svfiprintf_r+0x1c8>
 800f14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f14e:	445a      	add	r2, fp
 800f150:	9209      	str	r2, [sp, #36]	; 0x24
 800f152:	f89a 3000 	ldrb.w	r3, [sl]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f000 80a2 	beq.w	800f2a0 <_svfiprintf_r+0x1c8>
 800f15c:	2300      	movs	r3, #0
 800f15e:	f04f 32ff 	mov.w	r2, #4294967295
 800f162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f166:	f10a 0a01 	add.w	sl, sl, #1
 800f16a:	9304      	str	r3, [sp, #16]
 800f16c:	9307      	str	r3, [sp, #28]
 800f16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f172:	931a      	str	r3, [sp, #104]	; 0x68
 800f174:	4654      	mov	r4, sl
 800f176:	2205      	movs	r2, #5
 800f178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f17c:	4851      	ldr	r0, [pc, #324]	; (800f2c4 <_svfiprintf_r+0x1ec>)
 800f17e:	f7f1 f857 	bl	8000230 <memchr>
 800f182:	9a04      	ldr	r2, [sp, #16]
 800f184:	b9d8      	cbnz	r0, 800f1be <_svfiprintf_r+0xe6>
 800f186:	06d0      	lsls	r0, r2, #27
 800f188:	bf44      	itt	mi
 800f18a:	2320      	movmi	r3, #32
 800f18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f190:	0711      	lsls	r1, r2, #28
 800f192:	bf44      	itt	mi
 800f194:	232b      	movmi	r3, #43	; 0x2b
 800f196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f19a:	f89a 3000 	ldrb.w	r3, [sl]
 800f19e:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a0:	d015      	beq.n	800f1ce <_svfiprintf_r+0xf6>
 800f1a2:	9a07      	ldr	r2, [sp, #28]
 800f1a4:	4654      	mov	r4, sl
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	f04f 0c0a 	mov.w	ip, #10
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1b2:	3b30      	subs	r3, #48	; 0x30
 800f1b4:	2b09      	cmp	r3, #9
 800f1b6:	d94e      	bls.n	800f256 <_svfiprintf_r+0x17e>
 800f1b8:	b1b0      	cbz	r0, 800f1e8 <_svfiprintf_r+0x110>
 800f1ba:	9207      	str	r2, [sp, #28]
 800f1bc:	e014      	b.n	800f1e8 <_svfiprintf_r+0x110>
 800f1be:	eba0 0308 	sub.w	r3, r0, r8
 800f1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	9304      	str	r3, [sp, #16]
 800f1ca:	46a2      	mov	sl, r4
 800f1cc:	e7d2      	b.n	800f174 <_svfiprintf_r+0x9c>
 800f1ce:	9b03      	ldr	r3, [sp, #12]
 800f1d0:	1d19      	adds	r1, r3, #4
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	9103      	str	r1, [sp, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	bfbb      	ittet	lt
 800f1da:	425b      	neglt	r3, r3
 800f1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f1e0:	9307      	strge	r3, [sp, #28]
 800f1e2:	9307      	strlt	r3, [sp, #28]
 800f1e4:	bfb8      	it	lt
 800f1e6:	9204      	strlt	r2, [sp, #16]
 800f1e8:	7823      	ldrb	r3, [r4, #0]
 800f1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ec:	d10c      	bne.n	800f208 <_svfiprintf_r+0x130>
 800f1ee:	7863      	ldrb	r3, [r4, #1]
 800f1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f2:	d135      	bne.n	800f260 <_svfiprintf_r+0x188>
 800f1f4:	9b03      	ldr	r3, [sp, #12]
 800f1f6:	1d1a      	adds	r2, r3, #4
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	9203      	str	r2, [sp, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bfb8      	it	lt
 800f200:	f04f 33ff 	movlt.w	r3, #4294967295
 800f204:	3402      	adds	r4, #2
 800f206:	9305      	str	r3, [sp, #20]
 800f208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2d4 <_svfiprintf_r+0x1fc>
 800f20c:	7821      	ldrb	r1, [r4, #0]
 800f20e:	2203      	movs	r2, #3
 800f210:	4650      	mov	r0, sl
 800f212:	f7f1 f80d 	bl	8000230 <memchr>
 800f216:	b140      	cbz	r0, 800f22a <_svfiprintf_r+0x152>
 800f218:	2340      	movs	r3, #64	; 0x40
 800f21a:	eba0 000a 	sub.w	r0, r0, sl
 800f21e:	fa03 f000 	lsl.w	r0, r3, r0
 800f222:	9b04      	ldr	r3, [sp, #16]
 800f224:	4303      	orrs	r3, r0
 800f226:	3401      	adds	r4, #1
 800f228:	9304      	str	r3, [sp, #16]
 800f22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f22e:	4826      	ldr	r0, [pc, #152]	; (800f2c8 <_svfiprintf_r+0x1f0>)
 800f230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f234:	2206      	movs	r2, #6
 800f236:	f7f0 fffb 	bl	8000230 <memchr>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d038      	beq.n	800f2b0 <_svfiprintf_r+0x1d8>
 800f23e:	4b23      	ldr	r3, [pc, #140]	; (800f2cc <_svfiprintf_r+0x1f4>)
 800f240:	bb1b      	cbnz	r3, 800f28a <_svfiprintf_r+0x1b2>
 800f242:	9b03      	ldr	r3, [sp, #12]
 800f244:	3307      	adds	r3, #7
 800f246:	f023 0307 	bic.w	r3, r3, #7
 800f24a:	3308      	adds	r3, #8
 800f24c:	9303      	str	r3, [sp, #12]
 800f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f250:	4433      	add	r3, r6
 800f252:	9309      	str	r3, [sp, #36]	; 0x24
 800f254:	e767      	b.n	800f126 <_svfiprintf_r+0x4e>
 800f256:	fb0c 3202 	mla	r2, ip, r2, r3
 800f25a:	460c      	mov	r4, r1
 800f25c:	2001      	movs	r0, #1
 800f25e:	e7a5      	b.n	800f1ac <_svfiprintf_r+0xd4>
 800f260:	2300      	movs	r3, #0
 800f262:	3401      	adds	r4, #1
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	4619      	mov	r1, r3
 800f268:	f04f 0c0a 	mov.w	ip, #10
 800f26c:	4620      	mov	r0, r4
 800f26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f272:	3a30      	subs	r2, #48	; 0x30
 800f274:	2a09      	cmp	r2, #9
 800f276:	d903      	bls.n	800f280 <_svfiprintf_r+0x1a8>
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d0c5      	beq.n	800f208 <_svfiprintf_r+0x130>
 800f27c:	9105      	str	r1, [sp, #20]
 800f27e:	e7c3      	b.n	800f208 <_svfiprintf_r+0x130>
 800f280:	fb0c 2101 	mla	r1, ip, r1, r2
 800f284:	4604      	mov	r4, r0
 800f286:	2301      	movs	r3, #1
 800f288:	e7f0      	b.n	800f26c <_svfiprintf_r+0x194>
 800f28a:	ab03      	add	r3, sp, #12
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	462a      	mov	r2, r5
 800f290:	4b0f      	ldr	r3, [pc, #60]	; (800f2d0 <_svfiprintf_r+0x1f8>)
 800f292:	a904      	add	r1, sp, #16
 800f294:	4638      	mov	r0, r7
 800f296:	f3af 8000 	nop.w
 800f29a:	1c42      	adds	r2, r0, #1
 800f29c:	4606      	mov	r6, r0
 800f29e:	d1d6      	bne.n	800f24e <_svfiprintf_r+0x176>
 800f2a0:	89ab      	ldrh	r3, [r5, #12]
 800f2a2:	065b      	lsls	r3, r3, #25
 800f2a4:	f53f af2c 	bmi.w	800f100 <_svfiprintf_r+0x28>
 800f2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2aa:	b01d      	add	sp, #116	; 0x74
 800f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b0:	ab03      	add	r3, sp, #12
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	462a      	mov	r2, r5
 800f2b6:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <_svfiprintf_r+0x1f8>)
 800f2b8:	a904      	add	r1, sp, #16
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	f000 f87a 	bl	800f3b4 <_printf_i>
 800f2c0:	e7eb      	b.n	800f29a <_svfiprintf_r+0x1c2>
 800f2c2:	bf00      	nop
 800f2c4:	0800fe2c 	.word	0x0800fe2c
 800f2c8:	0800fe36 	.word	0x0800fe36
 800f2cc:	00000000 	.word	0x00000000
 800f2d0:	0800f021 	.word	0x0800f021
 800f2d4:	0800fe32 	.word	0x0800fe32

0800f2d8 <_printf_common>:
 800f2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2dc:	4616      	mov	r6, r2
 800f2de:	4699      	mov	r9, r3
 800f2e0:	688a      	ldr	r2, [r1, #8]
 800f2e2:	690b      	ldr	r3, [r1, #16]
 800f2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	bfb8      	it	lt
 800f2ec:	4613      	movlt	r3, r2
 800f2ee:	6033      	str	r3, [r6, #0]
 800f2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2f4:	4607      	mov	r7, r0
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	b10a      	cbz	r2, 800f2fe <_printf_common+0x26>
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	6033      	str	r3, [r6, #0]
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	0699      	lsls	r1, r3, #26
 800f302:	bf42      	ittt	mi
 800f304:	6833      	ldrmi	r3, [r6, #0]
 800f306:	3302      	addmi	r3, #2
 800f308:	6033      	strmi	r3, [r6, #0]
 800f30a:	6825      	ldr	r5, [r4, #0]
 800f30c:	f015 0506 	ands.w	r5, r5, #6
 800f310:	d106      	bne.n	800f320 <_printf_common+0x48>
 800f312:	f104 0a19 	add.w	sl, r4, #25
 800f316:	68e3      	ldr	r3, [r4, #12]
 800f318:	6832      	ldr	r2, [r6, #0]
 800f31a:	1a9b      	subs	r3, r3, r2
 800f31c:	42ab      	cmp	r3, r5
 800f31e:	dc26      	bgt.n	800f36e <_printf_common+0x96>
 800f320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f324:	1e13      	subs	r3, r2, #0
 800f326:	6822      	ldr	r2, [r4, #0]
 800f328:	bf18      	it	ne
 800f32a:	2301      	movne	r3, #1
 800f32c:	0692      	lsls	r2, r2, #26
 800f32e:	d42b      	bmi.n	800f388 <_printf_common+0xb0>
 800f330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f334:	4649      	mov	r1, r9
 800f336:	4638      	mov	r0, r7
 800f338:	47c0      	blx	r8
 800f33a:	3001      	adds	r0, #1
 800f33c:	d01e      	beq.n	800f37c <_printf_common+0xa4>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	68e5      	ldr	r5, [r4, #12]
 800f342:	6832      	ldr	r2, [r6, #0]
 800f344:	f003 0306 	and.w	r3, r3, #6
 800f348:	2b04      	cmp	r3, #4
 800f34a:	bf08      	it	eq
 800f34c:	1aad      	subeq	r5, r5, r2
 800f34e:	68a3      	ldr	r3, [r4, #8]
 800f350:	6922      	ldr	r2, [r4, #16]
 800f352:	bf0c      	ite	eq
 800f354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f358:	2500      	movne	r5, #0
 800f35a:	4293      	cmp	r3, r2
 800f35c:	bfc4      	itt	gt
 800f35e:	1a9b      	subgt	r3, r3, r2
 800f360:	18ed      	addgt	r5, r5, r3
 800f362:	2600      	movs	r6, #0
 800f364:	341a      	adds	r4, #26
 800f366:	42b5      	cmp	r5, r6
 800f368:	d11a      	bne.n	800f3a0 <_printf_common+0xc8>
 800f36a:	2000      	movs	r0, #0
 800f36c:	e008      	b.n	800f380 <_printf_common+0xa8>
 800f36e:	2301      	movs	r3, #1
 800f370:	4652      	mov	r2, sl
 800f372:	4649      	mov	r1, r9
 800f374:	4638      	mov	r0, r7
 800f376:	47c0      	blx	r8
 800f378:	3001      	adds	r0, #1
 800f37a:	d103      	bne.n	800f384 <_printf_common+0xac>
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f384:	3501      	adds	r5, #1
 800f386:	e7c6      	b.n	800f316 <_printf_common+0x3e>
 800f388:	18e1      	adds	r1, r4, r3
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	2030      	movs	r0, #48	; 0x30
 800f38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f392:	4422      	add	r2, r4
 800f394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f39c:	3302      	adds	r3, #2
 800f39e:	e7c7      	b.n	800f330 <_printf_common+0x58>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	47c0      	blx	r8
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d0e6      	beq.n	800f37c <_printf_common+0xa4>
 800f3ae:	3601      	adds	r6, #1
 800f3b0:	e7d9      	b.n	800f366 <_printf_common+0x8e>
	...

0800f3b4 <_printf_i>:
 800f3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	4691      	mov	r9, r2
 800f3bc:	7e27      	ldrb	r7, [r4, #24]
 800f3be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f3c0:	2f78      	cmp	r7, #120	; 0x78
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	469a      	mov	sl, r3
 800f3c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3ca:	d807      	bhi.n	800f3dc <_printf_i+0x28>
 800f3cc:	2f62      	cmp	r7, #98	; 0x62
 800f3ce:	d80a      	bhi.n	800f3e6 <_printf_i+0x32>
 800f3d0:	2f00      	cmp	r7, #0
 800f3d2:	f000 80d8 	beq.w	800f586 <_printf_i+0x1d2>
 800f3d6:	2f58      	cmp	r7, #88	; 0x58
 800f3d8:	f000 80a3 	beq.w	800f522 <_printf_i+0x16e>
 800f3dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3e4:	e03a      	b.n	800f45c <_printf_i+0xa8>
 800f3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3ea:	2b15      	cmp	r3, #21
 800f3ec:	d8f6      	bhi.n	800f3dc <_printf_i+0x28>
 800f3ee:	a001      	add	r0, pc, #4	; (adr r0, 800f3f4 <_printf_i+0x40>)
 800f3f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f3f4:	0800f44d 	.word	0x0800f44d
 800f3f8:	0800f461 	.word	0x0800f461
 800f3fc:	0800f3dd 	.word	0x0800f3dd
 800f400:	0800f3dd 	.word	0x0800f3dd
 800f404:	0800f3dd 	.word	0x0800f3dd
 800f408:	0800f3dd 	.word	0x0800f3dd
 800f40c:	0800f461 	.word	0x0800f461
 800f410:	0800f3dd 	.word	0x0800f3dd
 800f414:	0800f3dd 	.word	0x0800f3dd
 800f418:	0800f3dd 	.word	0x0800f3dd
 800f41c:	0800f3dd 	.word	0x0800f3dd
 800f420:	0800f56d 	.word	0x0800f56d
 800f424:	0800f491 	.word	0x0800f491
 800f428:	0800f54f 	.word	0x0800f54f
 800f42c:	0800f3dd 	.word	0x0800f3dd
 800f430:	0800f3dd 	.word	0x0800f3dd
 800f434:	0800f58f 	.word	0x0800f58f
 800f438:	0800f3dd 	.word	0x0800f3dd
 800f43c:	0800f491 	.word	0x0800f491
 800f440:	0800f3dd 	.word	0x0800f3dd
 800f444:	0800f3dd 	.word	0x0800f3dd
 800f448:	0800f557 	.word	0x0800f557
 800f44c:	680b      	ldr	r3, [r1, #0]
 800f44e:	1d1a      	adds	r2, r3, #4
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	600a      	str	r2, [r1, #0]
 800f454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f45c:	2301      	movs	r3, #1
 800f45e:	e0a3      	b.n	800f5a8 <_printf_i+0x1f4>
 800f460:	6825      	ldr	r5, [r4, #0]
 800f462:	6808      	ldr	r0, [r1, #0]
 800f464:	062e      	lsls	r6, r5, #24
 800f466:	f100 0304 	add.w	r3, r0, #4
 800f46a:	d50a      	bpl.n	800f482 <_printf_i+0xce>
 800f46c:	6805      	ldr	r5, [r0, #0]
 800f46e:	600b      	str	r3, [r1, #0]
 800f470:	2d00      	cmp	r5, #0
 800f472:	da03      	bge.n	800f47c <_printf_i+0xc8>
 800f474:	232d      	movs	r3, #45	; 0x2d
 800f476:	426d      	negs	r5, r5
 800f478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f47c:	485e      	ldr	r0, [pc, #376]	; (800f5f8 <_printf_i+0x244>)
 800f47e:	230a      	movs	r3, #10
 800f480:	e019      	b.n	800f4b6 <_printf_i+0x102>
 800f482:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f486:	6805      	ldr	r5, [r0, #0]
 800f488:	600b      	str	r3, [r1, #0]
 800f48a:	bf18      	it	ne
 800f48c:	b22d      	sxthne	r5, r5
 800f48e:	e7ef      	b.n	800f470 <_printf_i+0xbc>
 800f490:	680b      	ldr	r3, [r1, #0]
 800f492:	6825      	ldr	r5, [r4, #0]
 800f494:	1d18      	adds	r0, r3, #4
 800f496:	6008      	str	r0, [r1, #0]
 800f498:	0628      	lsls	r0, r5, #24
 800f49a:	d501      	bpl.n	800f4a0 <_printf_i+0xec>
 800f49c:	681d      	ldr	r5, [r3, #0]
 800f49e:	e002      	b.n	800f4a6 <_printf_i+0xf2>
 800f4a0:	0669      	lsls	r1, r5, #25
 800f4a2:	d5fb      	bpl.n	800f49c <_printf_i+0xe8>
 800f4a4:	881d      	ldrh	r5, [r3, #0]
 800f4a6:	4854      	ldr	r0, [pc, #336]	; (800f5f8 <_printf_i+0x244>)
 800f4a8:	2f6f      	cmp	r7, #111	; 0x6f
 800f4aa:	bf0c      	ite	eq
 800f4ac:	2308      	moveq	r3, #8
 800f4ae:	230a      	movne	r3, #10
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4b6:	6866      	ldr	r6, [r4, #4]
 800f4b8:	60a6      	str	r6, [r4, #8]
 800f4ba:	2e00      	cmp	r6, #0
 800f4bc:	bfa2      	ittt	ge
 800f4be:	6821      	ldrge	r1, [r4, #0]
 800f4c0:	f021 0104 	bicge.w	r1, r1, #4
 800f4c4:	6021      	strge	r1, [r4, #0]
 800f4c6:	b90d      	cbnz	r5, 800f4cc <_printf_i+0x118>
 800f4c8:	2e00      	cmp	r6, #0
 800f4ca:	d04d      	beq.n	800f568 <_printf_i+0x1b4>
 800f4cc:	4616      	mov	r6, r2
 800f4ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4d2:	fb03 5711 	mls	r7, r3, r1, r5
 800f4d6:	5dc7      	ldrb	r7, [r0, r7]
 800f4d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4dc:	462f      	mov	r7, r5
 800f4de:	42bb      	cmp	r3, r7
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	d9f4      	bls.n	800f4ce <_printf_i+0x11a>
 800f4e4:	2b08      	cmp	r3, #8
 800f4e6:	d10b      	bne.n	800f500 <_printf_i+0x14c>
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	07df      	lsls	r7, r3, #31
 800f4ec:	d508      	bpl.n	800f500 <_printf_i+0x14c>
 800f4ee:	6923      	ldr	r3, [r4, #16]
 800f4f0:	6861      	ldr	r1, [r4, #4]
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	bfde      	ittt	le
 800f4f6:	2330      	movle	r3, #48	; 0x30
 800f4f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f500:	1b92      	subs	r2, r2, r6
 800f502:	6122      	str	r2, [r4, #16]
 800f504:	f8cd a000 	str.w	sl, [sp]
 800f508:	464b      	mov	r3, r9
 800f50a:	aa03      	add	r2, sp, #12
 800f50c:	4621      	mov	r1, r4
 800f50e:	4640      	mov	r0, r8
 800f510:	f7ff fee2 	bl	800f2d8 <_printf_common>
 800f514:	3001      	adds	r0, #1
 800f516:	d14c      	bne.n	800f5b2 <_printf_i+0x1fe>
 800f518:	f04f 30ff 	mov.w	r0, #4294967295
 800f51c:	b004      	add	sp, #16
 800f51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f522:	4835      	ldr	r0, [pc, #212]	; (800f5f8 <_printf_i+0x244>)
 800f524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f528:	6823      	ldr	r3, [r4, #0]
 800f52a:	680e      	ldr	r6, [r1, #0]
 800f52c:	061f      	lsls	r7, r3, #24
 800f52e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f532:	600e      	str	r6, [r1, #0]
 800f534:	d514      	bpl.n	800f560 <_printf_i+0x1ac>
 800f536:	07d9      	lsls	r1, r3, #31
 800f538:	bf44      	itt	mi
 800f53a:	f043 0320 	orrmi.w	r3, r3, #32
 800f53e:	6023      	strmi	r3, [r4, #0]
 800f540:	b91d      	cbnz	r5, 800f54a <_printf_i+0x196>
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	f023 0320 	bic.w	r3, r3, #32
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	2310      	movs	r3, #16
 800f54c:	e7b0      	b.n	800f4b0 <_printf_i+0xfc>
 800f54e:	6823      	ldr	r3, [r4, #0]
 800f550:	f043 0320 	orr.w	r3, r3, #32
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	2378      	movs	r3, #120	; 0x78
 800f558:	4828      	ldr	r0, [pc, #160]	; (800f5fc <_printf_i+0x248>)
 800f55a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f55e:	e7e3      	b.n	800f528 <_printf_i+0x174>
 800f560:	065e      	lsls	r6, r3, #25
 800f562:	bf48      	it	mi
 800f564:	b2ad      	uxthmi	r5, r5
 800f566:	e7e6      	b.n	800f536 <_printf_i+0x182>
 800f568:	4616      	mov	r6, r2
 800f56a:	e7bb      	b.n	800f4e4 <_printf_i+0x130>
 800f56c:	680b      	ldr	r3, [r1, #0]
 800f56e:	6826      	ldr	r6, [r4, #0]
 800f570:	6960      	ldr	r0, [r4, #20]
 800f572:	1d1d      	adds	r5, r3, #4
 800f574:	600d      	str	r5, [r1, #0]
 800f576:	0635      	lsls	r5, r6, #24
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	d501      	bpl.n	800f580 <_printf_i+0x1cc>
 800f57c:	6018      	str	r0, [r3, #0]
 800f57e:	e002      	b.n	800f586 <_printf_i+0x1d2>
 800f580:	0671      	lsls	r1, r6, #25
 800f582:	d5fb      	bpl.n	800f57c <_printf_i+0x1c8>
 800f584:	8018      	strh	r0, [r3, #0]
 800f586:	2300      	movs	r3, #0
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	4616      	mov	r6, r2
 800f58c:	e7ba      	b.n	800f504 <_printf_i+0x150>
 800f58e:	680b      	ldr	r3, [r1, #0]
 800f590:	1d1a      	adds	r2, r3, #4
 800f592:	600a      	str	r2, [r1, #0]
 800f594:	681e      	ldr	r6, [r3, #0]
 800f596:	6862      	ldr	r2, [r4, #4]
 800f598:	2100      	movs	r1, #0
 800f59a:	4630      	mov	r0, r6
 800f59c:	f7f0 fe48 	bl	8000230 <memchr>
 800f5a0:	b108      	cbz	r0, 800f5a6 <_printf_i+0x1f2>
 800f5a2:	1b80      	subs	r0, r0, r6
 800f5a4:	6060      	str	r0, [r4, #4]
 800f5a6:	6863      	ldr	r3, [r4, #4]
 800f5a8:	6123      	str	r3, [r4, #16]
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b0:	e7a8      	b.n	800f504 <_printf_i+0x150>
 800f5b2:	6923      	ldr	r3, [r4, #16]
 800f5b4:	4632      	mov	r2, r6
 800f5b6:	4649      	mov	r1, r9
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	47d0      	blx	sl
 800f5bc:	3001      	adds	r0, #1
 800f5be:	d0ab      	beq.n	800f518 <_printf_i+0x164>
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	079b      	lsls	r3, r3, #30
 800f5c4:	d413      	bmi.n	800f5ee <_printf_i+0x23a>
 800f5c6:	68e0      	ldr	r0, [r4, #12]
 800f5c8:	9b03      	ldr	r3, [sp, #12]
 800f5ca:	4298      	cmp	r0, r3
 800f5cc:	bfb8      	it	lt
 800f5ce:	4618      	movlt	r0, r3
 800f5d0:	e7a4      	b.n	800f51c <_printf_i+0x168>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	4649      	mov	r1, r9
 800f5d8:	4640      	mov	r0, r8
 800f5da:	47d0      	blx	sl
 800f5dc:	3001      	adds	r0, #1
 800f5de:	d09b      	beq.n	800f518 <_printf_i+0x164>
 800f5e0:	3501      	adds	r5, #1
 800f5e2:	68e3      	ldr	r3, [r4, #12]
 800f5e4:	9903      	ldr	r1, [sp, #12]
 800f5e6:	1a5b      	subs	r3, r3, r1
 800f5e8:	42ab      	cmp	r3, r5
 800f5ea:	dcf2      	bgt.n	800f5d2 <_printf_i+0x21e>
 800f5ec:	e7eb      	b.n	800f5c6 <_printf_i+0x212>
 800f5ee:	2500      	movs	r5, #0
 800f5f0:	f104 0619 	add.w	r6, r4, #25
 800f5f4:	e7f5      	b.n	800f5e2 <_printf_i+0x22e>
 800f5f6:	bf00      	nop
 800f5f8:	0800fe3d 	.word	0x0800fe3d
 800f5fc:	0800fe4e 	.word	0x0800fe4e

0800f600 <memcpy>:
 800f600:	440a      	add	r2, r1
 800f602:	4291      	cmp	r1, r2
 800f604:	f100 33ff 	add.w	r3, r0, #4294967295
 800f608:	d100      	bne.n	800f60c <memcpy+0xc>
 800f60a:	4770      	bx	lr
 800f60c:	b510      	push	{r4, lr}
 800f60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f616:	4291      	cmp	r1, r2
 800f618:	d1f9      	bne.n	800f60e <memcpy+0xe>
 800f61a:	bd10      	pop	{r4, pc}

0800f61c <memmove>:
 800f61c:	4288      	cmp	r0, r1
 800f61e:	b510      	push	{r4, lr}
 800f620:	eb01 0402 	add.w	r4, r1, r2
 800f624:	d902      	bls.n	800f62c <memmove+0x10>
 800f626:	4284      	cmp	r4, r0
 800f628:	4623      	mov	r3, r4
 800f62a:	d807      	bhi.n	800f63c <memmove+0x20>
 800f62c:	1e43      	subs	r3, r0, #1
 800f62e:	42a1      	cmp	r1, r4
 800f630:	d008      	beq.n	800f644 <memmove+0x28>
 800f632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f63a:	e7f8      	b.n	800f62e <memmove+0x12>
 800f63c:	4402      	add	r2, r0
 800f63e:	4601      	mov	r1, r0
 800f640:	428a      	cmp	r2, r1
 800f642:	d100      	bne.n	800f646 <memmove+0x2a>
 800f644:	bd10      	pop	{r4, pc}
 800f646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f64e:	e7f7      	b.n	800f640 <memmove+0x24>

0800f650 <_free_r>:
 800f650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f652:	2900      	cmp	r1, #0
 800f654:	d048      	beq.n	800f6e8 <_free_r+0x98>
 800f656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f65a:	9001      	str	r0, [sp, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f1a1 0404 	sub.w	r4, r1, #4
 800f662:	bfb8      	it	lt
 800f664:	18e4      	addlt	r4, r4, r3
 800f666:	f000 f8d3 	bl	800f810 <__malloc_lock>
 800f66a:	4a20      	ldr	r2, [pc, #128]	; (800f6ec <_free_r+0x9c>)
 800f66c:	9801      	ldr	r0, [sp, #4]
 800f66e:	6813      	ldr	r3, [r2, #0]
 800f670:	4615      	mov	r5, r2
 800f672:	b933      	cbnz	r3, 800f682 <_free_r+0x32>
 800f674:	6063      	str	r3, [r4, #4]
 800f676:	6014      	str	r4, [r2, #0]
 800f678:	b003      	add	sp, #12
 800f67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f67e:	f000 b8cd 	b.w	800f81c <__malloc_unlock>
 800f682:	42a3      	cmp	r3, r4
 800f684:	d90b      	bls.n	800f69e <_free_r+0x4e>
 800f686:	6821      	ldr	r1, [r4, #0]
 800f688:	1862      	adds	r2, r4, r1
 800f68a:	4293      	cmp	r3, r2
 800f68c:	bf04      	itt	eq
 800f68e:	681a      	ldreq	r2, [r3, #0]
 800f690:	685b      	ldreq	r3, [r3, #4]
 800f692:	6063      	str	r3, [r4, #4]
 800f694:	bf04      	itt	eq
 800f696:	1852      	addeq	r2, r2, r1
 800f698:	6022      	streq	r2, [r4, #0]
 800f69a:	602c      	str	r4, [r5, #0]
 800f69c:	e7ec      	b.n	800f678 <_free_r+0x28>
 800f69e:	461a      	mov	r2, r3
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	b10b      	cbz	r3, 800f6a8 <_free_r+0x58>
 800f6a4:	42a3      	cmp	r3, r4
 800f6a6:	d9fa      	bls.n	800f69e <_free_r+0x4e>
 800f6a8:	6811      	ldr	r1, [r2, #0]
 800f6aa:	1855      	adds	r5, r2, r1
 800f6ac:	42a5      	cmp	r5, r4
 800f6ae:	d10b      	bne.n	800f6c8 <_free_r+0x78>
 800f6b0:	6824      	ldr	r4, [r4, #0]
 800f6b2:	4421      	add	r1, r4
 800f6b4:	1854      	adds	r4, r2, r1
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	6011      	str	r1, [r2, #0]
 800f6ba:	d1dd      	bne.n	800f678 <_free_r+0x28>
 800f6bc:	681c      	ldr	r4, [r3, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	6053      	str	r3, [r2, #4]
 800f6c2:	4421      	add	r1, r4
 800f6c4:	6011      	str	r1, [r2, #0]
 800f6c6:	e7d7      	b.n	800f678 <_free_r+0x28>
 800f6c8:	d902      	bls.n	800f6d0 <_free_r+0x80>
 800f6ca:	230c      	movs	r3, #12
 800f6cc:	6003      	str	r3, [r0, #0]
 800f6ce:	e7d3      	b.n	800f678 <_free_r+0x28>
 800f6d0:	6825      	ldr	r5, [r4, #0]
 800f6d2:	1961      	adds	r1, r4, r5
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	bf04      	itt	eq
 800f6d8:	6819      	ldreq	r1, [r3, #0]
 800f6da:	685b      	ldreq	r3, [r3, #4]
 800f6dc:	6063      	str	r3, [r4, #4]
 800f6de:	bf04      	itt	eq
 800f6e0:	1949      	addeq	r1, r1, r5
 800f6e2:	6021      	streq	r1, [r4, #0]
 800f6e4:	6054      	str	r4, [r2, #4]
 800f6e6:	e7c7      	b.n	800f678 <_free_r+0x28>
 800f6e8:	b003      	add	sp, #12
 800f6ea:	bd30      	pop	{r4, r5, pc}
 800f6ec:	20000660 	.word	0x20000660

0800f6f0 <_malloc_r>:
 800f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f2:	1ccd      	adds	r5, r1, #3
 800f6f4:	f025 0503 	bic.w	r5, r5, #3
 800f6f8:	3508      	adds	r5, #8
 800f6fa:	2d0c      	cmp	r5, #12
 800f6fc:	bf38      	it	cc
 800f6fe:	250c      	movcc	r5, #12
 800f700:	2d00      	cmp	r5, #0
 800f702:	4606      	mov	r6, r0
 800f704:	db01      	blt.n	800f70a <_malloc_r+0x1a>
 800f706:	42a9      	cmp	r1, r5
 800f708:	d903      	bls.n	800f712 <_malloc_r+0x22>
 800f70a:	230c      	movs	r3, #12
 800f70c:	6033      	str	r3, [r6, #0]
 800f70e:	2000      	movs	r0, #0
 800f710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f712:	f000 f87d 	bl	800f810 <__malloc_lock>
 800f716:	4921      	ldr	r1, [pc, #132]	; (800f79c <_malloc_r+0xac>)
 800f718:	680a      	ldr	r2, [r1, #0]
 800f71a:	4614      	mov	r4, r2
 800f71c:	b99c      	cbnz	r4, 800f746 <_malloc_r+0x56>
 800f71e:	4f20      	ldr	r7, [pc, #128]	; (800f7a0 <_malloc_r+0xb0>)
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	b923      	cbnz	r3, 800f72e <_malloc_r+0x3e>
 800f724:	4621      	mov	r1, r4
 800f726:	4630      	mov	r0, r6
 800f728:	f000 f862 	bl	800f7f0 <_sbrk_r>
 800f72c:	6038      	str	r0, [r7, #0]
 800f72e:	4629      	mov	r1, r5
 800f730:	4630      	mov	r0, r6
 800f732:	f000 f85d 	bl	800f7f0 <_sbrk_r>
 800f736:	1c43      	adds	r3, r0, #1
 800f738:	d123      	bne.n	800f782 <_malloc_r+0x92>
 800f73a:	230c      	movs	r3, #12
 800f73c:	6033      	str	r3, [r6, #0]
 800f73e:	4630      	mov	r0, r6
 800f740:	f000 f86c 	bl	800f81c <__malloc_unlock>
 800f744:	e7e3      	b.n	800f70e <_malloc_r+0x1e>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	1b5b      	subs	r3, r3, r5
 800f74a:	d417      	bmi.n	800f77c <_malloc_r+0x8c>
 800f74c:	2b0b      	cmp	r3, #11
 800f74e:	d903      	bls.n	800f758 <_malloc_r+0x68>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	441c      	add	r4, r3
 800f754:	6025      	str	r5, [r4, #0]
 800f756:	e004      	b.n	800f762 <_malloc_r+0x72>
 800f758:	6863      	ldr	r3, [r4, #4]
 800f75a:	42a2      	cmp	r2, r4
 800f75c:	bf0c      	ite	eq
 800f75e:	600b      	streq	r3, [r1, #0]
 800f760:	6053      	strne	r3, [r2, #4]
 800f762:	4630      	mov	r0, r6
 800f764:	f000 f85a 	bl	800f81c <__malloc_unlock>
 800f768:	f104 000b 	add.w	r0, r4, #11
 800f76c:	1d23      	adds	r3, r4, #4
 800f76e:	f020 0007 	bic.w	r0, r0, #7
 800f772:	1ac2      	subs	r2, r0, r3
 800f774:	d0cc      	beq.n	800f710 <_malloc_r+0x20>
 800f776:	1a1b      	subs	r3, r3, r0
 800f778:	50a3      	str	r3, [r4, r2]
 800f77a:	e7c9      	b.n	800f710 <_malloc_r+0x20>
 800f77c:	4622      	mov	r2, r4
 800f77e:	6864      	ldr	r4, [r4, #4]
 800f780:	e7cc      	b.n	800f71c <_malloc_r+0x2c>
 800f782:	1cc4      	adds	r4, r0, #3
 800f784:	f024 0403 	bic.w	r4, r4, #3
 800f788:	42a0      	cmp	r0, r4
 800f78a:	d0e3      	beq.n	800f754 <_malloc_r+0x64>
 800f78c:	1a21      	subs	r1, r4, r0
 800f78e:	4630      	mov	r0, r6
 800f790:	f000 f82e 	bl	800f7f0 <_sbrk_r>
 800f794:	3001      	adds	r0, #1
 800f796:	d1dd      	bne.n	800f754 <_malloc_r+0x64>
 800f798:	e7cf      	b.n	800f73a <_malloc_r+0x4a>
 800f79a:	bf00      	nop
 800f79c:	20000660 	.word	0x20000660
 800f7a0:	20000664 	.word	0x20000664

0800f7a4 <_realloc_r>:
 800f7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a6:	4607      	mov	r7, r0
 800f7a8:	4614      	mov	r4, r2
 800f7aa:	460e      	mov	r6, r1
 800f7ac:	b921      	cbnz	r1, 800f7b8 <_realloc_r+0x14>
 800f7ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	f7ff bf9c 	b.w	800f6f0 <_malloc_r>
 800f7b8:	b922      	cbnz	r2, 800f7c4 <_realloc_r+0x20>
 800f7ba:	f7ff ff49 	bl	800f650 <_free_r>
 800f7be:	4625      	mov	r5, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	f000 f830 	bl	800f828 <_malloc_usable_size_r>
 800f7c8:	42a0      	cmp	r0, r4
 800f7ca:	d20f      	bcs.n	800f7ec <_realloc_r+0x48>
 800f7cc:	4621      	mov	r1, r4
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	f7ff ff8e 	bl	800f6f0 <_malloc_r>
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d0f2      	beq.n	800f7c0 <_realloc_r+0x1c>
 800f7da:	4631      	mov	r1, r6
 800f7dc:	4622      	mov	r2, r4
 800f7de:	f7ff ff0f 	bl	800f600 <memcpy>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	4638      	mov	r0, r7
 800f7e6:	f7ff ff33 	bl	800f650 <_free_r>
 800f7ea:	e7e9      	b.n	800f7c0 <_realloc_r+0x1c>
 800f7ec:	4635      	mov	r5, r6
 800f7ee:	e7e7      	b.n	800f7c0 <_realloc_r+0x1c>

0800f7f0 <_sbrk_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4d06      	ldr	r5, [pc, #24]	; (800f80c <_sbrk_r+0x1c>)
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	4608      	mov	r0, r1
 800f7fa:	602b      	str	r3, [r5, #0]
 800f7fc:	f7f3 fd92 	bl	8003324 <_sbrk>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_sbrk_r+0x1a>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_sbrk_r+0x1a>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	20002008 	.word	0x20002008

0800f810 <__malloc_lock>:
 800f810:	4801      	ldr	r0, [pc, #4]	; (800f818 <__malloc_lock+0x8>)
 800f812:	f000 b811 	b.w	800f838 <__retarget_lock_acquire_recursive>
 800f816:	bf00      	nop
 800f818:	20002010 	.word	0x20002010

0800f81c <__malloc_unlock>:
 800f81c:	4801      	ldr	r0, [pc, #4]	; (800f824 <__malloc_unlock+0x8>)
 800f81e:	f000 b80c 	b.w	800f83a <__retarget_lock_release_recursive>
 800f822:	bf00      	nop
 800f824:	20002010 	.word	0x20002010

0800f828 <_malloc_usable_size_r>:
 800f828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f82c:	1f18      	subs	r0, r3, #4
 800f82e:	2b00      	cmp	r3, #0
 800f830:	bfbc      	itt	lt
 800f832:	580b      	ldrlt	r3, [r1, r0]
 800f834:	18c0      	addlt	r0, r0, r3
 800f836:	4770      	bx	lr

0800f838 <__retarget_lock_acquire_recursive>:
 800f838:	4770      	bx	lr

0800f83a <__retarget_lock_release_recursive>:
 800f83a:	4770      	bx	lr

0800f83c <_init>:
 800f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83e:	bf00      	nop
 800f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f842:	bc08      	pop	{r3}
 800f844:	469e      	mov	lr, r3
 800f846:	4770      	bx	lr

0800f848 <_fini>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	bf00      	nop
 800f84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84e:	bc08      	pop	{r3}
 800f850:	469e      	mov	lr, r3
 800f852:	4770      	bx	lr
