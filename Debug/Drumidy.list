
Drumidy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010528  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cb8  08010cb8  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08010cb8  08010cb8  00020cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cc0  08010cc0  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cc0  08010cc0  00020cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cc4  08010cc4  00020cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08010cc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c9c  20000410  080110d8  00030410  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ac  080110d8  000320ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7d1  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe4  00000000  00000000  0005cc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  00061bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b08  00000000  00000000  000638d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024678  00000000  00000000  000653e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002332b  00000000  00000000  00089a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a4a  00000000  00000000  000acd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd8  00000000  00000000  0018e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000410 	.word	0x20000410
 80001fc:	00000000 	.word	0x00000000
 8000200:	080106f0 	.word	0x080106f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000414 	.word	0x20000414
 800021c:	080106f0 	.word	0x080106f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <HAL_TIM_PeriodElapsedCallback>:
	flag_New_Settings = 1;
	dataReceivedSize = _len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	// 10kHz trigger, 0.1ms
	if (htim->Instance==htim4.Instance)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d109      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x28>
      {
		HAL_ADCEx_MultiModeStart_DMA(&hadc1,  (uint32_t *) adc_buf, 5);//
 8000dc8:	2205      	movs	r2, #5
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dce:	f003 ff43 	bl	8004c58 <HAL_ADCEx_MultiModeStart_DMA>
		cnt++;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dda:	6013      	str	r3, [r2, #0]
      }

	// 3.33Hz active sensing, 300ms
	if (htim->Instance==htim2.Instance)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d102      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x3a>
      {
		upd_active_sens = 1;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
      }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000688 	.word	0x20000688
 8000dfc:	20000c2c 	.word	0x20000c2c
 8000e00:	20000848 	.word	0x20000848
 8000e04:	20000744 	.word	0x20000744
 8000e08:	20000c40 	.word	0x20000c40
 8000e0c:	2000042c 	.word	0x2000042c

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_UART_RxCpltCallback+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d102      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0x1a>
		buffer_in[15] = 1;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_UART_RxCpltCallback+0x2c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	73da      	strb	r2, [r3, #15]
//		config_Mode = 1;
//		HAL_UART_Receive_IT (&huart2, &config_Mode, 1);
	}

}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000c8c 	.word	0x20000c8c
 8000e3c:	20000ba0 	.word	0x20000ba0

08000e40 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==hadc1.Instance)	{
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x134>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 808b 	bne.w	8000f6c <HAL_ADC_ConvCpltCallback+0x12c>
//		}

		// resulting order: 5x[ADC2] + 4x{ADC1} + 1xDummy
		// [PA6] - [PA7] - [PF1] - [PA5] - [PA4] - {PA0} - {PA1} - {PF0} - {PB0} - {XX X}
		//	2		0		4		5		6		9		7		3		1
		adc_val[0] = adc_buf[1] >> 16;
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e60:	801a      	strh	r2, [r3, #0]
		adc_val[1] = adc_buf[3] & 0xFFFF;
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e6a:	805a      	strh	r2, [r3, #2]
		adc_val[2] = adc_buf[0] >> 16;
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0c1b      	lsrs	r3, r3, #16
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e76:	809a      	strh	r2, [r3, #4]
		adc_val[3] = adc_buf[2] & 0xFFFF;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e80:	80da      	strh	r2, [r3, #6]
		adc_val[4] = adc_buf[2] >> 16;
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e8c:	811a      	strh	r2, [r3, #8]
		adc_val[5] = adc_buf[3] >> 16;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000e98:	815a      	strh	r2, [r3, #10]
		adc_val[6] = adc_buf[4] >> 16;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	0c1b      	lsrs	r3, r3, #16
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ea4:	819a      	strh	r2, [r3, #12]
		adc_val[7] = adc_buf[1] & 0xFFFF;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eae:	81da      	strh	r2, [r3, #14]
		adc_val[8] = adc_buf[0] & 0xFFFF;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x138>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000eb8:	821a      	strh	r2, [r3, #16]

		getAuxState(aux_current_state);
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ebc:	f000 ffe6 	bl	8001e8c <getAuxState>

		STEP_TIME = HAL_GetTick();
 8000ec0:	f002 faba 	bl	8003438 <HAL_GetTick>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x144>)
 8000ec8:	6013      	str	r3, [r2, #0]

		Update_channel(&channel[0], adc_val[0], aux_current_state[0]);
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	482c      	ldr	r0, [pc, #176]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x148>)
 8000ed8:	f00c fcea 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[1], adc_val[1], aux_current_state[1]);
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ede:	885b      	ldrh	r3, [r3, #2]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4828      	ldr	r0, [pc, #160]	; (8000f8c <HAL_ADC_ConvCpltCallback+0x14c>)
 8000eea:	f00c fce1 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[2], adc_val[2], aux_current_state[2]);
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ef0:	889b      	ldrh	r3, [r3, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4825      	ldr	r0, [pc, #148]	; (8000f90 <HAL_ADC_ConvCpltCallback+0x150>)
 8000efc:	f00c fcd8 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[3], adc_val[3], aux_current_state[3]);
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f02:	88db      	ldrh	r3, [r3, #6]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x154>)
 8000f0e:	f00c fccf 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[4], adc_val[4], aux_current_state[4]);
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f14:	891b      	ldrh	r3, [r3, #8]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x158>)
 8000f20:	f00c fcc6 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[5], adc_val[5], aux_current_state[5]);
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	481a      	ldr	r0, [pc, #104]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x15c>)
 8000f32:	f00c fcbd 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[6], adc_val[6], aux_current_state[6]);
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f38:	899b      	ldrh	r3, [r3, #12]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f3e:	799b      	ldrb	r3, [r3, #6]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f44:	f00c fcb4 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[7], adc_val[7], aux_current_state[7]);
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f4a:	89db      	ldrh	r3, [r3, #14]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f50:	79db      	ldrb	r3, [r3, #7]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f56:	f00c fcab 	bl	800d8b0 <Update_channel>
		Update_channel(&channel[8], adc_val[8], aux_current_state[8]);
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x13c>)
 8000f5c:	8a1b      	ldrh	r3, [r3, #16]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x140>)
 8000f62:	7a1b      	ldrb	r3, [r3, #8]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x168>)
 8000f68:	f00c fca2 	bl	800d8b0 <Update_channel>

	}// end adc1
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000848 	.word	0x20000848
 8000f78:	20000c2c 	.word	0x20000c2c
 8000f7c:	20000668 	.word	0x20000668
 8000f80:	2000067c 	.word	0x2000067c
 8000f84:	200006d4 	.word	0x200006d4
 8000f88:	20000918 	.word	0x20000918
 8000f8c:	20000960 	.word	0x20000960
 8000f90:	200009a8 	.word	0x200009a8
 8000f94:	200009f0 	.word	0x200009f0
 8000f98:	20000a38 	.word	0x20000a38
 8000f9c:	20000a80 	.word	0x20000a80
 8000fa0:	20000ac8 	.word	0x20000ac8
 8000fa4:	20000b10 	.word	0x20000b10
 8000fa8:	20000b58 	.word	0x20000b58

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f002 f9dc 	bl	800336e <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f002 fa49 	bl	8003450 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 fb55 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 fe4b 	bl	8001c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc6:	f000 fe1f 	bl	8001c08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 fdd1 	bl	8001b70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fce:	f000 fb9b 	bl	8001708 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000fd2:	f000 fd49 	bl	8001a68 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fcf9 	bl	80019cc <MX_TIM2_Init>
  MX_ADC2_Init();
 8000fda:	f000 fc55 	bl	8001888 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000fde:	f00d fefb 	bl	800edd8 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000fe2:	f000 fd8f 	bl	8001b04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start (&hadc1);
 8000fe6:	48b5      	ldr	r0, [pc, #724]	; (80012bc <main+0x310>)
 8000fe8:	f002 fe22 	bl	8003c30 <HAL_ADC_Start>
  HAL_ADC_Start (&hadc2);
 8000fec:	48b4      	ldr	r0, [pc, #720]	; (80012c0 <main+0x314>)
 8000fee:	f002 fe1f 	bl	8003c30 <HAL_ADC_Start>
  HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	; 0xc8
 8000ff4:	f002 fa2c 	bl	8003450 <HAL_Delay>

  /// **************************
  /// ******* Defaul CFG *******
  /// **************************
  getAuxState(aux_current_state);
 8000ff8:	48b2      	ldr	r0, [pc, #712]	; (80012c4 <main+0x318>)
 8000ffa:	f000 ff47 	bl	8001e8c <getAuxState>

  initDrum(&channel[0], HHOPEN, HHPEDAL	, CYMBAL_HIHAT	, aux_current_state[0]);
 8000ffe:	4bb1      	ldr	r3, [pc, #708]	; (80012c4 <main+0x318>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2303      	movs	r3, #3
 8001006:	222c      	movs	r2, #44	; 0x2c
 8001008:	212e      	movs	r1, #46	; 0x2e
 800100a:	48af      	ldr	r0, [pc, #700]	; (80012c8 <main+0x31c>)
 800100c:	f00c fbb7 	bl	800d77e <initDrum>
  	  channel[0].alt_voice = HHCLOSE;
 8001010:	4bad      	ldr	r3, [pc, #692]	; (80012c8 <main+0x31c>)
 8001012:	222a      	movs	r2, #42	; 0x2a
 8001014:	705a      	strb	r2, [r3, #1]

  // KICK - MESH+PEDAL - OK
  initDrum(&channel[1], KICK  , KICK	, MESH_PAD_AUTOAUX		, aux_current_state[1]);
 8001016:	4bab      	ldr	r3, [pc, #684]	; (80012c4 <main+0x318>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2300      	movs	r3, #0
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	2124      	movs	r1, #36	; 0x24
 8001022:	48aa      	ldr	r0, [pc, #680]	; (80012cc <main+0x320>)
 8001024:	f00c fbab 	bl	800d77e <initDrum>
  	  channel[1].peak_volume_norm = 20;
 8001028:	4ba7      	ldr	r3, [pc, #668]	; (80012c8 <main+0x31c>)
 800102a:	2214      	movs	r2, #20
 800102c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  	  channel[1].peak_min_length = 3;
 8001030:	4ba5      	ldr	r3, [pc, #660]	; (80012c8 <main+0x31c>)
 8001032:	2203      	movs	r2, #3
 8001034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  // KICK - MESH/ALT+PEDAL - OK
  initDrum(&channel[2], SNARE , KICK 	, MESH_RIM_AUTOAUX		, aux_current_state[2]);
 8001038:	4ba2      	ldr	r3, [pc, #648]	; (80012c4 <main+0x318>)
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2224      	movs	r2, #36	; 0x24
 8001042:	2126      	movs	r1, #38	; 0x26
 8001044:	48a2      	ldr	r0, [pc, #648]	; (80012d0 <main+0x324>)
 8001046:	f00c fb9a 	bl	800d77e <initDrum>
	  channel[2].alt_voice = SNRIM;
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <main+0x31c>)
 800104c:	2225      	movs	r2, #37	; 0x25
 800104e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  initDrum(&channel[3], SNARE , KICK 	, MESH_RIM_AUTOAUX		, aux_current_state[3]);
 8001052:	4b9c      	ldr	r3, [pc, #624]	; (80012c4 <main+0x318>)
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	2126      	movs	r1, #38	; 0x26
 800105e:	489d      	ldr	r0, [pc, #628]	; (80012d4 <main+0x328>)
 8001060:	f00c fb8d 	bl	800d77e <initDrum>
	  channel[3].alt_voice = 0x40;
 8001064:	4b98      	ldr	r3, [pc, #608]	; (80012c8 <main+0x31c>)
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9

  initDrum(&channel[4], TOM1 , TOM1  	, MESH_PAD_AUTOAUX		, aux_current_state[3]);
 800106c:	4b95      	ldr	r3, [pc, #596]	; (80012c4 <main+0x318>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2230      	movs	r2, #48	; 0x30
 8001076:	2130      	movs	r1, #48	; 0x30
 8001078:	4897      	ldr	r0, [pc, #604]	; (80012d8 <main+0x32c>)
 800107a:	f00c fb80 	bl	800d77e <initDrum>
  initDrum(&channel[5], TOM2 , TOM2  	, MESH_PAD_AUTOAUX		, aux_current_state[4]);
 800107e:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <main+0x318>)
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	222f      	movs	r2, #47	; 0x2f
 8001088:	212f      	movs	r1, #47	; 0x2f
 800108a:	4894      	ldr	r0, [pc, #592]	; (80012dc <main+0x330>)
 800108c:	f00c fb77 	bl	800d77e <initDrum>
  initDrum(&channel[6], TOMF , TOMF  	, MESH_PAD_AUTOAUX		, aux_current_state[6]);
 8001090:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <main+0x318>)
 8001092:	799b      	ldrb	r3, [r3, #6]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2300      	movs	r3, #0
 8001098:	222b      	movs	r2, #43	; 0x2b
 800109a:	212b      	movs	r1, #43	; 0x2b
 800109c:	4890      	ldr	r0, [pc, #576]	; (80012e0 <main+0x334>)
 800109e:	f00c fb6e 	bl	800d77e <initDrum>

  // cymbals
  initDrum(&channel[7], CRASH, CRASH 	, CYMBAL_MUTE			, aux_current_state[7]);	// CH7 aux disabled
 80010a2:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <main+0x318>)
 80010a4:	79db      	ldrb	r3, [r3, #7]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2305      	movs	r3, #5
 80010aa:	2231      	movs	r2, #49	; 0x31
 80010ac:	2131      	movs	r1, #49	; 0x31
 80010ae:	488d      	ldr	r0, [pc, #564]	; (80012e4 <main+0x338>)
 80010b0:	f00c fb65 	bl	800d77e <initDrum>
  initDrum(&channel[8], RIDE ,  BELL 	, CYMBAL_2_ZONE			, aux_current_state[8]);
 80010b4:	4b83      	ldr	r3, [pc, #524]	; (80012c4 <main+0x318>)
 80010b6:	7a1b      	ldrb	r3, [r3, #8]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2304      	movs	r3, #4
 80010bc:	2235      	movs	r2, #53	; 0x35
 80010be:	2133      	movs	r1, #51	; 0x33
 80010c0:	4889      	ldr	r0, [pc, #548]	; (80012e8 <main+0x33c>)
 80010c2:	f00c fb5c 	bl	800d77e <initDrum>


  // === Previous Settings ===
  HAL_UART_Transmit(&huart2, ASCIILOGO, strlen((char *)ASCIILOGO) , 50);
 80010c6:	4889      	ldr	r0, [pc, #548]	; (80012ec <main+0x340>)
 80010c8:	f7ff f8aa 	bl	8000220 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2332      	movs	r3, #50	; 0x32
 80010d2:	4986      	ldr	r1, [pc, #536]	; (80012ec <main+0x340>)
 80010d4:	4886      	ldr	r0, [pc, #536]	; (80012f0 <main+0x344>)
 80010d6:	f008 fa6b 	bl	80095b0 <HAL_UART_Transmit>
  HAL_Delay(500);
 80010da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010de:	f002 f9b7 	bl	8003450 <HAL_Delay>


  Load_Setting();
 80010e2:	f001 f8c9 	bl	8002278 <Load_Setting>




	// start waiting for serial commands
	HAL_Delay(200);
 80010e6:	20c8      	movs	r0, #200	; 0xc8
 80010e8:	f002 f9b2 	bl	8003450 <HAL_Delay>
	config_Mode[0] = 0;
 80010ec:	4b81      	ldr	r3, [pc, #516]	; (80012f4 <main+0x348>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	497f      	ldr	r1, [pc, #508]	; (80012f4 <main+0x348>)
 80010f6:	487e      	ldr	r0, [pc, #504]	; (80012f0 <main+0x344>)
 80010f8:	f008 faf0 	bl	80096dc <HAL_UART_Receive_IT>

	/// **************************
	/// ******* LETS ROCK! *******
	/// **************************
	HAL_TIM_Base_Start_IT(&htim2); //AS
 80010fc:	487e      	ldr	r0, [pc, #504]	; (80012f8 <main+0x34c>)
 80010fe:	f007 fd07 	bl	8008b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4); //ADC
 8001102:	487e      	ldr	r0, [pc, #504]	; (80012fc <main+0x350>)
 8001104:	f007 fd04 	bl	8008b10 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while (config_Mode[0]){
 8001108:	e03e      	b.n	8001188 <main+0x1dc>

		uint8_t rs = UART_CFG();
 800110a:	f001 fa57 	bl	80025bc <UART_CFG>
 800110e:	4603      	mov	r3, r0
 8001110:	70fb      	strb	r3, [r7, #3]

		if ((rs == 1) || (rs == 2)){
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d002      	beq.n	800111e <main+0x172>
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d114      	bne.n	8001148 <main+0x19c>
			rs = Save_Setting(0);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 ff10 	bl	8001f44 <Save_Setting>
 8001124:	4603      	mov	r3, r0
 8001126:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "New configuration saved (%X)\n", rs);
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	461a      	mov	r2, r3
 800112c:	4974      	ldr	r1, [pc, #464]	; (8001300 <main+0x354>)
 800112e:	4875      	ldr	r0, [pc, #468]	; (8001304 <main+0x358>)
 8001130:	f00e feb0 	bl	800fe94 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001134:	4873      	ldr	r0, [pc, #460]	; (8001304 <main+0x358>)
 8001136:	f7ff f873 	bl	8000220 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	2332      	movs	r3, #50	; 0x32
 8001140:	4970      	ldr	r1, [pc, #448]	; (8001304 <main+0x358>)
 8001142:	486b      	ldr	r0, [pc, #428]	; (80012f0 <main+0x344>)
 8001144:	f008 fa34 	bl	80095b0 <HAL_UART_Transmit>
		}
		if (rs == 99){
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b63      	cmp	r3, #99	; 0x63
 800114c:	d114      	bne.n	8001178 <main+0x1cc>
			rs = Save_Setting(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 fef8 	bl	8001f44 <Save_Setting>
 8001154:	4603      	mov	r3, r0
 8001156:	70fb      	strb	r3, [r7, #3]
			sprintf(buffer_out, "Reset to default values, restart the device (%X)\n", rs);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	461a      	mov	r2, r3
 800115c:	496a      	ldr	r1, [pc, #424]	; (8001308 <main+0x35c>)
 800115e:	4869      	ldr	r0, [pc, #420]	; (8001304 <main+0x358>)
 8001160:	f00e fe98 	bl	800fe94 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8001164:	4867      	ldr	r0, [pc, #412]	; (8001304 <main+0x358>)
 8001166:	f7ff f85b 	bl	8000220 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	2332      	movs	r3, #50	; 0x32
 8001170:	4964      	ldr	r1, [pc, #400]	; (8001304 <main+0x358>)
 8001172:	485f      	ldr	r0, [pc, #380]	; (80012f0 <main+0x344>)
 8001174:	f008 fa1c 	bl	80095b0 <HAL_UART_Transmit>
		}
		config_Mode[0] = 0;
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <main+0x348>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 800117e:	2201      	movs	r2, #1
 8001180:	495c      	ldr	r1, [pc, #368]	; (80012f4 <main+0x348>)
 8001182:	485b      	ldr	r0, [pc, #364]	; (80012f0 <main+0x344>)
 8001184:	f008 faaa 	bl	80096dc <HAL_UART_Receive_IT>
	  while (config_Mode[0]){
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <main+0x348>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1bc      	bne.n	800110a <main+0x15e>

	  }

	  if (upd_active_sens){
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <main+0x360>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <main+0x1f6>
		  upd_active_sens = 0;
 8001198:	4b5c      	ldr	r3, [pc, #368]	; (800130c <main+0x360>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		  sendMidiAS();
 800119e:	f000 fdc3 	bl	8001d28 <sendMidiAS>
	  }

	  for (uint8_t ch = 0; ch<9; ch++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	70bb      	strb	r3, [r7, #2]
 80011a6:	e25a      	b.n	800165e <main+0x6b2>

		  if (channel[ch].main_rdy){
 80011a8:	78ba      	ldrb	r2, [r7, #2]
 80011aa:	4947      	ldr	r1, [pc, #284]	; (80012c8 <main+0x31c>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	3311      	adds	r3, #17
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 815e 	beq.w	800147c <main+0x4d0>
			  channel[ch].main_rdy = 0;
 80011c0:	78ba      	ldrb	r2, [r7, #2]
 80011c2:	4941      	ldr	r1, [pc, #260]	; (80012c8 <main+0x31c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3311      	adds	r3, #17
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]

			  // custom volume calculation for mesh
			  if (channel[ch].chnl_type < 2){
 80011d4:	78ba      	ldrb	r2, [r7, #2]
 80011d6:	493c      	ldr	r1, [pc, #240]	; (80012c8 <main+0x31c>)
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3303      	adds	r3, #3
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f200 8096 	bhi.w	8001318 <main+0x36c>
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm);
 80011ec:	78ba      	ldrb	r2, [r7, #2]
 80011ee:	4936      	ldr	r1, [pc, #216]	; (80012c8 <main+0x31c>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	331a      	adds	r3, #26
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	3b32      	subs	r3, #50	; 0x32
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f9c4 	bl	8000598 <__aeabi_f2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <main+0x364>)
 8001216:	f7ff fa17 	bl	8000648 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <main+0x368>)
 8001228:	f7ff fb38 	bl	800089c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <main+0x364>)
 800123a:	f7ff fa05 	bl	8000648 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	78ba      	ldrb	r2, [r7, #2]
 8001248:	491f      	ldr	r1, [pc, #124]	; (80012c8 <main+0x31c>)
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	3306      	adds	r3, #6
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001260:	ee17 0a90 	vmov	r0, s15
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff fb14 	bl	800089c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fbf6 	bl	8000a6c <__aeabi_d2iz>
 8001280:	4603      	mov	r3, r0
 8001282:	607b      	str	r3, [r7, #4]
				  if ((channel[ch].chnl_type == MESH_RIM_AUTOAUX)&&(channel[ch].main_rdy_usealt))
 8001284:	78ba      	ldrb	r2, [r7, #2]
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <main+0x31c>)
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3303      	adds	r3, #3
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	f040 8092 	bne.w	80013c0 <main+0x414>
 800129c:	78ba      	ldrb	r2, [r7, #2]
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <main+0x31c>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	3312      	adds	r3, #18
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8086 	beq.w	80013c0 <main+0x414>
					  vol = vol*4;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	e081      	b.n	80013c0 <main+0x414>
 80012bc:	20000848 	.word	0x20000848
 80012c0:	200006d8 	.word	0x200006d8
 80012c4:	2000067c 	.word	0x2000067c
 80012c8:	20000918 	.word	0x20000918
 80012cc:	20000960 	.word	0x20000960
 80012d0:	200009a8 	.word	0x200009a8
 80012d4:	200009f0 	.word	0x200009f0
 80012d8:	20000a38 	.word	0x20000a38
 80012dc:	20000a80 	.word	0x20000a80
 80012e0:	20000ac8 	.word	0x20000ac8
 80012e4:	20000b10 	.word	0x20000b10
 80012e8:	20000b58 	.word	0x20000b58
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000c8c 	.word	0x20000c8c
 80012f4:	20000430 	.word	0x20000430
 80012f8:	20000c40 	.word	0x20000c40
 80012fc:	20000688 	.word	0x20000688
 8001300:	08010708 	.word	0x08010708
 8001304:	20000d1c 	.word	0x20000d1c
 8001308:	08010728 	.word	0x08010728
 800130c:	2000042c 	.word	0x2000042c
 8001310:	40590000 	.word	0x40590000
 8001314:	40b00000 	.word	0x40b00000
			  } else {
				  //volume for cymbals
				  vol = (int)(100.* (float)(channel[ch].main_rdy_height - PEAK_THRESHOLD) / 4096. * 100. / (float)channel[ch].peak_volume_norm * 2);
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	49b3      	ldr	r1, [pc, #716]	; (80015e8 <main+0x63c>)
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	331a      	adds	r3, #26
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3b32      	subs	r3, #50	; 0x32
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f92e 	bl	8000598 <__aeabi_f2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4baa      	ldr	r3, [pc, #680]	; (80015ec <main+0x640>)
 8001342:	f7ff f981 	bl	8000648 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <main+0x644>)
 8001354:	f7ff faa2 	bl	800089c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4ba1      	ldr	r3, [pc, #644]	; (80015ec <main+0x640>)
 8001366:	f7ff f96f 	bl	8000648 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	499c      	ldr	r1, [pc, #624]	; (80015e8 <main+0x63c>)
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3306      	adds	r3, #6
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	ee17 0a90 	vmov	r0, s15
 8001390:	f7ff f902 	bl	8000598 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff fa7e 	bl	800089c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	f7fe ff96 	bl	80002dc <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fb58 	bl	8000a6c <__aeabi_d2iz>
 80013bc:	4603      	mov	r3, r0
 80013be:	607b      	str	r3, [r7, #4]
			  }

			  if (vol > 127) vol = 127;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b7f      	cmp	r3, #127	; 0x7f
 80013c4:	dd01      	ble.n	80013ca <main+0x41e>
 80013c6:	237f      	movs	r3, #127	; 0x7f
 80013c8:	607b      	str	r3, [r7, #4]
			  if (vol < 1  ) vol = 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dc01      	bgt.n	80013d4 <main+0x428>
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
			  channel[ch].main_rdy_volume = (uint8_t) vol;
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	4983      	ldr	r1, [pc, #524]	; (80015e8 <main+0x63c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3320      	adds	r3, #32
 80013e8:	4602      	mov	r2, r0
 80013ea:	701a      	strb	r2, [r3, #0]

			  uint8_t vc;
			  if (channel[ch].main_rdy_usealt)
 80013ec:	78ba      	ldrb	r2, [r7, #2]
 80013ee:	497e      	ldr	r1, [pc, #504]	; (80015e8 <main+0x63c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3312      	adds	r3, #18
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <main+0x46c>
				  vc = channel[ch].alt_voice;	//				  sendMidiGEN(channel[ch].alt_voice ,channel[ch].main_rdy_volume);
 8001402:	78ba      	ldrb	r2, [r7, #2]
 8001404:	4978      	ldr	r1, [pc, #480]	; (80015e8 <main+0x63c>)
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3301      	adds	r3, #1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	707b      	strb	r3, [r7, #1]
 8001416:	e008      	b.n	800142a <main+0x47e>
			  else
				  vc = channel[ch].main_voice;	//				  sendMidiGEN(channel[ch].main_voice,channel[ch].main_rdy_volume);
 8001418:	78ba      	ldrb	r2, [r7, #2]
 800141a:	4973      	ldr	r1, [pc, #460]	; (80015e8 <main+0x63c>)
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	707b      	strb	r3, [r7, #1]


			  sendMidi(vc,channel[ch].main_rdy_volume);
 800142a:	78ba      	ldrb	r2, [r7, #2]
 800142c:	496e      	ldr	r1, [pc, #440]	; (80015e8 <main+0x63c>)
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3320      	adds	r3, #32
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc80 	bl	8001d46 <sendMidi>
			  channel[ch].main_last_on_voice 	= vc;
 8001446:	78ba      	ldrb	r2, [r7, #2]
 8001448:	4967      	ldr	r1, [pc, #412]	; (80015e8 <main+0x63c>)
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	333c      	adds	r3, #60	; 0x3c
 8001456:	787a      	ldrb	r2, [r7, #1]
 8001458:	701a      	strb	r2, [r3, #0]
			  channel[ch].main_last_on_time 	= HAL_GetTick();
 800145a:	78bc      	ldrb	r4, [r7, #2]
 800145c:	f001 ffec 	bl	8003438 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	4961      	ldr	r1, [pc, #388]	; (80015e8 <main+0x63c>)
 8001464:	4623      	mov	r3, r4
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4423      	add	r3, r4
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3338      	adds	r3, #56	; 0x38
 8001470:	601a      	str	r2, [r3, #0]

  			  sendDebug(ch,0);
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fcf4 	bl	8001e64 <sendDebug>


		  }


		  if (channel[ch].aux_rdy){
 800147c:	78ba      	ldrb	r2, [r7, #2]
 800147e:	495a      	ldr	r1, [pc, #360]	; (80015e8 <main+0x63c>)
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80b1 	beq.w	80015f6 <main+0x64a>
			  channel[ch].aux_rdy = 0;
 8001494:	78ba      	ldrb	r2, [r7, #2]
 8001496:	4954      	ldr	r1, [pc, #336]	; (80015e8 <main+0x63c>)
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3324      	adds	r3, #36	; 0x24
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
			  sendDebug(ch,1);
 80014a8:	78bb      	ldrb	r3, [r7, #2]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fcd9 	bl	8001e64 <sendDebug>

			  switch (channel[ch].chnl_type ){
 80014b2:	78ba      	ldrb	r2, [r7, #2]
 80014b4:	494c      	ldr	r1, [pc, #304]	; (80015e8 <main+0x63c>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3303      	adds	r3, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d014      	beq.n	80014f2 <main+0x546>
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	dc47      	bgt.n	800155c <main+0x5b0>
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d002      	beq.n	80014d6 <main+0x52a>
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d02e      	beq.n	8001532 <main+0x586>
 80014d4:	e042      	b.n	800155c <main+0x5b0>
			  case CYMBAL_HIHAT:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014d6:	78ba      	ldrb	r2, [r7, #2]
 80014d8:	4943      	ldr	r1, [pc, #268]	; (80015e8 <main+0x63c>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	332c      	adds	r3, #44	; 0x2c
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d17b      	bne.n	80015e4 <main+0x638>
					 sendMidiHHPedalOn();
 80014ec:	f000 fc80 	bl	8001df0 <sendMidiHHPedalOn>
//				  else
//					  sendMidiGEN(channel[ch].main_voice, 5);
				  break;
 80014f0:	e078      	b.n	80015e4 <main+0x638>

			  case CYMBAL_MUTE:
				  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80014f2:	78ba      	ldrb	r2, [r7, #2]
 80014f4:	493c      	ldr	r1, [pc, #240]	; (80015e8 <main+0x63c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	332c      	adds	r3, #44	; 0x2c
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d175      	bne.n	80015f4 <main+0x648>
					  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001508:	78ba      	ldrb	r2, [r7, #2]
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <main+0x63c>)
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	78ba      	ldrb	r2, [r7, #2]
 800151a:	4933      	ldr	r1, [pc, #204]	; (80015e8 <main+0x63c>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	2101      	movs	r1, #1
 800152c:	f000 fc2a 	bl	8001d84 <sendMidi2>
				  break;
 8001530:	e060      	b.n	80015f4 <main+0x648>

			  case CYMBAL_2_ZONE:
				  sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001532:	78ba      	ldrb	r2, [r7, #2]
 8001534:	492c      	ldr	r1, [pc, #176]	; (80015e8 <main+0x63c>)
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	78ba      	ldrb	r2, [r7, #2]
 8001544:	4928      	ldr	r1, [pc, #160]	; (80015e8 <main+0x63c>)
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	440b      	add	r3, r1
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2101      	movs	r1, #1
 8001556:	f000 fc15 	bl	8001d84 <sendMidi2>
				  break;
 800155a:	e04c      	b.n	80015f6 <main+0x64a>

			  // INDEPENDENT AUX INPUTS
			  default:
				  if (channel[ch].aux_type == AUX_TYPE_PAD)
 800155c:	78ba      	ldrb	r2, [r7, #2]
 800155e:	4922      	ldr	r1, [pc, #136]	; (80015e8 <main+0x63c>)
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3304      	adds	r3, #4
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <main+0x5f4>
					  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 8001572:	78ba      	ldrb	r2, [r7, #2]
 8001574:	491c      	ldr	r1, [pc, #112]	; (80015e8 <main+0x63c>)
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3302      	adds	r3, #2
 8001582:	7818      	ldrb	r0, [r3, #0]
 8001584:	78ba      	ldrb	r2, [r7, #2]
 8001586:	4918      	ldr	r1, [pc, #96]	; (80015e8 <main+0x63c>)
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3302      	adds	r3, #2
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2164      	movs	r1, #100	; 0x64
 800159a:	f000 fbf3 	bl	8001d84 <sendMidi2>
 800159e:	e02a      	b.n	80015f6 <main+0x64a>
				  else { //PEDAL
					  // PEDAL pressed
					  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 80015a0:	78ba      	ldrb	r2, [r7, #2]
 80015a2:	4911      	ldr	r1, [pc, #68]	; (80015e8 <main+0x63c>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	332c      	adds	r3, #44	; 0x2c
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d11f      	bne.n	80015f6 <main+0x64a>
						  sendMidi2(channel[ch].aux_voice,100, channel[ch].aux_voice,0);
 80015b6:	78ba      	ldrb	r2, [r7, #2]
 80015b8:	490b      	ldr	r1, [pc, #44]	; (80015e8 <main+0x63c>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3302      	adds	r3, #2
 80015c6:	7818      	ldrb	r0, [r3, #0]
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	4907      	ldr	r1, [pc, #28]	; (80015e8 <main+0x63c>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3302      	adds	r3, #2
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	2164      	movs	r1, #100	; 0x64
 80015de:	f000 fbd1 	bl	8001d84 <sendMidi2>
 80015e2:	e008      	b.n	80015f6 <main+0x64a>
				  break;
 80015e4:	bf00      	nop
 80015e6:	e006      	b.n	80015f6 <main+0x64a>
 80015e8:	20000918 	.word	0x20000918
 80015ec:	40590000 	.word	0x40590000
 80015f0:	40b00000 	.word	0x40b00000
				  break;
 80015f4:	bf00      	nop
			  }


		  }
		  // send off command if needed
		  if (channel[ch].main_last_on_voice > 0){
 80015f6:	78ba      	ldrb	r2, [r7, #2]
 80015f8:	491b      	ldr	r1, [pc, #108]	; (8001668 <main+0x6bc>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	333c      	adds	r3, #60	; 0x3c
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d025      	beq.n	8001658 <main+0x6ac>
			  if ( HAL_GetTick() > (channel[ch].main_last_on_time + OFF_DELAY_MS) ){
 800160c:	f001 ff14 	bl	8003438 <HAL_GetTick>
 8001610:	4601      	mov	r1, r0
 8001612:	78ba      	ldrb	r2, [r7, #2]
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <main+0x6bc>)
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4403      	add	r3, r0
 8001620:	3338      	adds	r3, #56	; 0x38
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	33c8      	adds	r3, #200	; 0xc8
 8001626:	4299      	cmp	r1, r3
 8001628:	d916      	bls.n	8001658 <main+0x6ac>
				  sendMidi(channel[ch].main_last_on_voice,0);
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <main+0x6bc>)
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	333c      	adds	r3, #60	; 0x3c
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb81 	bl	8001d46 <sendMidi>
				  channel[ch].main_last_on_voice = 0;
 8001644:	78ba      	ldrb	r2, [r7, #2]
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <main+0x6bc>)
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	333c      	adds	r3, #60	; 0x3c
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	  for (uint8_t ch = 0; ch<9; ch++){
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	3301      	adds	r3, #1
 800165c:	70bb      	strb	r3, [r7, #2]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b08      	cmp	r3, #8
 8001662:	f67f ada1 	bls.w	80011a8 <main+0x1fc>
	  while (config_Mode[0]){
 8001666:	e58f      	b.n	8001188 <main+0x1dc>
 8001668:	20000918 	.word	0x20000918

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	; 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	2238      	movs	r2, #56	; 0x38
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00e fc02 	bl	800fe84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800168e:	2000      	movs	r0, #0
 8001690:	f006 fa0e 	bl	8007ab0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001694:	2322      	movs	r3, #34	; 0x22
 8001696:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016a2:	2301      	movs	r3, #1
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a6:	2302      	movs	r3, #2
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016ae:	2304      	movs	r3, #4
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016b2:	2355      	movs	r3, #85	; 0x55
 80016b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 faa6 	bl	8007c18 <HAL_RCC_OscConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80016d2:	f001 fb5f 	bl	8002d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d6:	230f      	movs	r3, #15
 80016d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016da:	2303      	movs	r3, #3
 80016dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2104      	movs	r1, #4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fdaa 	bl	8008248 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016fa:	f001 fb4b 	bl	8002d94 <Error_Handler>
  }
}
 80016fe:	bf00      	nop
 8001700:	3750      	adds	r7, #80	; 0x50
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f00e fbaf 	bl	800fe84 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <MX_ADC1_Init+0x168>)
 8001728:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800172c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <MX_ADC1_Init+0x168>)
 8001730:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001736:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <MX_ADC1_Init+0x168>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173c:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <MX_ADC1_Init+0x168>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <MX_ADC1_Init+0x168>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001748:	4b49      	ldr	r3, [pc, #292]	; (8001870 <MX_ADC1_Init+0x168>)
 800174a:	2201      	movs	r2, #1
 800174c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800174e:	4b48      	ldr	r3, [pc, #288]	; (8001870 <MX_ADC1_Init+0x168>)
 8001750:	2208      	movs	r2, #8
 8001752:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <MX_ADC1_Init+0x168>)
 8001756:	2200      	movs	r2, #0
 8001758:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <MX_ADC1_Init+0x168>)
 800175c:	2200      	movs	r2, #0
 800175e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <MX_ADC1_Init+0x168>)
 8001762:	2205      	movs	r2, #5
 8001764:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b42      	ldr	r3, [pc, #264]	; (8001870 <MX_ADC1_Init+0x168>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	4b40      	ldr	r3, [pc, #256]	; (8001870 <MX_ADC1_Init+0x168>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <MX_ADC1_Init+0x168>)
 8001776:	2200      	movs	r2, #0
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <MX_ADC1_Init+0x168>)
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <MX_ADC1_Init+0x168>)
 8001784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <MX_ADC1_Init+0x168>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001792:	4837      	ldr	r0, [pc, #220]	; (8001870 <MX_ADC1_Init+0x168>)
 8001794:	f002 f8c2 	bl	800391c <HAL_ADC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800179e:	f001 faf9 	bl	8002d94 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80017a2:	2306      	movs	r3, #6
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 80017a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <MX_ADC1_Init+0x168>)
 80017ba:	f003 fb21 	bl	8004e00 <HAL_ADCEx_MultiModeConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80017c4:	f001 fae6 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_ADC1_Init+0x16c>)
 80017ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017cc:	2306      	movs	r3, #6
 80017ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80017d0:	2301      	movs	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d4:	237f      	movs	r3, #127	; 0x7f
 80017d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017d8:	2304      	movs	r3, #4
 80017da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4822      	ldr	r0, [pc, #136]	; (8001870 <MX_ADC1_Init+0x168>)
 80017e6:	f002 fd17 	bl	8004218 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017f0:	f001 fad0 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_ADC1_Init+0x170>)
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017f8:	230c      	movs	r3, #12
 80017fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	481b      	ldr	r0, [pc, #108]	; (8001870 <MX_ADC1_Init+0x168>)
 8001802:	f002 fd09 	bl	8004218 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800180c:	f001 fac2 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_ADC1_Init+0x174>)
 8001812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001814:	2312      	movs	r3, #18
 8001816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4814      	ldr	r0, [pc, #80]	; (8001870 <MX_ADC1_Init+0x168>)
 800181e:	f002 fcfb 	bl	8004218 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8001828:	f001 fab4 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_ADC1_Init+0x178>)
 800182e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001830:	2318      	movs	r3, #24
 8001832:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4619      	mov	r1, r3
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_ADC1_Init+0x168>)
 800183a:	f002 fced 	bl	8004218 <HAL_ADC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8001844:	f001 faa6 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_ADC1_Init+0x17c>)
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800184c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_ADC1_Init+0x168>)
 8001858:	f002 fcde 	bl	8004218 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001862:	f001 fa97 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	; 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000848 	.word	0x20000848
 8001874:	04300002 	.word	0x04300002
 8001878:	08600004 	.word	0x08600004
 800187c:	2a000400 	.word	0x2a000400
 8001880:	3ef08000 	.word	0x3ef08000
 8001884:	c3210000 	.word	0xc3210000

08001888 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2220      	movs	r2, #32
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00e faf5 	bl	800fe84 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800189a:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <MX_ADC2_Init+0x128>)
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <MX_ADC2_Init+0x12c>)
 800189e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018bc:	2201      	movs	r2, #1
 80018be:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018c0:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018c2:	2208      	movs	r2, #8
 80018c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018d4:	2205      	movs	r2, #5
 80018d6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018f8:	482d      	ldr	r0, [pc, #180]	; (80019b0 <MX_ADC2_Init+0x128>)
 80018fa:	f002 f80f 	bl	800391c <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001904:	f001 fa46 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_ADC2_Init+0x130>)
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800190c:	2306      	movs	r3, #6
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001910:	2301      	movs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001914:	237f      	movs	r3, #127	; 0x7f
 8001916:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001918:	2304      	movs	r3, #4
 800191a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4822      	ldr	r0, [pc, #136]	; (80019b0 <MX_ADC2_Init+0x128>)
 8001926:	f002 fc77 	bl	8004218 <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001930:	f001 fa30 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <MX_ADC2_Init+0x134>)
 8001936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001938:	230c      	movs	r3, #12
 800193a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	481b      	ldr	r0, [pc, #108]	; (80019b0 <MX_ADC2_Init+0x128>)
 8001942:	f002 fc69 	bl	8004218 <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800194c:	f001 fa22 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_ADC2_Init+0x138>)
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001954:	2312      	movs	r3, #18
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	; (80019b0 <MX_ADC2_Init+0x128>)
 800195e:	f002 fc5b 	bl	8004218 <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001968:	f001 fa14 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_ADC2_Init+0x13c>)
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001970:	2318      	movs	r3, #24
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_ADC2_Init+0x128>)
 800197a:	f002 fc4d 	bl	8004218 <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001984:	f001 fa06 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_ADC2_Init+0x140>)
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_ADC2_Init+0x128>)
 8001998:	f002 fc3e 	bl	8004218 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80019a2:	f001 f9f7 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200006d8 	.word	0x200006d8
 80019b4:	50000100 	.word	0x50000100
 80019b8:	0c900008 	.word	0x0c900008
 80019bc:	10c00010 	.word	0x10c00010
 80019c0:	2a000400 	.word	0x2a000400
 80019c4:	36902000 	.word	0x36902000
 80019c8:	47520000 	.word	0x47520000

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM2_Init+0x94>)
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM2_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM2_Init+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5.1E7;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a00:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a12:	f007 f825 	bl	8008a60 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a1c:	f001 f9ba 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a2e:	f007 fa59 	bl	8008ee4 <HAL_TIM_ConfigClockSource>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a38:	f001 f9ac 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM2_Init+0x94>)
 8001a4a:	f007 fc99 	bl	8009380 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f001 f99e 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000c40 	.word	0x20000c40
 8001a64:	030a32c0 	.word	0x030a32c0

08001a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <MX_TIM4_Init+0x98>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 17000;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a9a:	f244 2268 	movw	r2, #17000	; 0x4268
 8001a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aae:	f006 ffd7 	bl	8008a60 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f001 f96c 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_TIM4_Init+0x94>)
 8001aca:	f007 fa0b 	bl	8008ee4 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f001 f95e 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_TIM4_Init+0x94>)
 8001ae6:	f007 fc4b 	bl	8009380 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f001 f950 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000688 	.word	0x20000688
 8001b00:	40000800 	.word	0x40000800

08001b04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_TIM6_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b1c:	22aa      	movs	r2, #170	; 0xaa
 8001b1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b36:	f006 ff93 	bl	8008a60 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b40:	f001 f928 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b52:	f007 fc15 	bl	8009380 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b5c:	f001 f91a 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000be0 	.word	0x20000be0
 8001b6c:	40001000 	.word	0x40001000

08001b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <MX_USART2_UART_Init+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bba:	f007 fca9 	bl	8009510 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f001 f8e6 	bl	8002d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bcc:	f009 fc9d 	bl	800b50a <HAL_UARTEx_SetTxFifoThreshold>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bd6:	f001 f8dd 	bl	8002d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bde:	f009 fcd2 	bl	800b586 <HAL_UARTEx_SetRxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001be8:	f001 f8d4 	bl	8002d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_USART2_UART_Init+0x90>)
 8001bee:	f009 fc53 	bl	800b498 <HAL_UARTEx_DisableFifoMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f001 f8cc 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000c8c 	.word	0x20000c8c
 8001c04:	40004400 	.word	0x40004400

08001c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6493      	str	r3, [r2, #72]	; 0x48
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6493      	str	r3, [r2, #72]	; 0x48
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_DMA_Init+0x50>)
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	200b      	movs	r0, #11
 8001c44:	f003 fa5b 	bl	80050fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c48:	200b      	movs	r0, #11
 8001c4a:	f003 fa72 	bl	8005132 <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000

08001c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c78:	f043 0320 	orr.w	r3, r3, #32
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_GPIO_Init+0xc4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc0:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_GPIO_Init+0xc8>)
 8001cc2:	f004 f98f 	bl	8005fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG_IN7_Pin DIG_IN1_Pin DIG_IN3_Pin DIG_IN5_Pin */
  GPIO_InitStruct.Pin = DIG_IN7_Pin|DIG_IN1_Pin|DIG_IN3_Pin|DIG_IN5_Pin;
 8001cc6:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f003 ffe7 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_IN9_Pin DIG_IN6_Pin DIG_IN4_Pin DIG_IN2_Pin */
  GPIO_InitStruct.Pin = DIG_IN9_Pin|DIG_IN6_Pin|DIG_IN4_Pin|DIG_IN2_Pin;
 8001ce2:	23f0      	movs	r3, #240	; 0xf0
 8001ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <MX_GPIO_Init+0xc8>)
 8001cf6:	f003 ffdb 	bl	8005cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_GPIO_Init+0xc8>)
 8001d14:	f003 ffcc 	bl	8005cb0 <HAL_GPIO_Init>

}
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000400 	.word	0x48000400

08001d28 <sendMidiAS>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */

void sendMidiAS(){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  uint8_t bff[4] = {0x0F, 0xFE, 0x00, 0x00};
 8001d2e:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 8001d32:	607b      	str	r3, [r7, #4]
  tx_midi((uint8_t *)bff,4);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2104      	movs	r1, #4
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f86f 	bl	8001e1c <tx_midi>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <sendMidi>:
  bff[6] = 0x7f & note;
  tx_midi((uint8_t *)bff,8);
}

// MIDI generic ON message
void sendMidi(uint8_t note, uint8_t vel){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460a      	mov	r2, r1
 8001d50:	71fb      	strb	r3, [r7, #7]
 8001d52:	4613      	mov	r3, r2
 8001d54:	71bb      	strb	r3, [r7, #6]
  uint8_t bff[4] = {TAB,  0x99, 0x00, 0x00};
 8001d56:	f649 1309 	movw	r3, #39177	; 0x9909
 8001d5a:	60fb      	str	r3, [r7, #12]
  bff[2] = 0x7f & note;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	73bb      	strb	r3, [r7, #14]
  bff[3] = 0x7f & vel;
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,4);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2104      	movs	r1, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f850 	bl	8001e1c <tx_midi>
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <sendMidi2>:
  tx_midi((uint8_t *)bff,4);
}


// MIDI generic ON message
void sendMidi2(uint8_t note1, uint8_t vel1,uint8_t note2, uint8_t vel2){
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	4603      	mov	r3, r0
 8001d98:	71bb      	strb	r3, [r7, #6]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	717b      	strb	r3, [r7, #5]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	713b      	strb	r3, [r7, #4]
  uint8_t bff[8] = {TAB,  0x99, 0x00, 0x00, TAB,  0x99, 0x00, 0x00};
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <sendMidi2+0x68>)
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dac:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note1;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel1;
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	72fb      	strb	r3, [r7, #11]
  bff[2+4] = 0x7f & note2;
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	73bb      	strb	r3, [r7, #14]
  bff[3+4] = 0x7f & vel2;
 8001dce:	793b      	ldrb	r3, [r7, #4]
 8001dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,8);
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f81c 	bl	8001e1c <tx_midi>
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	0801075c 	.word	0x0801075c

08001df0 <sendMidiHHPedalOn>:

// MIDI HiHat pedal press message
void sendMidiHHPedalOn(){
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
  uint8_t bff[20] = { TAB,  0xA9, HHOPEN , 0x7F, TAB,  0xA9, HHCLOSE, 0x7F, TAB, 0xA9, 0x15, 0x7F,
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <sendMidiHHPedalOn+0x28>)
 8001df8:	1d3c      	adds	r4, r7, #4
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	6023      	str	r3, [r4, #0]
		  	  	  	  TAB,  0x99, HHPEDAL, 0x64, TAB,  0x99, HHPEDAL, 0x00};
  tx_midi((uint8_t *)bff, 20);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2114      	movs	r1, #20
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f807 	bl	8001e1c <tx_midi>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdb0      	pop	{r4, r5, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08010764 	.word	0x08010764

08001e1c <tx_midi>:
////  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//}


void tx_midi(uint8_t *_buffer, uint16_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
  uint8_t rt = USBD_BUSY;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]

  while( rt == USBD_BUSY) {
 8001e2c:	e006      	b.n	8001e3c <tx_midi+0x20>
	  rt = CDC_Transmit_FS(_buffer, len);
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f00d fbae 	bl	800f594 <CDC_Transmit_FS>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  while( rt == USBD_BUSY) {
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d0f5      	beq.n	8001e2e <tx_midi+0x12>
  };
#if USE_COM
  HAL_UART_Transmit(&huart2,_buffer, len , 5);
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	2305      	movs	r3, #5
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <tx_midi+0x44>)
 8001e4a:	f007 fbb1 	bl	80095b0 <HAL_UART_Transmit>
#endif

  TIM2->CNT = 0; // restart active sense timer
 8001e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000c8c 	.word	0x20000c8c

08001e64 <sendDebug>:

void sendDebug(uint8_t _ch, uint8_t _aux)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
			  length, channel[_ch].aux_status);
  }
  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 5);
#endif

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <sendDebug+0x24>)
 8001e7a:	f004 f8cb 	bl	8006014 <HAL_GPIO_TogglePin>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	48000400 	.word	0x48000400

08001e8c <getAuxState>:


// READ Diginal state of aux channels
void getAuxState (GPIO_PinState *_state){
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_state[0] = HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin);
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f004 f88a 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	701a      	strb	r2, [r3, #0]
	_state[1] = HAL_GPIO_ReadPin(DIG_IN2_GPIO_Port, DIG_IN2_Pin);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1c5c      	adds	r4, r3, #1
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	4824      	ldr	r0, [pc, #144]	; (8001f40 <getAuxState+0xb4>)
 8001eb0:	f004 f880 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	7023      	strb	r3, [r4, #0]
	_state[2] = HAL_GPIO_ReadPin(DIG_IN3_GPIO_Port, DIG_IN3_Pin);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1c9c      	adds	r4, r3, #2
 8001ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec4:	f004 f876 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	7023      	strb	r3, [r4, #0]
	_state[3] = HAL_GPIO_ReadPin(DIG_IN4_GPIO_Port, DIG_IN4_Pin);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	1cdc      	adds	r4, r3, #3
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	481b      	ldr	r0, [pc, #108]	; (8001f40 <getAuxState+0xb4>)
 8001ed4:	f004 f86e 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	7023      	strb	r3, [r4, #0]

	_state[4] = HAL_GPIO_ReadPin(DIG_IN5_GPIO_Port, DIG_IN5_Pin);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	1d1c      	adds	r4, r3, #4
 8001ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f004 f864 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
	_state[5] = HAL_GPIO_ReadPin(DIG_IN6_GPIO_Port, DIG_IN6_Pin);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1d5c      	adds	r4, r3, #5
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4812      	ldr	r0, [pc, #72]	; (8001f40 <getAuxState+0xb4>)
 8001ef8:	f004 f85c 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001efc:	4603      	mov	r3, r0
 8001efe:	7023      	strb	r3, [r4, #0]
	_state[6] = HAL_GPIO_ReadPin(DIG_IN7_GPIO_Port, DIG_IN7_Pin);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1d9c      	adds	r4, r3, #6
 8001f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f004 f852 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001f10:	4603      	mov	r3, r0
 8001f12:	7023      	strb	r3, [r4, #0]
	_state[7] = 0; //HAL_GPIO_ReadPin(DIG_IN8_GPIO_Port, DIG_IN8_Pin);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3307      	adds	r3, #7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

	_state[8] = HAL_GPIO_ReadPin(DIG_IN9_GPIO_Port, DIG_IN9_Pin);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f103 0408 	add.w	r4, r3, #8
 8001f22:	2110      	movs	r1, #16
 8001f24:	4806      	ldr	r0, [pc, #24]	; (8001f40 <getAuxState+0xb4>)
 8001f26:	f004 f845 	bl	8005fb4 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	7023      	strb	r3, [r4, #0]
	_state[9] = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3309      	adds	r3, #9
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	48000400 	.word	0x48000400

08001f44 <Save_Setting>:

uint8_t Save_Setting(uint8_t _rst)
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b0cd      	sub	sp, #308	; 0x134
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	701a      	strb	r2, [r3, #0]
	uint32_t SavingBuff[64];
	uint8_t i;
	uint32_t error = 0;
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
	uint64_t val = 0;
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	4abe      	ldr	r2, [pc, #760]	; (8002264 <Save_Setting+0x320>)
 8001f6a:	461e      	mov	r6, r3
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f70:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			.Banks = FLASH_BANK_1,
	        .Page = 63,
			.NbPages = 1
	};

	for (i=0;i<64;i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8001f7a:	e00b      	b.n	8001f94 <Save_Setting+0x50>
			SavingBuff[i] = 0;
 8001f7c:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	2100      	movs	r1, #0
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0;i<64;i++)
 8001f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8001f94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001f98:	2b3f      	cmp	r3, #63	; 0x3f
 8001f9a:	d9ef      	bls.n	8001f7c <Save_Setting+0x38>
//112233445566778899 AABBCCDDEEFF
	if (_rst == 0)
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d104      	bne.n	8001fae <Save_Setting+0x6a>
		SavingBuff[0] = 0xC4C0FFEE; // load settings marker
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4aaf      	ldr	r2, [pc, #700]	; (8002268 <Save_Setting+0x324>)
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e004      	b.n	8001fb8 <Save_Setting+0x74>
	else
		SavingBuff[0] = 0xFFFFFFFF; // do not load marker
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb6:	601a      	str	r2, [r3, #0]
	SavingBuff[1] = 0xBB;
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	22bb      	movs	r2, #187	; 0xbb
 8001fbe:	605a      	str	r2, [r3, #4]

	// 0x11223344
	for (i = 1; i < 10; i++){
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8001fc6:	e0bc      	b.n	8002142 <Save_Setting+0x1fe>
		// channel configuration settings
		SavingBuff[2*i    ]  = (channel[i-1].main_voice & 0xFF)*0x01000000;
 8001fc8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	49a7      	ldr	r1, [pc, #668]	; (800226c <Save_Setting+0x328>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	0619      	lsls	r1, r3, #24
 8001fde:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001fe2:	005a      	lsls	r2, r3, #1
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].aux_voice  & 0xFF)*0x00010000;
 8001fec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001ff0:	005a      	lsls	r2, r3, #1
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ffa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	489a      	ldr	r0, [pc, #616]	; (800226c <Save_Setting+0x328>)
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4403      	add	r3, r0
 800200c:	3302      	adds	r3, #2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	4401      	add	r1, r0
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].alt_voice  & 0xFF)*0x00000100;
 8002024:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002028:	005a      	lsls	r2, r3, #1
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002032:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	488c      	ldr	r0, [pc, #560]	; (800226c <Save_Setting+0x328>)
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4403      	add	r3, r0
 8002044:	3301      	adds	r3, #1
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	4618      	mov	r0, r3
 800204c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002050:	005a      	lsls	r2, r3, #1
 8002052:	4401      	add	r1, r0
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].chnl_type   & 0xFF);
 800205c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002060:	005a      	lsls	r2, r3, #1
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800206a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	487e      	ldr	r0, [pc, #504]	; (800226c <Save_Setting+0x328>)
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4403      	add	r3, r0
 800207c:	3303      	adds	r3, #3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002086:	005a      	lsls	r2, r3, #1
 8002088:	4401      	add	r1, r0
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// channel parameter settings
		SavingBuff[2*i + 1]  = (channel[i-1].peak_volume_norm 	& 0xFF)*0x01000000;
 8002092:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	4974      	ldr	r1, [pc, #464]	; (800226c <Save_Setting+0x328>)
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3306      	adds	r3, #6
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	0619      	lsls	r1, r3, #24
 80020ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_min_length 	& 0xFF)*0x00010000;
 80020bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	4866      	ldr	r0, [pc, #408]	; (800226c <Save_Setting+0x328>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4403      	add	r3, r0
 80020de:	330a      	adds	r3, #10
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	041b      	lsls	r3, r3, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4401      	add	r1, r0
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_max_length  	& 0xFF)*0x00000100;
 80020fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800210a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	4856      	ldr	r0, [pc, #344]	; (800226c <Save_Setting+0x328>)
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4403      	add	r3, r0
 800211c:	3308      	adds	r3, #8
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	4618      	mov	r0, r3
 8002126:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	4401      	add	r1, r0
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i < 10; i++){
 8002138:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800213c:	3301      	adds	r3, #1
 800213e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002142:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002146:	2b09      	cmp	r3, #9
 8002148:	f67f af3e 	bls.w	8001fc8 <Save_Setting+0x84>
//		SavingBuff[2*i + 1] += (channel[i-1].peak2peak  & 0xFF);
	}

	HAL_StatusTypeDef err;
	uint8_t st = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	err = HAL_FLASH_Unlock();
 8002152:	f003 fb9d 	bl	8005890 <HAL_FLASH_Unlock>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 800215c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <Save_Setting+0x22a>
		st += 0b10000000;
 8002164:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002168:	3b80      	subs	r3, #128	; 0x80
 800216a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR  | FLASH_FLAG_PGSERR);
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <Save_Setting+0x32c>)
 8002170:	22b3      	movs	r2, #179	; 0xb3
 8002172:	611a      	str	r2, [r3, #16]

	err = HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 8002174:	f107 0218 	add.w	r2, r7, #24
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fc72 	bl	8005a68 <HAL_FLASHEx_Erase>
 8002184:	4603      	mov	r3, r0
 8002186:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	if (err != HAL_OK)
 800218a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <Save_Setting+0x258>
		st += 0b01000000;
 8002192:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002196:	3340      	adds	r3, #64	; 0x40
 8002198:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<32;i++)
 800219c:	2300      	movs	r3, #0
 800219e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80021a2:	e039      	b.n	8002218 <Save_Setting+0x2d4>
	{
		val = (((uint64_t)SavingBuff[i*2+1])<<32) + SavingBuff[i*2];
 80021a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	0003      	movs	r3, r0
 80021c4:	2200      	movs	r2, #0
 80021c6:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 80021ca:	0048      	lsls	r0, r1, #1
 80021cc:	f107 011c 	add.w	r1, r7, #28
 80021d0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80021d4:	4608      	mov	r0, r1
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	1814      	adds	r4, r2, r0
 80021dc:	eb43 0501 	adc.w	r5, r3, r1
 80021e0:	e9c7 4548 	strd	r4, r5, [r7, #288]	; 0x120
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_USER_START_ADDR + 8*i, val) != HAL_OK) st += 1;
 80021e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021e8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80021ec:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4619      	mov	r1, r3
 80021f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80021f8:	2000      	movs	r0, #0
 80021fa:	f003 faf3 	bl	80057e4 <HAL_FLASH_Program>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <Save_Setting+0x2ca>
 8002204:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002208:	3301      	adds	r3, #1
 800220a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	for (i=0;i<32;i++)
 800220e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002212:	3301      	adds	r3, #1
 8002214:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8002218:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800221c:	2b1f      	cmp	r3, #31
 800221e:	d9c1      	bls.n	80021a4 <Save_Setting+0x260>
	}
	if ( HAL_FLASH_Lock() != HAL_OK ) st += 0b00100000;
 8002220:	f003 fb58 	bl	80058d4 <HAL_FLASH_Lock>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <Save_Setting+0x2f0>
 800222a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800222e:	3320      	adds	r3, #32
 8002230:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	for (i=0;i<64;i++)	saved_config[0] = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800223a:	e007      	b.n	800224c <Save_Setting+0x308>
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <Save_Setting+0x330>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002246:	3301      	adds	r3, #1
 8002248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800224c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002250:	2b3f      	cmp	r3, #63	; 0x3f
 8002252:	d9f3      	bls.n	800223c <Save_Setting+0x2f8>


	return st;
 8002254:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
}
 8002258:	4618      	mov	r0, r3
 800225a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800225e:	46bd      	mov	sp, r7
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	bf00      	nop
 8002264:	08010778 	.word	0x08010778
 8002268:	c4c0ffee 	.word	0xc4c0ffee
 800226c:	20000918 	.word	0x20000918
 8002270:	40022000 	.word	0x40022000
 8002274:	20000748 	.word	0x20000748

08002278 <Load_Setting>:


uint8_t Load_Setting()
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	b0a3      	sub	sp, #140	; 0x8c
 800227c:	af12      	add	r7, sp, #72	; 0x48
	uint8_t i;
//	uint32_t LoadingBuff[64];

	for (i=0;i<64;i++){
 800227e:	2300      	movs	r3, #0
 8002280:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002284:	e010      	b.n	80022a8 <Load_Setting+0x30>
		saved_config[i] = *(userConfig+i);
 8002286:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <Load_Setting+0x258>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	498e      	ldr	r1, [pc, #568]	; (80024d4 <Load_Setting+0x25c>)
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<64;i++){
 800229e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022a2:	3301      	adds	r3, #1
 80022a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80022a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022ac:	2b3f      	cmp	r3, #63	; 0x3f
 80022ae:	d9ea      	bls.n	8002286 <Load_Setting+0xe>
	}

	if (saved_config[0] != 0xC4C0FFEE) return 0;
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <Load_Setting+0x25c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a88      	ldr	r2, [pc, #544]	; (80024d8 <Load_Setting+0x260>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d001      	beq.n	80022be <Load_Setting+0x46>
 80022ba:	2300      	movs	r3, #0
 80022bc:	e104      	b.n	80024c8 <Load_Setting+0x250>

	for (i = 1; i < 10; i++){
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80022c4:	e094      	b.n	80023f0 <Load_Setting+0x178>
		channel[i-1].main_voice = 0xff & (uint8_t)(saved_config[2*i]>>24);
 80022c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4a81      	ldr	r2, [pc, #516]	; (80024d4 <Load_Setting+0x25c>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	0e19      	lsrs	r1, r3, #24
 80022d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	b2c8      	uxtb	r0, r1
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <Load_Setting+0x264>)
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
		channel[i-1].aux_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>16);
 80022ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4a78      	ldr	r2, [pc, #480]	; (80024d4 <Load_Setting+0x25c>)
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	0c19      	lsrs	r1, r3, #16
 80022fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	b2c8      	uxtb	r0, r1
 8002302:	4976      	ldr	r1, [pc, #472]	; (80024dc <Load_Setting+0x264>)
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3302      	adds	r3, #2
 8002310:	4602      	mov	r2, r0
 8002312:	701a      	strb	r2, [r3, #0]
		channel[i-1].alt_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>8);
 8002314:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <Load_Setting+0x25c>)
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	0a19      	lsrs	r1, r3, #8
 8002322:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002326:	1e5a      	subs	r2, r3, #1
 8002328:	b2c8      	uxtb	r0, r1
 800232a:	496c      	ldr	r1, [pc, #432]	; (80024dc <Load_Setting+0x264>)
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3301      	adds	r3, #1
 8002338:	4602      	mov	r2, r0
 800233a:	701a      	strb	r2, [r3, #0]
		channel[i-1].chnl_type 	= 0xff & (uint8_t)(saved_config[2*i]);
 800233c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4a64      	ldr	r2, [pc, #400]	; (80024d4 <Load_Setting+0x25c>)
 8002344:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	b2c8      	uxtb	r0, r1
 8002350:	4962      	ldr	r1, [pc, #392]	; (80024dc <Load_Setting+0x264>)
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3303      	adds	r3, #3
 800235e:	4602      	mov	r2, r0
 8002360:	701a      	strb	r2, [r3, #0]

		//		channel[i-1].peak_threshold 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
		channel[i-1].peak_volume_norm 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
 8002362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3301      	adds	r3, #1
 800236a:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <Load_Setting+0x25c>)
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	b2d9      	uxtb	r1, r3
 8002374:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	b288      	uxth	r0, r1
 800237c:	4957      	ldr	r1, [pc, #348]	; (80024dc <Load_Setting+0x264>)
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3306      	adds	r3, #6
 800238a:	4602      	mov	r2, r0
 800238c:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_min_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>16);
 800238e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	3301      	adds	r3, #1
 8002396:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <Load_Setting+0x25c>)
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b2d9      	uxtb	r1, r3
 80023a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023a4:	1e5a      	subs	r2, r3, #1
 80023a6:	b288      	uxth	r0, r1
 80023a8:	494c      	ldr	r1, [pc, #304]	; (80024dc <Load_Setting+0x264>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	330a      	adds	r3, #10
 80023b6:	4602      	mov	r2, r0
 80023b8:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_max_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>8);
 80023ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a44      	ldr	r2, [pc, #272]	; (80024d4 <Load_Setting+0x25c>)
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	b288      	uxth	r0, r1
 80023d4:	4941      	ldr	r1, [pc, #260]	; (80024dc <Load_Setting+0x264>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	3308      	adds	r3, #8
 80023e2:	4602      	mov	r2, r0
 80023e4:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < 10; i++){
 80023e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023ea:	3301      	adds	r3, #1
 80023ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	f67f af66 	bls.w	80022c6 <Load_Setting+0x4e>
//		channel[i-1].time_between_peaks = 0xff & (uint8_t)(saved_config[2*i+1]);
	}

	sprintf(buffer_out, "........ Previous settings: .......\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n",
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <Load_Setting+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <Load_Setting+0x25c>)
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	6339      	str	r1, [r7, #48]	; 0x30
 8002406:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <Load_Setting+0x25c>)
 8002408:	6898      	ldr	r0, [r3, #8]
 800240a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <Load_Setting+0x25c>)
 800240e:	68dc      	ldr	r4, [r3, #12]
 8002410:	62bc      	str	r4, [r7, #40]	; 0x28
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <Load_Setting+0x25c>)
 8002414:	691d      	ldr	r5, [r3, #16]
 8002416:	627d      	str	r5, [r7, #36]	; 0x24
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <Load_Setting+0x25c>)
 800241a:	695e      	ldr	r6, [r3, #20]
 800241c:	623e      	str	r6, [r7, #32]
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <Load_Setting+0x25c>)
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	61fa      	str	r2, [r7, #28]
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <Load_Setting+0x25c>)
 8002426:	69d9      	ldr	r1, [r3, #28]
 8002428:	61b9      	str	r1, [r7, #24]
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <Load_Setting+0x25c>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <Load_Setting+0x25c>)
 8002432:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002434:	6138      	str	r0, [r7, #16]
 8002436:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <Load_Setting+0x25c>)
 8002438:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800243a:	60fc      	str	r4, [r7, #12]
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <Load_Setting+0x25c>)
 800243e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002440:	60bd      	str	r5, [r7, #8]
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <Load_Setting+0x25c>)
 8002444:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002446:	607e      	str	r6, [r7, #4]
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <Load_Setting+0x25c>)
 800244a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <Load_Setting+0x25c>)
 800244e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <Load_Setting+0x25c>)
 8002452:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <Load_Setting+0x25c>)
 8002456:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <Load_Setting+0x25c>)
 800245a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <Load_Setting+0x25c>)
 800245e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <Load_Setting+0x25c>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	9311      	str	r3, [sp, #68]	; 0x44
 8002466:	9210      	str	r2, [sp, #64]	; 0x40
 8002468:	910f      	str	r1, [sp, #60]	; 0x3c
 800246a:	900e      	str	r0, [sp, #56]	; 0x38
 800246c:	940d      	str	r4, [sp, #52]	; 0x34
 800246e:	950c      	str	r5, [sp, #48]	; 0x30
 8002470:	960b      	str	r6, [sp, #44]	; 0x2c
 8002472:	687e      	ldr	r6, [r7, #4]
 8002474:	960a      	str	r6, [sp, #40]	; 0x28
 8002476:	68bd      	ldr	r5, [r7, #8]
 8002478:	9509      	str	r5, [sp, #36]	; 0x24
 800247a:	68fc      	ldr	r4, [r7, #12]
 800247c:	9408      	str	r4, [sp, #32]
 800247e:	6938      	ldr	r0, [r7, #16]
 8002480:	9007      	str	r0, [sp, #28]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9306      	str	r3, [sp, #24]
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	9105      	str	r1, [sp, #20]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	9204      	str	r2, [sp, #16]
 800248e:	6a3e      	ldr	r6, [r7, #32]
 8002490:	9603      	str	r6, [sp, #12]
 8002492:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8002494:	9502      	str	r5, [sp, #8]
 8002496:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002498:	9401      	str	r4, [sp, #4]
 800249a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800249c:	9000      	str	r0, [sp, #0]
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a2:	490f      	ldr	r1, [pc, #60]	; (80024e0 <Load_Setting+0x268>)
 80024a4:	480f      	ldr	r0, [pc, #60]	; (80024e4 <Load_Setting+0x26c>)
 80024a6:	f00d fcf5 	bl	800fe94 <siprintf>
	  saved_config[4] ,saved_config[5] ,saved_config[6] ,saved_config[7] ,
	  saved_config[8] ,saved_config[9] ,saved_config[10],saved_config[11],
	  saved_config[12],saved_config[13],saved_config[14],saved_config[15],
	  saved_config[16],saved_config[17],saved_config[18],saved_config[19]);

	  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80024aa:	480e      	ldr	r0, [pc, #56]	; (80024e4 <Load_Setting+0x26c>)
 80024ac:	f7fd feb8 	bl	8000220 <strlen>
 80024b0:	4603      	mov	r3, r0
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2332      	movs	r3, #50	; 0x32
 80024b6:	490b      	ldr	r1, [pc, #44]	; (80024e4 <Load_Setting+0x26c>)
 80024b8:	480b      	ldr	r0, [pc, #44]	; (80024e8 <Load_Setting+0x270>)
 80024ba:	f007 f879 	bl	80095b0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80024be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c2:	f000 ffc5 	bl	8003450 <HAL_Delay>

	return 1;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3744      	adds	r7, #68	; 0x44
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000748 	.word	0x20000748
 80024d8:	c4c0ffee 	.word	0xc4c0ffee
 80024dc:	20000918 	.word	0x20000918
 80024e0:	08010788 	.word	0x08010788
 80024e4:	20000d1c 	.word	0x20000d1c
 80024e8:	20000c8c 	.word	0x20000c8c

080024ec <get_num_from_uart>:

//receive number from serial or a given max length
int get_num_from_uart(uint8_t _len){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	int val = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len+1; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e006      	b.n	800250e <get_num_from_uart+0x22>
		buffer_in[i] = 0;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <get_num_from_uart+0xc8>)
 8002504:	2100      	movs	r1, #0
 8002506:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<_len+1; i++)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	3301      	adds	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	429a      	cmp	r2, r3
 8002514:	d2f4      	bcs.n	8002500 <get_num_from_uart+0x14>


	HAL_UART_Receive_IT (&huart2, &buffer_in[0], _len);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	4925      	ldr	r1, [pc, #148]	; (80025b4 <get_num_from_uart+0xc8>)
 800251e:	4826      	ldr	r0, [pc, #152]	; (80025b8 <get_num_from_uart+0xcc>)
 8002520:	f007 f8dc 	bl	80096dc <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0) {HAL_Delay(1);};
 8002524:	e002      	b.n	800252c <get_num_from_uart+0x40>
 8002526:	2001      	movs	r0, #1
 8002528:	f000 ff92 	bl	8003450 <HAL_Delay>
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <get_num_from_uart+0xc8>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f8      	beq.n	8002526 <get_num_from_uart+0x3a>
	HAL_Delay(2); // wait for the rest of the message
 8002534:	2002      	movs	r0, #2
 8002536:	f000 ff8b 	bl	8003450 <HAL_Delay>

	val = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e02a      	b.n	800259a <get_num_from_uart+0xae>
		if ((buffer_in[i] == 0) || (buffer_in[i] == 10) || (buffer_in[i] == 13)) break;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <get_num_from_uart+0xc8>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d029      	beq.n	80025a2 <get_num_from_uart+0xb6>
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <get_num_from_uart+0xc8>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	2b0a      	cmp	r3, #10
 8002556:	d024      	beq.n	80025a2 <get_num_from_uart+0xb6>
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <get_num_from_uart+0xc8>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	2b0d      	cmp	r3, #13
 8002560:	d01f      	beq.n	80025a2 <get_num_from_uart+0xb6>
		if ((buffer_in[0]>='0') && (buffer_in[0]<='9'))
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <get_num_from_uart+0xc8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b2f      	cmp	r3, #47	; 0x2f
 8002568:	d913      	bls.n	8002592 <get_num_from_uart+0xa6>
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <get_num_from_uart+0xc8>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b39      	cmp	r3, #57	; 0x39
 8002570:	d80f      	bhi.n	8002592 <get_num_from_uart+0xa6>
			val = val*10 + (buffer_in[i]-'0');
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4619      	mov	r1, r3
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <get_num_from_uart+0xc8>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	3b30      	subs	r3, #48	; 0x30
 8002586:	440b      	add	r3, r1
 8002588:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e003      	b.n	800259a <get_num_from_uart+0xae>
		else{
			val = -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	60bb      	str	r3, [r7, #8]
			break;
 8002598:	e003      	b.n	80025a2 <get_num_from_uart+0xb6>
	for (i = 0; i<_len; i++){
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3d0      	bcc.n	8002544 <get_num_from_uart+0x58>
		}
	}
	HAL_UART_AbortReceive(&huart2);
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <get_num_from_uart+0xcc>)
 80025a4:	f007 f8f0 	bl	8009788 <HAL_UART_AbortReceive>
	return val;
 80025a8:	68bb      	ldr	r3, [r7, #8]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000ba0 	.word	0x20000ba0
 80025b8:	20000c8c 	.word	0x20000c8c

080025bc <UART_CFG>:

uint8_t UART_CFG(){
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af06      	add	r7, sp, #24

	int val = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]

	uint8_t rtrn = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]

	sprintf(buffer_out, "\nConfig mode.\nType number of the pad [1..9], or hit the drum (x - reset to default):\n");
 80025ca:	4995      	ldr	r1, [pc, #596]	; (8002820 <UART_CFG+0x264>)
 80025cc:	4895      	ldr	r0, [pc, #596]	; (8002824 <UART_CFG+0x268>)
 80025ce:	f00d fc61 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80025d2:	4894      	ldr	r0, [pc, #592]	; (8002824 <UART_CFG+0x268>)
 80025d4:	f7fd fe24 	bl	8000220 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29a      	uxth	r2, r3
 80025dc:	2332      	movs	r3, #50	; 0x32
 80025de:	4991      	ldr	r1, [pc, #580]	; (8002824 <UART_CFG+0x268>)
 80025e0:	4891      	ldr	r0, [pc, #580]	; (8002828 <UART_CFG+0x26c>)
 80025e2:	f006 ffe5 	bl	80095b0 <HAL_UART_Transmit>

	buffer_in[0] = 0;
 80025e6:	4b91      	ldr	r3, [pc, #580]	; (800282c <UART_CFG+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 80025ec:	2201      	movs	r2, #1
 80025ee:	498f      	ldr	r1, [pc, #572]	; (800282c <UART_CFG+0x270>)
 80025f0:	488d      	ldr	r0, [pc, #564]	; (8002828 <UART_CFG+0x26c>)
 80025f2:	f007 f873 	bl	80096dc <HAL_UART_Receive_IT>

	uint8_t chnl = 10;
 80025f6:	230a      	movs	r3, #10
 80025f8:	73bb      	strb	r3, [r7, #14]
	while (chnl == 10){
 80025fa:	e050      	b.n	800269e <UART_CFG+0xe2>
		  for (uint8_t ch = 0; ch<9; ch++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	737b      	strb	r3, [r7, #13]
 8002600:	e031      	b.n	8002666 <UART_CFG+0xaa>
			  if ((channel[ch].main_rdy)||(channel[ch].aux_rdy)){
 8002602:	7b7a      	ldrb	r2, [r7, #13]
 8002604:	498a      	ldr	r1, [pc, #552]	; (8002830 <UART_CFG+0x274>)
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	3311      	adds	r3, #17
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <UART_CFG+0x72>
 8002618:	7b7a      	ldrb	r2, [r7, #13]
 800261a:	4985      	ldr	r1, [pc, #532]	; (8002830 <UART_CFG+0x274>)
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	3324      	adds	r3, #36	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <UART_CFG+0xa4>
				  channel[ch].main_rdy = 0;
 800262e:	7b7a      	ldrb	r2, [r7, #13]
 8002630:	497f      	ldr	r1, [pc, #508]	; (8002830 <UART_CFG+0x274>)
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3311      	adds	r3, #17
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
				  channel[ch].aux_rdy = 0;
 8002642:	7b7a      	ldrb	r2, [r7, #13]
 8002644:	497a      	ldr	r1, [pc, #488]	; (8002830 <UART_CFG+0x274>)
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	3324      	adds	r3, #36	; 0x24
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
				  chnl = ch;
 8002656:	7b7b      	ldrb	r3, [r7, #13]
 8002658:	73bb      	strb	r3, [r7, #14]
				  HAL_UART_AbortReceive(&huart2);
 800265a:	4873      	ldr	r0, [pc, #460]	; (8002828 <UART_CFG+0x26c>)
 800265c:	f007 f894 	bl	8009788 <HAL_UART_AbortReceive>
		  for (uint8_t ch = 0; ch<9; ch++)
 8002660:	7b7b      	ldrb	r3, [r7, #13]
 8002662:	3301      	adds	r3, #1
 8002664:	737b      	strb	r3, [r7, #13]
 8002666:	7b7b      	ldrb	r3, [r7, #13]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d9ca      	bls.n	8002602 <UART_CFG+0x46>
			  }
		  if (buffer_in[0]>0){
 800266c:	4b6f      	ldr	r3, [pc, #444]	; (800282c <UART_CFG+0x270>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d014      	beq.n	800269e <UART_CFG+0xe2>
			  if ((buffer_in[0]>='1') && (buffer_in[0]<='9'))
 8002674:	4b6d      	ldr	r3, [pc, #436]	; (800282c <UART_CFG+0x270>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b30      	cmp	r3, #48	; 0x30
 800267a:	d908      	bls.n	800268e <UART_CFG+0xd2>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <UART_CFG+0x270>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b39      	cmp	r3, #57	; 0x39
 8002682:	d804      	bhi.n	800268e <UART_CFG+0xd2>
				  chnl = buffer_in[0]-'1';
 8002684:	4b69      	ldr	r3, [pc, #420]	; (800282c <UART_CFG+0x270>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3b31      	subs	r3, #49	; 0x31
 800268a:	73bb      	strb	r3, [r7, #14]
 800268c:	e001      	b.n	8002692 <UART_CFG+0xd6>
			  else
				  chnl = 255;
 800268e:	23ff      	movs	r3, #255	; 0xff
 8002690:	73bb      	strb	r3, [r7, #14]

			  if (buffer_in[0]=='x')
 8002692:	4b66      	ldr	r3, [pc, #408]	; (800282c <UART_CFG+0x270>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b78      	cmp	r3, #120	; 0x78
 8002698:	d101      	bne.n	800269e <UART_CFG+0xe2>
				  return 99;
 800269a:	2363      	movs	r3, #99	; 0x63
 800269c:	e360      	b.n	8002d60 <UART_CFG+0x7a4>
	while (chnl == 10){
 800269e:	7bbb      	ldrb	r3, [r7, #14]
 80026a0:	2b0a      	cmp	r3, #10
 80026a2:	d0ab      	beq.n	80025fc <UART_CFG+0x40>
		  }
	}

	if (chnl == 255) {
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	2bff      	cmp	r3, #255	; 0xff
 80026a8:	d11a      	bne.n	80026e0 <UART_CFG+0x124>
		HAL_UART_AbortReceive(&huart2);
 80026aa:	485f      	ldr	r0, [pc, #380]	; (8002828 <UART_CFG+0x26c>)
 80026ac:	f007 f86c 	bl	8009788 <HAL_UART_AbortReceive>
		sprintf(buffer_out, "Ciao\n");
 80026b0:	4960      	ldr	r1, [pc, #384]	; (8002834 <UART_CFG+0x278>)
 80026b2:	485c      	ldr	r0, [pc, #368]	; (8002824 <UART_CFG+0x268>)
 80026b4:	f00d fbee 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80026b8:	485a      	ldr	r0, [pc, #360]	; (8002824 <UART_CFG+0x268>)
 80026ba:	f7fd fdb1 	bl	8000220 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	2332      	movs	r3, #50	; 0x32
 80026c4:	4957      	ldr	r1, [pc, #348]	; (8002824 <UART_CFG+0x268>)
 80026c6:	4858      	ldr	r0, [pc, #352]	; (8002828 <UART_CFG+0x26c>)
 80026c8:	f006 ff72 	bl	80095b0 <HAL_UART_Transmit>
		config_Mode[0] = 0;
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <UART_CFG+0x27c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 80026d2:	2201      	movs	r2, #1
 80026d4:	4958      	ldr	r1, [pc, #352]	; (8002838 <UART_CFG+0x27c>)
 80026d6:	4854      	ldr	r0, [pc, #336]	; (8002828 <UART_CFG+0x26c>)
 80026d8:	f007 f800 	bl	80096dc <HAL_UART_Receive_IT>
		return 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	e33f      	b.n	8002d60 <UART_CFG+0x7a4>
	}

	// got the correct channel.
	// print current values
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80026e0:	7bbb      	ldrb	r3, [r7, #14]
 80026e2:	1c59      	adds	r1, r3, #1
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 80026e4:	7bba      	ldrb	r2, [r7, #14]
 80026e6:	4852      	ldr	r0, [pc, #328]	; (8002830 <UART_CFG+0x274>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4403      	add	r3, r0
 80026f2:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80026f4:	469c      	mov	ip, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 80026f6:	7bba      	ldrb	r2, [r7, #14]
 80026f8:	484d      	ldr	r0, [pc, #308]	; (8002830 <UART_CFG+0x274>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4403      	add	r3, r0
 8002704:	3302      	adds	r3, #2
 8002706:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002708:	461c      	mov	r4, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 800270a:	7bba      	ldrb	r2, [r7, #14]
 800270c:	4848      	ldr	r0, [pc, #288]	; (8002830 <UART_CFG+0x274>)
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4403      	add	r3, r0
 8002718:	3301      	adds	r3, #1
 800271a:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800271c:	461d      	mov	r5, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 800271e:	7bba      	ldrb	r2, [r7, #14]
 8002720:	4843      	ldr	r0, [pc, #268]	; (8002830 <UART_CFG+0x274>)
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4403      	add	r3, r0
 800272c:	330a      	adds	r3, #10
 800272e:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002730:	461e      	mov	r6, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 8002732:	7bba      	ldrb	r2, [r7, #14]
 8002734:	483e      	ldr	r0, [pc, #248]	; (8002830 <UART_CFG+0x274>)
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4403      	add	r3, r0
 8002740:	3308      	adds	r3, #8
 8002742:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002744:	607b      	str	r3, [r7, #4]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 8002746:	7bba      	ldrb	r2, [r7, #14]
 8002748:	4839      	ldr	r0, [pc, #228]	; (8002830 <UART_CFG+0x274>)
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4403      	add	r3, r0
 8002754:	3304      	adds	r3, #4
 8002756:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002758:	603b      	str	r3, [r7, #0]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 800275a:	7bba      	ldrb	r2, [r7, #14]
 800275c:	4834      	ldr	r0, [pc, #208]	; (8002830 <UART_CFG+0x274>)
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4403      	add	r3, r0
 8002768:	3306      	adds	r3, #6
 800276a:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800276c:	9305      	str	r3, [sp, #20]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	9204      	str	r2, [sp, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	9602      	str	r6, [sp, #8]
 8002778:	9501      	str	r5, [sp, #4]
 800277a:	9400      	str	r4, [sp, #0]
 800277c:	4663      	mov	r3, ip
 800277e:	460a      	mov	r2, r1
 8002780:	492e      	ldr	r1, [pc, #184]	; (800283c <UART_CFG+0x280>)
 8002782:	4828      	ldr	r0, [pc, #160]	; (8002824 <UART_CFG+0x268>)
 8002784:	f00d fb86 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002788:	4826      	ldr	r0, [pc, #152]	; (8002824 <UART_CFG+0x268>)
 800278a:	f7fd fd49 	bl	8000220 <strlen>
 800278e:	4603      	mov	r3, r0
 8002790:	b29a      	uxth	r2, r3
 8002792:	2332      	movs	r3, #50	; 0x32
 8002794:	4923      	ldr	r1, [pc, #140]	; (8002824 <UART_CFG+0x268>)
 8002796:	4824      	ldr	r0, [pc, #144]	; (8002828 <UART_CFG+0x26c>)
 8002798:	f006 ff0a 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f000 fe57 	bl	8003450 <HAL_Delay>

	// Starting to change the values
	// main voicepeak_volume_norm
	sprintf(buffer_out, "\nCH#%d Change main voice from %d:\t",chnl+1, channel[chnl].main_voice);
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	1c59      	adds	r1, r3, #1
 80027a6:	7bba      	ldrb	r2, [r7, #14]
 80027a8:	4821      	ldr	r0, [pc, #132]	; (8002830 <UART_CFG+0x274>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4403      	add	r3, r0
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	460a      	mov	r2, r1
 80027b8:	4921      	ldr	r1, [pc, #132]	; (8002840 <UART_CFG+0x284>)
 80027ba:	481a      	ldr	r0, [pc, #104]	; (8002824 <UART_CFG+0x268>)
 80027bc:	f00d fb6a 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80027c0:	4818      	ldr	r0, [pc, #96]	; (8002824 <UART_CFG+0x268>)
 80027c2:	f7fd fd2d 	bl	8000220 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	2332      	movs	r3, #50	; 0x32
 80027cc:	4915      	ldr	r1, [pc, #84]	; (8002824 <UART_CFG+0x268>)
 80027ce:	4816      	ldr	r0, [pc, #88]	; (8002828 <UART_CFG+0x26c>)
 80027d0:	f006 feee 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80027d4:	20c8      	movs	r0, #200	; 0xc8
 80027d6:	f000 fe3b 	bl	8003450 <HAL_Delay>

	 val = get_num_from_uart(2);
 80027da:	2002      	movs	r0, #2
 80027dc:	f7ff fe86 	bl	80024ec <get_num_from_uart>
 80027e0:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b19      	cmp	r3, #25
 80027e6:	dd2f      	ble.n	8002848 <UART_CFG+0x28c>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b59      	cmp	r3, #89	; 0x59
 80027ec:	dc2c      	bgt.n	8002848 <UART_CFG+0x28c>
		channel[chnl].main_voice = val & 0xFF;
 80027ee:	7bba      	ldrb	r2, [r7, #14]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	b2d8      	uxtb	r0, r3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <UART_CFG+0x274>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	4602      	mov	r2, r0
 8002802:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New main voice: %d\n", channel[chnl].main_voice);
 8002804:	7bba      	ldrb	r2, [r7, #14]
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <UART_CFG+0x274>)
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	490b      	ldr	r1, [pc, #44]	; (8002844 <UART_CFG+0x288>)
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <UART_CFG+0x268>)
 800281a:	f00d fb3b 	bl	800fe94 <siprintf>
 800281e:	e020      	b.n	8002862 <UART_CFG+0x2a6>
 8002820:	08010828 	.word	0x08010828
 8002824:	20000d1c 	.word	0x20000d1c
 8002828:	20000c8c 	.word	0x20000c8c
 800282c:	20000ba0 	.word	0x20000ba0
 8002830:	20000918 	.word	0x20000918
 8002834:	08010880 	.word	0x08010880
 8002838:	20000430 	.word	0x20000430
 800283c:	08010888 	.word	0x08010888
 8002840:	08010900 	.word	0x08010900
 8002844:	08010924 	.word	0x08010924
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].main_voice);
 8002848:	7bba      	ldrb	r2, [r7, #14]
 800284a:	49a6      	ldr	r1, [pc, #664]	; (8002ae4 <UART_CFG+0x528>)
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	49a3      	ldr	r1, [pc, #652]	; (8002ae8 <UART_CFG+0x52c>)
 800285c:	48a3      	ldr	r0, [pc, #652]	; (8002aec <UART_CFG+0x530>)
 800285e:	f00d fb19 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002862:	48a2      	ldr	r0, [pc, #648]	; (8002aec <UART_CFG+0x530>)
 8002864:	f7fd fcdc 	bl	8000220 <strlen>
 8002868:	4603      	mov	r3, r0
 800286a:	b29a      	uxth	r2, r3
 800286c:	2332      	movs	r3, #50	; 0x32
 800286e:	499f      	ldr	r1, [pc, #636]	; (8002aec <UART_CFG+0x530>)
 8002870:	489f      	ldr	r0, [pc, #636]	; (8002af0 <UART_CFG+0x534>)
 8002872:	f006 fe9d 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002876:	20c8      	movs	r0, #200	; 0xc8
 8002878:	f000 fdea 	bl	8003450 <HAL_Delay>

	// aux voice
	sprintf(buffer_out, "\nCH#%d Change aux input voice from %d:\t",chnl+1, channel[chnl].aux_voice);
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	1c59      	adds	r1, r3, #1
 8002880:	7bba      	ldrb	r2, [r7, #14]
 8002882:	4898      	ldr	r0, [pc, #608]	; (8002ae4 <UART_CFG+0x528>)
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4403      	add	r3, r0
 800288e:	3302      	adds	r3, #2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	460a      	mov	r2, r1
 8002894:	4997      	ldr	r1, [pc, #604]	; (8002af4 <UART_CFG+0x538>)
 8002896:	4895      	ldr	r0, [pc, #596]	; (8002aec <UART_CFG+0x530>)
 8002898:	f00d fafc 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 800289c:	4893      	ldr	r0, [pc, #588]	; (8002aec <UART_CFG+0x530>)
 800289e:	f7fd fcbf 	bl	8000220 <strlen>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	2332      	movs	r3, #50	; 0x32
 80028a8:	4990      	ldr	r1, [pc, #576]	; (8002aec <UART_CFG+0x530>)
 80028aa:	4891      	ldr	r0, [pc, #580]	; (8002af0 <UART_CFG+0x534>)
 80028ac:	f006 fe80 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80028b0:	20c8      	movs	r0, #200	; 0xc8
 80028b2:	f000 fdcd 	bl	8003450 <HAL_Delay>

	 val = get_num_from_uart(2);
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7ff fe18 	bl	80024ec <get_num_from_uart>
 80028bc:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b19      	cmp	r3, #25
 80028c2:	dd1d      	ble.n	8002900 <UART_CFG+0x344>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b59      	cmp	r3, #89	; 0x59
 80028c8:	dc1a      	bgt.n	8002900 <UART_CFG+0x344>
		channel[chnl].aux_voice = val & 0xFF;
 80028ca:	7bba      	ldrb	r2, [r7, #14]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	4984      	ldr	r1, [pc, #528]	; (8002ae4 <UART_CFG+0x528>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3302      	adds	r3, #2
 80028de:	4602      	mov	r2, r0
 80028e0:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New aux voice: %d\n", channel[chnl].aux_voice);
 80028e2:	7bba      	ldrb	r2, [r7, #14]
 80028e4:	497f      	ldr	r1, [pc, #508]	; (8002ae4 <UART_CFG+0x528>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3302      	adds	r3, #2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4980      	ldr	r1, [pc, #512]	; (8002af8 <UART_CFG+0x53c>)
 80028f8:	487c      	ldr	r0, [pc, #496]	; (8002aec <UART_CFG+0x530>)
 80028fa:	f00d facb 	bl	800fe94 <siprintf>
 80028fe:	e00d      	b.n	800291c <UART_CFG+0x360>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].aux_voice);
 8002900:	7bba      	ldrb	r2, [r7, #14]
 8002902:	4978      	ldr	r1, [pc, #480]	; (8002ae4 <UART_CFG+0x528>)
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3302      	adds	r3, #2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	4974      	ldr	r1, [pc, #464]	; (8002ae8 <UART_CFG+0x52c>)
 8002916:	4875      	ldr	r0, [pc, #468]	; (8002aec <UART_CFG+0x530>)
 8002918:	f00d fabc 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 800291c:	4873      	ldr	r0, [pc, #460]	; (8002aec <UART_CFG+0x530>)
 800291e:	f7fd fc7f 	bl	8000220 <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	b29a      	uxth	r2, r3
 8002926:	2332      	movs	r3, #50	; 0x32
 8002928:	4970      	ldr	r1, [pc, #448]	; (8002aec <UART_CFG+0x530>)
 800292a:	4871      	ldr	r0, [pc, #452]	; (8002af0 <UART_CFG+0x534>)
 800292c:	f006 fe40 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002930:	20c8      	movs	r0, #200	; 0xc8
 8002932:	f000 fd8d 	bl	8003450 <HAL_Delay>

	// main alt voice
	sprintf(buffer_out, "\nCH#%d Change main alt voice (when pedal pressed) from %d:\t",chnl+1, channel[chnl].alt_voice);
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	7bba      	ldrb	r2, [r7, #14]
 800293c:	4869      	ldr	r0, [pc, #420]	; (8002ae4 <UART_CFG+0x528>)
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4403      	add	r3, r0
 8002948:	3301      	adds	r3, #1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	460a      	mov	r2, r1
 800294e:	496b      	ldr	r1, [pc, #428]	; (8002afc <UART_CFG+0x540>)
 8002950:	4866      	ldr	r0, [pc, #408]	; (8002aec <UART_CFG+0x530>)
 8002952:	f00d fa9f 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002956:	4865      	ldr	r0, [pc, #404]	; (8002aec <UART_CFG+0x530>)
 8002958:	f7fd fc62 	bl	8000220 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	b29a      	uxth	r2, r3
 8002960:	2332      	movs	r3, #50	; 0x32
 8002962:	4962      	ldr	r1, [pc, #392]	; (8002aec <UART_CFG+0x530>)
 8002964:	4862      	ldr	r0, [pc, #392]	; (8002af0 <UART_CFG+0x534>)
 8002966:	f006 fe23 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 800296a:	20c8      	movs	r0, #200	; 0xc8
 800296c:	f000 fd70 	bl	8003450 <HAL_Delay>

	 val = get_num_from_uart(2);
 8002970:	2002      	movs	r0, #2
 8002972:	f7ff fdbb 	bl	80024ec <get_num_from_uart>
 8002976:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b19      	cmp	r3, #25
 800297c:	dd1d      	ble.n	80029ba <UART_CFG+0x3fe>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b59      	cmp	r3, #89	; 0x59
 8002982:	dc1a      	bgt.n	80029ba <UART_CFG+0x3fe>
		channel[chnl].alt_voice = val & 0xFF;
 8002984:	7bba      	ldrb	r2, [r7, #14]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	b2d8      	uxtb	r0, r3
 800298a:	4956      	ldr	r1, [pc, #344]	; (8002ae4 <UART_CFG+0x528>)
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3301      	adds	r3, #1
 8002998:	4602      	mov	r2, r0
 800299a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New alt voice: %d\n", channel[chnl].alt_voice);
 800299c:	7bba      	ldrb	r2, [r7, #14]
 800299e:	4951      	ldr	r1, [pc, #324]	; (8002ae4 <UART_CFG+0x528>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	3301      	adds	r3, #1
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4953      	ldr	r1, [pc, #332]	; (8002b00 <UART_CFG+0x544>)
 80029b2:	484e      	ldr	r0, [pc, #312]	; (8002aec <UART_CFG+0x530>)
 80029b4:	f00d fa6e 	bl	800fe94 <siprintf>
 80029b8:	e00d      	b.n	80029d6 <UART_CFG+0x41a>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].alt_voice);
 80029ba:	7bba      	ldrb	r2, [r7, #14]
 80029bc:	4949      	ldr	r1, [pc, #292]	; (8002ae4 <UART_CFG+0x528>)
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3301      	adds	r3, #1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4946      	ldr	r1, [pc, #280]	; (8002ae8 <UART_CFG+0x52c>)
 80029d0:	4846      	ldr	r0, [pc, #280]	; (8002aec <UART_CFG+0x530>)
 80029d2:	f00d fa5f 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 80029d6:	4845      	ldr	r0, [pc, #276]	; (8002aec <UART_CFG+0x530>)
 80029d8:	f7fd fc22 	bl	8000220 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	b29a      	uxth	r2, r3
 80029e0:	2332      	movs	r3, #50	; 0x32
 80029e2:	4942      	ldr	r1, [pc, #264]	; (8002aec <UART_CFG+0x530>)
 80029e4:	4842      	ldr	r0, [pc, #264]	; (8002af0 <UART_CFG+0x534>)
 80029e6:	f006 fde3 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 80029ea:	20c8      	movs	r0, #200	; 0xc8
 80029ec:	f000 fd30 	bl	8003450 <HAL_Delay>

	// channel type
	sprintf(buffer_out, "\nCH#%d Change aux type from %d to:\n\tAUX - auto, MAIN - Mesh(0), Mesh with rim(1), or Cymbal(2),\n\t HiHat(3) with pedal, Cymbal with 2 zones(4), Cymabal with mute button(5)\n", chnl+1,  channel[chnl].chnl_type);
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	7bba      	ldrb	r2, [r7, #14]
 80029f6:	483b      	ldr	r0, [pc, #236]	; (8002ae4 <UART_CFG+0x528>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4403      	add	r3, r0
 8002a02:	3303      	adds	r3, #3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	460a      	mov	r2, r1
 8002a08:	493e      	ldr	r1, [pc, #248]	; (8002b04 <UART_CFG+0x548>)
 8002a0a:	4838      	ldr	r0, [pc, #224]	; (8002aec <UART_CFG+0x530>)
 8002a0c:	f00d fa42 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a10:	4836      	ldr	r0, [pc, #216]	; (8002aec <UART_CFG+0x530>)
 8002a12:	f7fd fc05 	bl	8000220 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	2332      	movs	r3, #50	; 0x32
 8002a1c:	4933      	ldr	r1, [pc, #204]	; (8002aec <UART_CFG+0x530>)
 8002a1e:	4834      	ldr	r0, [pc, #208]	; (8002af0 <UART_CFG+0x534>)
 8002a20:	f006 fdc6 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002a24:	20c8      	movs	r0, #200	; 0xc8
 8002a26:	f000 fd13 	bl	8003450 <HAL_Delay>

	val = get_num_from_uart(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fd5e 	bl	80024ec <get_num_from_uart>
 8002a30:	60b8      	str	r0, [r7, #8]
	if ((val>=0)&&(val<=4)){
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db1d      	blt.n	8002a74 <UART_CFG+0x4b8>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	dc1a      	bgt.n	8002a74 <UART_CFG+0x4b8>
		channel[chnl].chnl_type = val & 0xFF;
 8002a3e:	7bba      	ldrb	r2, [r7, #14]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	b2d8      	uxtb	r0, r3
 8002a44:	4927      	ldr	r1, [pc, #156]	; (8002ae4 <UART_CFG+0x528>)
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3303      	adds	r3, #3
 8002a52:	4602      	mov	r2, r0
 8002a54:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New channel type: %d\n", channel[chnl].chnl_type);
 8002a56:	7bba      	ldrb	r2, [r7, #14]
 8002a58:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <UART_CFG+0x528>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3303      	adds	r3, #3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <UART_CFG+0x54c>)
 8002a6c:	481f      	ldr	r0, [pc, #124]	; (8002aec <UART_CFG+0x530>)
 8002a6e:	f00d fa11 	bl	800fe94 <siprintf>
 8002a72:	e00d      	b.n	8002a90 <UART_CFG+0x4d4>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].chnl_type);
 8002a74:	7bba      	ldrb	r2, [r7, #14]
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <UART_CFG+0x528>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	3303      	adds	r3, #3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4917      	ldr	r1, [pc, #92]	; (8002ae8 <UART_CFG+0x52c>)
 8002a8a:	4818      	ldr	r0, [pc, #96]	; (8002aec <UART_CFG+0x530>)
 8002a8c:	f00d fa02 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002a90:	4816      	ldr	r0, [pc, #88]	; (8002aec <UART_CFG+0x530>)
 8002a92:	f7fd fbc5 	bl	8000220 <strlen>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	2332      	movs	r3, #50	; 0x32
 8002a9c:	4913      	ldr	r1, [pc, #76]	; (8002aec <UART_CFG+0x530>)
 8002a9e:	4814      	ldr	r0, [pc, #80]	; (8002af0 <UART_CFG+0x534>)
 8002aa0:	f006 fd86 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002aa4:	20c8      	movs	r0, #200	; 0xc8
 8002aa6:	f000 fcd3 	bl	8003450 <HAL_Delay>

	rtrn = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
	sprintf(buffer_out, "\nAdjust timing? y - yes, n - save settings and exit\n");
 8002aae:	4917      	ldr	r1, [pc, #92]	; (8002b0c <UART_CFG+0x550>)
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <UART_CFG+0x530>)
 8002ab2:	f00d f9ef 	bl	800fe94 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <UART_CFG+0x530>)
 8002ab8:	f7fd fbb2 	bl	8000220 <strlen>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	2332      	movs	r3, #50	; 0x32
 8002ac2:	490a      	ldr	r1, [pc, #40]	; (8002aec <UART_CFG+0x530>)
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <UART_CFG+0x534>)
 8002ac6:	f006 fd73 	bl	80095b0 <HAL_UART_Transmit>
	HAL_Delay(200);
 8002aca:	20c8      	movs	r0, #200	; 0xc8
 8002acc:	f000 fcc0 	bl	8003450 <HAL_Delay>


	buffer_in[0] = 0;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <UART_CFG+0x554>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	490d      	ldr	r1, [pc, #52]	; (8002b10 <UART_CFG+0x554>)
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <UART_CFG+0x534>)
 8002adc:	f006 fdfe 	bl	80096dc <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0){HAL_Delay(1);}
 8002ae0:	e01b      	b.n	8002b1a <UART_CFG+0x55e>
 8002ae2:	bf00      	nop
 8002ae4:	20000918 	.word	0x20000918
 8002ae8:	08010938 	.word	0x08010938
 8002aec:	20000d1c 	.word	0x20000d1c
 8002af0:	20000c8c 	.word	0x20000c8c
 8002af4:	08010954 	.word	0x08010954
 8002af8:	0801097c 	.word	0x0801097c
 8002afc:	08010990 	.word	0x08010990
 8002b00:	080109cc 	.word	0x080109cc
 8002b04:	080109e0 	.word	0x080109e0
 8002b08:	08010a8c 	.word	0x08010a8c
 8002b0c:	08010aa4 	.word	0x08010aa4
 8002b10:	20000ba0 	.word	0x20000ba0
 8002b14:	2001      	movs	r0, #1
 8002b16:	f000 fc9b 	bl	8003450 <HAL_Delay>
 8002b1a:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <UART_CFG+0x7ac>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f8      	beq.n	8002b14 <UART_CFG+0x558>
	if (buffer_in[0] == 'y'){
 8002b22:	4b91      	ldr	r3, [pc, #580]	; (8002d68 <UART_CFG+0x7ac>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b79      	cmp	r3, #121	; 0x79
 8002b28:	f040 8119 	bne.w	8002d5e <UART_CFG+0x7a2>

		// Peak threshold
		sprintf(buffer_out, "\nCH#%d Volume norm = %d (default 50, 0..255) (full volume point, 100~4096). New:\t",chnl+1,(int) channel[chnl].peak_volume_norm);
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	7bba      	ldrb	r2, [r7, #14]
 8002b32:	488e      	ldr	r0, [pc, #568]	; (8002d6c <UART_CFG+0x7b0>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4403      	add	r3, r0
 8002b3e:	3306      	adds	r3, #6
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	460a      	mov	r2, r1
 8002b44:	498a      	ldr	r1, [pc, #552]	; (8002d70 <UART_CFG+0x7b4>)
 8002b46:	488b      	ldr	r0, [pc, #556]	; (8002d74 <UART_CFG+0x7b8>)
 8002b48:	f00d f9a4 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002b4c:	4889      	ldr	r0, [pc, #548]	; (8002d74 <UART_CFG+0x7b8>)
 8002b4e:	f7fd fb67 	bl	8000220 <strlen>
 8002b52:	4603      	mov	r3, r0
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	2332      	movs	r3, #50	; 0x32
 8002b58:	4986      	ldr	r1, [pc, #536]	; (8002d74 <UART_CFG+0x7b8>)
 8002b5a:	4887      	ldr	r0, [pc, #540]	; (8002d78 <UART_CFG+0x7bc>)
 8002b5c:	f006 fd28 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002b60:	20c8      	movs	r0, #200	; 0xc8
 8002b62:	f000 fc75 	bl	8003450 <HAL_Delay>

		val = get_num_from_uart(3);
 8002b66:	2003      	movs	r0, #3
 8002b68:	f7ff fcc0 	bl	80024ec <get_num_from_uart>
 8002b6c:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dd1d      	ble.n	8002bb0 <UART_CFG+0x5f4>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	dc1a      	bgt.n	8002bb0 <UART_CFG+0x5f4>
			channel[chnl].peak_volume_norm = val;
 8002b7a:	7bba      	ldrb	r2, [r7, #14]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	b298      	uxth	r0, r3
 8002b80:	497a      	ldr	r1, [pc, #488]	; (8002d6c <UART_CFG+0x7b0>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3306      	adds	r3, #6
 8002b8e:	4602      	mov	r2, r0
 8002b90:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New threshold = %d\n", (int)channel[chnl].peak_volume_norm);
 8002b92:	7bba      	ldrb	r2, [r7, #14]
 8002b94:	4975      	ldr	r1, [pc, #468]	; (8002d6c <UART_CFG+0x7b0>)
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3306      	adds	r3, #6
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4975      	ldr	r1, [pc, #468]	; (8002d7c <UART_CFG+0x7c0>)
 8002ba8:	4872      	ldr	r0, [pc, #456]	; (8002d74 <UART_CFG+0x7b8>)
 8002baa:	f00d f973 	bl	800fe94 <siprintf>
 8002bae:	e00d      	b.n	8002bcc <UART_CFG+0x610>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_volume_norm);
 8002bb0:	7bba      	ldrb	r2, [r7, #14]
 8002bb2:	496e      	ldr	r1, [pc, #440]	; (8002d6c <UART_CFG+0x7b0>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3306      	adds	r3, #6
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	496e      	ldr	r1, [pc, #440]	; (8002d80 <UART_CFG+0x7c4>)
 8002bc6:	486b      	ldr	r0, [pc, #428]	; (8002d74 <UART_CFG+0x7b8>)
 8002bc8:	f00d f964 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002bcc:	4869      	ldr	r0, [pc, #420]	; (8002d74 <UART_CFG+0x7b8>)
 8002bce:	f7fd fb27 	bl	8000220 <strlen>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	2332      	movs	r3, #50	; 0x32
 8002bd8:	4966      	ldr	r1, [pc, #408]	; (8002d74 <UART_CFG+0x7b8>)
 8002bda:	4867      	ldr	r0, [pc, #412]	; (8002d78 <UART_CFG+0x7bc>)
 8002bdc:	f006 fce8 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002be0:	20c8      	movs	r0, #200	; 0xc8
 8002be2:	f000 fc35 	bl	8003450 <HAL_Delay>

		// min peak len
		sprintf(buffer_out, "\nCH#%d Peak min length = %d (default mesh 15, cymbal 4, 1..99) [x0.1ms]. New:\t",chnl+1,(int) channel[chnl].peak_min_length);
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	1c59      	adds	r1, r3, #1
 8002bea:	7bba      	ldrb	r2, [r7, #14]
 8002bec:	485f      	ldr	r0, [pc, #380]	; (8002d6c <UART_CFG+0x7b0>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4403      	add	r3, r0
 8002bf8:	330a      	adds	r3, #10
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	4961      	ldr	r1, [pc, #388]	; (8002d84 <UART_CFG+0x7c8>)
 8002c00:	485c      	ldr	r0, [pc, #368]	; (8002d74 <UART_CFG+0x7b8>)
 8002c02:	f00d f947 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002c06:	485b      	ldr	r0, [pc, #364]	; (8002d74 <UART_CFG+0x7b8>)
 8002c08:	f7fd fb0a 	bl	8000220 <strlen>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	2332      	movs	r3, #50	; 0x32
 8002c12:	4958      	ldr	r1, [pc, #352]	; (8002d74 <UART_CFG+0x7b8>)
 8002c14:	4858      	ldr	r0, [pc, #352]	; (8002d78 <UART_CFG+0x7bc>)
 8002c16:	f006 fccb 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002c1a:	20c8      	movs	r0, #200	; 0xc8
 8002c1c:	f000 fc18 	bl	8003450 <HAL_Delay>

		val = get_num_from_uart(2);
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7ff fc63 	bl	80024ec <get_num_from_uart>
 8002c26:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<100)){
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dd1d      	ble.n	8002c6a <UART_CFG+0x6ae>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b63      	cmp	r3, #99	; 0x63
 8002c32:	dc1a      	bgt.n	8002c6a <UART_CFG+0x6ae>
			channel[chnl].peak_min_length = val;
 8002c34:	7bba      	ldrb	r2, [r7, #14]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	b298      	uxth	r0, r3
 8002c3a:	494c      	ldr	r1, [pc, #304]	; (8002d6c <UART_CFG+0x7b0>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	330a      	adds	r3, #10
 8002c48:	4602      	mov	r2, r0
 8002c4a:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New min length = %d\n", (int)channel[chnl].peak_min_length);
 8002c4c:	7bba      	ldrb	r2, [r7, #14]
 8002c4e:	4947      	ldr	r1, [pc, #284]	; (8002d6c <UART_CFG+0x7b0>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	330a      	adds	r3, #10
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4949      	ldr	r1, [pc, #292]	; (8002d88 <UART_CFG+0x7cc>)
 8002c62:	4844      	ldr	r0, [pc, #272]	; (8002d74 <UART_CFG+0x7b8>)
 8002c64:	f00d f916 	bl	800fe94 <siprintf>
 8002c68:	e00d      	b.n	8002c86 <UART_CFG+0x6ca>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_min_length);
 8002c6a:	7bba      	ldrb	r2, [r7, #14]
 8002c6c:	493f      	ldr	r1, [pc, #252]	; (8002d6c <UART_CFG+0x7b0>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	330a      	adds	r3, #10
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4940      	ldr	r1, [pc, #256]	; (8002d80 <UART_CFG+0x7c4>)
 8002c80:	483c      	ldr	r0, [pc, #240]	; (8002d74 <UART_CFG+0x7b8>)
 8002c82:	f00d f907 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002c86:	483b      	ldr	r0, [pc, #236]	; (8002d74 <UART_CFG+0x7b8>)
 8002c88:	f7fd faca 	bl	8000220 <strlen>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	2332      	movs	r3, #50	; 0x32
 8002c92:	4938      	ldr	r1, [pc, #224]	; (8002d74 <UART_CFG+0x7b8>)
 8002c94:	4838      	ldr	r0, [pc, #224]	; (8002d78 <UART_CFG+0x7bc>)
 8002c96:	f006 fc8b 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002c9a:	20c8      	movs	r0, #200	; 0xc8
 8002c9c:	f000 fbd8 	bl	8003450 <HAL_Delay>

		// max peak len
		sprintf(buffer_out, "\nCH#%d Peak max length = %d (default 200, 1..255) [x0.1ms]. New:\t",chnl+1, (int)channel[chnl].peak_max_length);
 8002ca0:	7bbb      	ldrb	r3, [r7, #14]
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	7bba      	ldrb	r2, [r7, #14]
 8002ca6:	4831      	ldr	r0, [pc, #196]	; (8002d6c <UART_CFG+0x7b0>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	4934      	ldr	r1, [pc, #208]	; (8002d8c <UART_CFG+0x7d0>)
 8002cba:	482e      	ldr	r0, [pc, #184]	; (8002d74 <UART_CFG+0x7b8>)
 8002cbc:	f00d f8ea 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002cc0:	482c      	ldr	r0, [pc, #176]	; (8002d74 <UART_CFG+0x7b8>)
 8002cc2:	f7fd faad 	bl	8000220 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	2332      	movs	r3, #50	; 0x32
 8002ccc:	4929      	ldr	r1, [pc, #164]	; (8002d74 <UART_CFG+0x7b8>)
 8002cce:	482a      	ldr	r0, [pc, #168]	; (8002d78 <UART_CFG+0x7bc>)
 8002cd0:	f006 fc6e 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002cd4:	20c8      	movs	r0, #200	; 0xc8
 8002cd6:	f000 fbbb 	bl	8003450 <HAL_Delay>

		val = get_num_from_uart(3);
 8002cda:	2003      	movs	r0, #3
 8002cdc:	f7ff fc06 	bl	80024ec <get_num_from_uart>
 8002ce0:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dd1d      	ble.n	8002d24 <UART_CFG+0x768>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2bff      	cmp	r3, #255	; 0xff
 8002cec:	dc1a      	bgt.n	8002d24 <UART_CFG+0x768>
			channel[chnl].peak_max_length = val;
 8002cee:	7bba      	ldrb	r2, [r7, #14]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	b298      	uxth	r0, r3
 8002cf4:	491d      	ldr	r1, [pc, #116]	; (8002d6c <UART_CFG+0x7b0>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3308      	adds	r3, #8
 8002d02:	4602      	mov	r2, r0
 8002d04:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New max length = %d\n", (int)channel[chnl].peak_max_length);
 8002d06:	7bba      	ldrb	r2, [r7, #14]
 8002d08:	4918      	ldr	r1, [pc, #96]	; (8002d6c <UART_CFG+0x7b0>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3308      	adds	r3, #8
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	491d      	ldr	r1, [pc, #116]	; (8002d90 <UART_CFG+0x7d4>)
 8002d1c:	4815      	ldr	r0, [pc, #84]	; (8002d74 <UART_CFG+0x7b8>)
 8002d1e:	f00d f8b9 	bl	800fe94 <siprintf>
 8002d22:	e00d      	b.n	8002d40 <UART_CFG+0x784>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_max_length);
 8002d24:	7bba      	ldrb	r2, [r7, #14]
 8002d26:	4911      	ldr	r1, [pc, #68]	; (8002d6c <UART_CFG+0x7b0>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3308      	adds	r3, #8
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4911      	ldr	r1, [pc, #68]	; (8002d80 <UART_CFG+0x7c4>)
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <UART_CFG+0x7b8>)
 8002d3c:	f00d f8aa 	bl	800fe94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <UART_CFG+0x7b8>)
 8002d42:	f7fd fa6d 	bl	8000220 <strlen>
 8002d46:	4603      	mov	r3, r0
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	2332      	movs	r3, #50	; 0x32
 8002d4c:	4909      	ldr	r1, [pc, #36]	; (8002d74 <UART_CFG+0x7b8>)
 8002d4e:	480a      	ldr	r0, [pc, #40]	; (8002d78 <UART_CFG+0x7bc>)
 8002d50:	f006 fc2e 	bl	80095b0 <HAL_UART_Transmit>
		HAL_Delay(200);
 8002d54:	20c8      	movs	r0, #200	; 0xc8
 8002d56:	f000 fb7b 	bl	8003450 <HAL_Delay>
		rtrn = 2;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	73fb      	strb	r3, [r7, #15]
	}
	return rtrn;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d68:	20000ba0 	.word	0x20000ba0
 8002d6c:	20000918 	.word	0x20000918
 8002d70:	08010adc 	.word	0x08010adc
 8002d74:	20000d1c 	.word	0x20000d1c
 8002d78:	20000c8c 	.word	0x20000c8c
 8002d7c:	08010b30 	.word	0x08010b30
 8002d80:	08010938 	.word	0x08010938
 8002d84:	08010b44 	.word	0x08010b44
 8002d88:	08010b94 	.word	0x08010b94
 8002d8c:	08010bac 	.word	0x08010bac
 8002d90:	08010bf0 	.word	0x08010bf0

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <Error_Handler+0x8>
	...

08002da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_MspInit+0x44>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_MspInit+0x44>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6613      	str	r3, [r2, #96]	; 0x60
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_MspInit+0x44>)
 8002db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_MspInit+0x44>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_MspInit+0x44>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_MspInit+0x44>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dd6:	f004 ff0f 	bl	8007bf8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0a0      	sub	sp, #128	; 0x80
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e04:	2244      	movs	r2, #68	; 0x44
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f00d f83b 	bl	800fe84 <memset>
  if(hadc->Instance==ADC1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e16:	f040 80a2 	bne.w	8002f5e <HAL_ADC_MspInit+0x176>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002e20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002e24:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f005 fc28 	bl	8008680 <HAL_RCCEx_PeriphCLKConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002e36:	f7ff ffad 	bl	8002d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e3a:	4b7c      	ldr	r3, [pc, #496]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10b      	bne.n	8002e64 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e4c:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e58:	4b75      	ldr	r3, [pc, #468]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e64:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	4a71      	ldr	r2, [pc, #452]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	4a6b      	ldr	r2, [pc, #428]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e88:	4b69      	ldr	r3, [pc, #420]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4a65      	ldr	r2, [pc, #404]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea0:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eac:	2301      	movs	r3, #1
 8002eae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	485d      	ldr	r0, [pc, #372]	; (8003034 <HAL_ADC_MspInit+0x24c>)
 8002ec0:	f002 fef6 	bl	8005cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eda:	f002 fee9 	bl	8005cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4851      	ldr	r0, [pc, #324]	; (8003038 <HAL_ADC_MspInit+0x250>)
 8002ef2:	f002 fedd 	bl	8005cb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002ef6:	4b51      	ldr	r3, [pc, #324]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002ef8:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_ADC_MspInit+0x258>)
 8002efa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002efc:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002efe:	2205      	movs	r2, #5
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f14:	4b49      	ldr	r3, [pc, #292]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f1c:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002f24:	4b45      	ldr	r3, [pc, #276]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f30:	4842      	ldr	r0, [pc, #264]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f32:	f002 f919 	bl	8005168 <HAL_DMA_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8002f3c:	f7ff ff2a 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3e      	ldr	r2, [pc, #248]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
 8002f46:	4a3d      	ldr	r2, [pc, #244]	; (800303c <HAL_ADC_MspInit+0x254>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2012      	movs	r0, #18
 8002f52:	f002 f8d4 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f56:	2012      	movs	r0, #18
 8002f58:	f002 f8eb 	bl	8005132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f5c:	e062      	b.n	8003024 <HAL_ADC_MspInit+0x23c>
  else if(hadc->Instance==ADC2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a38      	ldr	r2, [pc, #224]	; (8003044 <HAL_ADC_MspInit+0x25c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d15d      	bne.n	8003024 <HAL_ADC_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f005 fb81 	bl	8008680 <HAL_RCCEx_PeriphCLKConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8002f84:	f7ff ff06 	bl	8002d94 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002f90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_ADC_MspInit+0x244>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10b      	bne.n	8002fb2 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_ADC_MspInit+0x248>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480f      	ldr	r0, [pc, #60]	; (8003034 <HAL_ADC_MspInit+0x24c>)
 8002ff6:	f002 fe5b 	bl	8005cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ffa:	23f0      	movs	r3, #240	; 0xf0
 8002ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ffe:	2303      	movs	r3, #3
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003006:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800300a:	4619      	mov	r1, r3
 800300c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003010:	f002 fe4e 	bl	8005cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003014:	2200      	movs	r2, #0
 8003016:	2100      	movs	r1, #0
 8003018:	2012      	movs	r0, #18
 800301a:	f002 f870 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800301e:	2012      	movs	r0, #18
 8003020:	f002 f887 	bl	8005132 <HAL_NVIC_EnableIRQ>
}
 8003024:	bf00      	nop
 8003026:	3780      	adds	r7, #128	; 0x80
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000434 	.word	0x20000434
 8003030:	40021000 	.word	0x40021000
 8003034:	48001400 	.word	0x48001400
 8003038:	48000400 	.word	0x48000400
 800303c:	200008b8 	.word	0x200008b8
 8003040:	40020008 	.word	0x40020008
 8003044:	50000100 	.word	0x50000100

08003048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003058:	d114      	bne.n	8003084 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6593      	str	r3, [r2, #88]	; 0x58
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	201c      	movs	r0, #28
 8003078:	f002 f841 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800307c:	201c      	movs	r0, #28
 800307e:	f002 f858 	bl	8005132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003082:	e02a      	b.n	80030da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_TIM_Base_MspInit+0xa0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d114      	bne.n	80030b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	201e      	movs	r0, #30
 80030ac:	f002 f827 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030b0:	201e      	movs	r0, #30
 80030b2:	f002 f83e 	bl	8005132 <HAL_NVIC_EnableIRQ>
}
 80030b6:	e010      	b.n	80030da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <HAL_TIM_Base_MspInit+0xa4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10b      	bne.n	80030da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	6593      	str	r3, [r2, #88]	; 0x58
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_TIM_Base_MspInit+0x9c>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40001000 	.word	0x40001000

080030f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b09a      	sub	sp, #104	; 0x68
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	2244      	movs	r2, #68	; 0x44
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f00c feb7 	bl	800fe84 <memset>
  if(huart->Instance==USART2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_UART_MspInit+0xb8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d13e      	bne.n	800319e <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003120:	2302      	movs	r3, #2
 8003122:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f005 faa7 	bl	8008680 <HAL_RCCEx_PeriphCLKConfig>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003138:	f7ff fe2c 	bl	8002d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_UART_MspInit+0xbc>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <HAL_UART_MspInit+0xbc>)
 8003142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_UART_MspInit+0xbc>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_UART_MspInit+0xbc>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_UART_MspInit+0xbc>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_UART_MspInit+0xbc>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800316c:	230c      	movs	r3, #12
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800317c:	2307      	movs	r3, #7
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318a:	f002 fd91 	bl	8005cb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2026      	movs	r0, #38	; 0x26
 8003194:	f001 ffb3 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003198:	2026      	movs	r0, #38	; 0x26
 800319a:	f001 ffca 	bl	8005132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	3768      	adds	r7, #104	; 0x68
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40021000 	.word	0x40021000

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <NMI_Handler+0x4>

080031b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <MemManage_Handler+0x4>

080031c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <UsageFault_Handler+0x4>

080031ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f90a 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <DMA1_Channel1_IRQHandler+0x10>)
 800320a:	f002 f990 	bl	800552e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200008b8 	.word	0x200008b8

08003218 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800321c:	4803      	ldr	r0, [pc, #12]	; (800322c <ADC1_2_IRQHandler+0x14>)
 800321e:	f000 fdc3 	bl	8003da8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003222:	4803      	ldr	r0, [pc, #12]	; (8003230 <ADC1_2_IRQHandler+0x18>)
 8003224:	f000 fdc0 	bl	8003da8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000848 	.word	0x20000848
 8003230:	200006d8 	.word	0x200006d8

08003234 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <USB_LP_IRQHandler+0x10>)
 800323a:	f003 f80c 	bl	8006256 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20001da8 	.word	0x20001da8

08003248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <TIM2_IRQHandler+0x10>)
 800324e:	f005 fcc9 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000c40 	.word	0x20000c40

0800325c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <TIM4_IRQHandler+0x10>)
 8003262:	f005 fcbf 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000688 	.word	0x20000688

08003270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <USART2_IRQHandler+0x10>)
 8003276:	f006 fb39 	bl	80098ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000c8c 	.word	0x20000c8c

08003284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <_sbrk+0x5c>)
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <_sbrk+0x60>)
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <_sbrk+0x64>)
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <_sbrk+0x68>)
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b4:	f00c fdbc 	bl	800fe30 <__errno>
 80032b8:	4603      	mov	r3, r0
 80032ba:	220c      	movs	r2, #12
 80032bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e009      	b.n	80032d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <_sbrk+0x64>)
 80032d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20008000 	.word	0x20008000
 80032e4:	00000400 	.word	0x00000400
 80032e8:	20000438 	.word	0x20000438
 80032ec:	200020b0 	.word	0x200020b0

080032f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <SystemInit+0x28>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <SystemInit+0x28>)
 80032fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SystemInit+0x28>)
 8003306:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800330a:	609a      	str	r2, [r3, #8]
#endif
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <LoopForever+0x6>)
  ldr r1, =_edata
 8003322:	490e      	ldr	r1, [pc, #56]	; (800335c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <LoopForever+0xe>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003338:	4c0b      	ldr	r4, [pc, #44]	; (8003368 <LoopForever+0x16>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003346:	f7ff ffd3 	bl	80032f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334a:	f00c fd77 	bl	800fe3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800334e:	f7fd fe2d 	bl	8000fac <main>

08003352 <LoopForever>:

LoopForever:
    b LoopForever
 8003352:	e7fe      	b.n	8003352 <LoopForever>
  ldr   r0, =_estack
 8003354:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 8003360:	08010cc8 	.word	0x08010cc8
  ldr r2, =_sbss
 8003364:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8003368:	200020ac 	.word	0x200020ac

0800336c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800336c:	e7fe      	b.n	800336c <COMP1_2_3_IRQHandler>

0800336e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003378:	2003      	movs	r0, #3
 800337a:	f001 feb5 	bl	80050e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800337e:	2000      	movs	r0, #0
 8003380:	f000 f80e 	bl	80033a0 <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	71fb      	strb	r3, [r7, #7]
 800338e:	e001      	b.n	8003394 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003390:	f7ff fd06 	bl	8002da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003394:	79fb      	ldrb	r3, [r7, #7]

}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_InitTick+0x68>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_InitTick+0x6c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_InitTick+0x68>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fec0 	bl	800514e <HAL_SYSTICK_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d809      	bhi.n	80033ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033da:	2200      	movs	r2, #0
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	f04f 30ff 	mov.w	r0, #4294967295
 80033e2:	f001 fe8c 	bl	80050fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_InitTick+0x70>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e007      	b.n	80033fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e004      	b.n	80033fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000019c 	.word	0x2000019c
 800340c:	20000194 	.word	0x20000194
 8003410:	20000198 	.word	0x20000198

08003414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_IncTick+0x1c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x20>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_IncTick+0x1c>)
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20001104 	.word	0x20001104
 8003434:	2000019c 	.word	0x2000019c

08003438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_GetTick+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20001104 	.word	0x20001104

08003450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff ffee 	bl	8003438 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d004      	beq.n	8003474 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_Delay+0x40>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003474:	bf00      	nop
 8003476:	f7ff ffdf 	bl	8003438 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	429a      	cmp	r2, r3
 8003484:	d8f7      	bhi.n	8003476 <HAL_Delay+0x26>
  {
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000019c 	.word	0x2000019c

08003494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3360      	adds	r3, #96	; 0x60
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <LL_ADC_SetOffset+0x44>)
 800351e:	4013      	ands	r3, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	4313      	orrs	r3, r2
 800352c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	03fff000 	.word	0x03fff000

08003544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3360      	adds	r3, #96	; 0x60
 8003552:	461a      	mov	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3360      	adds	r3, #96	; 0x60
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b087      	sub	sp, #28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3360      	adds	r3, #96	; 0x60
 80035b6:	461a      	mov	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3360      	adds	r3, #96	; 0x60
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	431a      	orrs	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	615a      	str	r2, [r3, #20]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800365e:	b480      	push	{r7}
 8003660:	b087      	sub	sp, #28
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3330      	adds	r3, #48	; 0x30
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	211f      	movs	r1, #31
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	f003 011f 	and.w	r1, r3, #31
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	431a      	orrs	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3314      	adds	r3, #20
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0e5b      	lsrs	r3, r3, #25
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	4413      	add	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	0d1b      	lsrs	r3, r3, #20
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2107      	movs	r1, #7
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	401a      	ands	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0d1b      	lsrs	r3, r3, #20
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	431a      	orrs	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10a      	bne.n	800375e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800375c:	e00a      	b.n	8003774 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	43db      	mvns	r3, r3
 800376c:	401a      	ands	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	407f0000 	.word	0x407f0000

08003784 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 031f 	and.w	r3, r3, #31
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6093      	str	r3, [r2, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037f4:	d101      	bne.n	80037fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800381c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003844:	d101      	bne.n	800384a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <LL_ADC_IsEnabled+0x18>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <LL_ADC_IsEnabled+0x1a>
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ba:	f043 0204 	orr.w	r2, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d101      	bne.n	80038e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d101      	bne.n	800390c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e16d      	b.n	8003c12 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fa4f 	bl	8002de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff3f 	bl	80037e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff25 	bl	80037bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff5a 	bl	8003830 <LL_ADC_IsInternalRegulatorEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d115      	bne.n	80039ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff3e 	bl	8003808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800398c:	4ba3      	ldr	r3, [pc, #652]	; (8003c1c <HAL_ADC_Init+0x300>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	4aa3      	ldr	r2, [pc, #652]	; (8003c20 <HAL_ADC_Init+0x304>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a0:	e002      	b.n	80039a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f9      	bne.n	80039a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff3c 	bl	8003830 <LL_ADC_IsInternalRegulatorEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c2:	f043 0210 	orr.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff75 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 80039e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8106 	bne.w	8003c00 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 8102 	bne.w	8003c00 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a04:	f043 0202 	orr.w	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff35 	bl	8003880 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d111      	bne.n	8003a40 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a20:	f7ff ff2e 	bl	8003880 <LL_ADC_IsEnabled>
 8003a24:	4604      	mov	r4, r0
 8003a26:	487f      	ldr	r0, [pc, #508]	; (8003c24 <HAL_ADC_Init+0x308>)
 8003a28:	f7ff ff2a 	bl	8003880 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4323      	orrs	r3, r4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	487b      	ldr	r0, [pc, #492]	; (8003c28 <HAL_ADC_Init+0x30c>)
 8003a3c:	f7ff fd2a 	bl	8003494 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7f5b      	ldrb	r3, [r3, #29]
 8003a44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d106      	bne.n	8003a7c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	3b01      	subs	r3, #1
 8003a74:	045b      	lsls	r3, r3, #17
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_ADC_Init+0x310>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff01 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 8003acc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff0e 	bl	80038f4 <LL_ADC_INJ_IsConversionOngoing>
 8003ad8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d16d      	bne.n	8003bbc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d16a      	bne.n	8003bbc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b02:	f023 0302 	bic.w	r3, r3, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d017      	beq.n	8003b48 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6911      	ldr	r1, [r2, #16]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b46:	e013      	b.n	8003b70 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d118      	bne.n	8003bac <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b90:	4311      	orrs	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	e007      	b.n	8003bbc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10c      	bne.n	8003bde <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f023 010f 	bic.w	r1, r3, #15
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	1e5a      	subs	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
 8003bdc:	e007      	b.n	8003bee <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 020f 	bic.w	r2, r2, #15
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bfe:	e007      	b.n	8003c10 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f043 0210 	orr.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000194 	.word	0x20000194
 8003c20:	053e2d63 	.word	0x053e2d63
 8003c24:	50000100 	.word	0x50000100
 8003c28:	50000300 	.word	0x50000300
 8003c2c:	fff04007 	.word	0xfff04007

08003c30 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c38:	4859      	ldr	r0, [pc, #356]	; (8003da0 <HAL_ADC_Start+0x170>)
 8003c3a:	f7ff fda3 	bl	8003784 <LL_ADC_GetMultimode>
 8003c3e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fe42 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f040 809f 	bne.w	8003d90 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_Start+0x30>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e09a      	b.n	8003d96 <HAL_ADC_Start+0x166>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fec5 	bl	80049f8 <ADC_Enable>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f040 8086 	bne.w	8003d86 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a44      	ldr	r2, [pc, #272]	; (8003da4 <HAL_ADC_Start+0x174>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d002      	beq.n	8003c9e <HAL_ADC_Start+0x6e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e001      	b.n	8003ca2 <HAL_ADC_Start+0x72>
 8003c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d002      	beq.n	8003cb0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d106      	bne.n	8003cd8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cce:	f023 0206 	bic.w	r2, r3, #6
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8003cd6:	e002      	b.n	8003cde <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	221c      	movs	r2, #28
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <HAL_ADC_Start+0x174>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d002      	beq.n	8003cfe <HAL_ADC_Start+0xce>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	e001      	b.n	8003d02 <HAL_ADC_Start+0xd2>
 8003cfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d008      	beq.n	8003d1c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d002      	beq.n	8003d1c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d114      	bne.n	8003d46 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fdb1 	bl	80038a6 <LL_ADC_REG_StartConversion>
 8003d44:	e026      	b.n	8003d94 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <HAL_ADC_Start+0x174>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d002      	beq.n	8003d62 <HAL_ADC_Start+0x132>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	e001      	b.n	8003d66 <HAL_ADC_Start+0x136>
 8003d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d66:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00f      	beq.n	8003d94 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d84:	e006      	b.n	8003d94 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d8e:	e001      	b.n	8003d94 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
 8003d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	50000300 	.word	0x50000300
 8003da4:	50000100 	.word	0x50000100

08003da8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003db0:	2300      	movs	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc4:	4883      	ldr	r0, [pc, #524]	; (8003fd4 <HAL_ADC_IRQHandler+0x22c>)
 8003dc6:	f7ff fcdd 	bl	8003784 <LL_ADC_GetMultimode>
 8003dca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d017      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x5e>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fff7 	bl	8004dec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2202      	movs	r2, #2
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <HAL_ADC_IRQHandler+0x72>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8085 	beq.w	8003f30 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d07f      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fbf3 	bl	8003638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d064      	beq.n	8003f22 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a5e      	ldr	r2, [pc, #376]	; (8003fd8 <HAL_ADC_IRQHandler+0x230>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d002      	beq.n	8003e68 <HAL_ADC_IRQHandler+0xc0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e001      	b.n	8003e6c <HAL_ADC_IRQHandler+0xc4>
 8003e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d008      	beq.n	8003e86 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d002      	beq.n	8003e86 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b09      	cmp	r3, #9
 8003e84:	d104      	bne.n	8003e90 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	e00d      	b.n	8003eac <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a50      	ldr	r2, [pc, #320]	; (8003fd8 <HAL_ADC_IRQHandler+0x230>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d002      	beq.n	8003ea0 <HAL_ADC_IRQHandler+0xf8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	e001      	b.n	8003ea4 <HAL_ADC_IRQHandler+0xfc>
 8003ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ea4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d135      	bne.n	8003f22 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d12e      	bne.n	8003f22 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fd00 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11a      	bne.n	8003f0a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 020c 	bic.w	r2, r2, #12
 8003ee2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d112      	bne.n	8003f22 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f08:	e00b      	b.n	8003f22 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	f043 0210 	orr.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc ff8c 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x19c>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 809e 	beq.w	800408c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8098 	beq.w	800408c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fb9c 	bl	80036b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f7e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fb57 	bl	8003638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f8a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_ADC_IRQHandler+0x230>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d002      	beq.n	8003f9c <HAL_ADC_IRQHandler+0x1f4>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	e001      	b.n	8003fa0 <HAL_ADC_IRQHandler+0x1f8>
 8003f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d008      	beq.n	8003fba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d002      	beq.n	8003fba <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b07      	cmp	r3, #7
 8003fb8:	d104      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	e011      	b.n	8003fe8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <HAL_ADC_IRQHandler+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d006      	beq.n	8003fdc <HAL_ADC_IRQHandler+0x234>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	e005      	b.n	8003fe0 <HAL_ADC_IRQHandler+0x238>
 8003fd4:	50000300 	.word	0x50000300
 8003fd8:	50000100 	.word	0x50000100
 8003fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fe0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d047      	beq.n	800407e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_ADC_IRQHandler+0x260>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d03f      	beq.n	800407e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d13a      	bne.n	800407e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d133      	bne.n	800407e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d12e      	bne.n	800407e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fc65 	bl	80038f4 <LL_ADC_INJ_IsConversionOngoing>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11a      	bne.n	8004066 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800403e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d112      	bne.n	800407e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
 8004064:	e00b      	b.n	800407e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	f043 0210 	orr.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fe8c 	bl	8004d9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2260      	movs	r2, #96	; 0x60
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_ADC_IRQHandler+0x312>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00c      	beq.n	80040ba <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f89f 	bl	80041f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_ADC_IRQHandler+0x342>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fe72 	bl	8004dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <HAL_ADC_IRQHandler+0x372>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fe64 	bl	8004dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d036      	beq.n	8004192 <HAL_ADC_IRQHandler+0x3ea>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d031      	beq.n	8004192 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004136:	2301      	movs	r3, #1
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e014      	b.n	8004166 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004142:	4825      	ldr	r0, [pc, #148]	; (80041d8 <HAL_ADC_IRQHandler+0x430>)
 8004144:	f7ff fb2c 	bl	80037a0 <LL_ADC_GetMultiDMATransfer>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e008      	b.n	8004166 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004162:	2301      	movs	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10e      	bne.n	800418a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f83d 	bl	8004204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <HAL_ADC_IRQHandler+0x426>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	f043 0208 	orr.w	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fdf1 	bl	8004db0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80041ce:	bf00      	nop
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	50000300 	.word	0x50000300

080041dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b0b6      	sub	sp, #216	; 0xd8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x22>
 8004236:	2302      	movs	r3, #2
 8004238:	e3c8      	b.n	80049cc <HAL_ADC_ConfigChannel+0x7b4>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fb41 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 83ad 	bne.w	80049ae <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	f7ff f9fc 	bl	800365e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fb2f 	bl	80038ce <LL_ADC_REG_IsConversionOngoing>
 8004270:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb3b 	bl	80038f4 <LL_ADC_INJ_IsConversionOngoing>
 800427e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 81d9 	bne.w	800463e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800428c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 81d4 	bne.w	800463e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429e:	d10f      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7ff fa16 	bl	80036dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff f9aa 	bl	8003612 <LL_ADC_SetSamplingTimeCommonConfig>
 80042be:	e00e      	b.n	80042de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f7ff fa05 	bl	80036dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f99a 	bl	8003612 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d022      	beq.n	8004346 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6919      	ldr	r1, [r3, #16]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004310:	f7ff f8f4 	bl	80034fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6919      	ldr	r1, [r3, #16]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	461a      	mov	r2, r3
 8004322:	f7ff f940 	bl	80035a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6919      	ldr	r1, [r3, #16]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7f1b      	ldrb	r3, [r3, #28]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_ADC_ConfigChannel+0x124>
 8004336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433a:	e000      	b.n	800433e <HAL_ADC_ConfigChannel+0x126>
 800433c:	2300      	movs	r3, #0
 800433e:	461a      	mov	r2, r3
 8004340:	f7ff f94c 	bl	80035dc <LL_ADC_SetOffsetSaturation>
 8004344:	e17b      	b.n	800463e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f8f9 	bl	8003544 <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x15a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f8ee 	bl	8003544 <LL_ADC_GetOffsetChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	e01e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x198>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff f8e3 	bl	8003544 <LL_ADC_GetOffsetChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80043a0:	2320      	movs	r3, #32
 80043a2:	e004      	b.n	80043ae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80043a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x1b0>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	e018      	b.n	80043fa <HAL_ADC_ConfigChannel+0x1e2>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e004      	b.n	80043fa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80043f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043f4:	fab3 f383 	clz	r3, r3
 80043f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d106      	bne.n	800440c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff f8b2 	bl	8003570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff f896 	bl	8003544 <LL_ADC_GetOffsetChannel>
 8004418:	4603      	mov	r3, r0
 800441a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x220>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff f88b 	bl	8003544 <LL_ADC_GetOffsetChannel>
 800442e:	4603      	mov	r3, r0
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	f003 021f 	and.w	r2, r3, #31
 8004436:	e01e      	b.n	8004476 <HAL_ADC_ConfigChannel+0x25e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f880 	bl	8003544 <LL_ADC_GetOffsetChannel>
 8004444:	4603      	mov	r3, r0
 8004446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800445a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800445e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004466:	2320      	movs	r3, #32
 8004468:	e004      	b.n	8004474 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800446a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_ADC_ConfigChannel+0x276>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0e9b      	lsrs	r3, r3, #26
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	e018      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x2a8>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80044a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80044aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e004      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80044b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d106      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f84f 	bl	8003570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f833 	bl	8003544 <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x2e6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f828 	bl	8003544 <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	e01e      	b.n	800453c <HAL_ADC_ConfigChannel+0x324>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2102      	movs	r1, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f81d 	bl	8003544 <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800451c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004520:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e004      	b.n	800453a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x33c>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	e016      	b.n	8004582 <HAL_ADC_ConfigChannel+0x36a>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004566:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800456c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e004      	b.n	8004582 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004582:	429a      	cmp	r2, r3
 8004584:	d106      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	2102      	movs	r1, #2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe ffee 	bl	8003570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2103      	movs	r1, #3
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe ffd2 	bl	8003544 <LL_ADC_GetOffsetChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x3a8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2103      	movs	r1, #3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe ffc7 	bl	8003544 <LL_ADC_GetOffsetChannel>
 80045b6:	4603      	mov	r3, r0
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	e017      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x3d8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2103      	movs	r1, #3
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe ffbc 	bl	8003544 <LL_ADC_GetOffsetChannel>
 80045cc:	4603      	mov	r3, r0
 80045ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045da:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80045e2:	2320      	movs	r3, #32
 80045e4:	e003      	b.n	80045ee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80045e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x3f0>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	e011      	b.n	800462c <HAL_ADC_ConfigChannel+0x414>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004618:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004620:	2320      	movs	r3, #32
 8004622:	e003      	b.n	800462c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800462c:	429a      	cmp	r2, r3
 800462e:	d106      	bne.n	800463e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	2103      	movs	r1, #3
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe ff99 	bl	8003570 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f91c 	bl	8003880 <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 8140 	bne.w	80048d0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	461a      	mov	r2, r3
 800465e:	f7ff f869 	bl	8003734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a8f      	ldr	r2, [pc, #572]	; (80048a4 <HAL_ADC_ConfigChannel+0x68c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	f040 8131 	bne.w	80048d0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x47e>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0e9b      	lsrs	r3, r3, #26
 8004684:	3301      	adds	r3, #1
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2b09      	cmp	r3, #9
 800468c:	bf94      	ite	ls
 800468e:	2301      	movls	r3, #1
 8004690:	2300      	movhi	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e019      	b.n	80046ca <HAL_ADC_ConfigChannel+0x4b2>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80046a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80046a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e003      	b.n	80046ba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80046b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	bf94      	ite	ls
 80046c4:	2301      	movls	r3, #1
 80046c6:	2300      	movhi	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d079      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x4d2>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	0e9b      	lsrs	r3, r3, #26
 80046e0:	3301      	adds	r3, #1
 80046e2:	069b      	lsls	r3, r3, #26
 80046e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e8:	e015      	b.n	8004716 <HAL_ADC_ConfigChannel+0x4fe>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80046fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004702:	2320      	movs	r3, #32
 8004704:	e003      	b.n	800470e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004708:	fab3 f383 	clz	r3, r3
 800470c:	b2db      	uxtb	r3, r3
 800470e:	3301      	adds	r3, #1
 8004710:	069b      	lsls	r3, r3, #26
 8004712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x51e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0e9b      	lsrs	r3, r3, #26
 8004728:	3301      	adds	r3, #1
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f303 	lsl.w	r3, r1, r3
 8004734:	e017      	b.n	8004766 <HAL_ADC_ConfigChannel+0x54e>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800474e:	2320      	movs	r3, #32
 8004750:	e003      	b.n	800475a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	ea42 0103 	orr.w	r1, r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_ADC_ConfigChannel+0x574>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	3301      	adds	r3, #1
 800477e:	f003 021f 	and.w	r2, r3, #31
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	051b      	lsls	r3, r3, #20
 800478a:	e018      	b.n	80047be <HAL_ADC_ConfigChannel+0x5a6>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e003      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 021f 	and.w	r2, r3, #31
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047be:	430b      	orrs	r3, r1
 80047c0:	e081      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_ADC_ConfigChannel+0x5c6>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0e9b      	lsrs	r3, r3, #26
 80047d4:	3301      	adds	r3, #1
 80047d6:	069b      	lsls	r3, r3, #26
 80047d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047dc:	e015      	b.n	800480a <HAL_ADC_ConfigChannel+0x5f2>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80047f6:	2320      	movs	r3, #32
 80047f8:	e003      	b.n	8004802 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	fab3 f383 	clz	r3, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	3301      	adds	r3, #1
 8004804:	069b      	lsls	r3, r3, #26
 8004806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_ADC_ConfigChannel+0x612>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	3301      	adds	r3, #1
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2101      	movs	r1, #1
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	e017      	b.n	800485a <HAL_ADC_ConfigChannel+0x642>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	61fb      	str	r3, [r7, #28]
  return result;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e003      	b.n	800484e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2101      	movs	r1, #1
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	ea42 0103 	orr.w	r1, r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x66e>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	0e9b      	lsrs	r3, r3, #26
 8004870:	3301      	adds	r3, #1
 8004872:	f003 021f 	and.w	r2, r3, #31
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	3b1e      	subs	r3, #30
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004884:	e01e      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x6ac>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa93 f3a3 	rbit	r3, r3
 8004892:	613b      	str	r3, [r7, #16]
  return result;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e006      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x698>
 80048a2:	bf00      	nop
 80048a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	f003 021f 	and.w	r2, r3, #31
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	3b1e      	subs	r3, #30
 80048be:	051b      	lsls	r3, r3, #20
 80048c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c4:	430b      	orrs	r3, r1
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	4619      	mov	r1, r3
 80048cc:	f7fe ff06 	bl	80036dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d071      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048dc:	483e      	ldr	r0, [pc, #248]	; (80049d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80048de:	f7fe fdff 	bl	80034e0 <LL_ADC_GetCommonPathInternalCh>
 80048e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <HAL_ADC_ConfigChannel+0x7c4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_ADC_ConfigChannel+0x6e2>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d127      	bne.n	800494a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d121      	bne.n	800494a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800490e:	d157      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004918:	4619      	mov	r1, r3
 800491a:	482f      	ldr	r0, [pc, #188]	; (80049d8 <HAL_ADC_ConfigChannel+0x7c0>)
 800491c:	f7fe fdcd 	bl	80034ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800493a:	e002      	b.n	8004942 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3b01      	subs	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f9      	bne.n	800493c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004948:	e03a      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_ADC_ConfigChannel+0x7d4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d113      	bne.n	800497c <HAL_ADC_ConfigChannel+0x764>
 8004954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10d      	bne.n	800497c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02a      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800496a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	4619      	mov	r1, r3
 8004974:	4818      	ldr	r0, [pc, #96]	; (80049d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004976:	f7fe fda0 	bl	80034ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800497a:	e021      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d11c      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800498a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d116      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d011      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800499c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049a4:	4619      	mov	r1, r3
 80049a6:	480c      	ldr	r0, [pc, #48]	; (80049d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80049a8:	f7fe fd87 	bl	80034ba <LL_ADC_SetCommonPathInternalCh>
 80049ac:	e008      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80049c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	37d8      	adds	r7, #216	; 0xd8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	80080000 	.word	0x80080000
 80049d8:	50000300 	.word	0x50000300
 80049dc:	c3210000 	.word	0xc3210000
 80049e0:	90c00010 	.word	0x90c00010
 80049e4:	20000194 	.word	0x20000194
 80049e8:	053e2d63 	.word	0x053e2d63
 80049ec:	c7520000 	.word	0xc7520000
 80049f0:	50000100 	.word	0x50000100
 80049f4:	cb840000 	.word	0xcb840000

080049f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe ff3b 	bl	8003880 <LL_ADC_IsEnabled>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d14d      	bne.n	8004aac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	4b28      	ldr	r3, [pc, #160]	; (8004ab8 <ADC_Enable+0xc0>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	f043 0210 	orr.w	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e039      	b.n	8004aae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe ff0a 	bl	8003858 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a44:	f7fe fcf8 	bl	8003438 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a4a:	e028      	b.n	8004a9e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe ff15 	bl	8003880 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fef9 	bl	8003858 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a66:	f7fe fce7 	bl	8003438 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d914      	bls.n	8004a9e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d00d      	beq.n	8004a9e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a86:	f043 0210 	orr.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d1cf      	bne.n	8004a4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	8000003f 	.word	0x8000003f

08004abc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d14b      	bne.n	8004b6e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d021      	beq.n	8004b34 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fd9f 	bl	8003638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d032      	beq.n	8004b66 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12b      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11f      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b32:	e018      	b.n	8004b66 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d111      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7fc f96a 	bl	8000e40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b6c:	e00e      	b.n	8004b8c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fb42 	bl	8004204 <HAL_ADC_ErrorCallback>
}
 8004b80:	e004      	b.n	8004b8c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fb1a 	bl	80041dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bce:	f043 0204 	orr.w	r2, r3, #4
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fb14 	bl	8004204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <LL_ADC_IsEnabled>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <LL_ADC_IsEnabled+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_ADC_IsEnabled+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_ADC_REG_StartConversion>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d101      	bne.n	8004c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b0a2      	sub	sp, #136	; 0x88
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ffe2 	bl	8004c32 <LL_ADC_REG_IsConversionOngoing>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
 8004c76:	e082      	b.n	8004d7e <HAL_ADCEx_MultiModeStart_DMA+0x126>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e07b      	b.n	8004d7e <HAL_ADCEx_MultiModeStart_DMA+0x126>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004c92:	2300      	movs	r3, #0
 8004c94:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c9e:	d102      	bne.n	8004ca6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e001      	b.n	8004caa <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e05a      	b.n	8004d7e <HAL_ADCEx_MultiModeStart_DMA+0x126>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fe95 	bl	80049f8 <ADC_Enable>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8004cd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fe89 	bl	80049f8 <ADC_Enable>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8004cec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d13e      	bne.n	8004d72 <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8004d14:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8004d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	221c      	movs	r2, #28
 8004d32:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0210 	orr.w	r2, r2, #16
 8004d4a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d54:	330c      	adds	r3, #12
 8004d56:	4619      	mov	r1, r3
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f000 faac 	bl	80052b8 <HAL_DMA_Start_IT>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff4d 	bl	8004c0a <LL_ADC_REG_StartConversion>
 8004d70:	e003      	b.n	8004d7a <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004d7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3788      	adds	r7, #136	; 0x88
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	50000100 	.word	0x50000100
 8004d8c:	08004abd 	.word	0x08004abd
 8004d90:	08004b95 	.word	0x08004b95
 8004d94:	08004bb1 	.word	0x08004bb1
 8004d98:	50000300 	.word	0x50000300

08004d9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b0a1      	sub	sp, #132	; 0x84
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e08b      	b.n	8004f36 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004e26:	2300      	movs	r3, #0
 8004e28:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e36:	d102      	bne.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e38:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	e001      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e06a      	b.n	8004f36 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fee5 	bl	8004c32 <LL_ADC_REG_IsConversionOngoing>
 8004e68:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fedf 	bl	8004c32 <LL_ADC_REG_IsConversionOngoing>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d14c      	bne.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d149      	bne.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e80:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004e82:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d028      	beq.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e9e:	035b      	lsls	r3, r3, #13
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004eac:	f7ff fe9a 	bl	8004be4 <LL_ADC_IsEnabled>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	4823      	ldr	r0, [pc, #140]	; (8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004eb4:	f7ff fe96 	bl	8004be4 <LL_ADC_IsEnabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4323      	orrs	r3, r4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d133      	bne.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ec8:	f023 030f 	bic.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	6811      	ldr	r1, [r2, #0]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eda:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004edc:	e024      	b.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004eee:	f7ff fe79 	bl	8004be4 <LL_ADC_IsEnabled>
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4812      	ldr	r0, [pc, #72]	; (8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ef6:	f7ff fe75 	bl	8004be4 <LL_ADC_IsEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4323      	orrs	r3, r4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d112      	bne.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f0a:	f023 030f 	bic.w	r3, r3, #15
 8004f0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f12:	e009      	b.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f26:	e000      	b.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3784      	adds	r7, #132	; 0x84
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd90      	pop	{r4, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	50000100 	.word	0x50000100
 8004f44:	50000300 	.word	0x50000300

08004f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f58:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f64:	4013      	ands	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <__NVIC_SetPriorityGrouping+0x44>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	60d3      	str	r3, [r2, #12]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f003 0307 	and.w	r3, r3, #7
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db0b      	blt.n	8004fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f003 021f 	and.w	r2, r3, #31
 8004fc4:	4907      	ldr	r1, [pc, #28]	; (8004fe4 <__NVIC_EnableIRQ+0x38>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2001      	movs	r0, #1
 8004fce:	fa00 f202 	lsl.w	r2, r0, r2
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	e000e100 	.word	0xe000e100

08004fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db0a      	blt.n	8005012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	490c      	ldr	r1, [pc, #48]	; (8005034 <__NVIC_SetPriority+0x4c>)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	0112      	lsls	r2, r2, #4
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	440b      	add	r3, r1
 800500c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005010:	e00a      	b.n	8005028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4908      	ldr	r1, [pc, #32]	; (8005038 <__NVIC_SetPriority+0x50>)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	3b04      	subs	r3, #4
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	440b      	add	r3, r1
 8005026:	761a      	strb	r2, [r3, #24]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000e100 	.word	0xe000e100
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f1c3 0307 	rsb	r3, r3, #7
 8005056:	2b04      	cmp	r3, #4
 8005058:	bf28      	it	cs
 800505a:	2304      	movcs	r3, #4
 800505c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3304      	adds	r3, #4
 8005062:	2b06      	cmp	r3, #6
 8005064:	d902      	bls.n	800506c <NVIC_EncodePriority+0x30>
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3b03      	subs	r3, #3
 800506a:	e000      	b.n	800506e <NVIC_EncodePriority+0x32>
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43da      	mvns	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	401a      	ands	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005084:	f04f 31ff 	mov.w	r1, #4294967295
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43d9      	mvns	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	4313      	orrs	r3, r2
         );
}
 8005096:	4618      	mov	r0, r3
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b4:	d301      	bcc.n	80050ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b6:	2301      	movs	r3, #1
 80050b8:	e00f      	b.n	80050da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ba:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <SysTick_Config+0x40>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3b01      	subs	r3, #1
 80050c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050c2:	210f      	movs	r1, #15
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	f7ff ff8e 	bl	8004fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <SysTick_Config+0x40>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050d2:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <SysTick_Config+0x40>)
 80050d4:	2207      	movs	r2, #7
 80050d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	e000e010 	.word	0xe000e010

080050e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ff29 	bl	8004f48 <__NVIC_SetPriorityGrouping>
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	4603      	mov	r3, r0
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800510c:	f7ff ff40 	bl	8004f90 <__NVIC_GetPriorityGrouping>
 8005110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff ff90 	bl	800503c <NVIC_EncodePriority>
 800511c:	4602      	mov	r2, r0
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff5f 	bl	8004fe8 <__NVIC_SetPriority>
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	4603      	mov	r3, r0
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff33 	bl	8004fac <__NVIC_EnableIRQ>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ffa4 	bl	80050a4 <SysTick_Config>
 800515c:	4603      	mov	r3, r0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e08d      	b.n	8005296 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <HAL_DMA_Init+0x138>)
 8005182:	429a      	cmp	r2, r3
 8005184:	d80f      	bhi.n	80051a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	4b45      	ldr	r3, [pc, #276]	; (80052a4 <HAL_DMA_Init+0x13c>)
 800518e:	4413      	add	r3, r2
 8005190:	4a45      	ldr	r2, [pc, #276]	; (80052a8 <HAL_DMA_Init+0x140>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a42      	ldr	r2, [pc, #264]	; (80052ac <HAL_DMA_Init+0x144>)
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
 80051a4:	e00e      	b.n	80051c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b40      	ldr	r3, [pc, #256]	; (80052b0 <HAL_DMA_Init+0x148>)
 80051ae:	4413      	add	r3, r2
 80051b0:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <HAL_DMA_Init+0x140>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <HAL_DMA_Init+0x14c>)
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa82 	bl	8005720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005224:	d102      	bne.n	800522c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005240:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d010      	beq.n	800526c <HAL_DMA_Init+0x104>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d80c      	bhi.n	800526c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 faa2 	bl	800579c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	e008      	b.n	800527e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40020407 	.word	0x40020407
 80052a4:	bffdfff8 	.word	0xbffdfff8
 80052a8:	cccccccd 	.word	0xcccccccd
 80052ac:	40020000 	.word	0x40020000
 80052b0:	bffdfbf8 	.word	0xbffdfbf8
 80052b4:	40020400 	.word	0x40020400

080052b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_DMA_Start_IT+0x20>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e066      	b.n	80053a6 <HAL_DMA_Start_IT+0xee>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d155      	bne.n	8005398 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f9c7 	bl	80056a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 020e 	orr.w	r2, r2, #14
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e00f      	b.n	8005350 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0204 	bic.w	r2, r2, #4
 800533e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 020a 	orr.w	r2, r2, #10
 800534e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005384:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e005      	b.n	80053a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
 80053a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d005      	beq.n	80053d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2204      	movs	r2, #4
 80053ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e037      	b.n	8005442 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 020e 	bic.w	r2, r2, #14
 80053e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f003 021f 	and.w	r2, r3, #31
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	2101      	movs	r1, #1
 8005410:	fa01 f202 	lsl.w	r2, r1, r2
 8005414:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800541e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005440:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d00d      	beq.n	8005494 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2204      	movs	r2, #4
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	e047      	b.n	8005524 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 020e 	bic.w	r2, r2, #14
 80054a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c8:	f003 021f 	and.w	r2, r3, #31
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f202 	lsl.w	r2, r1, r2
 80054d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005502:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
    }
  }
  return status;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2204      	movs	r2, #4
 8005550:	409a      	lsls	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d026      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x7a>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d021      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d107      	bne.n	8005582 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0204 	bic.w	r2, r2, #4
 8005580:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f003 021f 	and.w	r2, r3, #31
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2104      	movs	r1, #4
 8005590:	fa01 f202 	lsl.w	r2, r1, r2
 8005594:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	2b00      	cmp	r3, #0
 800559c:	d071      	beq.n	8005682 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055a6:	e06c      	b.n	8005682 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2202      	movs	r2, #2
 80055b2:	409a      	lsls	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02e      	beq.n	800561a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d029      	beq.n	800561a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 020a 	bic.w	r2, r2, #10
 80055e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f003 021f 	and.w	r2, r3, #31
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2102      	movs	r1, #2
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d038      	beq.n	8005682 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005618:	e033      	b.n	8005682 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2208      	movs	r2, #8
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02a      	beq.n	8005684 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d025      	beq.n	8005684 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 020e 	bic.w	r2, r2, #14
 8005646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	f003 021f 	and.w	r2, r3, #31
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f202 	lsl.w	r2, r1, r2
 800565a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005682:	bf00      	nop
 8005684:	bf00      	nop
}
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f003 021f 	and.w	r2, r3, #31
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f202 	lsl.w	r2, r1, r2
 80056e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d108      	bne.n	8005704 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005702:	e007      	b.n	8005714 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d802      	bhi.n	800573a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e001      	b.n	800573e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800573c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3b08      	subs	r3, #8
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	009a      	lsls	r2, r3, #2
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800576a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	2201      	movs	r2, #1
 8005774:	409a      	lsls	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40020407 	.word	0x40020407
 800578c:	40020800 	.word	0x40020800
 8005790:	40020820 	.word	0x40020820
 8005794:	cccccccd 	.word	0xcccccccd
 8005798:	40020880 	.word	0x40020880

0800579c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057be:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2201      	movs	r2, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	1000823f 	.word	0x1000823f
 80057e0:	40020940 	.word	0x40020940

080057e4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <HAL_FLASH_Program+0xa4>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_FLASH_Program+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e03e      	b.n	8005880 <HAL_FLASH_Program+0x9c>
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <HAL_FLASH_Program+0xa4>)
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800580c:	f000 f87c 	bl	8005908 <FLASH_WaitForLastOperation>
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12e      	bne.n	8005878 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_FLASH_Program+0xa4>)
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582a:	68b8      	ldr	r0, [r7, #8]
 800582c:	f000 f8c0 	bl	80059b0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005830:	2301      	movs	r3, #1
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	e010      	b.n	8005858 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <HAL_FLASH_Program+0x5e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d10a      	bne.n	8005858 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	4619      	mov	r1, r3
 8005846:	68b8      	ldr	r0, [r7, #8]
 8005848:	f000 f8d8 	bl	80059fc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d102      	bne.n	8005858 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005852:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005856:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800585c:	f000 f854 	bl	8005908 <FLASH_WaitForLastOperation>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <HAL_FLASH_Program+0xa8>)
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	4906      	ldr	r1, [pc, #24]	; (800588c <HAL_FLASH_Program+0xa8>)
 8005874:	4013      	ands	r3, r2
 8005876:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_FLASH_Program+0xa4>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	200001a0 	.word	0x200001a0
 800588c:	40022000 	.word	0x40022000

08005890 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_FLASH_Unlock+0x38>)
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da0b      	bge.n	80058ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <HAL_FLASH_Unlock+0x38>)
 80058a4:	4a09      	ldr	r2, [pc, #36]	; (80058cc <HAL_FLASH_Unlock+0x3c>)
 80058a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80058a8:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <HAL_FLASH_Unlock+0x38>)
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_FLASH_Unlock+0x40>)
 80058ac:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_FLASH_Unlock+0x38>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	da01      	bge.n	80058ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80058ba:	79fb      	ldrb	r3, [r7, #7]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40022000 	.word	0x40022000
 80058cc:	45670123 	.word	0x45670123
 80058d0:	cdef89ab 	.word	0xcdef89ab

080058d4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <HAL_FLASH_Lock+0x30>)
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4a08      	ldr	r2, [pc, #32]	; (8005904 <HAL_FLASH_Lock+0x30>)
 80058e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_FLASH_Lock+0x30>)
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da01      	bge.n	80058f6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80058f6:	79fb      	ldrb	r3, [r7, #7]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40022000 	.word	0x40022000

08005908 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005910:	f7fd fd92 	bl	8003438 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005916:	e009      	b.n	800592c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005918:	f7fd fd8e 	bl	8003438 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d201      	bcs.n	800592c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e038      	b.n	800599e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800592c:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d0ee      	beq.n	8005918 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005942:	4013      	ands	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800594c:	4b17      	ldr	r3, [pc, #92]	; (80059ac <FLASH_WaitForLastOperation+0xa4>)
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4313      	orrs	r3, r2
 8005954:	4a15      	ldr	r2, [pc, #84]	; (80059ac <FLASH_WaitForLastOperation+0xa4>)
 8005956:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <FLASH_WaitForLastOperation+0x6a>
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800596c:	490e      	ldr	r1, [pc, #56]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 800596e:	4313      	orrs	r3, r2
 8005970:	618b      	str	r3, [r1, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <FLASH_WaitForLastOperation+0x7e>
 800597c:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005984:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e009      	b.n	800599e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d102      	bne.n	800599c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005996:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <FLASH_WaitForLastOperation+0xa0>)
 8005998:	2201      	movs	r2, #1
 800599a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40022000 	.word	0x40022000
 80059ac:	200001a0 	.word	0x200001a0

080059b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <FLASH_Program_DoubleWord+0x48>)
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	4a0d      	ldr	r2, [pc, #52]	; (80059f8 <FLASH_Program_DoubleWord+0x48>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80059ce:	f3bf 8f6f 	isb	sy
}
 80059d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80059d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	000a      	movs	r2, r1
 80059e2:	2300      	movs	r3, #0
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	3104      	adds	r1, #4
 80059e8:	4613      	mov	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40022000 	.word	0x40022000

080059fc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a06:	2340      	movs	r3, #64	; 0x40
 8005a08:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <FLASH_Program_Fast+0x68>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <FLASH_Program_Fast+0x68>)
 8005a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005a26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a28:	b672      	cpsid	i
}
 8005a2a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	3304      	adds	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	617b      	str	r3, [r7, #20]
    row_index--;
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ef      	bne.n	8005a2c <FLASH_Program_Fast+0x30>
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005a58:	bf00      	nop
 8005a5a:	3724      	adds	r7, #36	; 0x24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40022000 	.word	0x40022000

08005a68 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_FLASHEx_Erase+0x16>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e083      	b.n	8005b86 <HAL_FLASHEx_Erase+0x11e>
 8005a7e:	4b44      	ldr	r3, [pc, #272]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a88:	f7ff ff3e 	bl	8005908 <FLASH_WaitForLastOperation>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d173      	bne.n	8005b7e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005a9c:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005aa8:	4b3a      	ldr	r3, [pc, #232]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a36      	ldr	r2, [pc, #216]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005abe:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005ac0:	4b33      	ldr	r3, [pc, #204]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	771a      	strb	r2, [r3, #28]
 8005ac6:	e016      	b.n	8005af6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005ac8:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	771a      	strb	r2, [r3, #28]
 8005ace:	e012      	b.n	8005af6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005ad0:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005ae8:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005aea:	2202      	movs	r2, #2
 8005aec:	771a      	strb	r2, [r3, #28]
 8005aee:	e002      	b.n	8005af6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005af0:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d111      	bne.n	8005b22 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f848 	bl	8005b98 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b0c:	f7ff fefc 	bl	8005908 <FLASH_WaitForLastOperation>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005b1a:	f023 0304 	bic.w	r3, r3, #4
 8005b1e:	6153      	str	r3, [r2, #20]
 8005b20:	e02b      	b.n	8005b7a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	e01b      	b.n	8005b6a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	68b8      	ldr	r0, [r7, #8]
 8005b3a:	f000 f84b 	bl	8005bd4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b42:	f7ff fee1 	bl	8005908 <FLASH_WaitForLastOperation>
 8005b46:	4603      	mov	r3, r0
 8005b48:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <HAL_FLASHEx_Erase+0x12c>)
 8005b50:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005b54:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	601a      	str	r2, [r3, #0]
          break;
 8005b62:	e00a      	b.n	8005b7a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d3db      	bcc.n	8005b32 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005b7a:	f000 f84f 	bl	8005c1c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b7e:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <HAL_FLASHEx_Erase+0x128>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]

  return status;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	200001a0 	.word	0x200001a0
 8005b94:	40022000 	.word	0x40022000

08005b98 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <FLASH_MassErase+0x38>)
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <FLASH_MassErase+0x38>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <FLASH_MassErase+0x38>)
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	4a05      	ldr	r2, [pc, #20]	; (8005bd0 <FLASH_MassErase+0x38>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6153      	str	r3, [r2, #20]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40022000 	.word	0x40022000

08005bd4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <FLASH_PageErase+0x44>)
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <FLASH_PageErase+0x44>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005bf4:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <FLASH_PageErase+0x44>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <FLASH_PageErase+0x44>)
 8005bfa:	f043 0302 	orr.w	r3, r3, #2
 8005bfe:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <FLASH_PageErase+0x44>)
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <FLASH_PageErase+0x44>)
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0a:	6153      	str	r3, [r2, #20]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40022000 	.word	0x40022000

08005c1c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <FLASH_FlushCaches+0x8c>)
 8005c24:	7f1b      	ldrb	r3, [r3, #28]
 8005c26:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d002      	beq.n	8005c34 <FLASH_FlushCaches+0x18>
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d117      	bne.n	8005c64 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c3e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4b17      	ldr	r3, [pc, #92]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c56:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c58:	4b14      	ldr	r3, [pc, #80]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c62:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d002      	beq.n	8005c70 <FLASH_FlushCaches+0x54>
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d111      	bne.n	8005c94 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c86:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a07      	ldr	r2, [pc, #28]	; (8005cac <FLASH_FlushCaches+0x90>)
 8005c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c92:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <FLASH_FlushCaches+0x8c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	200001a0 	.word	0x200001a0
 8005cac:	40022000 	.word	0x40022000

08005cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005cbe:	e15a      	b.n	8005f76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 814c 	beq.w	8005f70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d005      	beq.n	8005cf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d130      	bne.n	8005d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d26:	2201      	movs	r2, #1
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4013      	ands	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0201 	and.w	r2, r3, #1
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d017      	beq.n	8005d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d123      	bne.n	8005de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3208      	adds	r2, #8
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	08da      	lsrs	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3208      	adds	r2, #8
 8005ddc:	6939      	ldr	r1, [r7, #16]
 8005dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	2203      	movs	r2, #3
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80a6 	beq.w	8005f70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e24:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	4a5a      	ldr	r2, [pc, #360]	; (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6613      	str	r3, [r2, #96]	; 0x60
 8005e30:	4b58      	ldr	r3, [pc, #352]	; (8005f94 <HAL_GPIO_Init+0x2e4>)
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e3c:	4a56      	ldr	r2, [pc, #344]	; (8005f98 <HAL_GPIO_Init+0x2e8>)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	3302      	adds	r3, #2
 8005e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	220f      	movs	r2, #15
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e66:	d01f      	beq.n	8005ea8 <HAL_GPIO_Init+0x1f8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a4c      	ldr	r2, [pc, #304]	; (8005f9c <HAL_GPIO_Init+0x2ec>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d019      	beq.n	8005ea4 <HAL_GPIO_Init+0x1f4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a4b      	ldr	r2, [pc, #300]	; (8005fa0 <HAL_GPIO_Init+0x2f0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_GPIO_Init+0x1f0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	; (8005fa4 <HAL_GPIO_Init+0x2f4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00d      	beq.n	8005e9c <HAL_GPIO_Init+0x1ec>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a49      	ldr	r2, [pc, #292]	; (8005fa8 <HAL_GPIO_Init+0x2f8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d007      	beq.n	8005e98 <HAL_GPIO_Init+0x1e8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a48      	ldr	r2, [pc, #288]	; (8005fac <HAL_GPIO_Init+0x2fc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_GPIO_Init+0x1e4>
 8005e90:	2305      	movs	r3, #5
 8005e92:	e00a      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e94:	2306      	movs	r3, #6
 8005e96:	e008      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e006      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e004      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e002      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_GPIO_Init+0x1fa>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	f002 0203 	and.w	r2, r2, #3
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4093      	lsls	r3, r2
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eba:	4937      	ldr	r1, [pc, #220]	; (8005f98 <HAL_GPIO_Init+0x2e8>)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ec8:	4b39      	ldr	r3, [pc, #228]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005eec:	4a30      	ldr	r2, [pc, #192]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4013      	ands	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f16:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f40:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4013      	ands	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <HAL_GPIO_Init+0x300>)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3301      	adds	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f ae9d 	bne.w	8005cc0 <HAL_GPIO_Init+0x10>
  }
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40021000 	.word	0x40021000
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	48000400 	.word	0x48000400
 8005fa0:	48000800 	.word	0x48000800
 8005fa4:	48000c00 	.word	0x48000c00
 8005fa8:	48001000 	.word	0x48001000
 8005fac:	48001400 	.word	0x48001400
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
 8005fd0:	e001      	b.n	8005fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006000:	e002      	b.n	8006008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006026:	887a      	ldrh	r2, [r7, #2]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4013      	ands	r3, r2
 800602c:	041a      	lsls	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	43d9      	mvns	r1, r3
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	400b      	ands	r3, r1
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	619a      	str	r2, [r3, #24]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604a:	b08b      	sub	sp, #44	; 0x2c
 800604c:	af06      	add	r7, sp, #24
 800604e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0d7      	b.n	800620a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f009 fbd8 	bl	800f824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2203      	movs	r2, #3
 8006078:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f005 fb24 	bl	800b6ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	e04c      	b.n	8006126 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	440b      	add	r3, r1
 800609c:	3301      	adds	r3, #1
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	440b      	add	r3, r1
 80060b2:	7bfa      	ldrb	r2, [r7, #15]
 80060b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	b298      	uxth	r0, r3
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	440b      	add	r3, r1
 80060c8:	3336      	adds	r3, #54	; 0x36
 80060ca:	4602      	mov	r2, r0
 80060cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	440b      	add	r3, r1
 80060de:	3303      	adds	r3, #3
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060e4:	7bfa      	ldrb	r2, [r7, #15]
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3338      	adds	r3, #56	; 0x38
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060f8:	7bfa      	ldrb	r2, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	333c      	adds	r3, #60	; 0x3c
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	440b      	add	r3, r1
 800611a:	3340      	adds	r3, #64	; 0x40
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	3301      	adds	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d3ad      	bcc.n	800608c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e044      	b.n	80061c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006136:	7bfa      	ldrb	r2, [r7, #15]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	440b      	add	r3, r1
 8006144:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800614c:	7bfa      	ldrb	r2, [r7, #15]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	440b      	add	r3, r1
 800615a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800615e:	7bfa      	ldrb	r2, [r7, #15]
 8006160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	440b      	add	r3, r1
 8006170:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006178:	7bfa      	ldrb	r2, [r7, #15]
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	440b      	add	r3, r1
 8006186:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800618e:	7bfa      	ldrb	r2, [r7, #15]
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	440b      	add	r3, r1
 800619c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061a4:	7bfa      	ldrb	r2, [r7, #15]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	440b      	add	r3, r1
 80061b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80061b6:	2200      	movs	r2, #0
 80061b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	3301      	adds	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d3b5      	bcc.n	8006136 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	687e      	ldr	r6, [r7, #4]
 80061d2:	466d      	mov	r5, sp
 80061d4:	f106 0410 	add.w	r4, r6, #16
 80061d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	1d33      	adds	r3, r6, #4
 80061e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061e4:	6838      	ldr	r0, [r7, #0]
 80061e6:	f005 fa8d 	bl	800b704 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d102      	bne.n	8006208 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fc29 	bl	8007a5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006212 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_PCD_Start+0x16>
 8006224:	2302      	movs	r3, #2
 8006226:	e012      	b.n	800624e <HAL_PCD_Start+0x3c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f005 fa33 	bl	800b6a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f007 f9e8 	bl	800d614 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f007 f9ed 	bl	800d642 <USB_ReadInterrupts>
 8006268:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb26 	bl	80068c6 <PCD_EP_ISR_Handler>

    return;
 800627a:	e110      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006282:	2b00      	cmp	r3, #0
 8006284:	d013      	beq.n	80062ae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800628e:	b29a      	uxth	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006298:	b292      	uxth	r2, r2
 800629a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f009 fb51 	bl	800f946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8fc 	bl	80064a4 <HAL_PCD_SetAddress>

    return;
 80062ac:	e0f7      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062ca:	b292      	uxth	r2, r2
 80062cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062d0:	e0e5      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ee:	b292      	uxth	r2, r2
 80062f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062f4:	e0d3      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d034      	beq.n	800636a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0204 	bic.w	r2, r2, #4
 8006312:	b292      	uxth	r2, r2
 8006314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0208 	bic.w	r2, r2, #8
 800632a:	b292      	uxth	r2, r2
 800632c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006342:	2100      	movs	r1, #0
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f009 fcf3 	bl	800fd30 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f009 fb34 	bl	800f9b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006362:	b292      	uxth	r2, r2
 8006364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006368:	e099      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006370:	2b00      	cmp	r3, #0
 8006372:	d027      	beq.n	80063c4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800637c:	b29a      	uxth	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0208 	orr.w	r2, r2, #8
 8006386:	b292      	uxth	r2, r2
 8006388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639e:	b292      	uxth	r2, r2
 80063a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0204 	orr.w	r2, r2, #4
 80063b6:	b292      	uxth	r2, r2
 80063b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f009 fae1 	bl	800f984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80063c2:	e06c      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d040      	beq.n	8006450 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e0:	b292      	uxth	r2, r2
 80063e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d12b      	bne.n	8006448 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0204 	orr.w	r2, r2, #4
 8006402:	b292      	uxth	r2, r2
 8006404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006410:	b29a      	uxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0208 	orr.w	r2, r2, #8
 800641a:	b292      	uxth	r2, r2
 800641c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006430:	b29b      	uxth	r3, r3
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800643e:	2101      	movs	r1, #1
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f009 fc75 	bl	800fd30 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006446:	e02a      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f009 fa9b 	bl	800f984 <HAL_PCD_SuspendCallback>
    return;
 800644e:	e026      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800646c:	b292      	uxth	r2, r2
 800646e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f009 fa59 	bl	800f92a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006478:	e011      	b.n	800649e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800648c:	b29a      	uxth	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006496:	b292      	uxth	r2, r2
 8006498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800649c:	bf00      	nop
  }
}
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_PCD_SetAddress+0x1a>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e013      	b.n	80064e6 <HAL_PCD_SetAddress+0x42>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f007 f888 	bl	800d5ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	4608      	mov	r0, r1
 80064f8:	4611      	mov	r1, r2
 80064fa:	461a      	mov	r2, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	70fb      	strb	r3, [r7, #3]
 8006500:	460b      	mov	r3, r1
 8006502:	803b      	strh	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800650c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da0e      	bge.n	8006532 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	4413      	add	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	705a      	strb	r2, [r3, #1]
 8006530:	e00e      	b.n	8006550 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 0207 	and.w	r2, r3, #7
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b2da      	uxtb	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800655c:	883a      	ldrh	r2, [r7, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	78ba      	ldrb	r2, [r7, #2]
 8006566:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800657a:	78bb      	ldrb	r3, [r7, #2]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d102      	bne.n	8006586 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_PCD_EP_Open+0xa6>
 8006590:	2302      	movs	r3, #2
 8006592:	e00e      	b.n	80065b2 <HAL_PCD_EP_Open+0xc4>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f005 f8d0 	bl	800b748 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da0e      	bge.n	80065ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	705a      	strb	r2, [r3, #1]
 80065ea:	e00e      	b.n	800660a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	f003 0207 	and.w	r2, r3, #7
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	b2da      	uxtb	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_PCD_EP_Close+0x6a>
 8006620:	2302      	movs	r3, #2
 8006622:	e00e      	b.n	8006642 <HAL_PCD_EP_Close+0x88>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	4618      	mov	r0, r3
 8006634:	f005 fc1c 	bl	800be70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
 8006656:	460b      	mov	r3, r1
 8006658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	f003 0207 	and.w	r2, r3, #7
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	b2da      	uxtb	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f005 fdcf 	bl	800c24a <USB_EPStartXfer>
 80066ac:	e005      	b.n	80066ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f005 fdc8 	bl	800c24a <USB_EPStartXfer>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	f003 0207 	and.w	r2, r3, #7
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	440b      	add	r3, r1
 80066e2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	460b      	mov	r3, r1
 8006702:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2201      	movs	r2, #1
 800673e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	b2da      	uxtb	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	4618      	mov	r0, r3
 800675e:	f005 fd74 	bl	800c24a <USB_EPStartXfer>
 8006762:	e005      	b.n	8006770 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6979      	ldr	r1, [r7, #20]
 800676a:	4618      	mov	r0, r3
 800676c:	f005 fd6d 	bl	800c24a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	f003 0207 	and.w	r2, r3, #7
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d901      	bls.n	8006798 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e03e      	b.n	8006816 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800679c:	2b00      	cmp	r3, #0
 800679e:	da0e      	bge.n	80067be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	705a      	strb	r2, [r3, #1]
 80067bc:	e00c      	b.n	80067d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067be:	78fa      	ldrb	r2, [r7, #3]
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4413      	add	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_PCD_EP_SetStall+0x7e>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e00e      	b.n	8006816 <HAL_PCD_EP_SetStall+0x9c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	4618      	mov	r0, r3
 8006808:	f006 fdf1 	bl	800d3ee <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d901      	bls.n	800683c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e040      	b.n	80068be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800683c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006840:	2b00      	cmp	r3, #0
 8006842:	da0e      	bge.n	8006862 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	705a      	strb	r2, [r3, #1]
 8006860:	e00e      	b.n	8006880 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 0207 	and.w	r2, r3, #7
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_PCD_EP_ClrStall+0x82>
 800689c:	2302      	movs	r3, #2
 800689e:	e00e      	b.n	80068be <HAL_PCD_EP_ClrStall+0xa0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f006 fdee 	bl	800d490 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b096      	sub	sp, #88	; 0x58
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068ce:	e39c      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80068dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80068ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 815e 	bne.w	8006bb0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80068f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d150      	bne.n	80069a2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	81fb      	strh	r3, [r7, #14]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	89fb      	ldrh	r3, [r7, #14]
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29b      	uxth	r3, r3
 8006922:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3328      	adds	r3, #40	; 0x28
 8006928:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	4413      	add	r3, r2
 8006944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	441a      	add	r2, r3
 800695c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f008 ffc7 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 834a 	beq.w	800700a <PCD_EP_ISR_Handler+0x744>
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 8345 	bne.w	800700a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	b292      	uxth	r2, r2
 8006994:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069a0:	e333      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80069b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80069b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d032      	beq.n	8006a26 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	4413      	add	r3, r2
 80069da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80069f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80069f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f006 fe73 	bl	800d6e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	823b      	strh	r3, [r7, #16]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	8a3a      	ldrh	r2, [r7, #16]
 8006a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a1a:	b292      	uxth	r2, r2
 8006a1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f008 ff3c 	bl	800f89c <HAL_PCD_SetupStageCallback>
 8006a24:	e2f1      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a26:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f280 82ed 	bge.w	800700a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	83fb      	strh	r3, [r7, #30]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	8bfa      	ldrh	r2, [r7, #30]
 8006a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d019      	beq.n	8006ab2 <PCD_EP_ISR_Handler+0x1ec>
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d015      	beq.n	8006ab2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8c:	6959      	ldr	r1, [r3, #20]
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f006 fe25 	bl	800d6e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006aaa:	2100      	movs	r1, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f008 ff07 	bl	800f8c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 82a3 	bne.w	800700a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	4413      	add	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aea:	d918      	bls.n	8006b1e <PCD_EP_ISR_Handler+0x258>
 8006aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	647b      	str	r3, [r7, #68]	; 0x44
 8006af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <PCD_EP_ISR_Handler+0x240>
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	3b01      	subs	r3, #1
 8006b04:	647b      	str	r3, [r7, #68]	; 0x44
 8006b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	029b      	lsls	r3, r3, #10
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e029      	b.n	8006b72 <PCD_EP_ISR_Handler+0x2ac>
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d112      	bne.n	8006b4c <PCD_EP_ISR_Handler+0x286>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e012      	b.n	8006b72 <PCD_EP_ISR_Handler+0x2ac>
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <PCD_EP_ISR_Handler+0x2a0>
 8006b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b62:	3301      	adds	r3, #1
 8006b64:	647b      	str	r3, [r7, #68]	; 0x44
 8006b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	827b      	strh	r3, [r7, #18]
 8006b84:	8a7b      	ldrh	r3, [r7, #18]
 8006b86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b8a:	827b      	strh	r3, [r7, #18]
 8006b8c:	8a7b      	ldrh	r3, [r7, #18]
 8006b8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b92:	827b      	strh	r3, [r7, #18]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e22c      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bc4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f280 80f6 	bge.w	8006dba <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006be4:	4013      	ands	r3, r2
 8006be6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c00:	b292      	uxth	r2, r2
 8006c02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c04:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	7b1b      	ldrb	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d123      	bne.n	8006c6a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	4413      	add	r3, r2
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006c4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 808e 	beq.w	8006d70 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	6959      	ldr	r1, [r3, #20]
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5e:	88da      	ldrh	r2, [r3, #6]
 8006c60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c64:	f006 fd3f 	bl	800d6e6 <USB_ReadPMA>
 8006c68:	e082      	b.n	8006d70 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	78db      	ldrb	r3, [r3, #3]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d10a      	bne.n	8006c88 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c72:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c76:	461a      	mov	r2, r3
 8006c78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9d3 	bl	8007026 <HAL_PCD_EP_DB_Receive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c86:	e073      	b.n	8006d70 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d022      	beq.n	8006d2c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4413      	add	r3, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006d0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d02c      	beq.n	8006d70 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	6959      	ldr	r1, [r3, #20]
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	891a      	ldrh	r2, [r3, #8]
 8006d22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d26:	f006 fcde 	bl	800d6e6 <USB_ReadPMA>
 8006d2a:	e021      	b.n	8006d70 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4413      	add	r3, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006d54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	6959      	ldr	r1, [r3, #20]
 8006d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d66:	895a      	ldrh	r2, [r3, #10]
 8006d68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d6c:	f006 fcbb 	bl	800d6e6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d78:	441a      	add	r2, r3
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d86:	441a      	add	r2, r3
 8006d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <PCD_EP_ISR_Handler+0x4da>
 8006d94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d206      	bcs.n	8006dae <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f008 fd8a 	bl	800f8c0 <HAL_PCD_DataOutStageCallback>
 8006dac:	e005      	b.n	8006dba <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006db4:	4618      	mov	r0, r3
 8006db6:	f005 fa48 	bl	800c24a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8121 	beq.w	800700a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dc8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8006e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1a:	78db      	ldrb	r3, [r3, #3]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f000 80a2 	beq.w	8006f66 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	2200      	movs	r2, #0
 8006e26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2a:	7b1b      	ldrb	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8093 	beq.w	8006f58 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d046      	beq.n	8006ecc <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d126      	bne.n	8006e94 <PCD_EP_ISR_Handler+0x5ce>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	4413      	add	r3, r2
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	00da      	lsls	r2, r3, #3
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	4413      	add	r3, r2
 8006e68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e061      	b.n	8006f58 <PCD_EP_ISR_Handler+0x692>
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d15d      	bne.n	8006f58 <PCD_EP_ISR_Handler+0x692>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	4413      	add	r3, r2
 8006eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	00da      	lsls	r2, r3, #3
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e045      	b.n	8006f58 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d126      	bne.n	8006f28 <PCD_EP_ISR_Handler+0x662>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	4413      	add	r3, r2
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	00da      	lsls	r2, r3, #3
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	801a      	strh	r2, [r3, #0]
 8006f26:	e017      	b.n	8006f58 <PCD_EP_ISR_Handler+0x692>
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d113      	bne.n	8006f58 <PCD_EP_ISR_Handler+0x692>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	4413      	add	r3, r2
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	00da      	lsls	r2, r3, #3
 8006f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2200      	movs	r2, #0
 8006f56:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f008 fcc9 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
 8006f64:	e051      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d144      	bne.n	8006ffc <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	4413      	add	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d907      	bls.n	8006fb6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb2:	619a      	str	r2, [r3, #24]
 8006fb4:	e002      	b.n	8006fbc <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	2200      	movs	r2, #0
 8006fba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f008 fc93 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
 8006fd0:	e01b      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fda:	441a      	add	r2, r3
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fe8:	441a      	add	r2, r3
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f005 f928 	bl	800c24a <USB_EPStartXfer>
 8006ffa:	e006      	b.n	800700a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ffc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007000:	461a      	mov	r2, r3
 8007002:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f917 	bl	8007238 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007012:	b29b      	uxth	r3, r3
 8007014:	b21b      	sxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	f6ff ac5a 	blt.w	80068d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3758      	adds	r7, #88	; 0x58
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b088      	sub	sp, #32
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	4613      	mov	r3, r2
 8007032:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d07c      	beq.n	8007138 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	4413      	add	r3, r2
 8007058:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007062:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	8b7b      	ldrh	r3, [r7, #26]
 800706a:	429a      	cmp	r2, r3
 800706c:	d306      	bcc.n	800707c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	8b7b      	ldrh	r3, [r7, #26]
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	619a      	str	r2, [r3, #24]
 800707a:	e002      	b.n	8007082 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d123      	bne.n	80070d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a4:	833b      	strh	r3, [r7, #24]
 80070a6:	8b3b      	ldrh	r3, [r7, #24]
 80070a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070ac:	833b      	strh	r3, [r7, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	8b3b      	ldrh	r3, [r7, #24]
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01f      	beq.n	800711c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	82fb      	strh	r3, [r7, #22]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	8afb      	ldrh	r3, [r7, #22]
 8007108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007118:	b29b      	uxth	r3, r3
 800711a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800711c:	8b7b      	ldrh	r3, [r7, #26]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8085 	beq.w	800722e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6959      	ldr	r1, [r3, #20]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	891a      	ldrh	r2, [r3, #8]
 8007130:	8b7b      	ldrh	r3, [r7, #26]
 8007132:	f006 fad8 	bl	800d6e6 <USB_ReadPMA>
 8007136:	e07a      	b.n	800722e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007140:	b29b      	uxth	r3, r3
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	4413      	add	r3, r2
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	4413      	add	r3, r2
 8007152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800715c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	8b7b      	ldrh	r3, [r7, #26]
 8007164:	429a      	cmp	r2, r3
 8007166:	d306      	bcc.n	8007176 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	8b7b      	ldrh	r3, [r7, #26]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	619a      	str	r2, [r3, #24]
 8007174:	e002      	b.n	800717c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d123      	bne.n	80071cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	83fb      	strh	r3, [r7, #30]
 80071a0:	8bfb      	ldrh	r3, [r7, #30]
 80071a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071a6:	83fb      	strh	r3, [r7, #30]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	8bfb      	ldrh	r3, [r7, #30]
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11f      	bne.n	8007216 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f0:	83bb      	strh	r3, [r7, #28]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8bbb      	ldrh	r3, [r7, #28]
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007216:	8b7b      	ldrh	r3, [r7, #26]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6959      	ldr	r1, [r3, #20]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	895a      	ldrh	r2, [r3, #10]
 8007228:	8b7b      	ldrh	r3, [r7, #26]
 800722a:	f006 fa5c 	bl	800d6e6 <USB_ReadPMA>
    }
  }

  return count;
 800722e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b0a2      	sub	sp, #136	; 0x88
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 81c5 	beq.w	80075dc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725a:	b29b      	uxth	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	4413      	add	r3, r2
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	4413      	add	r3, r2
 800726c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007276:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007282:	429a      	cmp	r2, r3
 8007284:	d907      	bls.n	8007296 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	619a      	str	r2, [r3, #24]
 8007294:	e002      	b.n	800729c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2200      	movs	r2, #0
 800729a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 80b9 	bne.w	8007418 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d126      	bne.n	80072fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072bc:	b29b      	uxth	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	4413      	add	r3, r2
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e01a      	b.n	8007332 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d116      	bne.n	8007332 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	633b      	str	r3, [r7, #48]	; 0x30
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	4413      	add	r3, r2
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	00da      	lsls	r2, r3, #3
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	4413      	add	r3, r2
 8007326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2200      	movs	r2, #0
 8007330:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d126      	bne.n	800738e <HAL_PCD_EP_DB_Transmit+0x156>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	4413      	add	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	00da      	lsls	r2, r3, #3
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	4413      	add	r3, r2
 8007362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007372:	b29a      	uxth	r2, r3
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007386:	b29a      	uxth	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	801a      	strh	r2, [r3, #0]
 800738c:	e017      	b.n	80073be <HAL_PCD_EP_DB_Transmit+0x186>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d113      	bne.n	80073be <HAL_PCD_EP_DB_Transmit+0x186>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	4413      	add	r3, r2
 80073a6:	623b      	str	r3, [r7, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00da      	lsls	r2, r3, #3
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	4413      	add	r3, r2
 80073b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	2200      	movs	r2, #0
 80073bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	4619      	mov	r1, r3
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f008 fa96 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 82d2 	beq.w	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	827b      	strh	r3, [r7, #18]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	8a7b      	ldrh	r3, [r7, #18]
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
 8007416:	e2b0      	b.n	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d021      	beq.n	8007466 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800746c:	2b01      	cmp	r3, #1
 800746e:	f040 8284 	bne.w	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800747a:	441a      	add	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007488:	441a      	add	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6a1a      	ldr	r2, [r3, #32]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	d309      	bcc.n	80074ae <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a6:	1ad2      	subs	r2, r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	621a      	str	r2, [r3, #32]
 80074ac:	e015      	b.n	80074da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d107      	bne.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80074b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074c4:	e009      	b.n	80074da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d155      	bne.n	800758e <HAL_PCD_EP_DB_Transmit+0x356>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	4413      	add	r3, r2
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	00da      	lsls	r2, r3, #3
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	4413      	add	r3, r2
 8007504:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
 800750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750c:	2b3e      	cmp	r3, #62	; 0x3e
 800750e:	d916      	bls.n	800753e <HAL_PCD_EP_DB_Transmit+0x306>
 8007510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	64bb      	str	r3, [r7, #72]	; 0x48
 8007516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007522:	3b01      	subs	r3, #1
 8007524:	64bb      	str	r3, [r7, #72]	; 0x48
 8007526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007528:	b29b      	uxth	r3, r3
 800752a:	029b      	lsls	r3, r3, #10
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007536:	b29a      	uxth	r2, r3
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e043      	b.n	80075c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800753e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007540:	2b00      	cmp	r3, #0
 8007542:	d112      	bne.n	800756a <HAL_PCD_EP_DB_Transmit+0x332>
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800754e:	b29a      	uxth	r2, r3
 8007550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e02d      	b.n	80075c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_PCD_EP_DB_Transmit+0x348>
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	3301      	adds	r3, #1
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29a      	uxth	r2, r3
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e01b      	b.n	80075c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d117      	bne.n	80075c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	4413      	add	r3, r2
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	00da      	lsls	r2, r3, #3
 80075b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b6:	4413      	add	r3, r2
 80075b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6959      	ldr	r1, [r3, #20]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	891a      	ldrh	r2, [r3, #8]
 80075d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f006 f844 	bl	800d662 <USB_WritePMA>
 80075da:	e1ce      	b.n	800797a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	4413      	add	r3, r2
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007600:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	699a      	ldr	r2, [r3, #24]
 8007608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800760c:	429a      	cmp	r2, r3
 800760e:	d307      	bcc.n	8007620 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	619a      	str	r2, [r3, #24]
 800761e:	e002      	b.n	8007626 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 80c4 	bne.w	80077b8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d126      	bne.n	8007686 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007646:	b29b      	uxth	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764c:	4413      	add	r3, r2
 800764e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00da      	lsls	r2, r3, #3
 8007656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007658:	4413      	add	r3, r2
 800765a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800765e:	667b      	str	r3, [r7, #100]	; 0x64
 8007660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800766a:	b29a      	uxth	r2, r3
 800766c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	b29b      	uxth	r3, r3
 8007676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767e:	b29a      	uxth	r2, r3
 8007680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e01a      	b.n	80076bc <HAL_PCD_EP_DB_Transmit+0x484>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d116      	bne.n	80076bc <HAL_PCD_EP_DB_Transmit+0x484>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	673b      	str	r3, [r7, #112]	; 0x70
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769c:	b29b      	uxth	r3, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a2:	4413      	add	r3, r2
 80076a4:	673b      	str	r3, [r7, #112]	; 0x70
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076ae:	4413      	add	r3, r2
 80076b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	2200      	movs	r2, #0
 80076ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d12f      	bne.n	800772a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e2:	4413      	add	r3, r2
 80076e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	00da      	lsls	r2, r3, #3
 80076ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f2:	4413      	add	r3, r2
 80076f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e017      	b.n	800775a <HAL_PCD_EP_DB_Transmit+0x522>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d113      	bne.n	800775a <HAL_PCD_EP_DB_Transmit+0x522>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007740:	4413      	add	r3, r2
 8007742:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	00da      	lsls	r2, r3, #3
 800774a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800774c:	4413      	add	r3, r2
 800774e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007752:	67bb      	str	r3, [r7, #120]	; 0x78
 8007754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007756:	2200      	movs	r2, #0
 8007758:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f008 f8c8 	bl	800f8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8104 	bne.w	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	441a      	add	r2, r3
 800779e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]
 80077b6:	e0e0      	b.n	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d121      	bne.n	8007806 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007802:	b29b      	uxth	r3, r3
 8007804:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800780c:	2b01      	cmp	r3, #1
 800780e:	f040 80b4 	bne.w	800797a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	695a      	ldr	r2, [r3, #20]
 8007816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800781a:	441a      	add	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007828:	441a      	add	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6a1a      	ldr	r2, [r3, #32]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d309      	bcc.n	800784e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6a1a      	ldr	r2, [r3, #32]
 8007844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	621a      	str	r2, [r3, #32]
 800784c:	e015      	b.n	800787a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007856:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800785a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007864:	e009      	b.n	800787a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	663b      	str	r3, [r7, #96]	; 0x60
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d155      	bne.n	8007934 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	65bb      	str	r3, [r7, #88]	; 0x58
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007896:	b29b      	uxth	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800789c:	4413      	add	r3, r2
 800789e:	65bb      	str	r3, [r7, #88]	; 0x58
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00da      	lsls	r2, r3, #3
 80078a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ae:	657b      	str	r3, [r7, #84]	; 0x54
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	2b3e      	cmp	r3, #62	; 0x3e
 80078b4:	d916      	bls.n	80078e4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	677b      	str	r3, [r7, #116]	; 0x74
 80078bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <HAL_PCD_EP_DB_Transmit+0x694>
 80078c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c8:	3b01      	subs	r3, #1
 80078ca:	677b      	str	r3, [r7, #116]	; 0x74
 80078cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	029b      	lsls	r3, r3, #10
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e040      	b.n	8007966 <HAL_PCD_EP_DB_Transmit+0x72e>
 80078e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d112      	bne.n	8007910 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80078ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f8:	801a      	strh	r2, [r3, #0]
 80078fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007908:	b29a      	uxth	r2, r3
 800790a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	e02a      	b.n	8007966 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	677b      	str	r3, [r7, #116]	; 0x74
 8007916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007922:	3301      	adds	r3, #1
 8007924:	677b      	str	r3, [r7, #116]	; 0x74
 8007926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007928:	b29b      	uxth	r3, r3
 800792a:	029b      	lsls	r3, r3, #10
 800792c:	b29a      	uxth	r2, r3
 800792e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e018      	b.n	8007966 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d114      	bne.n	8007966 <HAL_PCD_EP_DB_Transmit+0x72e>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007944:	b29b      	uxth	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800794a:	4413      	add	r3, r2
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	00da      	lsls	r2, r3, #3
 8007954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007956:	4413      	add	r3, r2
 8007958:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800795c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800795e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007960:	b29a      	uxth	r2, r3
 8007962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007964:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6959      	ldr	r1, [r3, #20]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	895a      	ldrh	r2, [r3, #10]
 8007972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007974:	b29b      	uxth	r3, r3
 8007976:	f005 fe74 	bl	800d662 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007994:	823b      	strh	r3, [r7, #16]
 8007996:	8a3b      	ldrh	r3, [r7, #16]
 8007998:	f083 0310 	eor.w	r3, r3, #16
 800799c:	823b      	strh	r3, [r7, #16]
 800799e:	8a3b      	ldrh	r3, [r7, #16]
 80079a0:	f083 0320 	eor.w	r3, r3, #32
 80079a4:	823b      	strh	r3, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	8a3b      	ldrh	r3, [r7, #16]
 80079b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3788      	adds	r7, #136	; 0x88
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	817b      	strh	r3, [r7, #10]
 80079e2:	4613      	mov	r3, r2
 80079e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80079e6:	897b      	ldrh	r3, [r7, #10]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079f2:	897b      	ldrh	r3, [r7, #10]
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e009      	b.n	8007a1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a0a:	897a      	ldrh	r2, [r7, #10]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d107      	bne.n	8007a34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2200      	movs	r2, #0
 8007a28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	80da      	strh	r2, [r3, #6]
 8007a32:	e00b      	b.n	8007a4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2201      	movs	r2, #1
 8007a38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f043 0301 	orr.w	r3, r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f043 0302 	orr.w	r3, r3, #2
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d141      	bne.n	8007b42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007abe:	4b4b      	ldr	r3, [pc, #300]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aca:	d131      	bne.n	8007b30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007acc:	4b47      	ldr	r3, [pc, #284]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad2:	4a46      	ldr	r2, [pc, #280]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007adc:	4b43      	ldr	r3, [pc, #268]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ae4:	4a41      	ldr	r2, [pc, #260]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007aec:	4b40      	ldr	r3, [pc, #256]	; (8007bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2232      	movs	r2, #50	; 0x32
 8007af2:	fb02 f303 	mul.w	r3, r2, r3
 8007af6:	4a3f      	ldr	r2, [pc, #252]	; (8007bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007af8:	fba2 2303 	umull	r2, r3, r2, r3
 8007afc:	0c9b      	lsrs	r3, r3, #18
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b02:	e002      	b.n	8007b0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b0a:	4b38      	ldr	r3, [pc, #224]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b16:	d102      	bne.n	8007b1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f2      	bne.n	8007b04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b1e:	4b33      	ldr	r3, [pc, #204]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2a:	d158      	bne.n	8007bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e057      	b.n	8007be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b30:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b36:	4a2d      	ldr	r2, [pc, #180]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b40:	e04d      	b.n	8007bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b48:	d141      	bne.n	8007bce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b4a:	4b28      	ldr	r3, [pc, #160]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b56:	d131      	bne.n	8007bbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b58:	4b24      	ldr	r3, [pc, #144]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b5e:	4a23      	ldr	r2, [pc, #140]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b68:	4b20      	ldr	r3, [pc, #128]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b70:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2232      	movs	r2, #50	; 0x32
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b84:	fba2 2303 	umull	r2, r3, r2, r3
 8007b88:	0c9b      	lsrs	r3, r3, #18
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b8e:	e002      	b.n	8007b96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b96:	4b15      	ldr	r3, [pc, #84]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba2:	d102      	bne.n	8007baa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f2      	bne.n	8007b90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007baa:	4b10      	ldr	r3, [pc, #64]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb6:	d112      	bne.n	8007bde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e011      	b.n	8007be0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007bcc:	e007      	b.n	8007bde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007bd6:	4a05      	ldr	r2, [pc, #20]	; (8007bec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40007000 	.word	0x40007000
 8007bf0:	20000194 	.word	0x20000194
 8007bf4:	431bde83 	.word	0x431bde83

08007bf8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007bfc:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4a04      	ldr	r2, [pc, #16]	; (8007c14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c06:	6093      	str	r3, [r2, #8]
}
 8007c08:	bf00      	nop
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40007000 	.word	0x40007000

08007c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e308      	b.n	800823c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d075      	beq.n	8007d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c36:	4ba3      	ldr	r3, [pc, #652]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 030c 	and.w	r3, r3, #12
 8007c3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c40:	4ba0      	ldr	r3, [pc, #640]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b0c      	cmp	r3, #12
 8007c4e:	d102      	bne.n	8007c56 <HAL_RCC_OscConfig+0x3e>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d002      	beq.n	8007c5c <HAL_RCC_OscConfig+0x44>
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d10b      	bne.n	8007c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c5c:	4b99      	ldr	r3, [pc, #612]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d05b      	beq.n	8007d20 <HAL_RCC_OscConfig+0x108>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d157      	bne.n	8007d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e2e3      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7c:	d106      	bne.n	8007c8c <HAL_RCC_OscConfig+0x74>
 8007c7e:	4b91      	ldr	r3, [pc, #580]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a90      	ldr	r2, [pc, #576]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	e01d      	b.n	8007cc8 <HAL_RCC_OscConfig+0xb0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c94:	d10c      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x98>
 8007c96:	4b8b      	ldr	r3, [pc, #556]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a8a      	ldr	r2, [pc, #552]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	4b88      	ldr	r3, [pc, #544]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a87      	ldr	r2, [pc, #540]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	e00b      	b.n	8007cc8 <HAL_RCC_OscConfig+0xb0>
 8007cb0:	4b84      	ldr	r3, [pc, #528]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a83      	ldr	r2, [pc, #524]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	4b81      	ldr	r3, [pc, #516]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a80      	ldr	r2, [pc, #512]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d013      	beq.n	8007cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd0:	f7fb fbb2 	bl	8003438 <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cd6:	e008      	b.n	8007cea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cd8:	f7fb fbae 	bl	8003438 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b64      	cmp	r3, #100	; 0x64
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e2a8      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cea:	4b76      	ldr	r3, [pc, #472]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f0      	beq.n	8007cd8 <HAL_RCC_OscConfig+0xc0>
 8007cf6:	e014      	b.n	8007d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fb fb9e 	bl	8003438 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d00:	f7fb fb9a 	bl	8003438 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b64      	cmp	r3, #100	; 0x64
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e294      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d12:	4b6c      	ldr	r3, [pc, #432]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1f0      	bne.n	8007d00 <HAL_RCC_OscConfig+0xe8>
 8007d1e:	e000      	b.n	8007d22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d075      	beq.n	8007e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d2e:	4b65      	ldr	r3, [pc, #404]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 030c 	and.w	r3, r3, #12
 8007d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d38:	4b62      	ldr	r3, [pc, #392]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b0c      	cmp	r3, #12
 8007d46:	d102      	bne.n	8007d4e <HAL_RCC_OscConfig+0x136>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d002      	beq.n	8007d54 <HAL_RCC_OscConfig+0x13c>
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d11f      	bne.n	8007d94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d54:	4b5b      	ldr	r3, [pc, #364]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_RCC_OscConfig+0x154>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e267      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d6c:	4b55      	ldr	r3, [pc, #340]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	4952      	ldr	r1, [pc, #328]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d80:	4b51      	ldr	r3, [pc, #324]	; (8007ec8 <HAL_RCC_OscConfig+0x2b0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb fb0b 	bl	80033a0 <HAL_InitTick>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d043      	beq.n	8007e18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e253      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d023      	beq.n	8007de4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d9c:	4b49      	ldr	r3, [pc, #292]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a48      	ldr	r2, [pc, #288]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fb fb46 	bl	8003438 <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db0:	f7fb fb42 	bl	8003438 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e23c      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dc2:	4b40      	ldr	r3, [pc, #256]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dce:	4b3d      	ldr	r3, [pc, #244]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	4939      	ldr	r1, [pc, #228]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	604b      	str	r3, [r1, #4]
 8007de2:	e01a      	b.n	8007e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007de4:	4b37      	ldr	r3, [pc, #220]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a36      	ldr	r2, [pc, #216]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df0:	f7fb fb22 	bl	8003438 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df8:	f7fb fb1e 	bl	8003438 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e218      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x1e0>
 8007e16:	e000      	b.n	8007e1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d03c      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01c      	beq.n	8007e68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e2e:	4b25      	ldr	r3, [pc, #148]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e34:	4a23      	ldr	r2, [pc, #140]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e3e:	f7fb fafb 	bl	8003438 <HAL_GetTick>
 8007e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e46:	f7fb faf7 	bl	8003438 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e1f1      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0ef      	beq.n	8007e46 <HAL_RCC_OscConfig+0x22e>
 8007e66:	e01b      	b.n	8007ea0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e68:	4b16      	ldr	r3, [pc, #88]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6e:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e70:	f023 0301 	bic.w	r3, r3, #1
 8007e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e78:	f7fb fade 	bl	8003438 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e80:	f7fb fada 	bl	8003438 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e1d4      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ef      	bne.n	8007e80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80ab 	beq.w	8008004 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007eb2:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCC_OscConfig+0x2b4>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e005      	b.n	8007ece <HAL_RCC_OscConfig+0x2b6>
 8007ec2:	bf00      	nop
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	20000198 	.word	0x20000198
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ed2:	4baf      	ldr	r3, [pc, #700]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed6:	4aae      	ldr	r2, [pc, #696]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007edc:	6593      	str	r3, [r2, #88]	; 0x58
 8007ede:	4bac      	ldr	r3, [pc, #688]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007eea:	2301      	movs	r3, #1
 8007eec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eee:	4ba9      	ldr	r3, [pc, #676]	; (8008194 <HAL_RCC_OscConfig+0x57c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d118      	bne.n	8007f2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007efa:	4ba6      	ldr	r3, [pc, #664]	; (8008194 <HAL_RCC_OscConfig+0x57c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4aa5      	ldr	r2, [pc, #660]	; (8008194 <HAL_RCC_OscConfig+0x57c>)
 8007f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f06:	f7fb fa97 	bl	8003438 <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f0c:	e008      	b.n	8007f20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f0e:	f7fb fa93 	bl	8003438 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e18d      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f20:	4b9c      	ldr	r3, [pc, #624]	; (8008194 <HAL_RCC_OscConfig+0x57c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d0f0      	beq.n	8007f0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d108      	bne.n	8007f46 <HAL_RCC_OscConfig+0x32e>
 8007f34:	4b96      	ldr	r3, [pc, #600]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3a:	4a95      	ldr	r2, [pc, #596]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f44:	e024      	b.n	8007f90 <HAL_RCC_OscConfig+0x378>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d110      	bne.n	8007f70 <HAL_RCC_OscConfig+0x358>
 8007f4e:	4b90      	ldr	r3, [pc, #576]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	4a8e      	ldr	r2, [pc, #568]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f56:	f043 0304 	orr.w	r3, r3, #4
 8007f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f5e:	4b8c      	ldr	r3, [pc, #560]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	4a8a      	ldr	r2, [pc, #552]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f6e:	e00f      	b.n	8007f90 <HAL_RCC_OscConfig+0x378>
 8007f70:	4b87      	ldr	r3, [pc, #540]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f76:	4a86      	ldr	r2, [pc, #536]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f80:	4b83      	ldr	r3, [pc, #524]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	4a82      	ldr	r2, [pc, #520]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007f88:	f023 0304 	bic.w	r3, r3, #4
 8007f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d016      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f98:	f7fb fa4e 	bl	8003438 <HAL_GetTick>
 8007f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f9e:	e00a      	b.n	8007fb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fa0:	f7fb fa4a 	bl	8003438 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e142      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb6:	4b76      	ldr	r3, [pc, #472]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ed      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x388>
 8007fc4:	e015      	b.n	8007ff2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc6:	f7fb fa37 	bl	8003438 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fce:	f7fb fa33 	bl	8003438 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e12b      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fe4:	4b6a      	ldr	r3, [pc, #424]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ed      	bne.n	8007fce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ff2:	7ffb      	ldrb	r3, [r7, #31]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d105      	bne.n	8008004 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ff8:	4b65      	ldr	r3, [pc, #404]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffc:	4a64      	ldr	r2, [pc, #400]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8007ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008002:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0320 	and.w	r3, r3, #32
 800800c:	2b00      	cmp	r3, #0
 800800e:	d03c      	beq.n	800808a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01c      	beq.n	8008052 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008018:	4b5d      	ldr	r3, [pc, #372]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800801a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800801e:	4a5c      	ldr	r2, [pc, #368]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008028:	f7fb fa06 	bl	8003438 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008030:	f7fb fa02 	bl	8003438 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e0fc      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008042:	4b53      	ldr	r3, [pc, #332]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0ef      	beq.n	8008030 <HAL_RCC_OscConfig+0x418>
 8008050:	e01b      	b.n	800808a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008052:	4b4f      	ldr	r3, [pc, #316]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008058:	4a4d      	ldr	r2, [pc, #308]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008062:	f7fb f9e9 	bl	8003438 <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800806a:	f7fb f9e5 	bl	8003438 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e0df      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800807c:	4b44      	ldr	r3, [pc, #272]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800807e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1ef      	bne.n	800806a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80d3 	beq.w	800823a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008094:	4b3e      	ldr	r3, [pc, #248]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 030c 	and.w	r3, r3, #12
 800809c:	2b0c      	cmp	r3, #12
 800809e:	f000 808d 	beq.w	80081bc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d15a      	bne.n	8008160 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080aa:	4b39      	ldr	r3, [pc, #228]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a38      	ldr	r2, [pc, #224]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 80080b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b6:	f7fb f9bf 	bl	8003438 <HAL_GetTick>
 80080ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080be:	f7fb f9bb 	bl	8003438 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0b5      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080d0:	4b2f      	ldr	r3, [pc, #188]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f0      	bne.n	80080be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080dc:	4b2c      	ldr	r3, [pc, #176]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_RCC_OscConfig+0x580>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6a11      	ldr	r1, [r2, #32]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080ec:	3a01      	subs	r2, #1
 80080ee:	0112      	lsls	r2, r2, #4
 80080f0:	4311      	orrs	r1, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80080f6:	0212      	lsls	r2, r2, #8
 80080f8:	4311      	orrs	r1, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080fe:	0852      	lsrs	r2, r2, #1
 8008100:	3a01      	subs	r2, #1
 8008102:	0552      	lsls	r2, r2, #21
 8008104:	4311      	orrs	r1, r2
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800810a:	0852      	lsrs	r2, r2, #1
 800810c:	3a01      	subs	r2, #1
 800810e:	0652      	lsls	r2, r2, #25
 8008110:	4311      	orrs	r1, r2
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008116:	06d2      	lsls	r2, r2, #27
 8008118:	430a      	orrs	r2, r1
 800811a:	491d      	ldr	r1, [pc, #116]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800811c:	4313      	orrs	r3, r2
 800811e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008120:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1a      	ldr	r2, [pc, #104]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800812a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800812c:	4b18      	ldr	r3, [pc, #96]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	4a17      	ldr	r2, [pc, #92]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008136:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fb f97e 	bl	8003438 <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008140:	f7fb f97a 	bl	8003438 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e074      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0x528>
 800815e:	e06c      	b.n	800823a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800816a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4a07      	ldr	r2, [pc, #28]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	4a04      	ldr	r2, [pc, #16]	; (8008190 <HAL_RCC_OscConfig+0x578>)
 800817e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008186:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008188:	f7fb f956 	bl	8003438 <HAL_GetTick>
 800818c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800818e:	e00e      	b.n	80081ae <HAL_RCC_OscConfig+0x596>
 8008190:	40021000 	.word	0x40021000
 8008194:	40007000 	.word	0x40007000
 8008198:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800819c:	f7fb f94c 	bl	8003438 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e046      	b.n	800823c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ae:	4b25      	ldr	r3, [pc, #148]	; (8008244 <HAL_RCC_OscConfig+0x62c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f0      	bne.n	800819c <HAL_RCC_OscConfig+0x584>
 80081ba:	e03e      	b.n	800823a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e039      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <HAL_RCC_OscConfig+0x62c>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f003 0203 	and.w	r2, r3, #3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d12c      	bne.n	8008236 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	3b01      	subs	r3, #1
 80081e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d123      	bne.n	8008236 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d11b      	bne.n	8008236 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800820a:	429a      	cmp	r2, r3
 800820c:	d113      	bne.n	8008236 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	3b01      	subs	r3, #1
 800821c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800821e:	429a      	cmp	r2, r3
 8008220:	d109      	bne.n	8008236 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822c:	085b      	lsrs	r3, r3, #1
 800822e:	3b01      	subs	r3, #1
 8008230:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008232:	429a      	cmp	r2, r3
 8008234:	d001      	beq.n	800823a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40021000 	.word	0x40021000

08008248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008252:	2300      	movs	r3, #0
 8008254:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e11e      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008260:	4b91      	ldr	r3, [pc, #580]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d910      	bls.n	8008290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b8e      	ldr	r3, [pc, #568]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f023 020f 	bic.w	r2, r3, #15
 8008276:	498c      	ldr	r1, [pc, #560]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800827e:	4b8a      	ldr	r3, [pc, #552]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d001      	beq.n	8008290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e106      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d073      	beq.n	8008384 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d129      	bne.n	80082f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082a4:	4b81      	ldr	r3, [pc, #516]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0f4      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80082b4:	f000 f99e 	bl	80085f4 <RCC_GetSysClockFreqFromPLLSource>
 80082b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4a7c      	ldr	r2, [pc, #496]	; (80084b0 <HAL_RCC_ClockConfig+0x268>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d93f      	bls.n	8008342 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082c2:	4b7a      	ldr	r3, [pc, #488]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d033      	beq.n	8008342 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d12f      	bne.n	8008342 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082e2:	4b72      	ldr	r3, [pc, #456]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082ea:	4a70      	ldr	r2, [pc, #448]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80082ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80082f2:	2380      	movs	r3, #128	; 0x80
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e024      	b.n	8008342 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d107      	bne.n	8008310 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008300:	4b6a      	ldr	r3, [pc, #424]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d109      	bne.n	8008320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e0c6      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008310:	4b66      	ldr	r3, [pc, #408]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e0be      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008320:	f000 f8ce 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 8008324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4a61      	ldr	r2, [pc, #388]	; (80084b0 <HAL_RCC_ClockConfig+0x268>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d909      	bls.n	8008342 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800832e:	4b5f      	ldr	r3, [pc, #380]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008336:	4a5d      	ldr	r2, [pc, #372]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800833e:	2380      	movs	r3, #128	; 0x80
 8008340:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008342:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f023 0203 	bic.w	r2, r3, #3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	4957      	ldr	r1, [pc, #348]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008350:	4313      	orrs	r3, r2
 8008352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008354:	f7fb f870 	bl	8003438 <HAL_GetTick>
 8008358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800835a:	e00a      	b.n	8008372 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800835c:	f7fb f86c 	bl	8003438 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	f241 3288 	movw	r2, #5000	; 0x1388
 800836a:	4293      	cmp	r3, r2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e095      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008372:	4b4e      	ldr	r3, [pc, #312]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 020c 	and.w	r2, r3, #12
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	429a      	cmp	r2, r3
 8008382:	d1eb      	bne.n	800835c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d023      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800839c:	4b43      	ldr	r3, [pc, #268]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4a42      	ldr	r2, [pc, #264]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80083a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d007      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80083b4:	4b3d      	ldr	r3, [pc, #244]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80083bc:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80083c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083c4:	4b39      	ldr	r3, [pc, #228]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	4936      	ldr	r1, [pc, #216]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	e008      	b.n	80083ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2b80      	cmp	r3, #128	; 0x80
 80083dc:	d105      	bne.n	80083ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	4a32      	ldr	r2, [pc, #200]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 80083e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083ea:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d21d      	bcs.n	8008434 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f8:	4b2b      	ldr	r3, [pc, #172]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f023 020f 	bic.w	r2, r3, #15
 8008400:	4929      	ldr	r1, [pc, #164]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	4313      	orrs	r3, r2
 8008406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008408:	f7fb f816 	bl	8003438 <HAL_GetTick>
 800840c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800840e:	e00a      	b.n	8008426 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008410:	f7fb f812 	bl	8003438 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f241 3288 	movw	r2, #5000	; 0x1388
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e03b      	b.n	800849e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008426:	4b20      	ldr	r3, [pc, #128]	; (80084a8 <HAL_RCC_ClockConfig+0x260>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d1ed      	bne.n	8008410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4917      	ldr	r1, [pc, #92]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 800844e:	4313      	orrs	r3, r2
 8008450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	490f      	ldr	r1, [pc, #60]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 800846e:	4313      	orrs	r3, r2
 8008470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008472:	f000 f825 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 8008476:	4602      	mov	r2, r0
 8008478:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <HAL_RCC_ClockConfig+0x264>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	490c      	ldr	r1, [pc, #48]	; (80084b4 <HAL_RCC_ClockConfig+0x26c>)
 8008484:	5ccb      	ldrb	r3, [r1, r3]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	fa22 f303 	lsr.w	r3, r2, r3
 800848e:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <HAL_RCC_ClockConfig+0x270>)
 8008490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <HAL_RCC_ClockConfig+0x274>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7fa ff82 	bl	80033a0 <HAL_InitTick>
 800849c:	4603      	mov	r3, r0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40022000 	.word	0x40022000
 80084ac:	40021000 	.word	0x40021000
 80084b0:	04c4b400 	.word	0x04c4b400
 80084b4:	08010c44 	.word	0x08010c44
 80084b8:	20000194 	.word	0x20000194
 80084bc:	20000198 	.word	0x20000198

080084c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084c6:	4b2c      	ldr	r3, [pc, #176]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 030c 	and.w	r3, r3, #12
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d102      	bne.n	80084d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084d2:	4b2a      	ldr	r3, [pc, #168]	; (800857c <HAL_RCC_GetSysClockFreq+0xbc>)
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	e047      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084d8:	4b27      	ldr	r3, [pc, #156]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 030c 	and.w	r3, r3, #12
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	d102      	bne.n	80084ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80084e4:	4b26      	ldr	r3, [pc, #152]	; (8008580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084e6:	613b      	str	r3, [r7, #16]
 80084e8:	e03e      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 030c 	and.w	r3, r3, #12
 80084f2:	2b0c      	cmp	r3, #12
 80084f4:	d136      	bne.n	8008564 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084f6:	4b20      	ldr	r3, [pc, #128]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	3301      	adds	r3, #1
 800850c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d10c      	bne.n	800852e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008514:	4a1a      	ldr	r2, [pc, #104]	; (8008580 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	fbb2 f3f3 	udiv	r3, r2, r3
 800851c:	4a16      	ldr	r2, [pc, #88]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800851e:	68d2      	ldr	r2, [r2, #12]
 8008520:	0a12      	lsrs	r2, r2, #8
 8008522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	617b      	str	r3, [r7, #20]
      break;
 800852c:	e00c      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800852e:	4a13      	ldr	r2, [pc, #76]	; (800857c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	fbb2 f3f3 	udiv	r3, r2, r3
 8008536:	4a10      	ldr	r2, [pc, #64]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008538:	68d2      	ldr	r2, [r2, #12]
 800853a:	0a12      	lsrs	r2, r2, #8
 800853c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008540:	fb02 f303 	mul.w	r3, r2, r3
 8008544:	617b      	str	r3, [r7, #20]
      break;
 8008546:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008548:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	0e5b      	lsrs	r3, r3, #25
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	3301      	adds	r3, #1
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	e001      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008568:	693b      	ldr	r3, [r7, #16]
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40021000 	.word	0x40021000
 800857c:	00f42400 	.word	0x00f42400
 8008580:	007a1200 	.word	0x007a1200

08008584 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008588:	4b03      	ldr	r3, [pc, #12]	; (8008598 <HAL_RCC_GetHCLKFreq+0x14>)
 800858a:	681b      	ldr	r3, [r3, #0]
}
 800858c:	4618      	mov	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000194 	.word	0x20000194

0800859c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085a0:	f7ff fff0 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	4904      	ldr	r1, [pc, #16]	; (80085c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085b2:	5ccb      	ldrb	r3, [r1, r3]
 80085b4:	f003 031f 	and.w	r3, r3, #31
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40021000 	.word	0x40021000
 80085c4:	08010c54 	.word	0x08010c54

080085c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80085cc:	f7ff ffda 	bl	8008584 <HAL_RCC_GetHCLKFreq>
 80085d0:	4602      	mov	r2, r0
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	0adb      	lsrs	r3, r3, #11
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	4904      	ldr	r1, [pc, #16]	; (80085f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085de:	5ccb      	ldrb	r3, [r1, r3]
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40021000 	.word	0x40021000
 80085f0:	08010c54 	.word	0x08010c54

080085f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085fa:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008604:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d10c      	bne.n	8008632 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008618:	4a17      	ldr	r2, [pc, #92]	; (8008678 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	4a14      	ldr	r2, [pc, #80]	; (8008674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008622:	68d2      	ldr	r2, [r2, #12]
 8008624:	0a12      	lsrs	r2, r2, #8
 8008626:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	617b      	str	r3, [r7, #20]
    break;
 8008630:	e00c      	b.n	800864c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008632:	4a12      	ldr	r2, [pc, #72]	; (800867c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	fbb2 f3f3 	udiv	r3, r2, r3
 800863a:	4a0e      	ldr	r2, [pc, #56]	; (8008674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800863c:	68d2      	ldr	r2, [r2, #12]
 800863e:	0a12      	lsrs	r2, r2, #8
 8008640:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]
    break;
 800864a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	0e5b      	lsrs	r3, r3, #25
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	3301      	adds	r3, #1
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	fbb2 f3f3 	udiv	r3, r2, r3
 8008664:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008666:	687b      	ldr	r3, [r7, #4]
}
 8008668:	4618      	mov	r0, r3
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	40021000 	.word	0x40021000
 8008678:	007a1200 	.word	0x007a1200
 800867c:	00f42400 	.word	0x00f42400

08008680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008688:	2300      	movs	r3, #0
 800868a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800868c:	2300      	movs	r3, #0
 800868e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8098 	beq.w	80087ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800869e:	2300      	movs	r3, #0
 80086a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086a2:	4b43      	ldr	r3, [pc, #268]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10d      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ae:	4b40      	ldr	r3, [pc, #256]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b2:	4a3f      	ldr	r2, [pc, #252]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6593      	str	r3, [r2, #88]	; 0x58
 80086ba:	4b3d      	ldr	r3, [pc, #244]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c2:	60bb      	str	r3, [r7, #8]
 80086c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086c6:	2301      	movs	r3, #1
 80086c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086ca:	4b3a      	ldr	r3, [pc, #232]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a39      	ldr	r2, [pc, #228]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086d6:	f7fa feaf 	bl	8003438 <HAL_GetTick>
 80086da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086dc:	e009      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086de:	f7fa feab 	bl	8003438 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d902      	bls.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	74fb      	strb	r3, [r7, #19]
        break;
 80086f0:	e005      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086f2:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0ef      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80086fe:	7cfb      	ldrb	r3, [r7, #19]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d159      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008704:	4b2a      	ldr	r3, [pc, #168]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01e      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	429a      	cmp	r2, r3
 800871e:	d019      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008720:	4b23      	ldr	r3, [pc, #140]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800872a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800872c:	4b20      	ldr	r3, [pc, #128]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008732:	4a1f      	ldr	r2, [pc, #124]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008742:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800874c:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d016      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875e:	f7fa fe6b 	bl	8003438 <HAL_GetTick>
 8008762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008764:	e00b      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008766:	f7fa fe67 	bl	8003438 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f241 3288 	movw	r2, #5000	; 0x1388
 8008774:	4293      	cmp	r3, r2
 8008776:	d902      	bls.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	74fb      	strb	r3, [r7, #19]
            break;
 800877c:	e006      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0ec      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800878c:	7cfb      	ldrb	r3, [r7, #19]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008792:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	4903      	ldr	r1, [pc, #12]	; (80087b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087a8:	e008      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087aa:	7cfb      	ldrb	r3, [r7, #19]
 80087ac:	74bb      	strb	r3, [r7, #18]
 80087ae:	e005      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80087b0:	40021000 	.word	0x40021000
 80087b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b8:	7cfb      	ldrb	r3, [r7, #19]
 80087ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087bc:	7c7b      	ldrb	r3, [r7, #17]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d105      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c2:	4ba6      	ldr	r3, [pc, #664]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c6:	4aa5      	ldr	r2, [pc, #660]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087da:	4ba0      	ldr	r3, [pc, #640]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e0:	f023 0203 	bic.w	r2, r3, #3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	499c      	ldr	r1, [pc, #624]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087fc:	4b97      	ldr	r3, [pc, #604]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008802:	f023 020c 	bic.w	r2, r3, #12
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	4994      	ldr	r1, [pc, #592]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800881e:	4b8f      	ldr	r3, [pc, #572]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008824:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	498b      	ldr	r1, [pc, #556]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00a      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008840:	4b86      	ldr	r3, [pc, #536]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008846:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	4983      	ldr	r1, [pc, #524]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008850:	4313      	orrs	r3, r2
 8008852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008862:	4b7e      	ldr	r3, [pc, #504]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	497a      	ldr	r1, [pc, #488]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008884:	4b75      	ldr	r3, [pc, #468]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	4972      	ldr	r1, [pc, #456]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088a6:	4b6d      	ldr	r3, [pc, #436]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	4969      	ldr	r1, [pc, #420]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088c8:	4b64      	ldr	r3, [pc, #400]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	4961      	ldr	r1, [pc, #388]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ea:	4b5c      	ldr	r3, [pc, #368]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	4958      	ldr	r1, [pc, #352]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008908:	2b00      	cmp	r3, #0
 800890a:	d015      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800890c:	4b53      	ldr	r3, [pc, #332]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	4950      	ldr	r1, [pc, #320]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800891c:	4313      	orrs	r3, r2
 800891e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800892a:	d105      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800892c:	4b4b      	ldr	r3, [pc, #300]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	4a4a      	ldr	r2, [pc, #296]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008936:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008940:	2b00      	cmp	r3, #0
 8008942:	d015      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008944:	4b45      	ldr	r3, [pc, #276]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	4942      	ldr	r1, [pc, #264]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008954:	4313      	orrs	r3, r2
 8008956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008962:	d105      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008964:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800896e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800897c:	4b37      	ldr	r3, [pc, #220]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008982:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	4934      	ldr	r1, [pc, #208]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800899a:	d105      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800899c:	4b2f      	ldr	r3, [pc, #188]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	4a2e      	ldr	r2, [pc, #184]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d015      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089b4:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	4926      	ldr	r1, [pc, #152]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d2:	d105      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089d4:	4b21      	ldr	r3, [pc, #132]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4a20      	ldr	r2, [pc, #128]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d015      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089ec:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	4918      	ldr	r1, [pc, #96]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d015      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008a24:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	490a      	ldr	r1, [pc, #40]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a42:	d105      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a50:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	40021000 	.word	0x40021000

08008a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e049      	b.n	8008b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fa fade 	bl	8003048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f000 fb42 	bl	8009128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d001      	beq.n	8008b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e04a      	b.n	8008bbe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a21      	ldr	r2, [pc, #132]	; (8008bcc <HAL_TIM_Base_Start_IT+0xbc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d018      	beq.n	8008b7c <HAL_TIM_Base_Start_IT+0x6c>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b52:	d013      	beq.n	8008b7c <HAL_TIM_Base_Start_IT+0x6c>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1d      	ldr	r2, [pc, #116]	; (8008bd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_TIM_Base_Start_IT+0x6c>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_TIM_Base_Start_IT+0x6c>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_TIM_Base_Start_IT+0x6c>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d115      	bne.n	8008ba8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b06      	cmp	r3, #6
 8008b8c:	d015      	beq.n	8008bba <HAL_TIM_Base_Start_IT+0xaa>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b94:	d011      	beq.n	8008bba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f042 0201 	orr.w	r2, r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba6:	e008      	b.n	8008bba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0201 	orr.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e000      	b.n	8008bbc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40012c00 	.word	0x40012c00
 8008bd0:	40000400 	.word	0x40000400
 8008bd4:	40000800 	.word	0x40000800
 8008bd8:	40013400 	.word	0x40013400
 8008bdc:	40014000 	.word	0x40014000
 8008be0:	00010007 	.word	0x00010007

08008be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d122      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d11b      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0202 	mvn.w	r2, #2
 8008c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa60 	bl	80090ec <HAL_TIM_IC_CaptureCallback>
 8008c2c:	e005      	b.n	8008c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa52 	bl	80090d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa63 	bl	8009100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d122      	bne.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d11b      	bne.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0204 	mvn.w	r2, #4
 8008c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa36 	bl	80090ec <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa28 	bl	80090d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa39 	bl	8009100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0208 	mvn.w	r2, #8
 8008cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2204      	movs	r2, #4
 8008cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa0c 	bl	80090ec <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9fe 	bl	80090d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa0f 	bl	8009100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d122      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d11b      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0210 	mvn.w	r2, #16
 8008d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2208      	movs	r2, #8
 8008d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f9e2 	bl	80090ec <HAL_TIM_IC_CaptureCallback>
 8008d28:	e005      	b.n	8008d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9d4 	bl	80090d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9e5 	bl	8009100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d10e      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d107      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0201 	mvn.w	r2, #1
 8008d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f8 f826 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d10e      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d80:	2b80      	cmp	r3, #128	; 0x80
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fb82 	bl	8009498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da2:	d10e      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb75 	bl	80094ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d10e      	bne.n	8008dee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d107      	bne.n	8008dee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f993 	bl	8009114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d10e      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d107      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0220 	mvn.w	r2, #32
 8008e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb35 	bl	8009484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e28:	d10f      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e38:	d107      	bne.n	8008e4a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fb3b 	bl	80094c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e58:	d10f      	bne.n	8008e7a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e68:	d107      	bne.n	8008e7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fb2d 	bl	80094d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e88:	d10f      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e98:	d107      	bne.n	8008eaa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb1f 	bl	80094e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008eb8:	d10f      	bne.n	8008eda <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ec8:	d107      	bne.n	8008eda <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fb11 	bl	80094fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_TIM_ConfigClockSource+0x1c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e0de      	b.n	80090be <HAL_TIM_ConfigClockSource+0x1da>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a63      	ldr	r2, [pc, #396]	; (80090c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f000 80a9 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008f40:	4a61      	ldr	r2, [pc, #388]	; (80090c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f200 80ae 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f48:	4a60      	ldr	r2, [pc, #384]	; (80090cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f000 80a1 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008f50:	4a5e      	ldr	r2, [pc, #376]	; (80090cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f200 80a6 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f58:	4a5d      	ldr	r2, [pc, #372]	; (80090d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f000 8099 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008f60:	4a5b      	ldr	r2, [pc, #364]	; (80090d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	f200 809e 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f68:	4a5a      	ldr	r2, [pc, #360]	; (80090d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	f000 8091 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008f70:	4a58      	ldr	r2, [pc, #352]	; (80090d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	f200 8096 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f7c:	f000 8089 	beq.w	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008f80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f84:	f200 808e 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8c:	d03e      	beq.n	800900c <HAL_TIM_ConfigClockSource+0x128>
 8008f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f92:	f200 8087 	bhi.w	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9a:	f000 8086 	beq.w	80090aa <HAL_TIM_ConfigClockSource+0x1c6>
 8008f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa2:	d87f      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fa4:	2b70      	cmp	r3, #112	; 0x70
 8008fa6:	d01a      	beq.n	8008fde <HAL_TIM_ConfigClockSource+0xfa>
 8008fa8:	2b70      	cmp	r3, #112	; 0x70
 8008faa:	d87b      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fac:	2b60      	cmp	r3, #96	; 0x60
 8008fae:	d050      	beq.n	8009052 <HAL_TIM_ConfigClockSource+0x16e>
 8008fb0:	2b60      	cmp	r3, #96	; 0x60
 8008fb2:	d877      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fb4:	2b50      	cmp	r3, #80	; 0x50
 8008fb6:	d03c      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0x14e>
 8008fb8:	2b50      	cmp	r3, #80	; 0x50
 8008fba:	d873      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d058      	beq.n	8009072 <HAL_TIM_ConfigClockSource+0x18e>
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d86f      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fc4:	2b30      	cmp	r3, #48	; 0x30
 8008fc6:	d064      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008fc8:	2b30      	cmp	r3, #48	; 0x30
 8008fca:	d86b      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d060      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d867      	bhi.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d05c      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d05a      	beq.n	8009092 <HAL_TIM_ConfigClockSource+0x1ae>
 8008fdc:	e062      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	6899      	ldr	r1, [r3, #8]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f000 f9a7 	bl	8009340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	609a      	str	r2, [r3, #8]
      break;
 800900a:	e04f      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	6899      	ldr	r1, [r3, #8]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f000 f990 	bl	8009340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800902e:	609a      	str	r2, [r3, #8]
      break;
 8009030:	e03c      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6859      	ldr	r1, [r3, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	461a      	mov	r2, r3
 8009040:	f000 f902 	bl	8009248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2150      	movs	r1, #80	; 0x50
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f95b 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8009050:	e02c      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6859      	ldr	r1, [r3, #4]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	461a      	mov	r2, r3
 8009060:	f000 f921 	bl	80092a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2160      	movs	r1, #96	; 0x60
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f94b 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8009070:	e01c      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6818      	ldr	r0, [r3, #0]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6859      	ldr	r1, [r3, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	461a      	mov	r2, r3
 8009080:	f000 f8e2 	bl	8009248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2140      	movs	r1, #64	; 0x40
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f93b 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 8009090:	e00c      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f000 f932 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 80090a2:	e003      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	73fb      	strb	r3, [r7, #15]
      break;
 80090a8:	e000      	b.n	80090ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80090aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	00100070 	.word	0x00100070
 80090cc:	00100040 	.word	0x00100040
 80090d0:	00100030 	.word	0x00100030
 80090d4:	00100020 	.word	0x00100020

080090d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a3c      	ldr	r2, [pc, #240]	; (800922c <TIM_Base_SetConfig+0x104>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00f      	beq.n	8009160 <TIM_Base_SetConfig+0x38>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009146:	d00b      	beq.n	8009160 <TIM_Base_SetConfig+0x38>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a39      	ldr	r2, [pc, #228]	; (8009230 <TIM_Base_SetConfig+0x108>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_Base_SetConfig+0x38>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a38      	ldr	r2, [pc, #224]	; (8009234 <TIM_Base_SetConfig+0x10c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_Base_SetConfig+0x38>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a37      	ldr	r2, [pc, #220]	; (8009238 <TIM_Base_SetConfig+0x110>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d108      	bne.n	8009172 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a2d      	ldr	r2, [pc, #180]	; (800922c <TIM_Base_SetConfig+0x104>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01b      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009180:	d017      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <TIM_Base_SetConfig+0x108>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d013      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a29      	ldr	r2, [pc, #164]	; (8009234 <TIM_Base_SetConfig+0x10c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00f      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a28      	ldr	r2, [pc, #160]	; (8009238 <TIM_Base_SetConfig+0x110>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00b      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a27      	ldr	r2, [pc, #156]	; (800923c <TIM_Base_SetConfig+0x114>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d007      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a26      	ldr	r2, [pc, #152]	; (8009240 <TIM_Base_SetConfig+0x118>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d003      	beq.n	80091b2 <TIM_Base_SetConfig+0x8a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a25      	ldr	r2, [pc, #148]	; (8009244 <TIM_Base_SetConfig+0x11c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d108      	bne.n	80091c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a10      	ldr	r2, [pc, #64]	; (800922c <TIM_Base_SetConfig+0x104>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00f      	beq.n	8009210 <TIM_Base_SetConfig+0xe8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a11      	ldr	r2, [pc, #68]	; (8009238 <TIM_Base_SetConfig+0x110>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00b      	beq.n	8009210 <TIM_Base_SetConfig+0xe8>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a10      	ldr	r2, [pc, #64]	; (800923c <TIM_Base_SetConfig+0x114>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <TIM_Base_SetConfig+0xe8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a0f      	ldr	r2, [pc, #60]	; (8009240 <TIM_Base_SetConfig+0x118>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_Base_SetConfig+0xe8>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a0e      	ldr	r2, [pc, #56]	; (8009244 <TIM_Base_SetConfig+0x11c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d103      	bne.n	8009218 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	615a      	str	r2, [r3, #20]
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40012c00 	.word	0x40012c00
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40013400 	.word	0x40013400
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400
 8009244:	40014800 	.word	0x40014800

08009248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 030a 	bic.w	r3, r3, #10
 8009284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	621a      	str	r2, [r3, #32]
}
 800929a:	bf00      	nop
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b087      	sub	sp, #28
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0210 	bic.w	r2, r3, #16
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	031b      	lsls	r3, r3, #12
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800931c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4313      	orrs	r3, r2
 8009328:	f043 0307 	orr.w	r3, r3, #7
 800932c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800935a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	021a      	lsls	r2, r3, #8
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	431a      	orrs	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4313      	orrs	r3, r2
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	4313      	orrs	r3, r2
 800936c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009394:	2302      	movs	r3, #2
 8009396:	e065      	b.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2c      	ldr	r2, [pc, #176]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d004      	beq.n	80093cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a2b      	ldr	r2, [pc, #172]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d108      	bne.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80093e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1b      	ldr	r2, [pc, #108]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d018      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940e:	d013      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a18      	ldr	r2, [pc, #96]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00e      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a17      	ldr	r2, [pc, #92]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d009      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a12      	ldr	r2, [pc, #72]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a13      	ldr	r2, [pc, #76]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d10c      	bne.n	8009452 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800943e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4313      	orrs	r3, r2
 8009448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40014000 	.word	0x40014000

08009484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e042      	b.n	80095a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7f9 fddb 	bl	80030f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2224      	movs	r2, #36	; 0x24
 800953e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fd02 	bl	8009f5c <UART_SetConfig>
 8009558:	4603      	mov	r3, r0
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e022      	b.n	80095a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 ff92 	bl	800a494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800957e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800958e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f042 0201 	orr.w	r2, r2, #1
 800959e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 f819 	bl	800a5d8 <UART_CheckIdleState>
 80095a6:	4603      	mov	r3, r0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	f040 8083 	bne.w	80096d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <HAL_UART_Transmit+0x28>
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e07b      	b.n	80096d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_UART_Transmit+0x3a>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e074      	b.n	80096d4 <HAL_UART_Transmit+0x124>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2221      	movs	r2, #33	; 0x21
 80095fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009602:	f7f9 ff19 	bl	8003438 <HAL_GetTick>
 8009606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	88fa      	ldrh	r2, [r7, #6]
 8009614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009620:	d108      	bne.n	8009634 <HAL_UART_Transmit+0x84>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e003      	b.n	800963c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009644:	e02c      	b.n	80096a0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	2180      	movs	r1, #128	; 0x80
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f001 f80c 	bl	800a66e <UART_WaitOnFlagUntilTimeout>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e039      	b.n	80096d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009674:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	3302      	adds	r3, #2
 800967a:	61bb      	str	r3, [r7, #24]
 800967c:	e007      	b.n	800968e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	781a      	ldrb	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	3301      	adds	r3, #1
 800968c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1cc      	bne.n	8009646 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2200      	movs	r2, #0
 80096b4:	2140      	movs	r1, #64	; 0x40
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 ffd9 	bl	800a66e <UART_WaitOnFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e006      	b.n	80096d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e000      	b.n	80096d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80096d2:	2302      	movs	r3, #2
  }
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3720      	adds	r7, #32
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d142      	bne.n	800977a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_UART_Receive_IT+0x24>
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e03b      	b.n	800977c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_UART_Receive_IT+0x36>
 800970e:	2302      	movs	r3, #2
 8009710:	e034      	b.n	800977c <HAL_UART_Receive_IT+0xa0>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a17      	ldr	r2, [pc, #92]	; (8009784 <HAL_UART_Receive_IT+0xa8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01f      	beq.n	800976a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d018      	beq.n	800976a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	613b      	str	r3, [r7, #16]
   return(result);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800974c:	627b      	str	r3, [r7, #36]	; 0x24
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	623b      	str	r3, [r7, #32]
 8009758:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	69f9      	ldr	r1, [r7, #28]
 800975c:	6a3a      	ldr	r2, [r7, #32]
 800975e:	e841 2300 	strex	r3, r2, [r1]
 8009762:	61bb      	str	r3, [r7, #24]
   return(result);
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e6      	bne.n	8009738 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800976a:	88fb      	ldrh	r3, [r7, #6]
 800976c:	461a      	mov	r2, r3
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f001 f845 	bl	800a800 <UART_Start_Receive_IT>
 8009776:	4603      	mov	r3, r0
 8009778:	e000      	b.n	800977c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800977a:	2302      	movs	r3, #2
  }
}
 800977c:	4618      	mov	r0, r3
 800977e:	3728      	adds	r7, #40	; 0x28
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40008000 	.word	0x40008000

08009788 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b09a      	sub	sp, #104	; 0x68
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800979e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097a4:	667b      	str	r3, [r7, #100]	; 0x64
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ae:	657b      	str	r3, [r7, #84]	; 0x54
 80097b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e6      	bne.n	8009790 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3308      	adds	r3, #8
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097d8:	f023 0301 	bic.w	r3, r3, #1
 80097dc:	663b      	str	r3, [r7, #96]	; 0x60
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3308      	adds	r3, #8
 80097e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097e6:	643a      	str	r2, [r7, #64]	; 0x40
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e3      	bne.n	80097c2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d118      	bne.n	8009834 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	f023 0310 	bic.w	r3, r3, #16
 8009816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009822:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b40      	cmp	r3, #64	; 0x40
 8009840:	d137      	bne.n	80098b2 <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3308      	adds	r3, #8
 8009848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	60bb      	str	r3, [r7, #8]
   return(result);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009858:	65bb      	str	r3, [r7, #88]	; 0x58
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3308      	adds	r3, #8
 8009860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009862:	61ba      	str	r2, [r7, #24]
 8009864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6979      	ldr	r1, [r7, #20]
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	e841 2300 	strex	r3, r2, [r1]
 800986e:	613b      	str	r3, [r7, #16]
   return(result);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1e5      	bne.n	8009842 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d019      	beq.n	80098b2 <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009882:	2200      	movs	r2, #0
 8009884:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800988a:	4618      	mov	r0, r3
 800988c:	f7fb fd8f 	bl	80053ae <HAL_DMA_Abort>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00d      	beq.n	80098b2 <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989a:	4618      	mov	r0, r3
 800989c:	f7fb fef6 	bl	800568c <HAL_DMA_GetError>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d105      	bne.n	80098b2 <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2210      	movs	r2, #16
 80098aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e017      	b.n	80098e2 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	220f      	movs	r2, #15
 80098c0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0208 	orr.w	r2, r2, #8
 80098d0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3768      	adds	r7, #104	; 0x68
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b0ba      	sub	sp, #232	; 0xe8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009916:	f640 030f 	movw	r3, #2063	; 0x80f
 800991a:	4013      	ands	r3, r2
 800991c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11b      	bne.n	8009960 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d015      	beq.n	8009960 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009938:	f003 0320 	and.w	r3, r3, #32
 800993c:	2b00      	cmp	r3, #0
 800993e:	d105      	bne.n	800994c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 82d6 	beq.w	8009f02 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
      }
      return;
 800995e:	e2d0      	b.n	8009f02 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 811f 	beq.w	8009ba8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800996a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800996e:	4b8b      	ldr	r3, [pc, #556]	; (8009b9c <HAL_UART_IRQHandler+0x2b0>)
 8009970:	4013      	ands	r3, r2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800997a:	4b89      	ldr	r3, [pc, #548]	; (8009ba0 <HAL_UART_IRQHandler+0x2b4>)
 800997c:	4013      	ands	r3, r2
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8112 	beq.w	8009ba8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d011      	beq.n	80099b4 <HAL_UART_IRQHandler+0xc8>
 8009990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2201      	movs	r2, #1
 80099a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099aa:	f043 0201 	orr.w	r2, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d011      	beq.n	80099e4 <HAL_UART_IRQHandler+0xf8>
 80099c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2202      	movs	r2, #2
 80099d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099da:	f043 0204 	orr.w	r2, r3, #4
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d011      	beq.n	8009a14 <HAL_UART_IRQHandler+0x128>
 80099f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2204      	movs	r2, #4
 8009a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a0a:	f043 0202 	orr.w	r2, r3, #2
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d017      	beq.n	8009a50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d105      	bne.n	8009a38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009a2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a30:	4b5a      	ldr	r3, [pc, #360]	; (8009b9c <HAL_UART_IRQHandler+0x2b0>)
 8009a32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a46:	f043 0208 	orr.w	r2, r3, #8
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d012      	beq.n	8009a82 <HAL_UART_IRQHandler+0x196>
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00c      	beq.n	8009a82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a78:	f043 0220 	orr.w	r2, r3, #32
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 823c 	beq.w	8009f06 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a92:	f003 0320 	and.w	r3, r3, #32
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d013      	beq.n	8009ac2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad6:	2b40      	cmp	r3, #64	; 0x40
 8009ad8:	d005      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d04f      	beq.n	8009b86 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 ffb4 	bl	800aa54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af6:	2b40      	cmp	r3, #64	; 0x40
 8009af8:	d141      	bne.n	8009b7e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1d9      	bne.n	8009afa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d013      	beq.n	8009b76 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b52:	4a14      	ldr	r2, [pc, #80]	; (8009ba4 <HAL_UART_IRQHandler+0x2b8>)
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fb fc80 	bl	8005460 <HAL_DMA_Abort_IT>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d017      	beq.n	8009b96 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009b70:	4610      	mov	r0, r2
 8009b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b74:	e00f      	b.n	8009b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f9da 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b7c:	e00b      	b.n	8009b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f9d6 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b84:	e007      	b.n	8009b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f9d2 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009b94:	e1b7      	b.n	8009f06 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b96:	bf00      	nop
    return;
 8009b98:	e1b5      	b.n	8009f06 <HAL_UART_IRQHandler+0x61a>
 8009b9a:	bf00      	nop
 8009b9c:	10000001 	.word	0x10000001
 8009ba0:	04000120 	.word	0x04000120
 8009ba4:	0800ab21 	.word	0x0800ab21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	f040 814a 	bne.w	8009e46 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8143 	beq.w	8009e46 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 813c 	beq.w	8009e46 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be0:	2b40      	cmp	r3, #64	; 0x40
 8009be2:	f040 80b5 	bne.w	8009d50 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8187 	beq.w	8009f0a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c06:	429a      	cmp	r2, r3
 8009c08:	f080 817f 	bcs.w	8009f0a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f040 8086 	bne.w	8009d34 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1da      	bne.n	8009c28 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c84:	f023 0301 	bic.w	r3, r3, #1
 8009c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e1      	bne.n	8009c72 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e3      	bne.n	8009cae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d04:	f023 0310 	bic.w	r3, r3, #16
 8009d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e4      	bne.n	8009cf4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fb fb3d 	bl	80053ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8fb 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d4e:	e0dc      	b.n	8009f0a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80ce 	beq.w	8009f0e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80c9 	beq.w	8009f0e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009da0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e4      	bne.n	8009d7c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3308      	adds	r3, #8
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009dda:	633a      	str	r2, [r7, #48]	; 0x30
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e1      	bne.n	8009db2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	e853 3f00 	ldrex	r3, [r3]
 8009e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0310 	bic.w	r3, r3, #16
 8009e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	69b9      	ldr	r1, [r7, #24]
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	617b      	str	r3, [r7, #20]
   return(result);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e4      	bne.n	8009e02 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f880 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e44:	e063      	b.n	8009f0e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00e      	beq.n	8009e70 <HAL_UART_IRQHandler+0x584>
 8009e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d008      	beq.n	8009e70 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 faf7 	bl	800b45c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e6e:	e051      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d014      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d105      	bne.n	8009e94 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d03a      	beq.n	8009f12 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
    }
    return;
 8009ea4:	e035      	b.n	8009f12 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x5da>
 8009eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fe44 	bl	800ab4c <UART_EndTransmit_IT>
    return;
 8009ec4:	e026      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x5fa>
 8009ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 fad0 	bl	800b484 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ee4:	e016      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d010      	beq.n	8009f14 <HAL_UART_IRQHandler+0x628>
 8009ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	da0c      	bge.n	8009f14 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fab8 	bl	800b470 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f00:	e008      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
      return;
 8009f02:	bf00      	nop
 8009f04:	e006      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
    return;
 8009f06:	bf00      	nop
 8009f08:	e004      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
      return;
 8009f0a:	bf00      	nop
 8009f0c:	e002      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
      return;
 8009f0e:	bf00      	nop
 8009f10:	e000      	b.n	8009f14 <HAL_UART_IRQHandler+0x628>
    return;
 8009f12:	bf00      	nop
  }
}
 8009f14:	37e8      	adds	r7, #232	; 0xe8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop

08009f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	b5b0      	push	{r4, r5, r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4baf      	ldr	r3, [pc, #700]	; (800a244 <UART_SetConfig+0x2e8>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	6812      	ldr	r2, [r2, #0]
 8009f8e:	69f9      	ldr	r1, [r7, #28]
 8009f90:	430b      	orrs	r3, r1
 8009f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4aa4      	ldr	r2, [pc, #656]	; (800a248 <UART_SetConfig+0x2ec>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009fce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	69f9      	ldr	r1, [r7, #28]
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	f023 010f 	bic.w	r1, r3, #15
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a95      	ldr	r2, [pc, #596]	; (800a24c <UART_SetConfig+0x2f0>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d120      	bne.n	800a03e <UART_SetConfig+0xe2>
 8009ffc:	4b94      	ldr	r3, [pc, #592]	; (800a250 <UART_SetConfig+0x2f4>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d816      	bhi.n	800a038 <UART_SetConfig+0xdc>
 800a00a:	a201      	add	r2, pc, #4	; (adr r2, 800a010 <UART_SetConfig+0xb4>)
 800a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a010:	0800a021 	.word	0x0800a021
 800a014:	0800a02d 	.word	0x0800a02d
 800a018:	0800a027 	.word	0x0800a027
 800a01c:	0800a033 	.word	0x0800a033
 800a020:	2301      	movs	r3, #1
 800a022:	76fb      	strb	r3, [r7, #27]
 800a024:	e0bc      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a026:	2302      	movs	r3, #2
 800a028:	76fb      	strb	r3, [r7, #27]
 800a02a:	e0b9      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a02c:	2304      	movs	r3, #4
 800a02e:	76fb      	strb	r3, [r7, #27]
 800a030:	e0b6      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a032:	2308      	movs	r3, #8
 800a034:	76fb      	strb	r3, [r7, #27]
 800a036:	e0b3      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a038:	2310      	movs	r3, #16
 800a03a:	76fb      	strb	r3, [r7, #27]
 800a03c:	e0b0      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a84      	ldr	r2, [pc, #528]	; (800a254 <UART_SetConfig+0x2f8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d132      	bne.n	800a0ae <UART_SetConfig+0x152>
 800a048:	4b81      	ldr	r3, [pc, #516]	; (800a250 <UART_SetConfig+0x2f4>)
 800a04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04e:	f003 030c 	and.w	r3, r3, #12
 800a052:	2b0c      	cmp	r3, #12
 800a054:	d828      	bhi.n	800a0a8 <UART_SetConfig+0x14c>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <UART_SetConfig+0x100>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a091 	.word	0x0800a091
 800a060:	0800a0a9 	.word	0x0800a0a9
 800a064:	0800a0a9 	.word	0x0800a0a9
 800a068:	0800a0a9 	.word	0x0800a0a9
 800a06c:	0800a09d 	.word	0x0800a09d
 800a070:	0800a0a9 	.word	0x0800a0a9
 800a074:	0800a0a9 	.word	0x0800a0a9
 800a078:	0800a0a9 	.word	0x0800a0a9
 800a07c:	0800a097 	.word	0x0800a097
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0a9 	.word	0x0800a0a9
 800a088:	0800a0a9 	.word	0x0800a0a9
 800a08c:	0800a0a3 	.word	0x0800a0a3
 800a090:	2300      	movs	r3, #0
 800a092:	76fb      	strb	r3, [r7, #27]
 800a094:	e084      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a096:	2302      	movs	r3, #2
 800a098:	76fb      	strb	r3, [r7, #27]
 800a09a:	e081      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a09c:	2304      	movs	r3, #4
 800a09e:	76fb      	strb	r3, [r7, #27]
 800a0a0:	e07e      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0a2:	2308      	movs	r3, #8
 800a0a4:	76fb      	strb	r3, [r7, #27]
 800a0a6:	e07b      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	76fb      	strb	r3, [r7, #27]
 800a0ac:	e078      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a69      	ldr	r2, [pc, #420]	; (800a258 <UART_SetConfig+0x2fc>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d120      	bne.n	800a0fa <UART_SetConfig+0x19e>
 800a0b8:	4b65      	ldr	r3, [pc, #404]	; (800a250 <UART_SetConfig+0x2f4>)
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a0c2:	2b30      	cmp	r3, #48	; 0x30
 800a0c4:	d013      	beq.n	800a0ee <UART_SetConfig+0x192>
 800a0c6:	2b30      	cmp	r3, #48	; 0x30
 800a0c8:	d814      	bhi.n	800a0f4 <UART_SetConfig+0x198>
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d009      	beq.n	800a0e2 <UART_SetConfig+0x186>
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	d810      	bhi.n	800a0f4 <UART_SetConfig+0x198>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <UART_SetConfig+0x180>
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d006      	beq.n	800a0e8 <UART_SetConfig+0x18c>
 800a0da:	e00b      	b.n	800a0f4 <UART_SetConfig+0x198>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	76fb      	strb	r3, [r7, #27]
 800a0e0:	e05e      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	76fb      	strb	r3, [r7, #27]
 800a0e6:	e05b      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	76fb      	strb	r3, [r7, #27]
 800a0ec:	e058      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0ee:	2308      	movs	r3, #8
 800a0f0:	76fb      	strb	r3, [r7, #27]
 800a0f2:	e055      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	76fb      	strb	r3, [r7, #27]
 800a0f8:	e052      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a57      	ldr	r2, [pc, #348]	; (800a25c <UART_SetConfig+0x300>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d120      	bne.n	800a146 <UART_SetConfig+0x1ea>
 800a104:	4b52      	ldr	r3, [pc, #328]	; (800a250 <UART_SetConfig+0x2f4>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a10e:	2bc0      	cmp	r3, #192	; 0xc0
 800a110:	d013      	beq.n	800a13a <UART_SetConfig+0x1de>
 800a112:	2bc0      	cmp	r3, #192	; 0xc0
 800a114:	d814      	bhi.n	800a140 <UART_SetConfig+0x1e4>
 800a116:	2b80      	cmp	r3, #128	; 0x80
 800a118:	d009      	beq.n	800a12e <UART_SetConfig+0x1d2>
 800a11a:	2b80      	cmp	r3, #128	; 0x80
 800a11c:	d810      	bhi.n	800a140 <UART_SetConfig+0x1e4>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <UART_SetConfig+0x1cc>
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	d006      	beq.n	800a134 <UART_SetConfig+0x1d8>
 800a126:	e00b      	b.n	800a140 <UART_SetConfig+0x1e4>
 800a128:	2300      	movs	r3, #0
 800a12a:	76fb      	strb	r3, [r7, #27]
 800a12c:	e038      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a12e:	2302      	movs	r3, #2
 800a130:	76fb      	strb	r3, [r7, #27]
 800a132:	e035      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a134:	2304      	movs	r3, #4
 800a136:	76fb      	strb	r3, [r7, #27]
 800a138:	e032      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a13a:	2308      	movs	r3, #8
 800a13c:	76fb      	strb	r3, [r7, #27]
 800a13e:	e02f      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a140:	2310      	movs	r3, #16
 800a142:	76fb      	strb	r3, [r7, #27]
 800a144:	e02c      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a3f      	ldr	r2, [pc, #252]	; (800a248 <UART_SetConfig+0x2ec>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d125      	bne.n	800a19c <UART_SetConfig+0x240>
 800a150:	4b3f      	ldr	r3, [pc, #252]	; (800a250 <UART_SetConfig+0x2f4>)
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a156:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a15a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a15e:	d017      	beq.n	800a190 <UART_SetConfig+0x234>
 800a160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a164:	d817      	bhi.n	800a196 <UART_SetConfig+0x23a>
 800a166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a16a:	d00b      	beq.n	800a184 <UART_SetConfig+0x228>
 800a16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a170:	d811      	bhi.n	800a196 <UART_SetConfig+0x23a>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <UART_SetConfig+0x222>
 800a176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a17a:	d006      	beq.n	800a18a <UART_SetConfig+0x22e>
 800a17c:	e00b      	b.n	800a196 <UART_SetConfig+0x23a>
 800a17e:	2300      	movs	r3, #0
 800a180:	76fb      	strb	r3, [r7, #27]
 800a182:	e00d      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a184:	2302      	movs	r3, #2
 800a186:	76fb      	strb	r3, [r7, #27]
 800a188:	e00a      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a18a:	2304      	movs	r3, #4
 800a18c:	76fb      	strb	r3, [r7, #27]
 800a18e:	e007      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a190:	2308      	movs	r3, #8
 800a192:	76fb      	strb	r3, [r7, #27]
 800a194:	e004      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a196:	2310      	movs	r3, #16
 800a198:	76fb      	strb	r3, [r7, #27]
 800a19a:	e001      	b.n	800a1a0 <UART_SetConfig+0x244>
 800a19c:	2310      	movs	r3, #16
 800a19e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a28      	ldr	r2, [pc, #160]	; (800a248 <UART_SetConfig+0x2ec>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	f040 809e 	bne.w	800a2e8 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1ac:	7efb      	ldrb	r3, [r7, #27]
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	d823      	bhi.n	800a1fa <UART_SetConfig+0x29e>
 800a1b2:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <UART_SetConfig+0x25c>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1fb 	.word	0x0800a1fb
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1fb 	.word	0x0800a1fb
 800a1c8:	0800a1eb 	.word	0x0800a1eb
 800a1cc:	0800a1fb 	.word	0x0800a1fb
 800a1d0:	0800a1fb 	.word	0x0800a1fb
 800a1d4:	0800a1fb 	.word	0x0800a1fb
 800a1d8:	0800a1f3 	.word	0x0800a1f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1dc:	f7fe f9de 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a1e0:	6178      	str	r0, [r7, #20]
        break;
 800a1e2:	e00f      	b.n	800a204 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1e4:	4b1e      	ldr	r3, [pc, #120]	; (800a260 <UART_SetConfig+0x304>)
 800a1e6:	617b      	str	r3, [r7, #20]
        break;
 800a1e8:	e00c      	b.n	800a204 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ea:	f7fe f969 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 800a1ee:	6178      	str	r0, [r7, #20]
        break;
 800a1f0:	e008      	b.n	800a204 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1f6:	617b      	str	r3, [r7, #20]
        break;
 800a1f8:	e004      	b.n	800a204 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	76bb      	strb	r3, [r7, #26]
        break;
 800a202:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	f000 812c 	beq.w	800a464 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	4a14      	ldr	r2, [pc, #80]	; (800a264 <UART_SetConfig+0x308>)
 800a212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a216:	461a      	mov	r2, r3
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a21e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	4613      	mov	r3, r2
 800a226:	005b      	lsls	r3, r3, #1
 800a228:	4413      	add	r3, r2
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d305      	bcc.n	800a23c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d915      	bls.n	800a268 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	76bb      	strb	r3, [r7, #26]
 800a240:	e110      	b.n	800a464 <UART_SetConfig+0x508>
 800a242:	bf00      	nop
 800a244:	cfff69f3 	.word	0xcfff69f3
 800a248:	40008000 	.word	0x40008000
 800a24c:	40013800 	.word	0x40013800
 800a250:	40021000 	.word	0x40021000
 800a254:	40004400 	.word	0x40004400
 800a258:	40004800 	.word	0x40004800
 800a25c:	40004c00 	.word	0x40004c00
 800a260:	00f42400 	.word	0x00f42400
 800a264:	08010c5c 	.word	0x08010c5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f04f 0100 	mov.w	r1, #0
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	4a85      	ldr	r2, [pc, #532]	; (800a48c <UART_SetConfig+0x530>)
 800a276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	f04f 0300 	mov.w	r3, #0
 800a280:	f7f6 fc1c 	bl	8000abc <__aeabi_uldivmod>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4610      	mov	r0, r2
 800a28a:	4619      	mov	r1, r3
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	020b      	lsls	r3, r1, #8
 800a296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a29a:	0202      	lsls	r2, r0, #8
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	6849      	ldr	r1, [r1, #4]
 800a2a0:	0849      	lsrs	r1, r1, #1
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	f04f 0100 	mov.w	r1, #0
 800a2a8:	1814      	adds	r4, r2, r0
 800a2aa:	eb43 0501 	adc.w	r5, r3, r1
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f6 fbfe 	bl	8000abc <__aeabi_uldivmod>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2ce:	d308      	bcc.n	800a2e2 <UART_SetConfig+0x386>
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d6:	d204      	bcs.n	800a2e2 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	e0c0      	b.n	800a464 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	76bb      	strb	r3, [r7, #26]
 800a2e6:	e0bd      	b.n	800a464 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f0:	d164      	bne.n	800a3bc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a2f2:	7efb      	ldrb	r3, [r7, #27]
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d828      	bhi.n	800a34a <UART_SetConfig+0x3ee>
 800a2f8:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <UART_SetConfig+0x3a4>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a325 	.word	0x0800a325
 800a304:	0800a32d 	.word	0x0800a32d
 800a308:	0800a335 	.word	0x0800a335
 800a30c:	0800a34b 	.word	0x0800a34b
 800a310:	0800a33b 	.word	0x0800a33b
 800a314:	0800a34b 	.word	0x0800a34b
 800a318:	0800a34b 	.word	0x0800a34b
 800a31c:	0800a34b 	.word	0x0800a34b
 800a320:	0800a343 	.word	0x0800a343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a324:	f7fe f93a 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a328:	6178      	str	r0, [r7, #20]
        break;
 800a32a:	e013      	b.n	800a354 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a32c:	f7fe f94c 	bl	80085c8 <HAL_RCC_GetPCLK2Freq>
 800a330:	6178      	str	r0, [r7, #20]
        break;
 800a332:	e00f      	b.n	800a354 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a334:	4b56      	ldr	r3, [pc, #344]	; (800a490 <UART_SetConfig+0x534>)
 800a336:	617b      	str	r3, [r7, #20]
        break;
 800a338:	e00c      	b.n	800a354 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a33a:	f7fe f8c1 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 800a33e:	6178      	str	r0, [r7, #20]
        break;
 800a340:	e008      	b.n	800a354 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a346:	617b      	str	r3, [r7, #20]
        break;
 800a348:	e004      	b.n	800a354 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	76bb      	strb	r3, [r7, #26]
        break;
 800a352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8084 	beq.w	800a464 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	4a4a      	ldr	r2, [pc, #296]	; (800a48c <UART_SetConfig+0x530>)
 800a362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a366:	461a      	mov	r2, r3
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36e:	005a      	lsls	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	085b      	lsrs	r3, r3, #1
 800a376:	441a      	add	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b0f      	cmp	r3, #15
 800a386:	d916      	bls.n	800a3b6 <UART_SetConfig+0x45a>
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38e:	d212      	bcs.n	800a3b6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	b29b      	uxth	r3, r3
 800a394:	f023 030f 	bic.w	r3, r3, #15
 800a398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	085b      	lsrs	r3, r3, #1
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f003 0307 	and.w	r3, r3, #7
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	89fa      	ldrh	r2, [r7, #14]
 800a3b2:	60da      	str	r2, [r3, #12]
 800a3b4:	e056      	b.n	800a464 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	76bb      	strb	r3, [r7, #26]
 800a3ba:	e053      	b.n	800a464 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3bc:	7efb      	ldrb	r3, [r7, #27]
 800a3be:	2b08      	cmp	r3, #8
 800a3c0:	d827      	bhi.n	800a412 <UART_SetConfig+0x4b6>
 800a3c2:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <UART_SetConfig+0x46c>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a3f5 	.word	0x0800a3f5
 800a3d0:	0800a3fd 	.word	0x0800a3fd
 800a3d4:	0800a413 	.word	0x0800a413
 800a3d8:	0800a403 	.word	0x0800a403
 800a3dc:	0800a413 	.word	0x0800a413
 800a3e0:	0800a413 	.word	0x0800a413
 800a3e4:	0800a413 	.word	0x0800a413
 800a3e8:	0800a40b 	.word	0x0800a40b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3ec:	f7fe f8d6 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a3f0:	6178      	str	r0, [r7, #20]
        break;
 800a3f2:	e013      	b.n	800a41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3f4:	f7fe f8e8 	bl	80085c8 <HAL_RCC_GetPCLK2Freq>
 800a3f8:	6178      	str	r0, [r7, #20]
        break;
 800a3fa:	e00f      	b.n	800a41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3fc:	4b24      	ldr	r3, [pc, #144]	; (800a490 <UART_SetConfig+0x534>)
 800a3fe:	617b      	str	r3, [r7, #20]
        break;
 800a400:	e00c      	b.n	800a41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a402:	f7fe f85d 	bl	80084c0 <HAL_RCC_GetSysClockFreq>
 800a406:	6178      	str	r0, [r7, #20]
        break;
 800a408:	e008      	b.n	800a41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a40a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a40e:	617b      	str	r3, [r7, #20]
        break;
 800a410:	e004      	b.n	800a41c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	76bb      	strb	r3, [r7, #26]
        break;
 800a41a:	bf00      	nop
    }

    if (pclk != 0U)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d020      	beq.n	800a464 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	4a19      	ldr	r2, [pc, #100]	; (800a48c <UART_SetConfig+0x530>)
 800a428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42c:	461a      	mov	r2, r3
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	fbb3 f2f2 	udiv	r2, r3, r2
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	441a      	add	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b0f      	cmp	r3, #15
 800a44a:	d909      	bls.n	800a460 <UART_SetConfig+0x504>
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a452:	d205      	bcs.n	800a460 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	b29a      	uxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60da      	str	r2, [r3, #12]
 800a45e:	e001      	b.n	800a464 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a480:	7ebb      	ldrb	r3, [r7, #26]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3720      	adds	r7, #32
 800a486:	46bd      	mov	sp, r7
 800a488:	bdb0      	pop	{r4, r5, r7, pc}
 800a48a:	bf00      	nop
 800a48c:	08010c5c 	.word	0x08010c5c
 800a490:	00f42400 	.word	0x00f42400

0800a494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a528:	f003 0310 	and.w	r3, r3, #16
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	d01a      	beq.n	800a5aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a592:	d10a      	bne.n	800a5aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	605a      	str	r2, [r3, #4]
  }
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af02      	add	r7, sp, #8
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5e8:	f7f8 ff26 	bl	8003438 <HAL_GetTick>
 800a5ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0308 	and.w	r3, r3, #8
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d10e      	bne.n	800a61a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f82f 	bl	800a66e <UART_WaitOnFlagUntilTimeout>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e025      	b.n	800a666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b04      	cmp	r3, #4
 800a626:	d10e      	bne.n	800a646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f819 	bl	800a66e <UART_WaitOnFlagUntilTimeout>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e00f      	b.n	800a666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2220      	movs	r2, #32
 800a64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2220      	movs	r2, #32
 800a652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b09c      	sub	sp, #112	; 0x70
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	603b      	str	r3, [r7, #0]
 800a67a:	4613      	mov	r3, r2
 800a67c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a67e:	e0a9      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a686:	f000 80a5 	beq.w	800a7d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68a:	f7f8 fed5 	bl	8003438 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a696:	429a      	cmp	r2, r3
 800a698:	d302      	bcc.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a69a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d140      	bne.n	800a722 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6b4:	667b      	str	r3, [r7, #100]	; 0x64
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e6      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	f023 0301 	bic.w	r3, r3, #1
 800a6e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e5      	bne.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e069      	b.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d051      	beq.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a73a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a73e:	d149      	bne.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a748:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a75e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
 800a76a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e6      	bne.n	800a74a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3308      	adds	r3, #8
 800a782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	613b      	str	r3, [r7, #16]
   return(result);
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f023 0301 	bic.w	r3, r3, #1
 800a792:	66bb      	str	r3, [r7, #104]	; 0x68
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3308      	adds	r3, #8
 800a79a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a79c:	623a      	str	r2, [r7, #32]
 800a79e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	69f9      	ldr	r1, [r7, #28]
 800a7a2:	6a3a      	ldr	r2, [r7, #32]
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e5      	bne.n	800a77c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2220      	movs	r2, #32
 800a7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e010      	b.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69da      	ldr	r2, [r3, #28]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4013      	ands	r3, r2
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	bf0c      	ite	eq
 800a7e4:	2301      	moveq	r3, #1
 800a7e6:	2300      	movne	r3, #0
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	f43f af46 	beq.w	800a680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3770      	adds	r7, #112	; 0x70
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a800:	b480      	push	{r7}
 800a802:	b0a3      	sub	sp, #140	; 0x8c
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	4613      	mov	r3, r2
 800a80c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	88fa      	ldrh	r2, [r7, #6]
 800a818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a832:	d10e      	bne.n	800a852 <UART_Start_Receive_IT+0x52>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d105      	bne.n	800a848 <UART_Start_Receive_IT+0x48>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a842:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a846:	e02d      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	22ff      	movs	r2, #255	; 0xff
 800a84c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a850:	e028      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10d      	bne.n	800a876 <UART_Start_Receive_IT+0x76>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d104      	bne.n	800a86c <UART_Start_Receive_IT+0x6c>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a86a:	e01b      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	227f      	movs	r2, #127	; 0x7f
 800a870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a874:	e016      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a87e:	d10d      	bne.n	800a89c <UART_Start_Receive_IT+0x9c>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d104      	bne.n	800a892 <UART_Start_Receive_IT+0x92>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	227f      	movs	r2, #127	; 0x7f
 800a88c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a890:	e008      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	223f      	movs	r2, #63	; 0x3f
 800a896:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a89a:	e003      	b.n	800a8a4 <UART_Start_Receive_IT+0xa4>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2222      	movs	r2, #34	; 0x22
 800a8b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a8c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a8d8:	673a      	str	r2, [r7, #112]	; 0x70
 800a8da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a8de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a8e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e3      	bne.n	800a8b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f4:	d153      	bne.n	800a99e <UART_Start_Receive_IT+0x19e>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8fc:	88fa      	ldrh	r2, [r7, #6]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d34d      	bcc.n	800a99e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90a:	d107      	bne.n	800a91c <UART_Start_Receive_IT+0x11c>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d103      	bne.n	800a91c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4a4b      	ldr	r2, [pc, #300]	; (800aa44 <UART_Start_Receive_IT+0x244>)
 800a918:	671a      	str	r2, [r3, #112]	; 0x70
 800a91a:	e002      	b.n	800a922 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a4a      	ldr	r2, [pc, #296]	; (800aa48 <UART_Start_Receive_IT+0x248>)
 800a920:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01a      	beq.n	800a968 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	461a      	mov	r2, r3
 800a950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a954:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a956:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a95a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e4      	bne.n	800a932 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a988:	64ba      	str	r2, [r7, #72]	; 0x48
 800a98a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a98e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e5      	bne.n	800a968 <UART_Start_Receive_IT+0x168>
 800a99c:	e04a      	b.n	800aa34 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a6:	d107      	bne.n	800a9b8 <UART_Start_Receive_IT+0x1b8>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d103      	bne.n	800a9b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4a26      	ldr	r2, [pc, #152]	; (800aa4c <UART_Start_Receive_IT+0x24c>)
 800a9b4:	671a      	str	r2, [r3, #112]	; 0x70
 800a9b6:	e002      	b.n	800a9be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4a25      	ldr	r2, [pc, #148]	; (800aa50 <UART_Start_Receive_IT+0x250>)
 800a9bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d019      	beq.n	800aa02 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a9e2:	677b      	str	r3, [r7, #116]	; 0x74
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e6      	bne.n	800a9ce <UART_Start_Receive_IT+0x1ce>
 800aa00:	e018      	b.n	800aa34 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f043 0320 	orr.w	r3, r3, #32
 800aa16:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa20:	623b      	str	r3, [r7, #32]
 800aa22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa24:	69f9      	ldr	r1, [r7, #28]
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	e841 2300 	strex	r3, r2, [r1]
 800aa2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e6      	bne.n	800aa02 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	378c      	adds	r7, #140	; 0x8c
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	0800b15d 	.word	0x0800b15d
 800aa48:	0800ae65 	.word	0x0800ae65
 800aa4c:	0800ad03 	.word	0x0800ad03
 800aa50:	0800aba3 	.word	0x0800aba3

0800aa54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b095      	sub	sp, #84	; 0x54
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa7a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e6      	bne.n	800aa5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3308      	adds	r3, #8
 800aa94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	e853 3f00 	ldrex	r3, [r3]
 800aa9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaa4:	f023 0301 	bic.w	r3, r3, #1
 800aaa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e3      	bne.n	800aa8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d118      	bne.n	800ab00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	60bb      	str	r3, [r7, #8]
   return(result);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f023 0310 	bic.w	r3, r3, #16
 800aae2:	647b      	str	r3, [r7, #68]	; 0x44
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaec:	61bb      	str	r3, [r7, #24]
 800aaee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	6979      	ldr	r1, [r7, #20]
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	613b      	str	r3, [r7, #16]
   return(result);
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e6      	bne.n	800aace <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ab14:	bf00      	nop
 800ab16:	3754      	adds	r7, #84	; 0x54
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff f9f6 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab68:	61fb      	str	r3, [r7, #28]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	61bb      	str	r3, [r7, #24]
 800ab74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab76:	6979      	ldr	r1, [r7, #20]
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	e841 2300 	strex	r3, r2, [r1]
 800ab7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e6      	bne.n	800ab54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2220      	movs	r2, #32
 800ab8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff f9c1 	bl	8009f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab9a:	bf00      	nop
 800ab9c:	3720      	adds	r7, #32
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b096      	sub	sp, #88	; 0x58
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abba:	2b22      	cmp	r3, #34	; 0x22
 800abbc:	f040 8095 	bne.w	800acea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800abce:	b2d9      	uxtb	r1, r3
 800abd0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abda:	400a      	ands	r2, r1
 800abdc:	b2d2      	uxtb	r2, r2
 800abde:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d178      	bne.n	800acfa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac1c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac26:	647b      	str	r3, [r7, #68]	; 0x44
 800ac28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e6      	bne.n	800ac08 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	623b      	str	r3, [r7, #32]
   return(result);
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3308      	adds	r3, #8
 800ac58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac5a:	633a      	str	r2, [r7, #48]	; 0x30
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e5      	bne.n	800ac3a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2220      	movs	r2, #32
 800ac72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d12e      	bne.n	800ace2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	e853 3f00 	ldrex	r3, [r3]
 800ac96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0310 	bic.w	r3, r3, #16
 800ac9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca8:	61fb      	str	r3, [r7, #28]
 800acaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	69b9      	ldr	r1, [r7, #24]
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	e841 2300 	strex	r3, r2, [r1]
 800acb4:	617b      	str	r3, [r7, #20]
   return(result);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e6      	bne.n	800ac8a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	69db      	ldr	r3, [r3, #28]
 800acc2:	f003 0310 	and.w	r3, r3, #16
 800acc6:	2b10      	cmp	r3, #16
 800acc8:	d103      	bne.n	800acd2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2210      	movs	r2, #16
 800acd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff f932 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ace0:	e00b      	b.n	800acfa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7f6 f894 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 800ace8:	e007      	b.n	800acfa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	699a      	ldr	r2, [r3, #24]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f042 0208 	orr.w	r2, r2, #8
 800acf8:	619a      	str	r2, [r3, #24]
}
 800acfa:	bf00      	nop
 800acfc:	3758      	adds	r7, #88	; 0x58
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b096      	sub	sp, #88	; 0x58
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1a:	2b22      	cmp	r3, #34	; 0x22
 800ad1c:	f040 8095 	bne.w	800ae4a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad26:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad2e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ad30:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ad34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ad38:	4013      	ands	r3, r2
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad44:	1c9a      	adds	r2, r3, #2
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d178      	bne.n	800ae5a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad86:	643b      	str	r3, [r7, #64]	; 0x40
 800ad88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e6      	bne.n	800ad68 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	61fb      	str	r3, [r7, #28]
   return(result);
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	f023 0301 	bic.w	r3, r3, #1
 800adb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3308      	adds	r3, #8
 800adb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e5      	bne.n	800ad9a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2220      	movs	r2, #32
 800add2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d12e      	bne.n	800ae42 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f023 0310 	bic.w	r3, r3, #16
 800adfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae08:	61bb      	str	r3, [r7, #24]
 800ae0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6979      	ldr	r1, [r7, #20]
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	613b      	str	r3, [r7, #16]
   return(result);
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e6      	bne.n	800adea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	f003 0310 	and.w	r3, r3, #16
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d103      	bne.n	800ae32 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2210      	movs	r2, #16
 800ae30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff f882 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae40:	e00b      	b.n	800ae5a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7f5 ffe4 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 800ae48:	e007      	b.n	800ae5a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f042 0208 	orr.w	r2, r2, #8
 800ae58:	619a      	str	r2, [r3, #24]
}
 800ae5a:	bf00      	nop
 800ae5c:	3758      	adds	r7, #88	; 0x58
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b0a6      	sub	sp, #152	; 0x98
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae72:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	2b22      	cmp	r3, #34	; 0x22
 800ae9c:	f040 814f 	bne.w	800b13e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aea6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aeaa:	e0f6      	b.n	800b09a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aeb6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800aeba:	b2d9      	uxtb	r1, r3
 800aebc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec6:	400a      	ands	r2, r1
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3b01      	subs	r3, #1
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d053      	beq.n	800afa6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aefe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d011      	beq.n	800af2e <UART_RxISR_8BIT_FIFOEN+0xca>
 800af0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00b      	beq.n	800af2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2201      	movs	r2, #1
 800af1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af24:	f043 0201 	orr.w	r2, r3, #1
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d011      	beq.n	800af5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800af3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00b      	beq.n	800af5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2202      	movs	r2, #2
 800af4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af54:	f043 0204 	orr.w	r2, r3, #4
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d011      	beq.n	800af8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800af6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2204      	movs	r2, #4
 800af7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af84:	f043 0202 	orr.w	r2, r3, #2
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe ffc9 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afac:	b29b      	uxth	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d173      	bne.n	800b09a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800afc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800afd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800afd6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800afda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800afe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e4      	bne.n	800afb2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3308      	adds	r3, #8
 800afee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800affa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3308      	adds	r3, #8
 800b00a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b00c:	657a      	str	r2, [r7, #84]	; 0x54
 800b00e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e3      	bne.n	800afe8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2220      	movs	r2, #32
 800b024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b032:	2b01      	cmp	r3, #1
 800b034:	d12e      	bne.n	800b094 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f023 0310 	bic.w	r3, r3, #16
 800b050:	67bb      	str	r3, [r7, #120]	; 0x78
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b05a:	643b      	str	r3, [r7, #64]	; 0x40
 800b05c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e6      	bne.n	800b03c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b10      	cmp	r3, #16
 800b07a:	d103      	bne.n	800b084 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2210      	movs	r2, #16
 800b082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7fe ff59 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
 800b092:	e002      	b.n	800b09a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7f5 febb 	bl	8000e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b09a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d006      	beq.n	800b0b0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f47f aefe 	bne.w	800aeac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b0ba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d045      	beq.n	800b14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d23e      	bcs.n	800b14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0e6:	673b      	str	r3, [r7, #112]	; 0x70
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b0f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e5      	bne.n	800b0d0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a14      	ldr	r2, [pc, #80]	; (800b158 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800b108:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	e853 3f00 	ldrex	r3, [r3]
 800b116:	60bb      	str	r3, [r7, #8]
   return(result);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	f043 0320 	orr.w	r3, r3, #32
 800b11e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12c:	6979      	ldr	r1, [r7, #20]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	e841 2300 	strex	r3, r2, [r1]
 800b134:	613b      	str	r3, [r7, #16]
   return(result);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e6      	bne.n	800b10a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b13c:	e007      	b.n	800b14e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	699a      	ldr	r2, [r3, #24]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f042 0208 	orr.w	r2, r2, #8
 800b14c:	619a      	str	r2, [r3, #24]
}
 800b14e:	bf00      	nop
 800b150:	3798      	adds	r7, #152	; 0x98
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	0800aba3 	.word	0x0800aba3

0800b15c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b0a8      	sub	sp, #160	; 0xa0
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b16a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b192:	2b22      	cmp	r3, #34	; 0x22
 800b194:	f040 8153 	bne.w	800b43e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b19e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1a2:	e0fa      	b.n	800b39a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b1b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b1ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b1be:	4013      	ands	r3, r2
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1cc:	1c9a      	adds	r2, r3, #2
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b1ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d053      	beq.n	800b2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d011      	beq.n	800b22a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00b      	beq.n	800b22a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2201      	movs	r2, #1
 800b218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b220:	f043 0201 	orr.w	r2, r3, #1
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b22a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d011      	beq.n	800b25a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00b      	beq.n	800b25a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2202      	movs	r2, #2
 800b248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b250:	f043 0204 	orr.w	r2, r3, #4
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b25a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d011      	beq.n	800b28a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00b      	beq.n	800b28a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2204      	movs	r2, #4
 800b278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b280:	f043 0202 	orr.w	r2, r3, #2
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7fe fe4b 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d175      	bne.n	800b39a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e4      	bne.n	800b2ae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3308      	adds	r3, #8
 800b308:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b30c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b30e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e1      	bne.n	800b2e4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b332:	2b01      	cmp	r3, #1
 800b334:	d12e      	bne.n	800b394 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34c:	f023 0310 	bic.w	r3, r3, #16
 800b350:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b35a:	647b      	str	r3, [r7, #68]	; 0x44
 800b35c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e6      	bne.n	800b33c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69db      	ldr	r3, [r3, #28]
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b10      	cmp	r3, #16
 800b37a:	d103      	bne.n	800b384 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2210      	movs	r2, #16
 800b382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7fe fdd9 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
 800b392:	e002      	b.n	800b39a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7f5 fd3b 	bl	8000e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b39a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d006      	beq.n	800b3b0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b3a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f47f aefa 	bne.w	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b3ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d045      	beq.n	800b44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b3c8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d23e      	bcs.n	800b44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	623b      	str	r3, [r7, #32]
   return(result);
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3e6:	677b      	str	r3, [r7, #116]	; 0x74
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b3f0:	633a      	str	r2, [r7, #48]	; 0x30
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f8:	e841 2300 	strex	r3, r2, [r1]
 800b3fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e5      	bne.n	800b3d0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a14      	ldr	r2, [pc, #80]	; (800b458 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800b408:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	e853 3f00 	ldrex	r3, [r3]
 800b416:	60fb      	str	r3, [r7, #12]
   return(result);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f043 0320 	orr.w	r3, r3, #32
 800b41e:	673b      	str	r3, [r7, #112]	; 0x70
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
 800b426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42c:	69b9      	ldr	r1, [r7, #24]
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	617b      	str	r3, [r7, #20]
   return(result);
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e6      	bne.n	800b40a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b43c:	e007      	b.n	800b44e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	699a      	ldr	r2, [r3, #24]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0208 	orr.w	r2, r2, #8
 800b44c:	619a      	str	r2, [r3, #24]
}
 800b44e:	bf00      	nop
 800b450:	37a0      	adds	r7, #160	; 0xa0
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	0800ad03 	.word	0x0800ad03

0800b45c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d101      	bne.n	800b4ae <HAL_UARTEx_DisableFifoMode+0x16>
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	e027      	b.n	800b4fe <HAL_UARTEx_DisableFifoMode+0x66>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2224      	movs	r2, #36	; 0x24
 800b4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0201 	bic.w	r2, r2, #1
 800b4d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b4dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d101      	bne.n	800b522 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b51e:	2302      	movs	r3, #2
 800b520:	e02d      	b.n	800b57e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2224      	movs	r2, #36	; 0x24
 800b52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0201 	bic.w	r2, r2, #1
 800b548:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f850 	bl	800b604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2220      	movs	r2, #32
 800b570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b596:	2b01      	cmp	r3, #1
 800b598:	d101      	bne.n	800b59e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b59a:	2302      	movs	r3, #2
 800b59c:	e02d      	b.n	800b5fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2224      	movs	r2, #36	; 0x24
 800b5aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0201 	bic.w	r2, r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f812 	bl	800b604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b610:	2b00      	cmp	r3, #0
 800b612:	d108      	bne.n	800b626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b624:	e031      	b.n	800b68a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b626:	2308      	movs	r3, #8
 800b628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b62a:	2308      	movs	r3, #8
 800b62c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	0e5b      	lsrs	r3, r3, #25
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f003 0307 	and.w	r3, r3, #7
 800b63c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	0f5b      	lsrs	r3, r3, #29
 800b646:	b2db      	uxtb	r3, r3
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	7b3a      	ldrb	r2, [r7, #12]
 800b652:	4911      	ldr	r1, [pc, #68]	; (800b698 <UARTEx_SetNbDataToProcess+0x94>)
 800b654:	5c8a      	ldrb	r2, [r1, r2]
 800b656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b65a:	7b3a      	ldrb	r2, [r7, #12]
 800b65c:	490f      	ldr	r1, [pc, #60]	; (800b69c <UARTEx_SetNbDataToProcess+0x98>)
 800b65e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b660:	fb93 f3f2 	sdiv	r3, r3, r2
 800b664:	b29a      	uxth	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	7b7a      	ldrb	r2, [r7, #13]
 800b670:	4909      	ldr	r1, [pc, #36]	; (800b698 <UARTEx_SetNbDataToProcess+0x94>)
 800b672:	5c8a      	ldrb	r2, [r1, r2]
 800b674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b678:	7b7a      	ldrb	r2, [r7, #13]
 800b67a:	4908      	ldr	r1, [pc, #32]	; (800b69c <UARTEx_SetNbDataToProcess+0x98>)
 800b67c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b67e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	08010c74 	.word	0x08010c74
 800b69c:	08010c7c 	.word	0x08010c7c

0800b6a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b6b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b6b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b6d6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b6da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b704:	b084      	sub	sp, #16
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	f107 0014 	add.w	r0, r7, #20
 800b712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	b004      	add	sp, #16
 800b744:	4770      	bx	lr
	...

0800b748 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b748:	b480      	push	{r7}
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	78db      	ldrb	r3, [r3, #3]
 800b776:	2b03      	cmp	r3, #3
 800b778:	d81f      	bhi.n	800b7ba <USB_ActivateEndpoint+0x72>
 800b77a:	a201      	add	r2, pc, #4	; (adr r2, 800b780 <USB_ActivateEndpoint+0x38>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b791 	.word	0x0800b791
 800b784:	0800b7ad 	.word	0x0800b7ad
 800b788:	0800b7c3 	.word	0x0800b7c3
 800b78c:	0800b79f 	.word	0x0800b79f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b790:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b798:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b79c:	e012      	b.n	800b7c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b79e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b7a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b7a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b7aa:	e00b      	b.n	800b7c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b7ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b7b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b7b8:	e004      	b.n	800b7c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b7c0:	e000      	b.n	800b7c4 <USB_ActivateEndpoint+0x7c>
      break;
 800b7c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	441a      	add	r2, r3
 800b7ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	b21b      	sxth	r3, r3
 800b7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7fe:	b21a      	sxth	r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	b21b      	sxth	r3, r3
 800b806:	4313      	orrs	r3, r2
 800b808:	b21b      	sxth	r3, r3
 800b80a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	441a      	add	r2, r3
 800b818:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	7b1b      	ldrb	r3, [r3, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f040 8149 	bne.w	800bacc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	785b      	ldrb	r3, [r3, #1]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 8084 	beq.w	800b94c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	61bb      	str	r3, [r7, #24]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b84e:	b29b      	uxth	r3, r3
 800b850:	461a      	mov	r2, r3
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	4413      	add	r3, r2
 800b856:	61bb      	str	r3, [r7, #24]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	00da      	lsls	r2, r3, #3
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	88db      	ldrh	r3, [r3, #6]
 800b86c:	085b      	lsrs	r3, r3, #1
 800b86e:	b29b      	uxth	r3, r3
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	827b      	strh	r3, [r7, #18]
 800b886:	8a7b      	ldrh	r3, [r7, #18]
 800b888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01b      	beq.n	800b8c8 <USB_ActivateEndpoint+0x180>
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a6:	823b      	strh	r3, [r7, #16]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	8a3b      	ldrh	r3, [r7, #16]
 800b8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d020      	beq.n	800b912 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	81bb      	strh	r3, [r7, #12]
 800b8e8:	89bb      	ldrh	r3, [r7, #12]
 800b8ea:	f083 0320 	eor.w	r3, r3, #32
 800b8ee:	81bb      	strh	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	441a      	add	r2, r3
 800b8fa:	89bb      	ldrh	r3, [r7, #12]
 800b8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	8013      	strh	r3, [r2, #0]
 800b910:	e2a6      	b.n	800be60 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b928:	81fb      	strh	r3, [r7, #14]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	441a      	add	r2, r3
 800b934:	89fb      	ldrh	r3, [r7, #14]
 800b936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b93e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b946:	b29b      	uxth	r3, r3
 800b948:	8013      	strh	r3, [r2, #0]
 800b94a:	e289      	b.n	800be60 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	633b      	str	r3, [r7, #48]	; 0x30
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b956:	b29b      	uxth	r3, r3
 800b958:	461a      	mov	r2, r3
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	4413      	add	r3, r2
 800b95e:	633b      	str	r3, [r7, #48]	; 0x30
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	00da      	lsls	r2, r3, #3
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	4413      	add	r3, r2
 800b96a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	88db      	ldrh	r3, [r3, #6]
 800b974:	085b      	lsrs	r3, r3, #1
 800b976:	b29b      	uxth	r3, r3
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	4413      	add	r3, r2
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	00da      	lsls	r2, r3, #3
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	4413      	add	r3, r2
 800b99e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	2b3e      	cmp	r3, #62	; 0x3e
 800b9aa:	d918      	bls.n	800b9de <USB_ActivateEndpoint+0x296>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	095b      	lsrs	r3, r3, #5
 800b9b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	f003 031f 	and.w	r3, r3, #31
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d102      	bne.n	800b9c6 <USB_ActivateEndpoint+0x27e>
 800b9c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	029b      	lsls	r3, r3, #10
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e029      	b.n	800ba32 <USB_ActivateEndpoint+0x2ea>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d112      	bne.n	800ba0c <USB_ActivateEndpoint+0x2c4>
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	801a      	strh	r2, [r3, #0]
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	e012      	b.n	800ba32 <USB_ActivateEndpoint+0x2ea>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	085b      	lsrs	r3, r3, #1
 800ba12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <USB_ActivateEndpoint+0x2de>
 800ba20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba22:	3301      	adds	r3, #1
 800ba24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	029b      	lsls	r3, r3, #10
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ba40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01b      	beq.n	800ba82 <USB_ActivateEndpoint+0x33a>
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba60:	843b      	strh	r3, [r7, #32]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	441a      	add	r2, r3
 800ba6c:	8c3b      	ldrh	r3, [r7, #32]
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba98:	83fb      	strh	r3, [r7, #30]
 800ba9a:	8bfb      	ldrh	r3, [r7, #30]
 800ba9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800baa0:	83fb      	strh	r3, [r7, #30]
 800baa2:	8bfb      	ldrh	r3, [r7, #30]
 800baa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800baa8:	83fb      	strh	r3, [r7, #30]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	441a      	add	r2, r3
 800bab4:	8bfb      	ldrh	r3, [r7, #30]
 800bab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800babe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	8013      	strh	r3, [r2, #0]
 800baca:	e1c9      	b.n	800be60 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	78db      	ldrb	r3, [r3, #3]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d11e      	bne.n	800bb12 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	441a      	add	r2, r3
 800baf8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bafc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	8013      	strh	r3, [r2, #0]
 800bb10:	e01d      	b.n	800bb4e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bb24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	441a      	add	r2, r3
 800bb36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bb3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5e:	4413      	add	r3, r2
 800bb60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	00da      	lsls	r2, r3, #3
 800bb68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb70:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	085b      	lsrs	r3, r3, #1
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb80:	801a      	strh	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	657b      	str	r3, [r7, #84]	; 0x54
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	461a      	mov	r2, r3
 800bb90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb92:	4413      	add	r3, r2
 800bb94:	657b      	str	r3, [r7, #84]	; 0x54
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	00da      	lsls	r2, r3, #3
 800bb9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9e:	4413      	add	r3, r2
 800bba0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bba4:	653b      	str	r3, [r7, #80]	; 0x50
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	895b      	ldrh	r3, [r3, #10]
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f040 8093 	bne.w	800bce6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bbd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <USB_ActivateEndpoint+0x4cc>
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbf2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	441a      	add	r2, r3
 800bbfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bc22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <USB_ActivateEndpoint+0x51c>
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc42:	877b      	strh	r3, [r7, #58]	; 0x3a
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	441a      	add	r2, r3
 800bc4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc7a:	873b      	strh	r3, [r7, #56]	; 0x38
 800bc7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bc7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc82:	873b      	strh	r3, [r7, #56]	; 0x38
 800bc84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bc86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc8a:	873b      	strh	r3, [r7, #56]	; 0x38
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	441a      	add	r2, r3
 800bc96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bc98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	881b      	ldrh	r3, [r3, #0]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	441a      	add	r2, r3
 800bcce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	8013      	strh	r3, [r2, #0]
 800bce4:	e0bc      	b.n	800be60 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bcf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bcfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01d      	beq.n	800bd3e <USB_ActivateEndpoint+0x5f6>
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	441a      	add	r2, r3
 800bd26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bd2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bd4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01d      	beq.n	800bd96 <USB_ActivateEndpoint+0x64e>
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bd82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	78db      	ldrb	r3, [r3, #3]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d024      	beq.n	800bde8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bdb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bdbc:	f083 0320 	eor.w	r3, r3, #32
 800bdc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	441a      	add	r2, r3
 800bdce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bdd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	8013      	strh	r3, [r2, #0]
 800bde6:	e01d      	b.n	800be24 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	881b      	ldrh	r3, [r3, #0]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	441a      	add	r2, r3
 800be0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800be10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	b29b      	uxth	r3, r3
 800be22:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	441a      	add	r2, r3
 800be48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800be60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800be64:	4618      	mov	r0, r3
 800be66:	3774      	adds	r7, #116	; 0x74
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be70:	b480      	push	{r7}
 800be72:	b08d      	sub	sp, #52	; 0x34
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	7b1b      	ldrb	r3, [r3, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 808e 	bne.w	800bfa0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	785b      	ldrb	r3, [r3, #1]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d044      	beq.n	800bf16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	81bb      	strh	r3, [r7, #12]
 800be9a:	89bb      	ldrh	r3, [r7, #12]
 800be9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01b      	beq.n	800bedc <USB_DeactivateEndpoint+0x6c>
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beba:	817b      	strh	r3, [r7, #10]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	441a      	add	r2, r3
 800bec6:	897b      	ldrh	r3, [r7, #10]
 800bec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800becc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bed8:	b29b      	uxth	r3, r3
 800beda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bef2:	813b      	strh	r3, [r7, #8]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	441a      	add	r2, r3
 800befe:	893b      	ldrh	r3, [r7, #8]
 800bf00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	8013      	strh	r3, [r2, #0]
 800bf14:	e192      	b.n	800c23c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	827b      	strh	r3, [r7, #18]
 800bf24:	8a7b      	ldrh	r3, [r7, #18]
 800bf26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d01b      	beq.n	800bf66 <USB_DeactivateEndpoint+0xf6>
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf44:	823b      	strh	r3, [r7, #16]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	441a      	add	r2, r3
 800bf50:	8a3b      	ldrh	r3, [r7, #16]
 800bf52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf7c:	81fb      	strh	r3, [r7, #14]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	441a      	add	r2, r3
 800bf88:	89fb      	ldrh	r3, [r7, #14]
 800bf8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	8013      	strh	r3, [r2, #0]
 800bf9e:	e14d      	b.n	800c23c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f040 80a5 	bne.w	800c0f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	843b      	strh	r3, [r7, #32]
 800bfb8:	8c3b      	ldrh	r3, [r7, #32]
 800bfba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d01b      	beq.n	800bffa <USB_DeactivateEndpoint+0x18a>
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfd8:	83fb      	strh	r3, [r7, #30]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	441a      	add	r2, r3
 800bfe4:	8bfb      	ldrh	r3, [r7, #30]
 800bfe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	83bb      	strh	r3, [r7, #28]
 800c008:	8bbb      	ldrh	r3, [r7, #28]
 800c00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d01b      	beq.n	800c04a <USB_DeactivateEndpoint+0x1da>
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c028:	837b      	strh	r3, [r7, #26]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	441a      	add	r2, r3
 800c034:	8b7b      	ldrh	r3, [r7, #26]
 800c036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c03a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c03e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c046:	b29b      	uxth	r3, r3
 800c048:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c05c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c060:	833b      	strh	r3, [r7, #24]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	441a      	add	r2, r3
 800c06c:	8b3b      	ldrh	r3, [r7, #24]
 800c06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c07a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c07e:	b29b      	uxth	r3, r3
 800c080:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	881b      	ldrh	r3, [r3, #0]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c098:	82fb      	strh	r3, [r7, #22]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	441a      	add	r2, r3
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d0:	82bb      	strh	r3, [r7, #20]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	441a      	add	r2, r3
 800c0dc:	8abb      	ldrh	r3, [r7, #20]
 800c0de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	8013      	strh	r3, [r2, #0]
 800c0f2:	e0a3      	b.n	800c23c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01b      	beq.n	800c144 <USB_DeactivateEndpoint+0x2d4>
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c122:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	441a      	add	r2, r3
 800c12e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c140:	b29b      	uxth	r3, r3
 800c142:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c152:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d01b      	beq.n	800c194 <USB_DeactivateEndpoint+0x324>
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c172:	853b      	strh	r3, [r7, #40]	; 0x28
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	441a      	add	r2, r3
 800c17e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c18c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c190:	b29b      	uxth	r3, r3
 800c192:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	441a      	add	r2, r3
 800c1b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c1b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	441a      	add	r2, r3
 800c1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c200:	b29b      	uxth	r3, r3
 800c202:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	b29b      	uxth	r3, r3
 800c212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c21a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	441a      	add	r2, r3
 800c226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c22c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c238:	b29b      	uxth	r3, r3
 800c23a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c23c:	2300      	movs	r3, #0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3734      	adds	r7, #52	; 0x34
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b0c2      	sub	sp, #264	; 0x108
 800c24e:	af00      	add	r7, sp, #0
 800c250:	1d3b      	adds	r3, r7, #4
 800c252:	6018      	str	r0, [r3, #0]
 800c254:	463b      	mov	r3, r7
 800c256:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c258:	463b      	mov	r3, r7
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	f040 8509 	bne.w	800cc76 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c264:	463b      	mov	r3, r7
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	699a      	ldr	r2, [r3, #24]
 800c26a:	463b      	mov	r3, r7
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	429a      	cmp	r2, r3
 800c272:	d905      	bls.n	800c280 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800c274:	463b      	mov	r3, r7
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c27e:	e004      	b.n	800c28a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800c280:	463b      	mov	r3, r7
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c28a:	463b      	mov	r3, r7
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	7b1b      	ldrb	r3, [r3, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d128      	bne.n	800c2e6 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c294:	463b      	mov	r3, r7
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6959      	ldr	r1, [r3, #20]
 800c29a:	463b      	mov	r3, r7
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	88da      	ldrh	r2, [r3, #6]
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	1d38      	adds	r0, r7, #4
 800c2a8:	6800      	ldr	r0, [r0, #0]
 800c2aa:	f001 f9da 	bl	800d662 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c2ae:	1d3b      	adds	r3, r7, #4
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
 800c2b4:	1d3b      	adds	r3, r7, #4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	461a      	mov	r2, r3
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	00da      	lsls	r2, r3, #3
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	801a      	strh	r2, [r3, #0]
 800c2e2:	f000 bc9f 	b.w	800cc24 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	78db      	ldrb	r3, [r3, #3]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	f040 8347 	bne.w	800c980 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6a1a      	ldr	r2, [r3, #32]
 800c2f8:	463b      	mov	r3, r7
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	f240 82eb 	bls.w	800c8da <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c304:	1d3b      	adds	r3, r7, #4
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	463b      	mov	r3, r7
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4413      	add	r3, r2
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	b29b      	uxth	r3, r3
 800c316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c322:	1d3b      	adds	r3, r7, #4
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	463b      	mov	r3, r7
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	441a      	add	r2, r3
 800c330:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c33c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c344:	b29b      	uxth	r3, r3
 800c346:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c348:	463b      	mov	r3, r7
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6a1a      	ldr	r2, [r3, #32]
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	1ad2      	subs	r2, r2, r3
 800c354:	463b      	mov	r3, r7
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c35a:	1d3b      	adds	r3, r7, #4
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	463b      	mov	r3, r7
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 8159 	beq.w	800c628 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c376:	1d3b      	adds	r3, r7, #4
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30
 800c37c:	463b      	mov	r3, r7
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d164      	bne.n	800c450 <USB_EPStartXfer+0x206>
 800c386:	1d3b      	adds	r3, r7, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c38c:	1d3b      	adds	r3, r7, #4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	4413      	add	r3, r2
 800c39c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c39e:	463b      	mov	r3, r7
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	00da      	lsls	r2, r3, #3
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3b4:	2b3e      	cmp	r3, #62	; 0x3e
 800c3b6:	d91c      	bls.n	800c3f2 <USB_EPStartXfer+0x1a8>
 800c3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3bc:	095b      	lsrs	r3, r3, #5
 800c3be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c6:	f003 031f 	and.w	r3, r3, #31
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d104      	bne.n	800c3d8 <USB_EPStartXfer+0x18e>
 800c3ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c3d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	029b      	lsls	r3, r3, #10
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	801a      	strh	r2, [r3, #0]
 800c3f0:	e04a      	b.n	800c488 <USB_EPStartXfer+0x23e>
 800c3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d112      	bne.n	800c420 <USB_EPStartXfer+0x1d6>
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c404:	b29a      	uxth	r2, r3
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	801a      	strh	r2, [r3, #0]
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c418:	b29a      	uxth	r2, r3
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	e033      	b.n	800c488 <USB_EPStartXfer+0x23e>
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c424:	085b      	lsrs	r3, r3, #1
 800c426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	2b00      	cmp	r3, #0
 800c434:	d004      	beq.n	800c440 <USB_EPStartXfer+0x1f6>
 800c436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c43a:	3301      	adds	r3, #1
 800c43c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c440:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c444:	b29b      	uxth	r3, r3
 800c446:	029b      	lsls	r3, r3, #10
 800c448:	b29a      	uxth	r2, r3
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	801a      	strh	r2, [r3, #0]
 800c44e:	e01b      	b.n	800c488 <USB_EPStartXfer+0x23e>
 800c450:	463b      	mov	r3, r7
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d116      	bne.n	800c488 <USB_EPStartXfer+0x23e>
 800c45a:	1d3b      	adds	r3, r7, #4
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c462:	b29b      	uxth	r3, r3
 800c464:	461a      	mov	r2, r3
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	4413      	add	r3, r2
 800c46a:	633b      	str	r3, [r7, #48]	; 0x30
 800c46c:	463b      	mov	r3, r7
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00da      	lsls	r2, r3, #3
 800c474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c476:	4413      	add	r3, r2
 800c478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c482:	b29a      	uxth	r2, r3
 800c484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c486:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c488:	463b      	mov	r3, r7
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	895b      	ldrh	r3, [r3, #10]
 800c48e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c492:	463b      	mov	r3, r7
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6959      	ldr	r1, [r3, #20]
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c4a2:	1d38      	adds	r0, r7, #4
 800c4a4:	6800      	ldr	r0, [r0, #0]
 800c4a6:	f001 f8dc 	bl	800d662 <USB_WritePMA>
            ep->xfer_buff += len;
 800c4aa:	463b      	mov	r3, r7
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	695a      	ldr	r2, [r3, #20]
 800c4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b4:	441a      	add	r2, r3
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c4bc:	463b      	mov	r3, r7
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a1a      	ldr	r2, [r3, #32]
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d909      	bls.n	800c4e0 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800c4cc:	463b      	mov	r3, r7
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6a1a      	ldr	r2, [r3, #32]
 800c4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	463b      	mov	r3, r7
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	621a      	str	r2, [r3, #32]
 800c4de:	e008      	b.n	800c4f2 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c4ea:	463b      	mov	r3, r7
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4f2:	463b      	mov	r3, r7
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	785b      	ldrb	r3, [r3, #1]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d164      	bne.n	800c5c6 <USB_EPStartXfer+0x37c>
 800c4fc:	1d3b      	adds	r3, r7, #4
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	61bb      	str	r3, [r7, #24]
 800c502:	1d3b      	adds	r3, r7, #4
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	461a      	mov	r2, r3
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	4413      	add	r3, r2
 800c512:	61bb      	str	r3, [r7, #24]
 800c514:	463b      	mov	r3, r7
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	00da      	lsls	r2, r3, #3
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	4413      	add	r3, r2
 800c520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c52a:	2b3e      	cmp	r3, #62	; 0x3e
 800c52c:	d91c      	bls.n	800c568 <USB_EPStartXfer+0x31e>
 800c52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c532:	095b      	lsrs	r3, r3, #5
 800c534:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53c:	f003 031f 	and.w	r3, r3, #31
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <USB_EPStartXfer+0x304>
 800c544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c548:	3b01      	subs	r3, #1
 800c54a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c54e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c552:	b29b      	uxth	r3, r3
 800c554:	029b      	lsls	r3, r3, #10
 800c556:	b29b      	uxth	r3, r3
 800c558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c55c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c560:	b29a      	uxth	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	801a      	strh	r2, [r3, #0]
 800c566:	e04d      	b.n	800c604 <USB_EPStartXfer+0x3ba>
 800c568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d112      	bne.n	800c596 <USB_EPStartXfer+0x34c>
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	b29b      	uxth	r3, r3
 800c576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	801a      	strh	r2, [r3, #0]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	b29b      	uxth	r3, r3
 800c586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c58a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c58e:	b29a      	uxth	r2, r3
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	801a      	strh	r2, [r3, #0]
 800c594:	e036      	b.n	800c604 <USB_EPStartXfer+0x3ba>
 800c596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <USB_EPStartXfer+0x36c>
 800c5ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c5b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	029b      	lsls	r3, r3, #10
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	801a      	strh	r2, [r3, #0]
 800c5c4:	e01e      	b.n	800c604 <USB_EPStartXfer+0x3ba>
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d119      	bne.n	800c604 <USB_EPStartXfer+0x3ba>
 800c5d0:	1d3b      	adds	r3, r7, #4
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	623b      	str	r3, [r7, #32]
 800c5d6:	1d3b      	adds	r3, r7, #4
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	623b      	str	r3, [r7, #32]
 800c5e8:	463b      	mov	r3, r7
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	00da      	lsls	r2, r3, #3
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c604:	463b      	mov	r3, r7
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	891b      	ldrh	r3, [r3, #8]
 800c60a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c60e:	463b      	mov	r3, r7
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6959      	ldr	r1, [r3, #20]
 800c614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c61e:	1d38      	adds	r0, r7, #4
 800c620:	6800      	ldr	r0, [r0, #0]
 800c622:	f001 f81e 	bl	800d662 <USB_WritePMA>
 800c626:	e2fd      	b.n	800cc24 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c628:	463b      	mov	r3, r7
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	785b      	ldrb	r3, [r3, #1]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d164      	bne.n	800c6fc <USB_EPStartXfer+0x4b2>
 800c632:	1d3b      	adds	r3, r7, #4
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	64bb      	str	r3, [r7, #72]	; 0x48
 800c638:	1d3b      	adds	r3, r7, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c640:	b29b      	uxth	r3, r3
 800c642:	461a      	mov	r2, r3
 800c644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c646:	4413      	add	r3, r2
 800c648:	64bb      	str	r3, [r7, #72]	; 0x48
 800c64a:	463b      	mov	r3, r7
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	00da      	lsls	r2, r3, #3
 800c652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c654:	4413      	add	r3, r2
 800c656:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c65a:	647b      	str	r3, [r7, #68]	; 0x44
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c660:	2b3e      	cmp	r3, #62	; 0x3e
 800c662:	d91c      	bls.n	800c69e <USB_EPStartXfer+0x454>
 800c664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c668:	095b      	lsrs	r3, r3, #5
 800c66a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c672:	f003 031f 	and.w	r3, r3, #31
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <USB_EPStartXfer+0x43a>
 800c67a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c67e:	3b01      	subs	r3, #1
 800c680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c688:	b29b      	uxth	r3, r3
 800c68a:	029b      	lsls	r3, r3, #10
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c696:	b29a      	uxth	r2, r3
 800c698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c69a:	801a      	strh	r2, [r3, #0]
 800c69c:	e04d      	b.n	800c73a <USB_EPStartXfer+0x4f0>
 800c69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d112      	bne.n	800c6cc <USB_EPStartXfer+0x482>
 800c6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b4:	801a      	strh	r2, [r3, #0]
 800c6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c8:	801a      	strh	r2, [r3, #0]
 800c6ca:	e036      	b.n	800c73a <USB_EPStartXfer+0x4f0>
 800c6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <USB_EPStartXfer+0x4a2>
 800c6e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c6ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	029b      	lsls	r3, r3, #10
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6f8:	801a      	strh	r2, [r3, #0]
 800c6fa:	e01e      	b.n	800c73a <USB_EPStartXfer+0x4f0>
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d119      	bne.n	800c73a <USB_EPStartXfer+0x4f0>
 800c706:	1d3b      	adds	r3, r7, #4
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	653b      	str	r3, [r7, #80]	; 0x50
 800c70c:	1d3b      	adds	r3, r7, #4
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c714:	b29b      	uxth	r3, r3
 800c716:	461a      	mov	r2, r3
 800c718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c71a:	4413      	add	r3, r2
 800c71c:	653b      	str	r3, [r7, #80]	; 0x50
 800c71e:	463b      	mov	r3, r7
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	00da      	lsls	r2, r3, #3
 800c726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c728:	4413      	add	r3, r2
 800c72a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c72e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c734:	b29a      	uxth	r2, r3
 800c736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c738:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c73a:	463b      	mov	r3, r7
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	891b      	ldrh	r3, [r3, #8]
 800c740:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c744:	463b      	mov	r3, r7
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6959      	ldr	r1, [r3, #20]
 800c74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c74e:	b29b      	uxth	r3, r3
 800c750:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c754:	1d38      	adds	r0, r7, #4
 800c756:	6800      	ldr	r0, [r0, #0]
 800c758:	f000 ff83 	bl	800d662 <USB_WritePMA>
            ep->xfer_buff += len;
 800c75c:	463b      	mov	r3, r7
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	695a      	ldr	r2, [r3, #20]
 800c762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c766:	441a      	add	r2, r3
 800c768:	463b      	mov	r3, r7
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c76e:	463b      	mov	r3, r7
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6a1a      	ldr	r2, [r3, #32]
 800c774:	463b      	mov	r3, r7
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d909      	bls.n	800c792 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800c77e:	463b      	mov	r3, r7
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6a1a      	ldr	r2, [r3, #32]
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c788:	1ad2      	subs	r2, r2, r3
 800c78a:	463b      	mov	r3, r7
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	621a      	str	r2, [r3, #32]
 800c790:	e008      	b.n	800c7a4 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800c792:	463b      	mov	r3, r7
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c79c:	463b      	mov	r3, r7
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c7a4:	1d3b      	adds	r3, r7, #4
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	643b      	str	r3, [r7, #64]	; 0x40
 800c7aa:	463b      	mov	r3, r7
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d164      	bne.n	800c87e <USB_EPStartXfer+0x634>
 800c7b4:	1d3b      	adds	r3, r7, #4
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7ba:	1d3b      	adds	r3, r7, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	4413      	add	r3, r2
 800c7ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7cc:	463b      	mov	r3, r7
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	00da      	lsls	r2, r3, #3
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7e2:	2b3e      	cmp	r3, #62	; 0x3e
 800c7e4:	d91c      	bls.n	800c820 <USB_EPStartXfer+0x5d6>
 800c7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ea:	095b      	lsrs	r3, r3, #5
 800c7ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7f4:	f003 031f 	and.w	r3, r3, #31
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <USB_EPStartXfer+0x5bc>
 800c7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c800:	3b01      	subs	r3, #1
 800c802:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	029b      	lsls	r3, r3, #10
 800c80e:	b29b      	uxth	r3, r3
 800c810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c818:	b29a      	uxth	r2, r3
 800c81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81c:	801a      	strh	r2, [r3, #0]
 800c81e:	e04a      	b.n	800c8b6 <USB_EPStartXfer+0x66c>
 800c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c824:	2b00      	cmp	r3, #0
 800c826:	d112      	bne.n	800c84e <USB_EPStartXfer+0x604>
 800c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c832:	b29a      	uxth	r2, r3
 800c834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83a:	881b      	ldrh	r3, [r3, #0]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c846:	b29a      	uxth	r2, r3
 800c848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84a:	801a      	strh	r2, [r3, #0]
 800c84c:	e033      	b.n	800c8b6 <USB_EPStartXfer+0x66c>
 800c84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c852:	085b      	lsrs	r3, r3, #1
 800c854:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <USB_EPStartXfer+0x624>
 800c864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c868:	3301      	adds	r3, #1
 800c86a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c872:	b29b      	uxth	r3, r3
 800c874:	029b      	lsls	r3, r3, #10
 800c876:	b29a      	uxth	r2, r3
 800c878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87a:	801a      	strh	r2, [r3, #0]
 800c87c:	e01b      	b.n	800c8b6 <USB_EPStartXfer+0x66c>
 800c87e:	463b      	mov	r3, r7
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d116      	bne.n	800c8b6 <USB_EPStartXfer+0x66c>
 800c888:	1d3b      	adds	r3, r7, #4
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c890:	b29b      	uxth	r3, r3
 800c892:	461a      	mov	r2, r3
 800c894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c896:	4413      	add	r3, r2
 800c898:	643b      	str	r3, [r7, #64]	; 0x40
 800c89a:	463b      	mov	r3, r7
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	00da      	lsls	r2, r3, #3
 800c8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c8b6:	463b      	mov	r3, r7
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	895b      	ldrh	r3, [r3, #10]
 800c8bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8c0:	463b      	mov	r3, r7
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6959      	ldr	r1, [r3, #20]
 800c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c8d0:	1d38      	adds	r0, r7, #4
 800c8d2:	6800      	ldr	r0, [r0, #0]
 800c8d4:	f000 fec5 	bl	800d662 <USB_WritePMA>
 800c8d8:	e1a4      	b.n	800cc24 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c8da:	463b      	mov	r3, r7
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c8e4:	1d3b      	adds	r3, r7, #4
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	463b      	mov	r3, r7
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	881b      	ldrh	r3, [r3, #0]
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c902:	1d3b      	adds	r3, r7, #4
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	463b      	mov	r3, r7
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	441a      	add	r2, r3
 800c910:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c924:	b29b      	uxth	r3, r3
 800c926:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c928:	1d3b      	adds	r3, r7, #4
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c92e:	1d3b      	adds	r3, r7, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c936:	b29b      	uxth	r3, r3
 800c938:	461a      	mov	r2, r3
 800c93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c93c:	4413      	add	r3, r2
 800c93e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c940:	463b      	mov	r3, r7
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	00da      	lsls	r2, r3, #3
 800c948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c94a:	4413      	add	r3, r2
 800c94c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c950:	65bb      	str	r3, [r7, #88]	; 0x58
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c956:	b29a      	uxth	r2, r3
 800c958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c95a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c95c:	463b      	mov	r3, r7
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	891b      	ldrh	r3, [r3, #8]
 800c962:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c966:	463b      	mov	r3, r7
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6959      	ldr	r1, [r3, #20]
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c970:	b29b      	uxth	r3, r3
 800c972:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c976:	1d38      	adds	r0, r7, #4
 800c978:	6800      	ldr	r0, [r0, #0]
 800c97a:	f000 fe72 	bl	800d662 <USB_WritePMA>
 800c97e:	e151      	b.n	800cc24 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c980:	463b      	mov	r3, r7
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6a1a      	ldr	r2, [r3, #32]
 800c986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	463b      	mov	r3, r7
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c992:	1d3b      	adds	r3, r7, #4
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	463b      	mov	r3, r7
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 809b 	beq.w	800cae4 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c9ae:	1d3b      	adds	r3, r7, #4
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	673b      	str	r3, [r7, #112]	; 0x70
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	785b      	ldrb	r3, [r3, #1]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d164      	bne.n	800ca88 <USB_EPStartXfer+0x83e>
 800c9be:	1d3b      	adds	r3, r7, #4
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9c4:	1d3b      	adds	r3, r7, #4
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9d2:	4413      	add	r3, r2
 800c9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	00da      	lsls	r2, r3, #3
 800c9de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9e6:	667b      	str	r3, [r7, #100]	; 0x64
 800c9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ec:	2b3e      	cmp	r3, #62	; 0x3e
 800c9ee:	d91c      	bls.n	800ca2a <USB_EPStartXfer+0x7e0>
 800c9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f4:	095b      	lsrs	r3, r3, #5
 800c9f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fe:	f003 031f 	and.w	r3, r3, #31
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d104      	bne.n	800ca10 <USB_EPStartXfer+0x7c6>
 800ca06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	029b      	lsls	r3, r3, #10
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca26:	801a      	strh	r2, [r3, #0]
 800ca28:	e04a      	b.n	800cac0 <USB_EPStartXfer+0x876>
 800ca2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d112      	bne.n	800ca58 <USB_EPStartXfer+0x80e>
 800ca32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca40:	801a      	strh	r2, [r3, #0]
 800ca42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca54:	801a      	strh	r2, [r3, #0]
 800ca56:	e033      	b.n	800cac0 <USB_EPStartXfer+0x876>
 800ca58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca5c:	085b      	lsrs	r3, r3, #1
 800ca5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <USB_EPStartXfer+0x82e>
 800ca6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca72:	3301      	adds	r3, #1
 800ca74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	029b      	lsls	r3, r3, #10
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca84:	801a      	strh	r2, [r3, #0]
 800ca86:	e01b      	b.n	800cac0 <USB_EPStartXfer+0x876>
 800ca88:	463b      	mov	r3, r7
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	785b      	ldrb	r3, [r3, #1]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d116      	bne.n	800cac0 <USB_EPStartXfer+0x876>
 800ca92:	1d3b      	adds	r3, r7, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caa0:	4413      	add	r3, r2
 800caa2:	673b      	str	r3, [r7, #112]	; 0x70
 800caa4:	463b      	mov	r3, r7
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	00da      	lsls	r2, r3, #3
 800caac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caae:	4413      	add	r3, r2
 800cab0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caba:	b29a      	uxth	r2, r3
 800cabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cabe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cac0:	463b      	mov	r3, r7
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	895b      	ldrh	r3, [r3, #10]
 800cac6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800caca:	463b      	mov	r3, r7
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6959      	ldr	r1, [r3, #20]
 800cad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cada:	1d38      	adds	r0, r7, #4
 800cadc:	6800      	ldr	r0, [r0, #0]
 800cade:	f000 fdc0 	bl	800d662 <USB_WritePMA>
 800cae2:	e09f      	b.n	800cc24 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cae4:	463b      	mov	r3, r7
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	785b      	ldrb	r3, [r3, #1]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d164      	bne.n	800cbb8 <USB_EPStartXfer+0x96e>
 800caee:	1d3b      	adds	r3, r7, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800caf4:	1d3b      	adds	r3, r7, #4
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	461a      	mov	r2, r3
 800cb00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb02:	4413      	add	r3, r2
 800cb04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb06:	463b      	mov	r3, r7
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	00da      	lsls	r2, r3, #3
 800cb0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb10:	4413      	add	r3, r2
 800cb12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb16:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1c:	2b3e      	cmp	r3, #62	; 0x3e
 800cb1e:	d91c      	bls.n	800cb5a <USB_EPStartXfer+0x910>
 800cb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb24:	095b      	lsrs	r3, r3, #5
 800cb26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb2e:	f003 031f 	and.w	r3, r3, #31
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d104      	bne.n	800cb40 <USB_EPStartXfer+0x8f6>
 800cb36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	029b      	lsls	r3, r3, #10
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb56:	801a      	strh	r2, [r3, #0]
 800cb58:	e053      	b.n	800cc02 <USB_EPStartXfer+0x9b8>
 800cb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d112      	bne.n	800cb88 <USB_EPStartXfer+0x93e>
 800cb62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb70:	801a      	strh	r2, [r3, #0]
 800cb72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb84:	801a      	strh	r2, [r3, #0]
 800cb86:	e03c      	b.n	800cc02 <USB_EPStartXfer+0x9b8>
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb8c:	085b      	lsrs	r3, r3, #1
 800cb8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d004      	beq.n	800cba8 <USB_EPStartXfer+0x95e>
 800cb9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cba2:	3301      	adds	r3, #1
 800cba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	029b      	lsls	r3, r3, #10
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	e024      	b.n	800cc02 <USB_EPStartXfer+0x9b8>
 800cbb8:	463b      	mov	r3, r7
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	785b      	ldrb	r3, [r3, #1]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d11f      	bne.n	800cc02 <USB_EPStartXfer+0x9b8>
 800cbc2:	1d3b      	adds	r3, r7, #4
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbca:	1d3b      	adds	r3, r7, #4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbda:	4413      	add	r3, r2
 800cbdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	00da      	lsls	r2, r3, #3
 800cbe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbec:	4413      	add	r3, r2
 800cbee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cbf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cc02:	463b      	mov	r3, r7
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	891b      	ldrh	r3, [r3, #8]
 800cc08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc0c:	463b      	mov	r3, r7
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6959      	ldr	r1, [r3, #20]
 800cc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cc1c:	1d38      	adds	r0, r7, #4
 800cc1e:	6800      	ldr	r0, [r0, #0]
 800cc20:	f000 fd1f 	bl	800d662 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc24:	1d3b      	adds	r3, r7, #4
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	463b      	mov	r3, r7
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc3e:	817b      	strh	r3, [r7, #10]
 800cc40:	897b      	ldrh	r3, [r7, #10]
 800cc42:	f083 0310 	eor.w	r3, r3, #16
 800cc46:	817b      	strh	r3, [r7, #10]
 800cc48:	897b      	ldrh	r3, [r7, #10]
 800cc4a:	f083 0320 	eor.w	r3, r3, #32
 800cc4e:	817b      	strh	r3, [r7, #10]
 800cc50:	1d3b      	adds	r3, r7, #4
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	463b      	mov	r3, r7
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	441a      	add	r2, r3
 800cc5e:	897b      	ldrh	r3, [r7, #10]
 800cc60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	8013      	strh	r3, [r2, #0]
 800cc74:	e3b5      	b.n	800d3e2 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cc76:	463b      	mov	r3, r7
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	7b1b      	ldrb	r3, [r3, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 8090 	bne.w	800cda2 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cc82:	463b      	mov	r3, r7
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	699a      	ldr	r2, [r3, #24]
 800cc88:	463b      	mov	r3, r7
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d90e      	bls.n	800ccb0 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800cc92:	463b      	mov	r3, r7
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800cc9c:	463b      	mov	r3, r7
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cca6:	1ad2      	subs	r2, r2, r3
 800cca8:	463b      	mov	r3, r7
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	619a      	str	r2, [r3, #24]
 800ccae:	e008      	b.n	800ccc2 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800ccb0:	463b      	mov	r3, r7
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ccba:	463b      	mov	r3, r7
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ccc2:	1d3b      	adds	r3, r7, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ccca:	1d3b      	adds	r3, r7, #4
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccda:	4413      	add	r3, r2
 800ccdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cce0:	463b      	mov	r3, r7
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	00da      	lsls	r2, r3, #3
 800cce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccec:	4413      	add	r3, r2
 800ccee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ccf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfa:	2b3e      	cmp	r3, #62	; 0x3e
 800ccfc:	d91d      	bls.n	800cd3a <USB_EPStartXfer+0xaf0>
 800ccfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd02:	095b      	lsrs	r3, r3, #5
 800cd04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd0c:	f003 031f 	and.w	r3, r3, #31
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d104      	bne.n	800cd1e <USB_EPStartXfer+0xad4>
 800cd14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	029b      	lsls	r3, r3, #10
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd36:	801a      	strh	r2, [r3, #0]
 800cd38:	e325      	b.n	800d386 <USB_EPStartXfer+0x113c>
 800cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d116      	bne.n	800cd70 <USB_EPStartXfer+0xb26>
 800cd42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd54:	801a      	strh	r2, [r3, #0]
 800cd56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd6c:	801a      	strh	r2, [r3, #0]
 800cd6e:	e30a      	b.n	800d386 <USB_EPStartXfer+0x113c>
 800cd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd74:	085b      	lsrs	r3, r3, #1
 800cd76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <USB_EPStartXfer+0xb46>
 800cd86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cd90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	029b      	lsls	r3, r3, #10
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd9e:	801a      	strh	r2, [r3, #0]
 800cda0:	e2f1      	b.n	800d386 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cda2:	463b      	mov	r3, r7
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	78db      	ldrb	r3, [r3, #3]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	f040 818f 	bne.w	800d0cc <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cdae:	463b      	mov	r3, r7
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	785b      	ldrb	r3, [r3, #1]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d175      	bne.n	800cea4 <USB_EPStartXfer+0xc5a>
 800cdb8:	1d3b      	adds	r3, r7, #4
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdc0:	1d3b      	adds	r3, r7, #4
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cdd0:	4413      	add	r3, r2
 800cdd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	00da      	lsls	r2, r3, #3
 800cdde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cde2:	4413      	add	r3, r2
 800cde4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cde8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cdec:	463b      	mov	r3, r7
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	2b3e      	cmp	r3, #62	; 0x3e
 800cdf4:	d91f      	bls.n	800ce36 <USB_EPStartXfer+0xbec>
 800cdf6:	463b      	mov	r3, r7
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	095b      	lsrs	r3, r3, #5
 800cdfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce02:	463b      	mov	r3, r7
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	f003 031f 	and.w	r3, r3, #31
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <USB_EPStartXfer+0xbd0>
 800ce10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce14:	3b01      	subs	r3, #1
 800ce16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	029b      	lsls	r3, r3, #10
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce32:	801a      	strh	r2, [r3, #0]
 800ce34:	e05c      	b.n	800cef0 <USB_EPStartXfer+0xca6>
 800ce36:	463b      	mov	r3, r7
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d116      	bne.n	800ce6e <USB_EPStartXfer+0xc24>
 800ce40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce52:	801a      	strh	r2, [r3, #0]
 800ce54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce6a:	801a      	strh	r2, [r3, #0]
 800ce6c:	e040      	b.n	800cef0 <USB_EPStartXfer+0xca6>
 800ce6e:	463b      	mov	r3, r7
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	085b      	lsrs	r3, r3, #1
 800ce76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce7a:	463b      	mov	r3, r7
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <USB_EPStartXfer+0xc48>
 800ce88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	029b      	lsls	r3, r3, #10
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cea0:	801a      	strh	r2, [r3, #0]
 800cea2:	e025      	b.n	800cef0 <USB_EPStartXfer+0xca6>
 800cea4:	463b      	mov	r3, r7
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	785b      	ldrb	r3, [r3, #1]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d120      	bne.n	800cef0 <USB_EPStartXfer+0xca6>
 800ceae:	1d3b      	adds	r3, r7, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ceb6:	1d3b      	adds	r3, r7, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	461a      	mov	r2, r3
 800cec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cec6:	4413      	add	r3, r2
 800cec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cecc:	463b      	mov	r3, r7
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	00da      	lsls	r2, r3, #3
 800ced4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ced8:	4413      	add	r3, r2
 800ceda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cee2:	463b      	mov	r3, r7
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ceee:	801a      	strh	r2, [r3, #0]
 800cef0:	1d3b      	adds	r3, r7, #4
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cef8:	463b      	mov	r3, r7
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	785b      	ldrb	r3, [r3, #1]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d175      	bne.n	800cfee <USB_EPStartXfer+0xda4>
 800cf02:	1d3b      	adds	r3, r7, #4
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf0a:	1d3b      	adds	r3, r7, #4
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	461a      	mov	r2, r3
 800cf16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf20:	463b      	mov	r3, r7
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	00da      	lsls	r2, r3, #3
 800cf28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf2c:	4413      	add	r3, r2
 800cf2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf36:	463b      	mov	r3, r7
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	2b3e      	cmp	r3, #62	; 0x3e
 800cf3e:	d91f      	bls.n	800cf80 <USB_EPStartXfer+0xd36>
 800cf40:	463b      	mov	r3, r7
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	095b      	lsrs	r3, r3, #5
 800cf48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf4c:	463b      	mov	r3, r7
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	f003 031f 	and.w	r3, r3, #31
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d104      	bne.n	800cf64 <USB_EPStartXfer+0xd1a>
 800cf5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	029b      	lsls	r3, r3, #10
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf7c:	801a      	strh	r2, [r3, #0]
 800cf7e:	e058      	b.n	800d032 <USB_EPStartXfer+0xde8>
 800cf80:	463b      	mov	r3, r7
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d116      	bne.n	800cfb8 <USB_EPStartXfer+0xd6e>
 800cf8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf9c:	801a      	strh	r2, [r3, #0]
 800cf9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfb4:	801a      	strh	r2, [r3, #0]
 800cfb6:	e03c      	b.n	800d032 <USB_EPStartXfer+0xde8>
 800cfb8:	463b      	mov	r3, r7
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	085b      	lsrs	r3, r3, #1
 800cfc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cfc4:	463b      	mov	r3, r7
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d004      	beq.n	800cfdc <USB_EPStartXfer+0xd92>
 800cfd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cfdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	029b      	lsls	r3, r3, #10
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfea:	801a      	strh	r2, [r3, #0]
 800cfec:	e021      	b.n	800d032 <USB_EPStartXfer+0xde8>
 800cfee:	463b      	mov	r3, r7
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	785b      	ldrb	r3, [r3, #1]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d11c      	bne.n	800d032 <USB_EPStartXfer+0xde8>
 800cff8:	1d3b      	adds	r3, r7, #4
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d000:	b29b      	uxth	r3, r3
 800d002:	461a      	mov	r2, r3
 800d004:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d008:	4413      	add	r3, r2
 800d00a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d00e:	463b      	mov	r3, r7
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	00da      	lsls	r2, r3, #3
 800d016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d01a:	4413      	add	r3, r2
 800d01c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d024:	463b      	mov	r3, r7
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d030:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d032:	463b      	mov	r3, r7
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 81a4 	beq.w	800d386 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d03e:	1d3b      	adds	r3, r7, #4
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	463b      	mov	r3, r7
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d052:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <USB_EPStartXfer+0xe20>
 800d05e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10d      	bne.n	800d086 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d06a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d06e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 8187 	bne.w	800d386 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d078:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d080:	2b00      	cmp	r3, #0
 800d082:	f040 8180 	bne.w	800d386 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d086:	1d3b      	adds	r3, r7, #4
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	463b      	mov	r3, r7
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4413      	add	r3, r2
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	b29b      	uxth	r3, r3
 800d098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d0a4:	1d3b      	adds	r3, r7, #4
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	463b      	mov	r3, r7
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	441a      	add	r2, r3
 800d0b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d0b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	8013      	strh	r3, [r2, #0]
 800d0ca:	e15c      	b.n	800d386 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d0cc:	463b      	mov	r3, r7
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	78db      	ldrb	r3, [r3, #3]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	f040 8155 	bne.w	800d382 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d0d8:	463b      	mov	r3, r7
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	699a      	ldr	r2, [r3, #24]
 800d0de:	463b      	mov	r3, r7
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d90e      	bls.n	800d106 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800d0e8:	463b      	mov	r3, r7
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d0f2:	463b      	mov	r3, r7
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	699a      	ldr	r2, [r3, #24]
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0fc:	1ad2      	subs	r2, r2, r3
 800d0fe:	463b      	mov	r3, r7
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	619a      	str	r2, [r3, #24]
 800d104:	e008      	b.n	800d118 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800d106:	463b      	mov	r3, r7
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d110:	463b      	mov	r3, r7
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2200      	movs	r2, #0
 800d116:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d118:	463b      	mov	r3, r7
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	785b      	ldrb	r3, [r3, #1]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d16f      	bne.n	800d202 <USB_EPStartXfer+0xfb8>
 800d122:	1d3b      	adds	r3, r7, #4
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d12a:	1d3b      	adds	r3, r7, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d132:	b29b      	uxth	r3, r3
 800d134:	461a      	mov	r2, r3
 800d136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d13a:	4413      	add	r3, r2
 800d13c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d140:	463b      	mov	r3, r7
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	00da      	lsls	r2, r3, #3
 800d148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d14c:	4413      	add	r3, r2
 800d14e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d15a:	2b3e      	cmp	r3, #62	; 0x3e
 800d15c:	d91d      	bls.n	800d19a <USB_EPStartXfer+0xf50>
 800d15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d162:	095b      	lsrs	r3, r3, #5
 800d164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d16c:	f003 031f 	and.w	r3, r3, #31
 800d170:	2b00      	cmp	r3, #0
 800d172:	d104      	bne.n	800d17e <USB_EPStartXfer+0xf34>
 800d174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d178:	3b01      	subs	r3, #1
 800d17a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d17e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d182:	b29b      	uxth	r3, r3
 800d184:	029b      	lsls	r3, r3, #10
 800d186:	b29b      	uxth	r3, r3
 800d188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d190:	b29a      	uxth	r2, r3
 800d192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d196:	801a      	strh	r2, [r3, #0]
 800d198:	e058      	b.n	800d24c <USB_EPStartXfer+0x1002>
 800d19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d116      	bne.n	800d1d0 <USB_EPStartXfer+0xf86>
 800d1a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d1cc:	801a      	strh	r2, [r3, #0]
 800d1ce:	e03d      	b.n	800d24c <USB_EPStartXfer+0x1002>
 800d1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1d4:	085b      	lsrs	r3, r3, #1
 800d1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <USB_EPStartXfer+0xfa6>
 800d1e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	029b      	lsls	r3, r3, #10
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d1fe:	801a      	strh	r2, [r3, #0]
 800d200:	e024      	b.n	800d24c <USB_EPStartXfer+0x1002>
 800d202:	463b      	mov	r3, r7
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	785b      	ldrb	r3, [r3, #1]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d11f      	bne.n	800d24c <USB_EPStartXfer+0x1002>
 800d20c:	1d3b      	adds	r3, r7, #4
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d214:	1d3b      	adds	r3, r7, #4
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	461a      	mov	r2, r3
 800d220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d224:	4413      	add	r3, r2
 800d226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d22a:	463b      	mov	r3, r7
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	00da      	lsls	r2, r3, #3
 800d232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d236:	4413      	add	r3, r2
 800d238:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d244:	b29a      	uxth	r2, r3
 800d246:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d24a:	801a      	strh	r2, [r3, #0]
 800d24c:	1d3b      	adds	r3, r7, #4
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d254:	463b      	mov	r3, r7
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	785b      	ldrb	r3, [r3, #1]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d16f      	bne.n	800d33e <USB_EPStartXfer+0x10f4>
 800d25e:	1d3b      	adds	r3, r7, #4
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d266:	1d3b      	adds	r3, r7, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d26e:	b29b      	uxth	r3, r3
 800d270:	461a      	mov	r2, r3
 800d272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d276:	4413      	add	r3, r2
 800d278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d27c:	463b      	mov	r3, r7
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	00da      	lsls	r2, r3, #3
 800d284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d288:	4413      	add	r3, r2
 800d28a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d28e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d296:	2b3e      	cmp	r3, #62	; 0x3e
 800d298:	d91d      	bls.n	800d2d6 <USB_EPStartXfer+0x108c>
 800d29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d29e:	095b      	lsrs	r3, r3, #5
 800d2a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a8:	f003 031f 	and.w	r3, r3, #31
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d104      	bne.n	800d2ba <USB_EPStartXfer+0x1070>
 800d2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	029b      	lsls	r3, r3, #10
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2d2:	801a      	strh	r2, [r3, #0]
 800d2d4:	e057      	b.n	800d386 <USB_EPStartXfer+0x113c>
 800d2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d116      	bne.n	800d30c <USB_EPStartXfer+0x10c2>
 800d2de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2f0:	801a      	strh	r2, [r3, #0]
 800d2f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d302:	b29a      	uxth	r2, r3
 800d304:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d308:	801a      	strh	r2, [r3, #0]
 800d30a:	e03c      	b.n	800d386 <USB_EPStartXfer+0x113c>
 800d30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d004      	beq.n	800d32c <USB_EPStartXfer+0x10e2>
 800d322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d326:	3301      	adds	r3, #1
 800d328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d330:	b29b      	uxth	r3, r3
 800d332:	029b      	lsls	r3, r3, #10
 800d334:	b29a      	uxth	r2, r3
 800d336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d33a:	801a      	strh	r2, [r3, #0]
 800d33c:	e023      	b.n	800d386 <USB_EPStartXfer+0x113c>
 800d33e:	463b      	mov	r3, r7
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d11e      	bne.n	800d386 <USB_EPStartXfer+0x113c>
 800d348:	1d3b      	adds	r3, r7, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d350:	b29b      	uxth	r3, r3
 800d352:	461a      	mov	r2, r3
 800d354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d358:	4413      	add	r3, r2
 800d35a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d35e:	463b      	mov	r3, r7
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	00da      	lsls	r2, r3, #3
 800d366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d36a:	4413      	add	r3, r2
 800d36c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d370:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d378:	b29a      	uxth	r2, r3
 800d37a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d37e:	801a      	strh	r2, [r3, #0]
 800d380:	e001      	b.n	800d386 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e02e      	b.n	800d3e4 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d386:	1d3b      	adds	r3, r7, #4
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	463b      	mov	r3, r7
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d3a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d3b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d3b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d3bc:	1d3b      	adds	r3, r7, #4
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	463b      	mov	r3, r7
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	441a      	add	r2, r3
 800d3ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d3ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	785b      	ldrb	r3, [r3, #1]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d020      	beq.n	800d442 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d416:	81bb      	strh	r3, [r7, #12]
 800d418:	89bb      	ldrh	r3, [r7, #12]
 800d41a:	f083 0310 	eor.w	r3, r3, #16
 800d41e:	81bb      	strh	r3, [r7, #12]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	441a      	add	r2, r3
 800d42a:	89bb      	ldrh	r3, [r7, #12]
 800d42c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	8013      	strh	r3, [r2, #0]
 800d440:	e01f      	b.n	800d482 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	4413      	add	r3, r2
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	b29b      	uxth	r3, r3
 800d450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d458:	81fb      	strh	r3, [r7, #14]
 800d45a:	89fb      	ldrh	r3, [r7, #14]
 800d45c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d460:	81fb      	strh	r3, [r7, #14]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	441a      	add	r2, r3
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d47e:	b29b      	uxth	r3, r3
 800d480:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	7b1b      	ldrb	r3, [r3, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f040 809d 	bne.w	800d5de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	785b      	ldrb	r3, [r3, #1]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d04c      	beq.n	800d546 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	4413      	add	r3, r2
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	823b      	strh	r3, [r7, #16]
 800d4ba:	8a3b      	ldrh	r3, [r7, #16]
 800d4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d01b      	beq.n	800d4fc <USB_EPClearStall+0x6c>
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4413      	add	r3, r2
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4da:	81fb      	strh	r3, [r7, #14]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	441a      	add	r2, r3
 800d4e6:	89fb      	ldrh	r3, [r7, #14]
 800d4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	78db      	ldrb	r3, [r3, #3]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d06c      	beq.n	800d5de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4413      	add	r3, r2
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	b29b      	uxth	r3, r3
 800d512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d51a:	81bb      	strh	r3, [r7, #12]
 800d51c:	89bb      	ldrh	r3, [r7, #12]
 800d51e:	f083 0320 	eor.w	r3, r3, #32
 800d522:	81bb      	strh	r3, [r7, #12]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	441a      	add	r2, r3
 800d52e:	89bb      	ldrh	r3, [r7, #12]
 800d530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d540:	b29b      	uxth	r3, r3
 800d542:	8013      	strh	r3, [r2, #0]
 800d544:	e04b      	b.n	800d5de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	82fb      	strh	r3, [r7, #22]
 800d554:	8afb      	ldrh	r3, [r7, #22]
 800d556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d01b      	beq.n	800d596 <USB_EPClearStall+0x106>
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	4413      	add	r3, r2
 800d568:	881b      	ldrh	r3, [r3, #0]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d574:	82bb      	strh	r3, [r7, #20]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	441a      	add	r2, r3
 800d580:	8abb      	ldrh	r3, [r7, #20]
 800d582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d58a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d592:	b29b      	uxth	r3, r3
 800d594:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ac:	827b      	strh	r3, [r7, #18]
 800d5ae:	8a7b      	ldrh	r3, [r7, #18]
 800d5b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5b4:	827b      	strh	r3, [r7, #18]
 800d5b6:	8a7b      	ldrh	r3, [r7, #18]
 800d5b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d5bc:	827b      	strh	r3, [r7, #18]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	441a      	add	r2, r3
 800d5c8:	8a7b      	ldrh	r3, [r7, #18]
 800d5ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	371c      	adds	r7, #28
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d5f8:	78fb      	ldrb	r3, [r7, #3]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d103      	bne.n	800d606 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2280      	movs	r2, #128	; 0x80
 800d602:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d622:	b29b      	uxth	r3, r3
 800d624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d642:	b480      	push	{r7}
 800d644:	b085      	sub	sp, #20
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d650:	b29b      	uxth	r3, r3
 800d652:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d654:	68fb      	ldr	r3, [r7, #12]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d662:	b480      	push	{r7}
 800d664:	b08d      	sub	sp, #52	; 0x34
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	4611      	mov	r1, r2
 800d66e:	461a      	mov	r2, r3
 800d670:	460b      	mov	r3, r1
 800d672:	80fb      	strh	r3, [r7, #6]
 800d674:	4613      	mov	r3, r2
 800d676:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d678:	88bb      	ldrh	r3, [r7, #4]
 800d67a:	3301      	adds	r3, #1
 800d67c:	085b      	lsrs	r3, r3, #1
 800d67e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	4413      	add	r3, r2
 800d68e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d692:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d698:	e01b      	b.n	800d6d2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	021b      	lsls	r3, r3, #8
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	3302      	adds	r3, #2
 800d6c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e0      	bne.n	800d69a <USB_WritePMA+0x38>
  }
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	3734      	adds	r7, #52	; 0x34
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b08b      	sub	sp, #44	; 0x2c
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	80fb      	strh	r3, [r7, #6]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d6fc:	88bb      	ldrh	r3, [r7, #4]
 800d6fe:	085b      	lsrs	r3, r3, #1
 800d700:	b29b      	uxth	r3, r3
 800d702:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d70c:	88fa      	ldrh	r2, [r7, #6]
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d716:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
 800d71c:	e018      	b.n	800d750 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	b29b      	uxth	r3, r3
 800d724:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	3302      	adds	r3, #2
 800d72a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	3301      	adds	r3, #1
 800d738:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	0a1b      	lsrs	r3, r3, #8
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	3301      	adds	r3, #1
 800d748:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	3b01      	subs	r3, #1
 800d74e:	627b      	str	r3, [r7, #36]	; 0x24
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e3      	bne.n	800d71e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d756:	88bb      	ldrh	r3, [r7, #4]
 800d758:	f003 0301 	and.w	r3, r3, #1
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d007      	beq.n	800d772 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	b29b      	uxth	r3, r3
 800d768:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	701a      	strb	r2, [r3, #0]
  }
}
 800d772:	bf00      	nop
 800d774:	372c      	adds	r7, #44	; 0x2c
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <initDrum>:
" |___/|_|  \\_,_|_|_|_|_\\__,_|\\_, |\n"
"                             |__/ \n";
*/

void initDrum(DRUM* _chnl, DRM_voice _main_voice, DRM_voice _aux_voice, DRM_type _chnl_type, GPIO_PinState _aux_state)
{
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	4608      	mov	r0, r1
 800d788:	4611      	mov	r1, r2
 800d78a:	461a      	mov	r2, r3
 800d78c:	4603      	mov	r3, r0
 800d78e:	70fb      	strb	r3, [r7, #3]
 800d790:	460b      	mov	r3, r1
 800d792:	70bb      	strb	r3, [r7, #2]
 800d794:	4613      	mov	r3, r2
 800d796:	707b      	strb	r3, [r7, #1]
	// main configuration
	_chnl->main_voice 			= _main_voice;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	78fa      	ldrb	r2, [r7, #3]
 800d79c:	701a      	strb	r2, [r3, #0]
	_chnl->aux_voice  			= _aux_voice;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	78ba      	ldrb	r2, [r7, #2]
 800d7a2:	709a      	strb	r2, [r3, #2]
	_chnl->chnl_type   			= _chnl_type;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	787a      	ldrb	r2, [r7, #1]
 800d7a8:	70da      	strb	r2, [r3, #3]

	// parameters default values for cymbal
	_chnl->peak_volume_norm		= 50;		// full volume at 4096*50%=2048
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2232      	movs	r2, #50	; 0x32
 800d7ae:	80da      	strh	r2, [r3, #6]
	_chnl->peak_max_length		= 201;		// 201 	x0.1=20.1ms
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	22c9      	movs	r2, #201	; 0xc9
 800d7b4:	811a      	strh	r2, [r3, #8]
	_chnl->peak_min_length		= 3; 		// 15 	x0.1=1.5ms
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	815a      	strh	r2, [r3, #10]
	_chnl->peak2peak 			= 1500;//2048; 	//512 mute and 2048 ramp-down
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d7c2:	819a      	strh	r2, [r3, #12]
	// if the main pad is mesh, peaks are much longer
	if ((_chnl_type == MESH_PAD_AUTOAUX) || (_chnl_type == MESH_RIM_AUTOAUX))
 800d7c4:	787b      	ldrb	r3, [r7, #1]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <initDrum+0x52>
 800d7ca:	787b      	ldrb	r3, [r7, #1]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d102      	bne.n	800d7d6 <initDrum+0x58>
		_chnl->peak_min_length	= 8; 		// 8 	x0.1=0.8ms
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2208      	movs	r2, #8
 800d7d4:	815a      	strh	r2, [r3, #10]

	// likely to overwrite
	_chnl->alt_voice  			= _main_voice;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	705a      	strb	r2, [r3, #1]

	// update all variables
	_chnl->cooldown		 		= 0;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	81da      	strh	r2, [r3, #14]
	_chnl->main_peaking			= 0;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	741a      	strb	r2, [r3, #16]
	_chnl->main_rdy	 			= 0;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	745a      	strb	r2, [r3, #17]
	_chnl->main_rdy_usealt		= 0;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	749a      	strb	r2, [r3, #18]

	_chnl->main_active_max 	 	= 0;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	829a      	strh	r2, [r3, #20]
	_chnl->main_active_length	= 0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	82da      	strh	r2, [r3, #22]


	_chnl->main_rdy_height 	 	= 0;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	835a      	strh	r2, [r3, #26]
	_chnl->main_rdy_time	 	= 0;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	61da      	str	r2, [r3, #28]
	_chnl->main_rdy_volume	 	= 0;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2020 	strb.w	r2, [r3, #32]
	_chnl->main_rdy_length	 	= 0;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	845a      	strh	r2, [r3, #34]	; 0x22


	_chnl->aux_rdy				= 0;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_chnl->aux_rdy_time			= 0;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	629a      	str	r2, [r3, #40]	; 0x28
	_chnl->aux_active_time		= 0;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	631a      	str	r2, [r3, #48]	; 0x30

	_chnl->aux_status 			= CHANNEL_STATUS_IDLE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	761a      	strb	r2, [r3, #24]

	if ((_aux_state == GPIO_PIN_RESET)||(_chnl_type == CYMBAL_2_ZONE)){
 800d834:	7c3b      	ldrb	r3, [r7, #16]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <initDrum+0xc2>
 800d83a:	787b      	ldrb	r3, [r7, #1]
 800d83c:	2b04      	cmp	r3, #4
 800d83e:	d10a      	bne.n	800d856 <initDrum+0xd8>
		// LOW state, pad input
		_chnl->aux_type = AUX_TYPE_PAD;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PAD_IDLE;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PAD_IDLE;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if ((_aux_state == GPIO_PIN_SET)||(_chnl_type == CYMBAL_HIHAT)||(_chnl_type == CYMBAL_MUTE)){
 800d856:	7c3b      	ldrb	r3, [r7, #16]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d005      	beq.n	800d868 <initDrum+0xea>
 800d85c:	787b      	ldrb	r3, [r7, #1]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d002      	beq.n	800d868 <initDrum+0xea>
 800d862:	787b      	ldrb	r3, [r7, #1]
 800d864:	2b05      	cmp	r3, #5
 800d866:	d10a      	bne.n	800d87e <initDrum+0x100>
		// HIGH state, pedal input
		_chnl->aux_type = AUX_TYPE_PEDAL;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PEDAL_IDLE;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2202      	movs	r2, #2
 800d872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	_chnl->aux_last_state	= _aux_state;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	7c3a      	ldrb	r2, [r7, #16]
 800d882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	_chnl->main_last_on_voice 	= 0;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	_chnl->main_last_on_time 	= 0;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	639a      	str	r2, [r3, #56]	; 0x38
	_chnl->aux_last_on_voice 	= 0;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	_chnl->aux_last_on_time 	= 0;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	641a      	str	r2, [r3, #64]	; 0x40

}
 800d8a2:	bf00      	nop
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
	...

0800d8b0 <Update_channel>:

// V 4.0
uint8_t Update_channel(DRUM* _chnl, uint32_t _adc_reading, GPIO_PinState _aux_state){
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	71fb      	strb	r3, [r7, #7]

	// ### MAIN INPUT ###
	uint16_t thresh = PEAK_THRESHOLD;
 800d8be:	2332      	movs	r3, #50	; 0x32
 800d8c0:	82fb      	strh	r3, [r7, #22]
	if (_chnl->cooldown) {
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	89db      	ldrh	r3, [r3, #14]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d024      	beq.n	800d914 <Update_channel+0x64>
		_chnl->cooldown--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	89db      	ldrh	r3, [r3, #14]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	81da      	strh	r2, [r3, #14]

		// if the peak is happening - no threshold
		if ( _chnl->main_peaking )
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	7c1b      	ldrb	r3, [r3, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <Update_channel+0x34>
			thresh = 1;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	82fb      	strh	r3, [r7, #22]
 800d8e2:	e017      	b.n	800d914 <Update_channel+0x64>
		// until 50ms threshold = (2x max height)
		else if ( _chnl->cooldown > (_chnl->peak2peak - 512) )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	899b      	ldrh	r3, [r3, #12]
 800d8e8:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	89d2      	ldrh	r2, [r2, #14]
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	dc04      	bgt.n	800d8fe <Update_channel+0x4e>
			thresh = (_chnl->main_rdy_height<<1);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	8b5b      	ldrh	r3, [r3, #26]
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	82fb      	strh	r3, [r7, #22]
 800d8fc:	e00a      	b.n	800d914 <Update_channel+0x64>
		// after 50ms, gradually lower the threshold from 75% until 0 after 150ms
		else
			thresh = (uint16_t)(_chnl->main_rdy_height>>5)*(uint16_t)(_chnl->cooldown>>6);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8b5b      	ldrh	r3, [r3, #26]
 800d902:	095b      	lsrs	r3, r3, #5
 800d904:	b29a      	uxth	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	89db      	ldrh	r3, [r3, #14]
 800d90a:	099b      	lsrs	r3, r3, #6
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	fb12 f303 	smulbb	r3, r2, r3
 800d912:	82fb      	strh	r3, [r7, #22]
	}


	if (_adc_reading > thresh){
 800d914:	8afb      	ldrh	r3, [r7, #22]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	429a      	cmp	r2, r3
 800d91a:	f240 8091 	bls.w	800da40 <Update_channel+0x190>
		// new peak, restart cooldown timer
		if (_chnl->cooldown < (_chnl->peak2peak - 512)){
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	89db      	ldrh	r3, [r3, #14]
 800d922:	461a      	mov	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	899b      	ldrh	r3, [r3, #12]
 800d928:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800d92c:	429a      	cmp	r2, r3
 800d92e:	da0c      	bge.n	800d94a <Update_channel+0x9a>
			_chnl->main_peaking  = 1;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2201      	movs	r2, #1
 800d934:	741a      	strb	r2, [r3, #16]

			_chnl->cooldown = _chnl->peak2peak;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	899a      	ldrh	r2, [r3, #12]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	81da      	strh	r2, [r3, #14]
			_chnl->main_active_length 	= 0;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	829a      	strh	r2, [r3, #20]
		}

		// increment peak length until max length is reached
		_chnl->main_active_length +=1;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	8adb      	ldrh	r3, [r3, #22]
 800d94e:	3301      	adds	r3, #1
 800d950:	b29a      	uxth	r2, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	82da      	strh	r2, [r3, #22]

		// if the value is bigger then max, update max
		if (_adc_reading > _chnl->main_active_max)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	8a9b      	ldrh	r3, [r3, #20]
 800d95a:	461a      	mov	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	4293      	cmp	r3, r2
 800d960:	d903      	bls.n	800d96a <Update_channel+0xba>
			_chnl->main_active_max  = _adc_reading;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	b29a      	uxth	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	829a      	strh	r2, [r3, #20]

		// CHECKING END CONDITION
		// End of peak, if the point is lower then half of the max
		if (_adc_reading < (_chnl->main_active_max>>1)) {
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	8a9b      	ldrh	r3, [r3, #20]
 800d96e:	085b      	lsrs	r3, r3, #1
 800d970:	b29b      	uxth	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4293      	cmp	r3, r2
 800d978:	d262      	bcs.n	800da40 <Update_channel+0x190>
			_chnl->main_peaking = 0;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	741a      	strb	r2, [r3, #16]

			// option 1. short peaks higher than 40% of max volume (50*8=400 ADC)
			if ((_chnl->main_active_length < _chnl->peak_min_length) && (_chnl->main_active_max > (_chnl->peak_volume_norm<<3)) ) {
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8ada      	ldrh	r2, [r3, #22]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	895b      	ldrh	r3, [r3, #10]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d221      	bcs.n	800d9d0 <Update_channel+0x120>
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	8a9b      	ldrh	r3, [r3, #20]
 800d990:	461a      	mov	r2, r3
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	88db      	ldrh	r3, [r3, #6]
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	429a      	cmp	r2, r3
 800d99a:	dd19      	ble.n	800d9d0 <Update_channel+0x120>
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	78db      	ldrb	r3, [r3, #3]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d147      	bne.n	800da34 <Update_channel+0x184>
					_chnl->main_rdy 		= 1;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	745a      	strb	r2, [r3, #17]
					_chnl->main_rdy_usealt 	= 0;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	749a      	strb	r2, [r3, #18]
					_chnl->main_rdy_time	= STEP_TIME;
 800d9b0:	4b78      	ldr	r3, [pc, #480]	; (800db94 <Update_channel+0x2e4>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	61da      	str	r2, [r3, #28]
					_chnl->main_rdy_height 	= _chnl->main_active_max;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	8a9a      	ldrh	r2, [r3, #20]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	835a      	strh	r2, [r3, #26]
					_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	8ada      	ldrh	r2, [r3, #22]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	845a      	strh	r2, [r3, #34]	; 0x22
					_chnl->main_rdy_usealt = 1;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 800d9ce:	e031      	b.n	800da34 <Update_channel+0x184>
				}
			// option 2. normal length peaks
			} else if ( ((_chnl->main_active_length >= _chnl->peak_min_length)  ) //|| (_chnl->main_active_max < (_chnl->peak_volume_norm<<2))
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	8ada      	ldrh	r2, [r3, #22]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	895b      	ldrh	r3, [r3, #10]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d323      	bcc.n	800da24 <Update_channel+0x174>
					  && (_chnl->main_active_length <  _chnl->peak_max_length)) {
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8ada      	ldrh	r2, [r3, #22]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	891b      	ldrh	r3, [r3, #8]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d21d      	bcs.n	800da24 <Update_channel+0x174>
				_chnl->main_rdy 		= 1;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	745a      	strb	r2, [r3, #17]
				_chnl->main_rdy_usealt 	= 0;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	749a      	strb	r2, [r3, #18]
				_chnl->main_rdy_time	= STEP_TIME;
 800d9f4:	4b67      	ldr	r3, [pc, #412]	; (800db94 <Update_channel+0x2e4>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	61da      	str	r2, [r3, #28]
				_chnl->main_rdy_height 	= _chnl->main_active_max;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	8a9a      	ldrh	r2, [r3, #20]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	835a      	strh	r2, [r3, #26]
				_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	8ada      	ldrh	r2, [r3, #22]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	845a      	strh	r2, [r3, #34]	; 0x22

				// handle hihat case
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	78db      	ldrb	r3, [r3, #3]
 800da10:	2b03      	cmp	r3, #3
 800da12:	d10e      	bne.n	800da32 <Update_channel+0x182>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	7e1b      	ldrb	r3, [r3, #24]
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d10a      	bne.n	800da32 <Update_channel+0x182>
					_chnl->main_rdy_usealt = 1;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800da22:	e006      	b.n	800da32 <Update_channel+0x182>
			// option 3 - inconsistent peak:
			}else{
//				if (_chnl->cooldown < (_chnl->peak2peak - 512)){
					_chnl->cooldown = 0;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	81da      	strh	r2, [r3, #14]
					_chnl->main_rdy_height 	= 0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	835a      	strh	r2, [r3, #26]
 800da30:	e000      	b.n	800da34 <Update_channel+0x184>
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800da32:	bf00      	nop

//				}
			}

			// reset process
			_chnl->main_active_length 	= 0;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	829a      	strh	r2, [r3, #20]
		}//end adc<max/2
	}

	// ### AUX INPUT ###

	if (_chnl->aux_type == AUX_TYPE_PAD){
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	791b      	ldrb	r3, [r3, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d141      	bne.n	800dacc <Update_channel+0x21c>

		if (_aux_state == GPIO_PIN_RESET)
 800da48:	79fb      	ldrb	r3, [r7, #7]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d104      	bne.n	800da58 <Update_channel+0x1a8>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800da56:	e003      	b.n	800da60 <Update_channel+0x1b0>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		// new peak started
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da66:	2b01      	cmp	r3, #1
 800da68:	d107      	bne.n	800da7a <Update_channel+0x1ca>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <Update_channel+0x1ca>
			_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2201      	movs	r2, #1
 800da78:	761a      	strb	r2, [r3, #24]
		}

		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11c      	bne.n	800dabe <Update_channel+0x20e>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d117      	bne.n	800dabe <Update_channel+0x20e>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800da8e:	4b41      	ldr	r3, [pc, #260]	; (800db94 <Update_channel+0x2e4>)
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	2b32      	cmp	r3, #50	; 0x32
 800da9a:	d90d      	bls.n	800dab8 <Update_channel+0x208>
				_chnl->aux_rdy			 = 1;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800daa4:	4b3b      	ldr	r3, [pc, #236]	; (800db94 <Update_channel+0x2e4>)
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	629a      	str	r2, [r3, #40]	; 0x28
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800daca:	e055      	b.n	800db78 <Update_channel+0x2c8>

	} else { //AUX_TYPE_PEDAL

		if (_aux_state == GPIO_PIN_SET)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d104      	bne.n	800dadc <Update_channel+0x22c>
			_chnl->aux_active_state = CHANNEL_PEDAL_IDLE;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2202      	movs	r2, #2
 800dad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dada:	e003      	b.n	800dae4 <Update_channel+0x234>
		else
			_chnl->aux_active_state = CHANNEL_PEDAL_PRESSED;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2203      	movs	r2, #3
 800dae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


		// pedal pressed
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_PRESSED) && (_chnl->aux_last_state == CHANNEL_PEDAL_IDLE)){
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800daea:	2b03      	cmp	r3, #3
 800daec:	d11c      	bne.n	800db28 <Update_channel+0x278>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d117      	bne.n	800db28 <Update_channel+0x278>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800daf8:	4b26      	ldr	r3, [pc, #152]	; (800db94 <Update_channel+0x2e4>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	2b32      	cmp	r3, #50	; 0x32
 800db04:	d907      	bls.n	800db16 <Update_channel+0x266>
				_chnl->aux_rdy			 = 1;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2201      	movs	r2, #1
 800db0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800db0e:	4b21      	ldr	r3, [pc, #132]	; (800db94 <Update_channel+0x2e4>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_PRESSED;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2202      	movs	r2, #2
 800db26:	761a      	strb	r2, [r3, #24]

		}

		// pedal released
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_IDLE) && (_chnl->aux_last_state == CHANNEL_PEDAL_PRESSED)){
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d11c      	bne.n	800db6c <Update_channel+0x2bc>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d117      	bne.n	800db6c <Update_channel+0x2bc>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 800db3c:	4b15      	ldr	r3, [pc, #84]	; (800db94 <Update_channel+0x2e4>)
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	2b32      	cmp	r3, #50	; 0x32
 800db48:	d907      	bls.n	800db5a <Update_channel+0x2aa>
				_chnl->aux_rdy			 = 1;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 800db52:	4b10      	ldr	r3, [pc, #64]	; (800db94 <Update_channel+0x2e4>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// for fun return 1 if there is data to report
	return (_chnl->main_rdy | _chnl->aux_rdy);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	7c5a      	ldrb	r2, [r3, #17]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db82:	4313      	orrs	r3, r2
 800db84:	b2db      	uxtb	r3, r3
}
 800db86:	4618      	mov	r0, r3
 800db88:	371c      	adds	r7, #28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	200006d4 	.word	0x200006d4

0800db98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	4613      	mov	r3, r2
 800dba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e01f      	b.n	800dbf0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d003      	beq.n	800dbd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	68ba      	ldr	r2, [r7, #8]
 800dbd2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	79fa      	ldrb	r2, [r7, #7]
 800dbe2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f001 ff03 	bl	800f9f0 <USBD_LL_Init>
 800dbea:	4603      	mov	r3, r0
 800dbec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	e016      	b.n	800dc3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00b      	beq.n	800dc3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2c:	f107 020e 	add.w	r2, r7, #14
 800dc30:	4610      	mov	r0, r2
 800dc32:	4798      	blx	r3
 800dc34:	4602      	mov	r2, r0
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f001 ff2e 	bl	800fab0 <USBD_LL_Start>
 800dc54:	4603      	mov	r3, r0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dc5e:	b480      	push	{r7}
 800dc60:	b083      	sub	sp, #12
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dc80:	2303      	movs	r3, #3
 800dc82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d009      	beq.n	800dca2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	78fa      	ldrb	r2, [r7, #3]
 800dc98:	4611      	mov	r1, r2
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	4798      	blx	r3
 800dc9e:	4603      	mov	r3, r0
 800dca0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d007      	beq.n	800dcd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	78fa      	ldrb	r2, [r7, #3]
 800dccc:	4611      	mov	r1, r2
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	4798      	blx	r3
  }

  return USBD_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 ff46 	bl	800eb80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dd02:	461a      	mov	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd10:	f003 031f 	and.w	r3, r3, #31
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d01a      	beq.n	800dd4e <USBD_LL_SetupStage+0x72>
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d822      	bhi.n	800dd62 <USBD_LL_SetupStage+0x86>
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <USBD_LL_SetupStage+0x4a>
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d00a      	beq.n	800dd3a <USBD_LL_SetupStage+0x5e>
 800dd24:	e01d      	b.n	800dd62 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f9ee 	bl	800e110 <USBD_StdDevReq>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
      break;
 800dd38:	e020      	b.n	800dd7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fa52 	bl	800e1ec <USBD_StdItfReq>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
      break;
 800dd4c:	e016      	b.n	800dd7c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fa91 	bl	800e27e <USBD_StdEPReq>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd60:	e00c      	b.n	800dd7c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	4619      	mov	r1, r3
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 fefd 	bl	800fb70 <USBD_LL_StallEP>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
      break;
 800dd7a:	bf00      	nop
  }

  return ret;
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	60f8      	str	r0, [r7, #12]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	607a      	str	r2, [r7, #4]
 800dd92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd94:	7afb      	ldrb	r3, [r7, #11]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d138      	bne.n	800de0c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dda0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dda8:	2b03      	cmp	r3, #3
 800ddaa:	d14a      	bne.n	800de42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	689a      	ldr	r2, [r3, #8]
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d913      	bls.n	800dde0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	1ad2      	subs	r2, r2, r3
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	bf28      	it	cs
 800ddd2:	4613      	movcs	r3, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 ffc5 	bl	800ed68 <USBD_CtlContinueRx>
 800ddde:	e030      	b.n	800de42 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d10b      	bne.n	800de04 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 ffc0 	bl	800ed8a <USBD_CtlSendStatus>
 800de0a:	e01a      	b.n	800de42 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b03      	cmp	r3, #3
 800de16:	d114      	bne.n	800de42 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00e      	beq.n	800de42 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	7afa      	ldrb	r2, [r7, #11]
 800de2e:	4611      	mov	r1, r2
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	4798      	blx	r3
 800de34:	4603      	mov	r3, r0
 800de36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800de38:	7dfb      	ldrb	r3, [r7, #23]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	e000      	b.n	800de44 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	460b      	mov	r3, r1
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800de5a:	7afb      	ldrb	r3, [r7, #11]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d16b      	bne.n	800df38 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3314      	adds	r3, #20
 800de64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d156      	bne.n	800df1e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	689a      	ldr	r2, [r3, #8]
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d914      	bls.n	800dea6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	689a      	ldr	r2, [r3, #8]
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	1ad2      	subs	r2, r2, r3
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	461a      	mov	r2, r3
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 ff3a 	bl	800ed0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de98:	2300      	movs	r3, #0
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f001 ff11 	bl	800fcc6 <USBD_LL_PrepareReceive>
 800dea4:	e03b      	b.n	800df1e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	68da      	ldr	r2, [r3, #12]
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d11c      	bne.n	800deec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800deba:	429a      	cmp	r2, r3
 800debc:	d316      	bcc.n	800deec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dec8:	429a      	cmp	r2, r3
 800deca:	d20f      	bcs.n	800deec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800decc:	2200      	movs	r2, #0
 800dece:	2100      	movs	r1, #0
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 ff1b 	bl	800ed0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dede:	2300      	movs	r3, #0
 800dee0:	2200      	movs	r2, #0
 800dee2:	2100      	movs	r1, #0
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f001 feee 	bl	800fcc6 <USBD_LL_PrepareReceive>
 800deea:	e018      	b.n	800df1e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b03      	cmp	r3, #3
 800def6:	d10b      	bne.n	800df10 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d005      	beq.n	800df10 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df10:	2180      	movs	r1, #128	; 0x80
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f001 fe2c 	bl	800fb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f000 ff49 	bl	800edb0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800df24:	2b01      	cmp	r3, #1
 800df26:	d122      	bne.n	800df6e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f7ff fe98 	bl	800dc5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800df36:	e01a      	b.n	800df6e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b03      	cmp	r3, #3
 800df42:	d114      	bne.n	800df6e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00e      	beq.n	800df6e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	7afa      	ldrb	r2, [r7, #11]
 800df5a:	4611      	mov	r1, r2
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800df64:	7dfb      	ldrb	r3, [r7, #23]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	e000      	b.n	800df70 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d101      	bne.n	800dfac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e02f      	b.n	800e00c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00f      	beq.n	800dfd6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d009      	beq.n	800dfd6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	6852      	ldr	r2, [r2, #4]
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfd6:	2340      	movs	r3, #64	; 0x40
 800dfd8:	2200      	movs	r2, #0
 800dfda:	2100      	movs	r1, #0
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f001 fd82 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2240      	movs	r2, #64	; 0x40
 800dfee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dff2:	2340      	movs	r3, #64	; 0x40
 800dff4:	2200      	movs	r2, #0
 800dff6:	2180      	movs	r1, #128	; 0x80
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f001 fd74 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2240      	movs	r2, #64	; 0x40
 800e008:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	78fa      	ldrb	r2, [r7, #3]
 800e024:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e042:	b2da      	uxtb	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2204      	movs	r2, #4
 800e04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b04      	cmp	r3, #4
 800e072:	d106      	bne.n	800e082 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e012      	b.n	800e0cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d10b      	bne.n	800e0ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d005      	beq.n	800e0ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e0f2:	8a3b      	ldrh	r3, [r7, #16]
 800e0f4:	021b      	lsls	r3, r3, #8
 800e0f6:	b21a      	sxth	r2, r3
 800e0f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	b21b      	sxth	r3, r3
 800e100:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e102:	89fb      	ldrh	r3, [r7, #14]
}
 800e104:	4618      	mov	r0, r3
 800e106:	371c      	adds	r7, #28
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e126:	2b40      	cmp	r3, #64	; 0x40
 800e128:	d005      	beq.n	800e136 <USBD_StdDevReq+0x26>
 800e12a:	2b40      	cmp	r3, #64	; 0x40
 800e12c:	d853      	bhi.n	800e1d6 <USBD_StdDevReq+0xc6>
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00b      	beq.n	800e14a <USBD_StdDevReq+0x3a>
 800e132:	2b20      	cmp	r3, #32
 800e134:	d14f      	bne.n	800e1d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	6839      	ldr	r1, [r7, #0]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	4798      	blx	r3
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
      break;
 800e148:	e04a      	b.n	800e1e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	785b      	ldrb	r3, [r3, #1]
 800e14e:	2b09      	cmp	r3, #9
 800e150:	d83b      	bhi.n	800e1ca <USBD_StdDevReq+0xba>
 800e152:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <USBD_StdDevReq+0x48>)
 800e154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e158:	0800e1ad 	.word	0x0800e1ad
 800e15c:	0800e1c1 	.word	0x0800e1c1
 800e160:	0800e1cb 	.word	0x0800e1cb
 800e164:	0800e1b7 	.word	0x0800e1b7
 800e168:	0800e1cb 	.word	0x0800e1cb
 800e16c:	0800e18b 	.word	0x0800e18b
 800e170:	0800e181 	.word	0x0800e181
 800e174:	0800e1cb 	.word	0x0800e1cb
 800e178:	0800e1a3 	.word	0x0800e1a3
 800e17c:	0800e195 	.word	0x0800e195
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 f9de 	bl	800e544 <USBD_GetDescriptor>
          break;
 800e188:	e024      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fb6d 	bl	800e86c <USBD_SetAddress>
          break;
 800e192:	e01f      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fbac 	bl	800e8f4 <USBD_SetConfig>
 800e19c:	4603      	mov	r3, r0
 800e19e:	73fb      	strb	r3, [r7, #15]
          break;
 800e1a0:	e018      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fc4b 	bl	800ea40 <USBD_GetConfig>
          break;
 800e1aa:	e013      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fc7c 	bl	800eaac <USBD_GetStatus>
          break;
 800e1b4:	e00e      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fcab 	bl	800eb14 <USBD_SetFeature>
          break;
 800e1be:	e009      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 fcba 	bl	800eb3c <USBD_ClrFeature>
          break;
 800e1c8:	e004      	b.n	800e1d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fd11 	bl	800ebf4 <USBD_CtlError>
          break;
 800e1d2:	bf00      	nop
      }
      break;
 800e1d4:	e004      	b.n	800e1e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fd0b 	bl	800ebf4 <USBD_CtlError>
      break;
 800e1de:	bf00      	nop
  }

  return ret;
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop

0800e1ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e202:	2b40      	cmp	r3, #64	; 0x40
 800e204:	d005      	beq.n	800e212 <USBD_StdItfReq+0x26>
 800e206:	2b40      	cmp	r3, #64	; 0x40
 800e208:	d82f      	bhi.n	800e26a <USBD_StdItfReq+0x7e>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <USBD_StdItfReq+0x26>
 800e20e:	2b20      	cmp	r3, #32
 800e210:	d12b      	bne.n	800e26a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	3b01      	subs	r3, #1
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d81d      	bhi.n	800e25c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	889b      	ldrh	r3, [r3, #4]
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b01      	cmp	r3, #1
 800e228:	d813      	bhi.n	800e252 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	4798      	blx	r3
 800e238:	4603      	mov	r3, r0
 800e23a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	88db      	ldrh	r3, [r3, #6]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d110      	bne.n	800e266 <USBD_StdItfReq+0x7a>
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d10d      	bne.n	800e266 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fd9d 	bl	800ed8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e250:	e009      	b.n	800e266 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 fccd 	bl	800ebf4 <USBD_CtlError>
          break;
 800e25a:	e004      	b.n	800e266 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fcc8 	bl	800ebf4 <USBD_CtlError>
          break;
 800e264:	e000      	b.n	800e268 <USBD_StdItfReq+0x7c>
          break;
 800e266:	bf00      	nop
      }
      break;
 800e268:	e004      	b.n	800e274 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e26a:	6839      	ldr	r1, [r7, #0]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fcc1 	bl	800ebf4 <USBD_CtlError>
      break;
 800e272:	bf00      	nop
  }

  return ret;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b084      	sub	sp, #16
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	889b      	ldrh	r3, [r3, #4]
 800e290:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e29a:	2b40      	cmp	r3, #64	; 0x40
 800e29c:	d007      	beq.n	800e2ae <USBD_StdEPReq+0x30>
 800e29e:	2b40      	cmp	r3, #64	; 0x40
 800e2a0:	f200 8145 	bhi.w	800e52e <USBD_StdEPReq+0x2b0>
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00c      	beq.n	800e2c2 <USBD_StdEPReq+0x44>
 800e2a8:	2b20      	cmp	r3, #32
 800e2aa:	f040 8140 	bne.w	800e52e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	4798      	blx	r3
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73fb      	strb	r3, [r7, #15]
      break;
 800e2c0:	e13a      	b.n	800e538 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d007      	beq.n	800e2da <USBD_StdEPReq+0x5c>
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	f300 8129 	bgt.w	800e522 <USBD_StdEPReq+0x2a4>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d07f      	beq.n	800e3d4 <USBD_StdEPReq+0x156>
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d03c      	beq.n	800e352 <USBD_StdEPReq+0xd4>
 800e2d8:	e123      	b.n	800e522 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d002      	beq.n	800e2ec <USBD_StdEPReq+0x6e>
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d016      	beq.n	800e318 <USBD_StdEPReq+0x9a>
 800e2ea:	e02c      	b.n	800e346 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00d      	beq.n	800e30e <USBD_StdEPReq+0x90>
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	2b80      	cmp	r3, #128	; 0x80
 800e2f6:	d00a      	beq.n	800e30e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f001 fc37 	bl	800fb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e302:	2180      	movs	r1, #128	; 0x80
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f001 fc33 	bl	800fb70 <USBD_LL_StallEP>
 800e30a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e30c:	e020      	b.n	800e350 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fc6f 	bl	800ebf4 <USBD_CtlError>
              break;
 800e316:	e01b      	b.n	800e350 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	885b      	ldrh	r3, [r3, #2]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10e      	bne.n	800e33e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e320:	7bbb      	ldrb	r3, [r7, #14]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00b      	beq.n	800e33e <USBD_StdEPReq+0xc0>
 800e326:	7bbb      	ldrb	r3, [r7, #14]
 800e328:	2b80      	cmp	r3, #128	; 0x80
 800e32a:	d008      	beq.n	800e33e <USBD_StdEPReq+0xc0>
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	88db      	ldrh	r3, [r3, #6]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d104      	bne.n	800e33e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e334:	7bbb      	ldrb	r3, [r7, #14]
 800e336:	4619      	mov	r1, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f001 fc19 	bl	800fb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fd23 	bl	800ed8a <USBD_CtlSendStatus>

              break;
 800e344:	e004      	b.n	800e350 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fc53 	bl	800ebf4 <USBD_CtlError>
              break;
 800e34e:	bf00      	nop
          }
          break;
 800e350:	e0ec      	b.n	800e52c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d002      	beq.n	800e364 <USBD_StdEPReq+0xe6>
 800e35e:	2b03      	cmp	r3, #3
 800e360:	d016      	beq.n	800e390 <USBD_StdEPReq+0x112>
 800e362:	e030      	b.n	800e3c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00d      	beq.n	800e386 <USBD_StdEPReq+0x108>
 800e36a:	7bbb      	ldrb	r3, [r7, #14]
 800e36c:	2b80      	cmp	r3, #128	; 0x80
 800e36e:	d00a      	beq.n	800e386 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e370:	7bbb      	ldrb	r3, [r7, #14]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 fbfb 	bl	800fb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e37a:	2180      	movs	r1, #128	; 0x80
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f001 fbf7 	bl	800fb70 <USBD_LL_StallEP>
 800e382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e384:	e025      	b.n	800e3d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fc33 	bl	800ebf4 <USBD_CtlError>
              break;
 800e38e:	e020      	b.n	800e3d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	885b      	ldrh	r3, [r3, #2]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d11b      	bne.n	800e3d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e398:	7bbb      	ldrb	r3, [r7, #14]
 800e39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d004      	beq.n	800e3ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e3a2:	7bbb      	ldrb	r3, [r7, #14]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fc01 	bl	800fbae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 fcec 	bl	800ed8a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	4798      	blx	r3
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e3c4:	e004      	b.n	800e3d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fc13 	bl	800ebf4 <USBD_CtlError>
              break;
 800e3ce:	e000      	b.n	800e3d2 <USBD_StdEPReq+0x154>
              break;
 800e3d0:	bf00      	nop
          }
          break;
 800e3d2:	e0ab      	b.n	800e52c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d002      	beq.n	800e3e6 <USBD_StdEPReq+0x168>
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d032      	beq.n	800e44a <USBD_StdEPReq+0x1cc>
 800e3e4:	e097      	b.n	800e516 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d007      	beq.n	800e3fc <USBD_StdEPReq+0x17e>
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
 800e3ee:	2b80      	cmp	r3, #128	; 0x80
 800e3f0:	d004      	beq.n	800e3fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 fbfd 	bl	800ebf4 <USBD_CtlError>
                break;
 800e3fa:	e091      	b.n	800e520 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e400:	2b00      	cmp	r3, #0
 800e402:	da0b      	bge.n	800e41c <USBD_StdEPReq+0x19e>
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e40a:	4613      	mov	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4413      	add	r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	3310      	adds	r3, #16
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	4413      	add	r3, r2
 800e418:	3304      	adds	r3, #4
 800e41a:	e00b      	b.n	800e434 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e41c:	7bbb      	ldrb	r3, [r7, #14]
 800e41e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4413      	add	r3, r2
 800e432:	3304      	adds	r3, #4
 800e434:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	2202      	movs	r2, #2
 800e440:	4619      	mov	r1, r3
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fc47 	bl	800ecd6 <USBD_CtlSendData>
              break;
 800e448:	e06a      	b.n	800e520 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	da11      	bge.n	800e476 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e452:	7bbb      	ldrb	r3, [r7, #14]
 800e454:	f003 020f 	and.w	r2, r3, #15
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	4613      	mov	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4413      	add	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	440b      	add	r3, r1
 800e464:	3324      	adds	r3, #36	; 0x24
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d117      	bne.n	800e49c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fbc0 	bl	800ebf4 <USBD_CtlError>
                  break;
 800e474:	e054      	b.n	800e520 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e476:	7bbb      	ldrb	r3, [r7, #14]
 800e478:	f003 020f 	and.w	r2, r3, #15
 800e47c:	6879      	ldr	r1, [r7, #4]
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	440b      	add	r3, r1
 800e488:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d104      	bne.n	800e49c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 fbad 	bl	800ebf4 <USBD_CtlError>
                  break;
 800e49a:	e041      	b.n	800e520 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da0b      	bge.n	800e4bc <USBD_StdEPReq+0x23e>
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	3310      	adds	r3, #16
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	e00b      	b.n	800e4d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e4d6:	7bbb      	ldrb	r3, [r7, #14]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <USBD_StdEPReq+0x264>
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
 800e4de:	2b80      	cmp	r3, #128	; 0x80
 800e4e0:	d103      	bne.n	800e4ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	601a      	str	r2, [r3, #0]
 800e4e8:	e00e      	b.n	800e508 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e4ea:	7bbb      	ldrb	r3, [r7, #14]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 fb7c 	bl	800fbec <USBD_LL_IsStallEP>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d003      	beq.n	800e502 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	e002      	b.n	800e508 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2200      	movs	r2, #0
 800e506:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2202      	movs	r2, #2
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fbe1 	bl	800ecd6 <USBD_CtlSendData>
              break;
 800e514:	e004      	b.n	800e520 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fb6b 	bl	800ebf4 <USBD_CtlError>
              break;
 800e51e:	bf00      	nop
          }
          break;
 800e520:	e004      	b.n	800e52c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fb65 	bl	800ebf4 <USBD_CtlError>
          break;
 800e52a:	bf00      	nop
      }
      break;
 800e52c:	e004      	b.n	800e538 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e52e:	6839      	ldr	r1, [r7, #0]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fb5f 	bl	800ebf4 <USBD_CtlError>
      break;
 800e536:	bf00      	nop
  }

  return ret;
 800e538:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
	...

0800e544 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e54e:	2300      	movs	r3, #0
 800e550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e556:	2300      	movs	r3, #0
 800e558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	885b      	ldrh	r3, [r3, #2]
 800e55e:	0a1b      	lsrs	r3, r3, #8
 800e560:	b29b      	uxth	r3, r3
 800e562:	3b01      	subs	r3, #1
 800e564:	2b0e      	cmp	r3, #14
 800e566:	f200 8152 	bhi.w	800e80e <USBD_GetDescriptor+0x2ca>
 800e56a:	a201      	add	r2, pc, #4	; (adr r2, 800e570 <USBD_GetDescriptor+0x2c>)
 800e56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e570:	0800e5e1 	.word	0x0800e5e1
 800e574:	0800e5f9 	.word	0x0800e5f9
 800e578:	0800e639 	.word	0x0800e639
 800e57c:	0800e80f 	.word	0x0800e80f
 800e580:	0800e80f 	.word	0x0800e80f
 800e584:	0800e7af 	.word	0x0800e7af
 800e588:	0800e7db 	.word	0x0800e7db
 800e58c:	0800e80f 	.word	0x0800e80f
 800e590:	0800e80f 	.word	0x0800e80f
 800e594:	0800e80f 	.word	0x0800e80f
 800e598:	0800e80f 	.word	0x0800e80f
 800e59c:	0800e80f 	.word	0x0800e80f
 800e5a0:	0800e80f 	.word	0x0800e80f
 800e5a4:	0800e80f 	.word	0x0800e80f
 800e5a8:	0800e5ad 	.word	0x0800e5ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00b      	beq.n	800e5d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5be:	69db      	ldr	r3, [r3, #28]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	7c12      	ldrb	r2, [r2, #16]
 800e5c4:	f107 0108 	add.w	r1, r7, #8
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	4798      	blx	r3
 800e5cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5ce:	e126      	b.n	800e81e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 fb0e 	bl	800ebf4 <USBD_CtlError>
        err++;
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	72fb      	strb	r3, [r7, #11]
      break;
 800e5de:	e11e      	b.n	800e81e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	7c12      	ldrb	r2, [r2, #16]
 800e5ec:	f107 0108 	add.w	r1, r7, #8
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	4798      	blx	r3
 800e5f4:	60f8      	str	r0, [r7, #12]
      break;
 800e5f6:	e112      	b.n	800e81e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7c1b      	ldrb	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10d      	bne.n	800e61c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e608:	f107 0208 	add.w	r2, r7, #8
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3301      	adds	r3, #1
 800e616:	2202      	movs	r2, #2
 800e618:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e61a:	e100      	b.n	800e81e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	f107 0208 	add.w	r2, r7, #8
 800e628:	4610      	mov	r0, r2
 800e62a:	4798      	blx	r3
 800e62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3301      	adds	r3, #1
 800e632:	2202      	movs	r2, #2
 800e634:	701a      	strb	r2, [r3, #0]
      break;
 800e636:	e0f2      	b.n	800e81e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	885b      	ldrh	r3, [r3, #2]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	2b05      	cmp	r3, #5
 800e640:	f200 80ac 	bhi.w	800e79c <USBD_GetDescriptor+0x258>
 800e644:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <USBD_GetDescriptor+0x108>)
 800e646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64a:	bf00      	nop
 800e64c:	0800e665 	.word	0x0800e665
 800e650:	0800e699 	.word	0x0800e699
 800e654:	0800e6cd 	.word	0x0800e6cd
 800e658:	0800e701 	.word	0x0800e701
 800e65c:	0800e735 	.word	0x0800e735
 800e660:	0800e769 	.word	0x0800e769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	7c12      	ldrb	r2, [r2, #16]
 800e67c:	f107 0108 	add.w	r1, r7, #8
 800e680:	4610      	mov	r0, r2
 800e682:	4798      	blx	r3
 800e684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e686:	e091      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fab2 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	3301      	adds	r3, #1
 800e694:	72fb      	strb	r3, [r7, #11]
          break;
 800e696:	e089      	b.n	800e7ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7c12      	ldrb	r2, [r2, #16]
 800e6b0:	f107 0108 	add.w	r1, r7, #8
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4798      	blx	r3
 800e6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ba:	e077      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa98 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e6c4:	7afb      	ldrb	r3, [r7, #11]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ca:	e06f      	b.n	800e7ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	7c12      	ldrb	r2, [r2, #16]
 800e6e4:	f107 0108 	add.w	r1, r7, #8
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ee:	e05d      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa7e 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fe:	e055      	b.n	800e7ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	7c12      	ldrb	r2, [r2, #16]
 800e718:	f107 0108 	add.w	r1, r7, #8
 800e71c:	4610      	mov	r0, r2
 800e71e:	4798      	blx	r3
 800e720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e722:	e043      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e724:	6839      	ldr	r1, [r7, #0]
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa64 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e72c:	7afb      	ldrb	r3, [r7, #11]
 800e72e:	3301      	adds	r3, #1
 800e730:	72fb      	strb	r3, [r7, #11]
          break;
 800e732:	e03b      	b.n	800e7ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00b      	beq.n	800e758 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e746:	695b      	ldr	r3, [r3, #20]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	7c12      	ldrb	r2, [r2, #16]
 800e74c:	f107 0108 	add.w	r1, r7, #8
 800e750:	4610      	mov	r0, r2
 800e752:	4798      	blx	r3
 800e754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e756:	e029      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fa4a 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e760:	7afb      	ldrb	r3, [r7, #11]
 800e762:	3301      	adds	r3, #1
 800e764:	72fb      	strb	r3, [r7, #11]
          break;
 800e766:	e021      	b.n	800e7ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	7c12      	ldrb	r2, [r2, #16]
 800e780:	f107 0108 	add.w	r1, r7, #8
 800e784:	4610      	mov	r0, r2
 800e786:	4798      	blx	r3
 800e788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78a:	e00f      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fa30 	bl	800ebf4 <USBD_CtlError>
            err++;
 800e794:	7afb      	ldrb	r3, [r7, #11]
 800e796:	3301      	adds	r3, #1
 800e798:	72fb      	strb	r3, [r7, #11]
          break;
 800e79a:	e007      	b.n	800e7ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fa28 	bl	800ebf4 <USBD_CtlError>
          err++;
 800e7a4:	7afb      	ldrb	r3, [r7, #11]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e7aa:	bf00      	nop
      }
      break;
 800e7ac:	e037      	b.n	800e81e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7c1b      	ldrb	r3, [r3, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d109      	bne.n	800e7ca <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7be:	f107 0208 	add.w	r2, r7, #8
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4798      	blx	r3
 800e7c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7c8:	e029      	b.n	800e81e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 fa11 	bl	800ebf4 <USBD_CtlError>
        err++;
 800e7d2:	7afb      	ldrb	r3, [r7, #11]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e7d8:	e021      	b.n	800e81e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	7c1b      	ldrb	r3, [r3, #16]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10d      	bne.n	800e7fe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ea:	f107 0208 	add.w	r2, r7, #8
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	4798      	blx	r3
 800e7f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	2207      	movs	r2, #7
 800e7fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7fc:	e00f      	b.n	800e81e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f9f7 	bl	800ebf4 <USBD_CtlError>
        err++;
 800e806:	7afb      	ldrb	r3, [r7, #11]
 800e808:	3301      	adds	r3, #1
 800e80a:	72fb      	strb	r3, [r7, #11]
      break;
 800e80c:	e007      	b.n	800e81e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f9ef 	bl	800ebf4 <USBD_CtlError>
      err++;
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	3301      	adds	r3, #1
 800e81a:	72fb      	strb	r3, [r7, #11]
      break;
 800e81c:	bf00      	nop
  }

  if (err != 0U)
 800e81e:	7afb      	ldrb	r3, [r7, #11]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d11e      	bne.n	800e862 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	88db      	ldrh	r3, [r3, #6]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d016      	beq.n	800e85a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e82c:	893b      	ldrh	r3, [r7, #8]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00e      	beq.n	800e850 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	88da      	ldrh	r2, [r3, #6]
 800e836:	893b      	ldrh	r3, [r7, #8]
 800e838:	4293      	cmp	r3, r2
 800e83a:	bf28      	it	cs
 800e83c:	4613      	movcs	r3, r2
 800e83e:	b29b      	uxth	r3, r3
 800e840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e842:	893b      	ldrh	r3, [r7, #8]
 800e844:	461a      	mov	r2, r3
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fa44 	bl	800ecd6 <USBD_CtlSendData>
 800e84e:	e009      	b.n	800e864 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f9ce 	bl	800ebf4 <USBD_CtlError>
 800e858:	e004      	b.n	800e864 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fa95 	bl	800ed8a <USBD_CtlSendStatus>
 800e860:	e000      	b.n	800e864 <USBD_GetDescriptor+0x320>
    return;
 800e862:	bf00      	nop
  }
}
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop

0800e86c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	889b      	ldrh	r3, [r3, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d131      	bne.n	800e8e2 <USBD_SetAddress+0x76>
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	88db      	ldrh	r3, [r3, #6]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d12d      	bne.n	800e8e2 <USBD_SetAddress+0x76>
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	885b      	ldrh	r3, [r3, #2]
 800e88a:	2b7f      	cmp	r3, #127	; 0x7f
 800e88c:	d829      	bhi.n	800e8e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	885b      	ldrh	r3, [r3, #2]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d104      	bne.n	800e8b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f9a3 	bl	800ebf4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ae:	e01d      	b.n	800e8ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7bfa      	ldrb	r2, [r7, #15]
 800e8b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 f9c2 	bl	800fc46 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fa61 	bl	800ed8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d004      	beq.n	800e8d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8d6:	e009      	b.n	800e8ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8e0:	e004      	b.n	800e8ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f985 	bl	800ebf4 <USBD_CtlError>
  }
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	885b      	ldrh	r3, [r3, #2]
 800e906:	b2da      	uxtb	r2, r3
 800e908:	4b4c      	ldr	r3, [pc, #304]	; (800ea3c <USBD_SetConfig+0x148>)
 800e90a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e90c:	4b4b      	ldr	r3, [pc, #300]	; (800ea3c <USBD_SetConfig+0x148>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d905      	bls.n	800e920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e914:	6839      	ldr	r1, [r7, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f96c 	bl	800ebf4 <USBD_CtlError>
    return USBD_FAIL;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e088      	b.n	800ea32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d002      	beq.n	800e932 <USBD_SetConfig+0x3e>
 800e92c:	2b03      	cmp	r3, #3
 800e92e:	d025      	beq.n	800e97c <USBD_SetConfig+0x88>
 800e930:	e071      	b.n	800ea16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e932:	4b42      	ldr	r3, [pc, #264]	; (800ea3c <USBD_SetConfig+0x148>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d01c      	beq.n	800e974 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e93a:	4b40      	ldr	r3, [pc, #256]	; (800ea3c <USBD_SetConfig+0x148>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	461a      	mov	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e944:	4b3d      	ldr	r3, [pc, #244]	; (800ea3c <USBD_SetConfig+0x148>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff f992 	bl	800dc74 <USBD_SetClassConfig>
 800e950:	4603      	mov	r3, r0
 800e952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e954:	7bfb      	ldrb	r3, [r7, #15]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f949 	bl	800ebf4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e962:	e065      	b.n	800ea30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fa10 	bl	800ed8a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2203      	movs	r2, #3
 800e96e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e972:	e05d      	b.n	800ea30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fa08 	bl	800ed8a <USBD_CtlSendStatus>
      break;
 800e97a:	e059      	b.n	800ea30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e97c:	4b2f      	ldr	r3, [pc, #188]	; (800ea3c <USBD_SetConfig+0x148>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d112      	bne.n	800e9aa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e98c:	4b2b      	ldr	r3, [pc, #172]	; (800ea3c <USBD_SetConfig+0x148>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	461a      	mov	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e996:	4b29      	ldr	r3, [pc, #164]	; (800ea3c <USBD_SetConfig+0x148>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	4619      	mov	r1, r3
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff f985 	bl	800dcac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f9f1 	bl	800ed8a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9a8:	e042      	b.n	800ea30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e9aa:	4b24      	ldr	r3, [pc, #144]	; (800ea3c <USBD_SetConfig+0x148>)
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d02a      	beq.n	800ea0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7ff f973 	bl	800dcac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ea3c <USBD_SetConfig+0x148>)
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ea3c <USBD_SetConfig+0x148>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff f94c 	bl	800dc74 <USBD_SetClassConfig>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00f      	beq.n	800ea06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f903 	bl	800ebf4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff f958 	bl	800dcac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea04:	e014      	b.n	800ea30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f9bf 	bl	800ed8a <USBD_CtlSendStatus>
      break;
 800ea0c:	e010      	b.n	800ea30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f9bb 	bl	800ed8a <USBD_CtlSendStatus>
      break;
 800ea14:	e00c      	b.n	800ea30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f8eb 	bl	800ebf4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea1e:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <USBD_SetConfig+0x148>)
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	4619      	mov	r1, r3
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff f941 	bl	800dcac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea2e:	bf00      	nop
  }

  return ret;
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	2000043c 	.word	0x2000043c

0800ea40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	88db      	ldrh	r3, [r3, #6]
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d004      	beq.n	800ea5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f8cd 	bl	800ebf4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea5a:	e023      	b.n	800eaa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	dc02      	bgt.n	800ea6e <USBD_GetConfig+0x2e>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dc03      	bgt.n	800ea74 <USBD_GetConfig+0x34>
 800ea6c:	e015      	b.n	800ea9a <USBD_GetConfig+0x5a>
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	d00b      	beq.n	800ea8a <USBD_GetConfig+0x4a>
 800ea72:	e012      	b.n	800ea9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	2201      	movs	r2, #1
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f927 	bl	800ecd6 <USBD_CtlSendData>
        break;
 800ea88:	e00c      	b.n	800eaa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	2201      	movs	r2, #1
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 f91f 	bl	800ecd6 <USBD_CtlSendData>
        break;
 800ea98:	e004      	b.n	800eaa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea9a:	6839      	ldr	r1, [r7, #0]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 f8a9 	bl	800ebf4 <USBD_CtlError>
        break;
 800eaa2:	bf00      	nop
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	3b01      	subs	r3, #1
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d81e      	bhi.n	800eb02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	88db      	ldrh	r3, [r3, #6]
 800eac8:	2b02      	cmp	r3, #2
 800eaca:	d004      	beq.n	800ead6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eacc:	6839      	ldr	r1, [r7, #0]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f890 	bl	800ebf4 <USBD_CtlError>
        break;
 800ead4:	e01a      	b.n	800eb0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	f043 0202 	orr.w	r2, r3, #2
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	330c      	adds	r3, #12
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 f8eb 	bl	800ecd6 <USBD_CtlSendData>
      break;
 800eb00:	e004      	b.n	800eb0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f875 	bl	800ebf4 <USBD_CtlError>
      break;
 800eb0a:	bf00      	nop
  }
}
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	885b      	ldrh	r3, [r3, #2]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d106      	bne.n	800eb34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f92b 	bl	800ed8a <USBD_CtlSendStatus>
  }
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d80b      	bhi.n	800eb6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	885b      	ldrh	r3, [r3, #2]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d10c      	bne.n	800eb76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f910 	bl	800ed8a <USBD_CtlSendStatus>
      }
      break;
 800eb6a:	e004      	b.n	800eb76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb6c:	6839      	ldr	r1, [r7, #0]
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f840 	bl	800ebf4 <USBD_CtlError>
      break;
 800eb74:	e000      	b.n	800eb78 <USBD_ClrFeature+0x3c>
      break;
 800eb76:	bf00      	nop
  }
}
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	781a      	ldrb	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3301      	adds	r3, #1
 800eba8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f7ff fa92 	bl	800e0d4 <SWAPBYTE>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7ff fa85 	bl	800e0d4 <SWAPBYTE>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f7ff fa78 	bl	800e0d4 <SWAPBYTE>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	80da      	strh	r2, [r3, #6]
}
 800ebec:	bf00      	nop
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebfe:	2180      	movs	r1, #128	; 0x80
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 ffb5 	bl	800fb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec06:	2100      	movs	r1, #0
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 ffb1 	bl	800fb70 <USBD_LL_StallEP>
}
 800ec0e:	bf00      	nop
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b086      	sub	sp, #24
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	60f8      	str	r0, [r7, #12]
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec22:	2300      	movs	r3, #0
 800ec24:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d036      	beq.n	800ec9a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec30:	6938      	ldr	r0, [r7, #16]
 800ec32:	f000 f836 	bl	800eca2 <USBD_GetLen>
 800ec36:	4603      	mov	r3, r0
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	005b      	lsls	r3, r3, #1
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	4413      	add	r3, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	7812      	ldrb	r2, [r2, #0]
 800ec4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	3301      	adds	r3, #1
 800ec54:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
 800ec58:	68ba      	ldr	r2, [r7, #8]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	2203      	movs	r2, #3
 800ec5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	3301      	adds	r3, #1
 800ec64:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec66:	e013      	b.n	800ec90 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	7812      	ldrb	r2, [r2, #0]
 800ec72:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	3301      	adds	r3, #1
 800ec78:	613b      	str	r3, [r7, #16]
    idx++;
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	4413      	add	r3, r2
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1e7      	bne.n	800ec68 <USBD_GetString+0x52>
 800ec98:	e000      	b.n	800ec9c <USBD_GetString+0x86>
    return;
 800ec9a:	bf00      	nop
  }
}
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eca2:	b480      	push	{r7}
 800eca4:	b085      	sub	sp, #20
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ecb2:	e005      	b.n	800ecc0 <USBD_GetLen+0x1e>
  {
    len++;
 800ecb4:	7bfb      	ldrb	r3, [r7, #15]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1f5      	bne.n	800ecb4 <USBD_GetLen+0x12>
  }

  return len;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3714      	adds	r7, #20
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	60b9      	str	r1, [r7, #8]
 800ece0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2202      	movs	r2, #2
 800ece6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f000 ffc1 	bl	800fc84 <USBD_LL_Transmit>

  return USBD_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f000 ffb0 	bl	800fc84 <USBD_LL_Transmit>

  return USBD_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2203      	movs	r2, #3
 800ed3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	2100      	movs	r1, #0
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f000 ffb4 	bl	800fcc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed5e:	2300      	movs	r3, #0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	2100      	movs	r1, #0
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 ffa3 	bl	800fcc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed80:	2300      	movs	r3, #0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2204      	movs	r2, #4
 800ed96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2100      	movs	r1, #0
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 ff6f 	bl	800fc84 <USBD_LL_Transmit>

  return USBD_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2205      	movs	r2, #5
 800edbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edc0:	2300      	movs	r3, #0
 800edc2:	2200      	movs	r2, #0
 800edc4:	2100      	movs	r1, #0
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 ff7d 	bl	800fcc6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800eddc:	2200      	movs	r2, #0
 800edde:	4912      	ldr	r1, [pc, #72]	; (800ee28 <MX_USB_Device_Init+0x50>)
 800ede0:	4812      	ldr	r0, [pc, #72]	; (800ee2c <MX_USB_Device_Init+0x54>)
 800ede2:	f7fe fed9 	bl	800db98 <USBD_Init>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800edec:	f7f3 ffd2 	bl	8002d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800edf0:	490f      	ldr	r1, [pc, #60]	; (800ee30 <MX_USB_Device_Init+0x58>)
 800edf2:	480e      	ldr	r0, [pc, #56]	; (800ee2c <MX_USB_Device_Init+0x54>)
 800edf4:	f7fe ff00 	bl	800dbf8 <USBD_RegisterClass>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800edfe:	f7f3 ffc9 	bl	8002d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ee02:	490c      	ldr	r1, [pc, #48]	; (800ee34 <MX_USB_Device_Init+0x5c>)
 800ee04:	4809      	ldr	r0, [pc, #36]	; (800ee2c <MX_USB_Device_Init+0x54>)
 800ee06:	f000 fa87 	bl	800f318 <USBD_CDC_RegisterInterface>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ee10:	f7f3 ffc0 	bl	8002d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ee14:	4805      	ldr	r0, [pc, #20]	; (800ee2c <MX_USB_Device_Init+0x54>)
 800ee16:	f7fe ff16 	bl	800dc46 <USBD_Start>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d001      	beq.n	800ee24 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ee20:	f7f3 ffb8 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ee24:	bf00      	nop
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	20000358 	.word	0x20000358
 800ee2c:	20001108 	.word	0x20001108
 800ee30:	200001cc 	.word	0x200001cc
 800ee34:	20000344 	.word	0x20000344

0800ee38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ee44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ee48:	f000 ffa8 	bl	800fd9c <USBD_static_malloc>
 800ee4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d105      	bne.n	800ee60 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ee5c:	2302      	movs	r3, #2
 800ee5e:	e066      	b.n	800ef2e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	7c1b      	ldrb	r3, [r3, #16]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d119      	bne.n	800eea4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee74:	2202      	movs	r2, #2
 800ee76:	2181      	movs	r1, #129	; 0x81
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fe34 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ee84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee88:	2202      	movs	r2, #2
 800ee8a:	2101      	movs	r1, #1
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fe2a 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2201      	movs	r2, #1
 800ee96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2210      	movs	r2, #16
 800ee9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800eea2:	e016      	b.n	800eed2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	2202      	movs	r2, #2
 800eea8:	2181      	movs	r1, #129	; 0x81
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fe1b 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eeb6:	2340      	movs	r3, #64	; 0x40
 800eeb8:	2202      	movs	r2, #2
 800eeba:	2101      	movs	r1, #1
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fe12 	bl	800fae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2210      	movs	r2, #16
 800eece:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eed2:	2308      	movs	r3, #8
 800eed4:	2203      	movs	r2, #3
 800eed6:	2182      	movs	r1, #130	; 0x82
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fe04 	bl	800fae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7c1b      	ldrb	r3, [r3, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d109      	bne.n	800ef1c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef12:	2101      	movs	r1, #1
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fed6 	bl	800fcc6 <USBD_LL_PrepareReceive>
 800ef1a:	e007      	b.n	800ef2c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef22:	2340      	movs	r3, #64	; 0x40
 800ef24:	2101      	movs	r1, #1
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fecd 	bl	800fcc6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b082      	sub	sp, #8
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
 800ef3e:	460b      	mov	r3, r1
 800ef40:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef42:	2181      	movs	r1, #129	; 0x81
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 fdf4 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef50:	2101      	movs	r1, #1
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fded 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ef60:	2182      	movs	r1, #130	; 0x82
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 fde5 	bl	800fb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00e      	beq.n	800efa0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 ff10 	bl	800fdb8 <USBD_static_free>
    pdev->pClassData = NULL;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
	...

0800efac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800efc2:	2300      	movs	r3, #0
 800efc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d03a      	beq.n	800f04c <USBD_CDC_Setup+0xa0>
 800efd6:	2b20      	cmp	r3, #32
 800efd8:	f040 809a 	bne.w	800f110 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	88db      	ldrh	r3, [r3, #6]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d029      	beq.n	800f038 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	b25b      	sxtb	r3, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	da11      	bge.n	800f012 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800effa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	88d2      	ldrh	r2, [r2, #6]
 800f000:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f002:	6939      	ldr	r1, [r7, #16]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	88db      	ldrh	r3, [r3, #6]
 800f008:	461a      	mov	r2, r3
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7ff fe63 	bl	800ecd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f010:	e085      	b.n	800f11e <USBD_CDC_Setup+0x172>
          hcdc->CmdOpCode = req->bRequest;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	785a      	ldrb	r2, [r3, #1]
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	88db      	ldrh	r3, [r3, #6]
 800f020:	b2da      	uxtb	r2, r3
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f028:	6939      	ldr	r1, [r7, #16]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	88db      	ldrh	r3, [r3, #6]
 800f02e:	461a      	mov	r2, r3
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7ff fe7c 	bl	800ed2e <USBD_CtlPrepareRx>
      break;
 800f036:	e072      	b.n	800f11e <USBD_CDC_Setup+0x172>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	7850      	ldrb	r0, [r2, #1]
 800f044:	2200      	movs	r2, #0
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	4798      	blx	r3
      break;
 800f04a:	e068      	b.n	800f11e <USBD_CDC_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	785b      	ldrb	r3, [r3, #1]
 800f050:	2b0b      	cmp	r3, #11
 800f052:	d852      	bhi.n	800f0fa <USBD_CDC_Setup+0x14e>
 800f054:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <USBD_CDC_Setup+0xb0>)
 800f056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05a:	bf00      	nop
 800f05c:	0800f08d 	.word	0x0800f08d
 800f060:	0800f109 	.word	0x0800f109
 800f064:	0800f0fb 	.word	0x0800f0fb
 800f068:	0800f0fb 	.word	0x0800f0fb
 800f06c:	0800f0fb 	.word	0x0800f0fb
 800f070:	0800f0fb 	.word	0x0800f0fb
 800f074:	0800f0fb 	.word	0x0800f0fb
 800f078:	0800f0fb 	.word	0x0800f0fb
 800f07c:	0800f0fb 	.word	0x0800f0fb
 800f080:	0800f0fb 	.word	0x0800f0fb
 800f084:	0800f0b7 	.word	0x0800f0b7
 800f088:	0800f0e1 	.word	0x0800f0e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f092:	b2db      	uxtb	r3, r3
 800f094:	2b03      	cmp	r3, #3
 800f096:	d107      	bne.n	800f0a8 <USBD_CDC_Setup+0xfc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f098:	f107 030c 	add.w	r3, r7, #12
 800f09c:	2202      	movs	r2, #2
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7ff fe18 	bl	800ecd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0a6:	e032      	b.n	800f10e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff fda2 	bl	800ebf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	75fb      	strb	r3, [r7, #23]
          break;
 800f0b4:	e02b      	b.n	800f10e <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d107      	bne.n	800f0d2 <USBD_CDC_Setup+0x126>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f0c2:	f107 030f 	add.w	r3, r7, #15
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7ff fe03 	bl	800ecd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0d0:	e01d      	b.n	800f10e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff fd8d 	bl	800ebf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0da:	2303      	movs	r3, #3
 800f0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f0de:	e016      	b.n	800f10e <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d00f      	beq.n	800f10c <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff fd80 	bl	800ebf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0f4:	2303      	movs	r3, #3
 800f0f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f0f8:	e008      	b.n	800f10c <USBD_CDC_Setup+0x160>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f0fa:	6839      	ldr	r1, [r7, #0]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7ff fd79 	bl	800ebf4 <USBD_CtlError>
          ret = USBD_FAIL;
 800f102:	2303      	movs	r3, #3
 800f104:	75fb      	strb	r3, [r7, #23]
          break;
 800f106:	e002      	b.n	800f10e <USBD_CDC_Setup+0x162>
          break;
 800f108:	bf00      	nop
 800f10a:	e008      	b.n	800f11e <USBD_CDC_Setup+0x172>
          break;
 800f10c:	bf00      	nop
      }
      break;
 800f10e:	e006      	b.n	800f11e <USBD_CDC_Setup+0x172>

    default:
      USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7ff fd6e 	bl	800ebf4 <USBD_CtlError>
      ret = USBD_FAIL;
 800f118:	2303      	movs	r3, #3
 800f11a:	75fb      	strb	r3, [r7, #23]
      break;
 800f11c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f13a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f142:	2b00      	cmp	r3, #0
 800f144:	d101      	bne.n	800f14a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f146:	2303      	movs	r3, #3
 800f148:	e04f      	b.n	800f1ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f150:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	440b      	add	r3, r1
 800f160:	3318      	adds	r3, #24
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d029      	beq.n	800f1bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f168:	78fa      	ldrb	r2, [r7, #3]
 800f16a:	6879      	ldr	r1, [r7, #4]
 800f16c:	4613      	mov	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	440b      	add	r3, r1
 800f176:	3318      	adds	r3, #24
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	78f9      	ldrb	r1, [r7, #3]
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	460b      	mov	r3, r1
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	440b      	add	r3, r1
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	4403      	add	r3, r0
 800f188:	3338      	adds	r3, #56	; 0x38
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f190:	fb03 f301 	mul.w	r3, r3, r1
 800f194:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f196:	2b00      	cmp	r3, #0
 800f198:	d110      	bne.n	800f1bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f19a:	78fa      	ldrb	r2, [r7, #3]
 800f19c:	6879      	ldr	r1, [r7, #4]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	4413      	add	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	440b      	add	r3, r1
 800f1a8:	3318      	adds	r3, #24
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f1ae:	78f9      	ldrb	r1, [r7, #3]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fd65 	bl	800fc84 <USBD_LL_Transmit>
 800f1ba:	e015      	b.n	800f1e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00b      	beq.n	800f1e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f1e4:	78fa      	ldrb	r2, [r7, #3]
 800f1e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b084      	sub	sp, #16
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f204:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d101      	bne.n	800f214 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f210:	2303      	movs	r3, #3
 800f212:	e015      	b.n	800f240 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fd75 	bl	800fd08 <USBD_LL_GetRxDataSize>
 800f21e:	4602      	mov	r2, r0
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f23a:	4611      	mov	r1, r2
 800f23c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f256:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d015      	beq.n	800f28e <USBD_CDC_EP0_RxReady+0x46>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f268:	2bff      	cmp	r3, #255	; 0xff
 800f26a:	d010      	beq.n	800f28e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f27a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f282:	b292      	uxth	r2, r2
 800f284:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	22ff      	movs	r2, #255	; 0xff
 800f28a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2265      	movs	r2, #101	; 0x65
 800f2a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f2a6:	4b03      	ldr	r3, [pc, #12]	; (800f2b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	2000026c 	.word	0x2000026c

0800f2b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2265      	movs	r2, #101	; 0x65
 800f2c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f2c6:	4b03      	ldr	r3, [pc, #12]	; (800f2d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	20000204 	.word	0x20000204

0800f2d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2265      	movs	r2, #101	; 0x65
 800f2e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f2e6:	4b03      	ldr	r3, [pc, #12]	; (800f2f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr
 800f2f4:	200002d4 	.word	0x200002d4

0800f2f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	220a      	movs	r2, #10
 800f304:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f306:	4b03      	ldr	r3, [pc, #12]	; (800f314 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f308:	4618      	mov	r0, r3
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr
 800f314:	200001c0 	.word	0x200001c0

0800f318 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d101      	bne.n	800f32c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f328:	2303      	movs	r3, #3
 800f32a:	e004      	b.n	800f336 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	683a      	ldr	r2, [r7, #0]
 800f330:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f342:	b480      	push	{r7}
 800f344:	b087      	sub	sp, #28
 800f346:	af00      	add	r7, sp, #0
 800f348:	60f8      	str	r0, [r7, #12]
 800f34a:	60b9      	str	r1, [r7, #8]
 800f34c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f354:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	371c      	adds	r7, #28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f372:	4770      	bx	lr

0800f374 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f384:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	e01a      	b.n	800f3f4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d114      	bne.n	800f3f2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f3e6:	2181      	movs	r1, #129	; 0x81
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fc4b 	bl	800fc84 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f40a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f416:	2303      	movs	r3, #3
 800f418:	e016      	b.n	800f448 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	7c1b      	ldrb	r3, [r3, #16]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d109      	bne.n	800f436 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f42c:	2101      	movs	r1, #1
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fc49 	bl	800fcc6 <USBD_LL_PrepareReceive>
 800f434:	e007      	b.n	800f446 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f43c:	2340      	movs	r3, #64	; 0x40
 800f43e:	2101      	movs	r1, #1
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fc40 	bl	800fcc6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f454:	2200      	movs	r2, #0
 800f456:	4905      	ldr	r1, [pc, #20]	; (800f46c <CDC_Init_FS+0x1c>)
 800f458:	4805      	ldr	r0, [pc, #20]	; (800f470 <CDC_Init_FS+0x20>)
 800f45a:	f7ff ff72 	bl	800f342 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f45e:	4905      	ldr	r1, [pc, #20]	; (800f474 <CDC_Init_FS+0x24>)
 800f460:	4803      	ldr	r0, [pc, #12]	; (800f470 <CDC_Init_FS+0x20>)
 800f462:	f7ff ff87 	bl	800f374 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f466:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f468:	4618      	mov	r0, r3
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	200017c0 	.word	0x200017c0
 800f470:	20001108 	.word	0x20001108
 800f474:	200013d8 	.word	0x200013d8

0800f478 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f478:	b480      	push	{r7}
 800f47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f47c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f47e:	4618      	mov	r0, r3
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	6039      	str	r1, [r7, #0]
 800f492:	71fb      	strb	r3, [r7, #7]
 800f494:	4613      	mov	r3, r2
 800f496:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f498:	79fb      	ldrb	r3, [r7, #7]
 800f49a:	2b23      	cmp	r3, #35	; 0x23
 800f49c:	d85c      	bhi.n	800f558 <CDC_Control_FS+0xd0>
 800f49e:	a201      	add	r2, pc, #4	; (adr r2, 800f4a4 <CDC_Control_FS+0x1c>)
 800f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a4:	0800f559 	.word	0x0800f559
 800f4a8:	0800f559 	.word	0x0800f559
 800f4ac:	0800f559 	.word	0x0800f559
 800f4b0:	0800f559 	.word	0x0800f559
 800f4b4:	0800f559 	.word	0x0800f559
 800f4b8:	0800f559 	.word	0x0800f559
 800f4bc:	0800f559 	.word	0x0800f559
 800f4c0:	0800f559 	.word	0x0800f559
 800f4c4:	0800f559 	.word	0x0800f559
 800f4c8:	0800f559 	.word	0x0800f559
 800f4cc:	0800f559 	.word	0x0800f559
 800f4d0:	0800f559 	.word	0x0800f559
 800f4d4:	0800f559 	.word	0x0800f559
 800f4d8:	0800f559 	.word	0x0800f559
 800f4dc:	0800f559 	.word	0x0800f559
 800f4e0:	0800f559 	.word	0x0800f559
 800f4e4:	0800f559 	.word	0x0800f559
 800f4e8:	0800f559 	.word	0x0800f559
 800f4ec:	0800f559 	.word	0x0800f559
 800f4f0:	0800f559 	.word	0x0800f559
 800f4f4:	0800f559 	.word	0x0800f559
 800f4f8:	0800f559 	.word	0x0800f559
 800f4fc:	0800f559 	.word	0x0800f559
 800f500:	0800f559 	.word	0x0800f559
 800f504:	0800f559 	.word	0x0800f559
 800f508:	0800f559 	.word	0x0800f559
 800f50c:	0800f559 	.word	0x0800f559
 800f510:	0800f559 	.word	0x0800f559
 800f514:	0800f559 	.word	0x0800f559
 800f518:	0800f559 	.word	0x0800f559
 800f51c:	0800f559 	.word	0x0800f559
 800f520:	0800f559 	.word	0x0800f559
 800f524:	0800f535 	.word	0x0800f535
 800f528:	0800f547 	.word	0x0800f547
 800f52c:	0800f559 	.word	0x0800f559
 800f530:	0800f559 	.word	0x0800f559
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 800f534:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <CDC_Control_FS+0xe0>)
 800f536:	683a      	ldr	r2, [r7, #0]
 800f538:	6810      	ldr	r0, [r2, #0]
 800f53a:	6018      	str	r0, [r3, #0]
 800f53c:	8891      	ldrh	r1, [r2, #4]
 800f53e:	7992      	ldrb	r2, [r2, #6]
 800f540:	8099      	strh	r1, [r3, #4]
 800f542:	719a      	strb	r2, [r3, #6]

    break;
 800f544:	e009      	b.n	800f55a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	4a07      	ldr	r2, [pc, #28]	; (800f568 <CDC_Control_FS+0xe0>)
 800f54a:	6810      	ldr	r0, [r2, #0]
 800f54c:	6018      	str	r0, [r3, #0]
 800f54e:	8891      	ldrh	r1, [r2, #4]
 800f550:	7992      	ldrb	r2, [r2, #6]
 800f552:	8099      	strh	r1, [r3, #4]
 800f554:	719a      	strb	r2, [r3, #6]

    case CDC_SET_CONTROL_LINE_STATE:

    break;
 800f556:	e000      	b.n	800f55a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f558:	bf00      	nop
  }

  return (USBD_OK);
 800f55a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	2000033c 	.word	0x2000033c

0800f56c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	4805      	ldr	r0, [pc, #20]	; (800f590 <CDC_Receive_FS+0x24>)
 800f57a:	f7ff fefb 	bl	800f374 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f57e:	4804      	ldr	r0, [pc, #16]	; (800f590 <CDC_Receive_FS+0x24>)
 800f580:	f7ff ff3c 	bl	800f3fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f586:	4618      	mov	r0, r3
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20001108 	.word	0x20001108

0800f594 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f5a4:	4b0d      	ldr	r3, [pc, #52]	; (800f5dc <CDC_Transmit_FS+0x48>)
 800f5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e00b      	b.n	800f5d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f5ba:	887b      	ldrh	r3, [r7, #2]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	6879      	ldr	r1, [r7, #4]
 800f5c0:	4806      	ldr	r0, [pc, #24]	; (800f5dc <CDC_Transmit_FS+0x48>)
 800f5c2:	f7ff febe 	bl	800f342 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f5c6:	4805      	ldr	r0, [pc, #20]	; (800f5dc <CDC_Transmit_FS+0x48>)
 800f5c8:	f7ff fee8 	bl	800f39c <USBD_CDC_TransmitPacket>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	20001108 	.word	0x20001108

0800f5e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	371c      	adds	r7, #28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
	...

0800f604 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	6039      	str	r1, [r7, #0]
 800f60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2212      	movs	r2, #18
 800f614:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f616:	4b03      	ldr	r3, [pc, #12]	; (800f624 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	20000378 	.word	0x20000378

0800f628 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	4603      	mov	r3, r0
 800f630:	6039      	str	r1, [r7, #0]
 800f632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2204      	movs	r2, #4
 800f638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f63a:	4b03      	ldr	r3, [pc, #12]	; (800f648 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	2000038c 	.word	0x2000038c

0800f64c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	6039      	str	r1, [r7, #0]
 800f656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f658:	79fb      	ldrb	r3, [r7, #7]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d105      	bne.n	800f66a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	4907      	ldr	r1, [pc, #28]	; (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f662:	4808      	ldr	r0, [pc, #32]	; (800f684 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f664:	f7ff fad7 	bl	800ec16 <USBD_GetString>
 800f668:	e004      	b.n	800f674 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f66a:	683a      	ldr	r2, [r7, #0]
 800f66c:	4904      	ldr	r1, [pc, #16]	; (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f66e:	4805      	ldr	r0, [pc, #20]	; (800f684 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f670:	f7ff fad1 	bl	800ec16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f674:	4b02      	ldr	r3, [pc, #8]	; (800f680 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20001ba8 	.word	0x20001ba8
 800f684:	08010c08 	.word	0x08010c08

0800f688 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	6039      	str	r1, [r7, #0]
 800f692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	4904      	ldr	r1, [pc, #16]	; (800f6a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f698:	4804      	ldr	r0, [pc, #16]	; (800f6ac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f69a:	f7ff fabc 	bl	800ec16 <USBD_GetString>
  return USBD_StrDesc;
 800f69e:	4b02      	ldr	r3, [pc, #8]	; (800f6a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	20001ba8 	.word	0x20001ba8
 800f6ac:	08010c14 	.word	0x08010c14

0800f6b0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	221a      	movs	r2, #26
 800f6c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6c2:	f000 f843 	bl	800f74c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f6c6:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	20000390 	.word	0x20000390

0800f6d4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d105      	bne.n	800f6f2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	4907      	ldr	r1, [pc, #28]	; (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f6ea:	4808      	ldr	r0, [pc, #32]	; (800f70c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f6ec:	f7ff fa93 	bl	800ec16 <USBD_GetString>
 800f6f0:	e004      	b.n	800f6fc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4904      	ldr	r1, [pc, #16]	; (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f6f6:	4805      	ldr	r0, [pc, #20]	; (800f70c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f6f8:	f7ff fa8d 	bl	800ec16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6fc:	4b02      	ldr	r3, [pc, #8]	; (800f708 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	20001ba8 	.word	0x20001ba8
 800f70c:	08010c28 	.word	0x08010c28

0800f710 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f71c:	79fb      	ldrb	r3, [r7, #7]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d105      	bne.n	800f72e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	4907      	ldr	r1, [pc, #28]	; (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f726:	4808      	ldr	r0, [pc, #32]	; (800f748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f728:	f7ff fa75 	bl	800ec16 <USBD_GetString>
 800f72c:	e004      	b.n	800f738 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	4904      	ldr	r1, [pc, #16]	; (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f732:	4805      	ldr	r0, [pc, #20]	; (800f748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f734:	f7ff fa6f 	bl	800ec16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f738:	4b02      	ldr	r3, [pc, #8]	; (800f744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	20001ba8 	.word	0x20001ba8
 800f748:	08010c34 	.word	0x08010c34

0800f74c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f752:	4b0f      	ldr	r3, [pc, #60]	; (800f790 <Get_SerialNum+0x44>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f758:	4b0e      	ldr	r3, [pc, #56]	; (800f794 <Get_SerialNum+0x48>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f75e:	4b0e      	ldr	r3, [pc, #56]	; (800f798 <Get_SerialNum+0x4c>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4413      	add	r3, r2
 800f76a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d009      	beq.n	800f786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f772:	2208      	movs	r2, #8
 800f774:	4909      	ldr	r1, [pc, #36]	; (800f79c <Get_SerialNum+0x50>)
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f814 	bl	800f7a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f77c:	2204      	movs	r2, #4
 800f77e:	4908      	ldr	r1, [pc, #32]	; (800f7a0 <Get_SerialNum+0x54>)
 800f780:	68b8      	ldr	r0, [r7, #8]
 800f782:	f000 f80f 	bl	800f7a4 <IntToUnicode>
  }
}
 800f786:	bf00      	nop
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	1fff7590 	.word	0x1fff7590
 800f794:	1fff7594 	.word	0x1fff7594
 800f798:	1fff7598 	.word	0x1fff7598
 800f79c:	20000392 	.word	0x20000392
 800f7a0:	200003a2 	.word	0x200003a2

0800f7a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75fb      	strb	r3, [r7, #23]
 800f7ba:	e027      	b.n	800f80c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	0f1b      	lsrs	r3, r3, #28
 800f7c0:	2b09      	cmp	r3, #9
 800f7c2:	d80b      	bhi.n	800f7dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	0f1b      	lsrs	r3, r3, #28
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	7dfb      	ldrb	r3, [r7, #23]
 800f7cc:	005b      	lsls	r3, r3, #1
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	440b      	add	r3, r1
 800f7d4:	3230      	adds	r2, #48	; 0x30
 800f7d6:	b2d2      	uxtb	r2, r2
 800f7d8:	701a      	strb	r2, [r3, #0]
 800f7da:	e00a      	b.n	800f7f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	0f1b      	lsrs	r3, r3, #28
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	440b      	add	r3, r1
 800f7ec:	3237      	adds	r2, #55	; 0x37
 800f7ee:	b2d2      	uxtb	r2, r2
 800f7f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	4413      	add	r3, r2
 800f802:	2200      	movs	r2, #0
 800f804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	3301      	adds	r3, #1
 800f80a:	75fb      	strb	r3, [r7, #23]
 800f80c:	7dfa      	ldrb	r2, [r7, #23]
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	429a      	cmp	r2, r3
 800f812:	d3d3      	bcc.n	800f7bc <IntToUnicode+0x18>
  }
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop
 800f818:	371c      	adds	r7, #28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
	...

0800f824 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b094      	sub	sp, #80	; 0x50
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f82c:	f107 030c 	add.w	r3, r7, #12
 800f830:	2244      	movs	r2, #68	; 0x44
 800f832:	2100      	movs	r1, #0
 800f834:	4618      	mov	r0, r3
 800f836:	f000 fb25 	bl	800fe84 <memset>
  if(pcdHandle->Instance==USB)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a15      	ldr	r2, [pc, #84]	; (800f894 <HAL_PCD_MspInit+0x70>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d122      	bne.n	800f88a <HAL_PCD_MspInit+0x66>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f848:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f84a:	2300      	movs	r3, #0
 800f84c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f84e:	f107 030c 	add.w	r3, r7, #12
 800f852:	4618      	mov	r0, r3
 800f854:	f7f8 ff14 	bl	8008680 <HAL_RCCEx_PeriphCLKConfig>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f85e:	f7f3 fa99 	bl	8002d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f862:	4b0d      	ldr	r3, [pc, #52]	; (800f898 <HAL_PCD_MspInit+0x74>)
 800f864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f866:	4a0c      	ldr	r2, [pc, #48]	; (800f898 <HAL_PCD_MspInit+0x74>)
 800f868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f86c:	6593      	str	r3, [r2, #88]	; 0x58
 800f86e:	4b0a      	ldr	r3, [pc, #40]	; (800f898 <HAL_PCD_MspInit+0x74>)
 800f870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f876:	60bb      	str	r3, [r7, #8]
 800f878:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f87a:	2200      	movs	r2, #0
 800f87c:	2100      	movs	r1, #0
 800f87e:	2014      	movs	r0, #20
 800f880:	f7f5 fc3d 	bl	80050fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f884:	2014      	movs	r0, #20
 800f886:	f7f5 fc54 	bl	8005132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f88a:	bf00      	nop
 800f88c:	3750      	adds	r7, #80	; 0x50
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	40005c00 	.word	0x40005c00
 800f898:	40021000 	.word	0x40021000

0800f89c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	f7fe fa12 	bl	800dcdc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800f8d2:	78fa      	ldrb	r2, [r7, #3]
 800f8d4:	6879      	ldr	r1, [r7, #4]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	78fb      	ldrb	r3, [r7, #3]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	f7fe fa4c 	bl	800dd86 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	460b      	mov	r3, r1
 800f900:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800f908:	78fa      	ldrb	r2, [r7, #3]
 800f90a:	6879      	ldr	r1, [r7, #4]
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	00db      	lsls	r3, r3, #3
 800f914:	440b      	add	r3, r1
 800f916:	333c      	adds	r3, #60	; 0x3c
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	78fb      	ldrb	r3, [r7, #3]
 800f91c:	4619      	mov	r1, r3
 800f91e:	f7fe fa95 	bl	800de4c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fba9 	bl	800e090 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f94e:	2301      	movs	r3, #1
 800f950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	2b02      	cmp	r3, #2
 800f958:	d001      	beq.n	800f95e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f95a:	f7f3 fa1b 	bl	8002d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f964:	7bfa      	ldrb	r2, [r7, #15]
 800f966:	4611      	mov	r1, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fe fb53 	bl	800e014 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe faff 	bl	800df78 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f992:	4618      	mov	r0, r3
 800f994:	f7fe fb4e 	bl	800e034 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9a0:	4b04      	ldr	r3, [pc, #16]	; (800f9b4 <HAL_PCD_SuspendCallback+0x30>)
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	4a03      	ldr	r2, [pc, #12]	; (800f9b4 <HAL_PCD_SuspendCallback+0x30>)
 800f9a6:	f043 0306 	orr.w	r3, r3, #6
 800f9aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	e000ed00 	.word	0xe000ed00

0800f9b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	699b      	ldr	r3, [r3, #24]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9c8:	4b08      	ldr	r3, [pc, #32]	; (800f9ec <HAL_PCD_ResumeCallback+0x34>)
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	4a07      	ldr	r2, [pc, #28]	; (800f9ec <HAL_PCD_ResumeCallback+0x34>)
 800f9ce:	f023 0306 	bic.w	r3, r3, #6
 800f9d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f9d4:	f000 f9fa 	bl	800fdcc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fe fb3e 	bl	800e060 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	e000ed00 	.word	0xe000ed00

0800f9f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f9f8:	4a2b      	ldr	r2, [pc, #172]	; (800faa8 <USBD_LL_Init+0xb8>)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a29      	ldr	r2, [pc, #164]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fa08:	4b27      	ldr	r3, [pc, #156]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa0a:	4a28      	ldr	r2, [pc, #160]	; (800faac <USBD_LL_Init+0xbc>)
 800fa0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fa0e:	4b26      	ldr	r3, [pc, #152]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa10:	2208      	movs	r2, #8
 800fa12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fa14:	4b24      	ldr	r3, [pc, #144]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa16:	2202      	movs	r2, #2
 800fa18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa1a:	4b23      	ldr	r3, [pc, #140]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fa20:	4b21      	ldr	r3, [pc, #132]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fa26:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fa2c:	4b1e      	ldr	r3, [pc, #120]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fa32:	4b1d      	ldr	r3, [pc, #116]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fa38:	481b      	ldr	r0, [pc, #108]	; (800faa8 <USBD_LL_Init+0xb8>)
 800fa3a:	f7f6 fb05 	bl	8006048 <HAL_PCD_Init>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d001      	beq.n	800fa48 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fa44:	f7f3 f9a6 	bl	8002d94 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa4e:	2318      	movs	r3, #24
 800fa50:	2200      	movs	r2, #0
 800fa52:	2100      	movs	r1, #0
 800fa54:	f7f7 ffbe 	bl	80079d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa5e:	2358      	movs	r3, #88	; 0x58
 800fa60:	2200      	movs	r2, #0
 800fa62:	2180      	movs	r1, #128	; 0x80
 800fa64:	f7f7 ffb6 	bl	80079d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa6e:	23c0      	movs	r3, #192	; 0xc0
 800fa70:	2200      	movs	r2, #0
 800fa72:	2181      	movs	r1, #129	; 0x81
 800fa74:	f7f7 ffae 	bl	80079d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800fa82:	2200      	movs	r2, #0
 800fa84:	2101      	movs	r1, #1
 800fa86:	f7f7 ffa5 	bl	80079d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa94:	2200      	movs	r2, #0
 800fa96:	2182      	movs	r1, #130	; 0x82
 800fa98:	f7f7 ff9c 	bl	80079d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	20001da8 	.word	0x20001da8
 800faac:	40005c00 	.word	0x40005c00

0800fab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7f6 fba3 	bl	8006212 <HAL_PCD_Start>
 800facc:	4603      	mov	r3, r0
 800face:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fad0:	7bfb      	ldrb	r3, [r7, #15]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 f980 	bl	800fdd8 <USBD_Get_USB_Status>
 800fad8:	4603      	mov	r3, r0
 800fada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3710      	adds	r7, #16
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b084      	sub	sp, #16
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	4608      	mov	r0, r1
 800faf0:	4611      	mov	r1, r2
 800faf2:	461a      	mov	r2, r3
 800faf4:	4603      	mov	r3, r0
 800faf6:	70fb      	strb	r3, [r7, #3]
 800faf8:	460b      	mov	r3, r1
 800fafa:	70bb      	strb	r3, [r7, #2]
 800fafc:	4613      	mov	r3, r2
 800fafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fb0e:	78bb      	ldrb	r3, [r7, #2]
 800fb10:	883a      	ldrh	r2, [r7, #0]
 800fb12:	78f9      	ldrb	r1, [r7, #3]
 800fb14:	f7f6 fceb 	bl	80064ee <HAL_PCD_EP_Open>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 f95a 	bl	800fdd8 <USBD_Get_USB_Status>
 800fb24:	4603      	mov	r3, r0
 800fb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb4c:	78fa      	ldrb	r2, [r7, #3]
 800fb4e:	4611      	mov	r1, r2
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f6 fd32 	bl	80065ba <HAL_PCD_EP_Close>
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f93b 	bl	800fdd8 <USBD_Get_USB_Status>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7f6 fdf3 	bl	800677a <HAL_PCD_EP_SetStall>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f91c 	bl	800fdd8 <USBD_Get_USB_Status>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbc8:	78fa      	ldrb	r2, [r7, #3]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f6 fe26 	bl	800681e <HAL_PCD_EP_ClrStall>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 f8fd 	bl	800fdd8 <USBD_Get_USB_Status>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	da0c      	bge.n	800fc22 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc0e:	68f9      	ldr	r1, [r7, #12]
 800fc10:	1c5a      	adds	r2, r3, #1
 800fc12:	4613      	mov	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	00db      	lsls	r3, r3, #3
 800fc1a:	440b      	add	r3, r1
 800fc1c:	3302      	adds	r3, #2
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	e00b      	b.n	800fc3a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc22:	78fb      	ldrb	r3, [r7, #3]
 800fc24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc28:	68f9      	ldr	r1, [r7, #12]
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	4413      	add	r3, r2
 800fc30:	00db      	lsls	r3, r3, #3
 800fc32:	440b      	add	r3, r1
 800fc34:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800fc38:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc56:	2300      	movs	r3, #0
 800fc58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc60:	78fa      	ldrb	r2, [r7, #3]
 800fc62:	4611      	mov	r1, r2
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7f6 fc1d 	bl	80064a4 <HAL_PCD_SetAddress>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc6e:	7bfb      	ldrb	r3, [r7, #15]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f000 f8b1 	bl	800fdd8 <USBD_Get_USB_Status>
 800fc76:	4603      	mov	r3, r0
 800fc78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	607a      	str	r2, [r7, #4]
 800fc8e:	603b      	str	r3, [r7, #0]
 800fc90:	460b      	mov	r3, r1
 800fc92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fca2:	7af9      	ldrb	r1, [r7, #11]
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	f7f6 fd24 	bl	80066f4 <HAL_PCD_EP_Transmit>
 800fcac:	4603      	mov	r3, r0
 800fcae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcb0:	7dfb      	ldrb	r3, [r7, #23]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f000 f890 	bl	800fdd8 <USBD_Get_USB_Status>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3718      	adds	r7, #24
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b086      	sub	sp, #24
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	60f8      	str	r0, [r7, #12]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	603b      	str	r3, [r7, #0]
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fce4:	7af9      	ldrb	r1, [r7, #11]
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	f7f6 fcae 	bl	800664a <HAL_PCD_EP_Receive>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f000 f86f 	bl	800fdd8 <USBD_Get_USB_Status>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fcfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3718      	adds	r7, #24
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	460b      	mov	r3, r1
 800fd12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fd1a:	78fa      	ldrb	r2, [r7, #3]
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f6 fcd0 	bl	80066c4 <HAL_PCD_EP_GetRxCount>
 800fd24:	4603      	mov	r3, r0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
	...

0800fd30 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d002      	beq.n	800fd48 <HAL_PCDEx_LPM_Callback+0x18>
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d013      	beq.n	800fd6e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fd46:	e023      	b.n	800fd90 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	699b      	ldr	r3, [r3, #24]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d007      	beq.n	800fd60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fd50:	f000 f83c 	bl	800fdcc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd54:	4b10      	ldr	r3, [pc, #64]	; (800fd98 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	4a0f      	ldr	r2, [pc, #60]	; (800fd98 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd5a:	f023 0306 	bic.w	r3, r3, #6
 800fd5e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe f97a 	bl	800e060 <USBD_LL_Resume>
    break;
 800fd6c:	e010      	b.n	800fd90 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fe f95d 	bl	800e034 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d005      	beq.n	800fd8e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd82:	4b05      	ldr	r3, [pc, #20]	; (800fd98 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	4a04      	ldr	r2, [pc, #16]	; (800fd98 <HAL_PCDEx_LPM_Callback+0x68>)
 800fd88:	f043 0306 	orr.w	r3, r3, #6
 800fd8c:	6113      	str	r3, [r2, #16]
    break;
 800fd8e:	bf00      	nop
}
 800fd90:	bf00      	nop
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	e000ed00 	.word	0xe000ed00

0800fd9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fda4:	4b03      	ldr	r3, [pc, #12]	; (800fdb4 <USBD_static_malloc+0x18>)
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	20000440 	.word	0x20000440

0800fdb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]

}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fdd0:	f7f1 fc4c 	bl	800166c <SystemClock_Config>
}
 800fdd4:	bf00      	nop
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d817      	bhi.n	800fe1c <USBD_Get_USB_Status+0x44>
 800fdec:	a201      	add	r2, pc, #4	; (adr r2, 800fdf4 <USBD_Get_USB_Status+0x1c>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe05 	.word	0x0800fe05
 800fdf8:	0800fe0b 	.word	0x0800fe0b
 800fdfc:	0800fe11 	.word	0x0800fe11
 800fe00:	0800fe17 	.word	0x0800fe17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	73fb      	strb	r3, [r7, #15]
    break;
 800fe08:	e00b      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe0a:	2303      	movs	r3, #3
 800fe0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0e:	e008      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe10:	2301      	movs	r3, #1
 800fe12:	73fb      	strb	r3, [r7, #15]
    break;
 800fe14:	e005      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe16:	2303      	movs	r3, #3
 800fe18:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1a:	e002      	b.n	800fe22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe20:	bf00      	nop
  }
  return usb_status;
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <__errno>:
 800fe30:	4b01      	ldr	r3, [pc, #4]	; (800fe38 <__errno+0x8>)
 800fe32:	6818      	ldr	r0, [r3, #0]
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	200003ac 	.word	0x200003ac

0800fe3c <__libc_init_array>:
 800fe3c:	b570      	push	{r4, r5, r6, lr}
 800fe3e:	4d0d      	ldr	r5, [pc, #52]	; (800fe74 <__libc_init_array+0x38>)
 800fe40:	4c0d      	ldr	r4, [pc, #52]	; (800fe78 <__libc_init_array+0x3c>)
 800fe42:	1b64      	subs	r4, r4, r5
 800fe44:	10a4      	asrs	r4, r4, #2
 800fe46:	2600      	movs	r6, #0
 800fe48:	42a6      	cmp	r6, r4
 800fe4a:	d109      	bne.n	800fe60 <__libc_init_array+0x24>
 800fe4c:	4d0b      	ldr	r5, [pc, #44]	; (800fe7c <__libc_init_array+0x40>)
 800fe4e:	4c0c      	ldr	r4, [pc, #48]	; (800fe80 <__libc_init_array+0x44>)
 800fe50:	f000 fc4e 	bl	80106f0 <_init>
 800fe54:	1b64      	subs	r4, r4, r5
 800fe56:	10a4      	asrs	r4, r4, #2
 800fe58:	2600      	movs	r6, #0
 800fe5a:	42a6      	cmp	r6, r4
 800fe5c:	d105      	bne.n	800fe6a <__libc_init_array+0x2e>
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe64:	4798      	blx	r3
 800fe66:	3601      	adds	r6, #1
 800fe68:	e7ee      	b.n	800fe48 <__libc_init_array+0xc>
 800fe6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe6e:	4798      	blx	r3
 800fe70:	3601      	adds	r6, #1
 800fe72:	e7f2      	b.n	800fe5a <__libc_init_array+0x1e>
 800fe74:	08010cc0 	.word	0x08010cc0
 800fe78:	08010cc0 	.word	0x08010cc0
 800fe7c:	08010cc0 	.word	0x08010cc0
 800fe80:	08010cc4 	.word	0x08010cc4

0800fe84 <memset>:
 800fe84:	4402      	add	r2, r0
 800fe86:	4603      	mov	r3, r0
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d100      	bne.n	800fe8e <memset+0xa>
 800fe8c:	4770      	bx	lr
 800fe8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fe92:	e7f9      	b.n	800fe88 <memset+0x4>

0800fe94 <siprintf>:
 800fe94:	b40e      	push	{r1, r2, r3}
 800fe96:	b500      	push	{lr}
 800fe98:	b09c      	sub	sp, #112	; 0x70
 800fe9a:	ab1d      	add	r3, sp, #116	; 0x74
 800fe9c:	9002      	str	r0, [sp, #8]
 800fe9e:	9006      	str	r0, [sp, #24]
 800fea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fea4:	4809      	ldr	r0, [pc, #36]	; (800fecc <siprintf+0x38>)
 800fea6:	9107      	str	r1, [sp, #28]
 800fea8:	9104      	str	r1, [sp, #16]
 800feaa:	4909      	ldr	r1, [pc, #36]	; (800fed0 <siprintf+0x3c>)
 800feac:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb0:	9105      	str	r1, [sp, #20]
 800feb2:	6800      	ldr	r0, [r0, #0]
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	a902      	add	r1, sp, #8
 800feb8:	f000 f868 	bl	800ff8c <_svfiprintf_r>
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	2200      	movs	r2, #0
 800fec0:	701a      	strb	r2, [r3, #0]
 800fec2:	b01c      	add	sp, #112	; 0x70
 800fec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec8:	b003      	add	sp, #12
 800feca:	4770      	bx	lr
 800fecc:	200003ac 	.word	0x200003ac
 800fed0:	ffff0208 	.word	0xffff0208

0800fed4 <__ssputs_r>:
 800fed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed8:	688e      	ldr	r6, [r1, #8]
 800feda:	429e      	cmp	r6, r3
 800fedc:	4682      	mov	sl, r0
 800fede:	460c      	mov	r4, r1
 800fee0:	4690      	mov	r8, r2
 800fee2:	461f      	mov	r7, r3
 800fee4:	d838      	bhi.n	800ff58 <__ssputs_r+0x84>
 800fee6:	898a      	ldrh	r2, [r1, #12]
 800fee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800feec:	d032      	beq.n	800ff54 <__ssputs_r+0x80>
 800feee:	6825      	ldr	r5, [r4, #0]
 800fef0:	6909      	ldr	r1, [r1, #16]
 800fef2:	eba5 0901 	sub.w	r9, r5, r1
 800fef6:	6965      	ldr	r5, [r4, #20]
 800fef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff00:	3301      	adds	r3, #1
 800ff02:	444b      	add	r3, r9
 800ff04:	106d      	asrs	r5, r5, #1
 800ff06:	429d      	cmp	r5, r3
 800ff08:	bf38      	it	cc
 800ff0a:	461d      	movcc	r5, r3
 800ff0c:	0553      	lsls	r3, r2, #21
 800ff0e:	d531      	bpl.n	800ff74 <__ssputs_r+0xa0>
 800ff10:	4629      	mov	r1, r5
 800ff12:	f000 fb47 	bl	80105a4 <_malloc_r>
 800ff16:	4606      	mov	r6, r0
 800ff18:	b950      	cbnz	r0, 800ff30 <__ssputs_r+0x5c>
 800ff1a:	230c      	movs	r3, #12
 800ff1c:	f8ca 3000 	str.w	r3, [sl]
 800ff20:	89a3      	ldrh	r3, [r4, #12]
 800ff22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff26:	81a3      	strh	r3, [r4, #12]
 800ff28:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff30:	6921      	ldr	r1, [r4, #16]
 800ff32:	464a      	mov	r2, r9
 800ff34:	f000 fabe 	bl	80104b4 <memcpy>
 800ff38:	89a3      	ldrh	r3, [r4, #12]
 800ff3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff42:	81a3      	strh	r3, [r4, #12]
 800ff44:	6126      	str	r6, [r4, #16]
 800ff46:	6165      	str	r5, [r4, #20]
 800ff48:	444e      	add	r6, r9
 800ff4a:	eba5 0509 	sub.w	r5, r5, r9
 800ff4e:	6026      	str	r6, [r4, #0]
 800ff50:	60a5      	str	r5, [r4, #8]
 800ff52:	463e      	mov	r6, r7
 800ff54:	42be      	cmp	r6, r7
 800ff56:	d900      	bls.n	800ff5a <__ssputs_r+0x86>
 800ff58:	463e      	mov	r6, r7
 800ff5a:	4632      	mov	r2, r6
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	4641      	mov	r1, r8
 800ff60:	f000 fab6 	bl	80104d0 <memmove>
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	6822      	ldr	r2, [r4, #0]
 800ff68:	1b9b      	subs	r3, r3, r6
 800ff6a:	4432      	add	r2, r6
 800ff6c:	60a3      	str	r3, [r4, #8]
 800ff6e:	6022      	str	r2, [r4, #0]
 800ff70:	2000      	movs	r0, #0
 800ff72:	e7db      	b.n	800ff2c <__ssputs_r+0x58>
 800ff74:	462a      	mov	r2, r5
 800ff76:	f000 fb6f 	bl	8010658 <_realloc_r>
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d1e1      	bne.n	800ff44 <__ssputs_r+0x70>
 800ff80:	6921      	ldr	r1, [r4, #16]
 800ff82:	4650      	mov	r0, sl
 800ff84:	f000 fabe 	bl	8010504 <_free_r>
 800ff88:	e7c7      	b.n	800ff1a <__ssputs_r+0x46>
	...

0800ff8c <_svfiprintf_r>:
 800ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	4698      	mov	r8, r3
 800ff92:	898b      	ldrh	r3, [r1, #12]
 800ff94:	061b      	lsls	r3, r3, #24
 800ff96:	b09d      	sub	sp, #116	; 0x74
 800ff98:	4607      	mov	r7, r0
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	4614      	mov	r4, r2
 800ff9e:	d50e      	bpl.n	800ffbe <_svfiprintf_r+0x32>
 800ffa0:	690b      	ldr	r3, [r1, #16]
 800ffa2:	b963      	cbnz	r3, 800ffbe <_svfiprintf_r+0x32>
 800ffa4:	2140      	movs	r1, #64	; 0x40
 800ffa6:	f000 fafd 	bl	80105a4 <_malloc_r>
 800ffaa:	6028      	str	r0, [r5, #0]
 800ffac:	6128      	str	r0, [r5, #16]
 800ffae:	b920      	cbnz	r0, 800ffba <_svfiprintf_r+0x2e>
 800ffb0:	230c      	movs	r3, #12
 800ffb2:	603b      	str	r3, [r7, #0]
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb8:	e0d1      	b.n	801015e <_svfiprintf_r+0x1d2>
 800ffba:	2340      	movs	r3, #64	; 0x40
 800ffbc:	616b      	str	r3, [r5, #20]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc2:	2320      	movs	r3, #32
 800ffc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffcc:	2330      	movs	r3, #48	; 0x30
 800ffce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010178 <_svfiprintf_r+0x1ec>
 800ffd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffd6:	f04f 0901 	mov.w	r9, #1
 800ffda:	4623      	mov	r3, r4
 800ffdc:	469a      	mov	sl, r3
 800ffde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffe2:	b10a      	cbz	r2, 800ffe8 <_svfiprintf_r+0x5c>
 800ffe4:	2a25      	cmp	r2, #37	; 0x25
 800ffe6:	d1f9      	bne.n	800ffdc <_svfiprintf_r+0x50>
 800ffe8:	ebba 0b04 	subs.w	fp, sl, r4
 800ffec:	d00b      	beq.n	8010006 <_svfiprintf_r+0x7a>
 800ffee:	465b      	mov	r3, fp
 800fff0:	4622      	mov	r2, r4
 800fff2:	4629      	mov	r1, r5
 800fff4:	4638      	mov	r0, r7
 800fff6:	f7ff ff6d 	bl	800fed4 <__ssputs_r>
 800fffa:	3001      	adds	r0, #1
 800fffc:	f000 80aa 	beq.w	8010154 <_svfiprintf_r+0x1c8>
 8010000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010002:	445a      	add	r2, fp
 8010004:	9209      	str	r2, [sp, #36]	; 0x24
 8010006:	f89a 3000 	ldrb.w	r3, [sl]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 80a2 	beq.w	8010154 <_svfiprintf_r+0x1c8>
 8010010:	2300      	movs	r3, #0
 8010012:	f04f 32ff 	mov.w	r2, #4294967295
 8010016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801001a:	f10a 0a01 	add.w	sl, sl, #1
 801001e:	9304      	str	r3, [sp, #16]
 8010020:	9307      	str	r3, [sp, #28]
 8010022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010026:	931a      	str	r3, [sp, #104]	; 0x68
 8010028:	4654      	mov	r4, sl
 801002a:	2205      	movs	r2, #5
 801002c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010030:	4851      	ldr	r0, [pc, #324]	; (8010178 <_svfiprintf_r+0x1ec>)
 8010032:	f7f0 f8fd 	bl	8000230 <memchr>
 8010036:	9a04      	ldr	r2, [sp, #16]
 8010038:	b9d8      	cbnz	r0, 8010072 <_svfiprintf_r+0xe6>
 801003a:	06d0      	lsls	r0, r2, #27
 801003c:	bf44      	itt	mi
 801003e:	2320      	movmi	r3, #32
 8010040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010044:	0711      	lsls	r1, r2, #28
 8010046:	bf44      	itt	mi
 8010048:	232b      	movmi	r3, #43	; 0x2b
 801004a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801004e:	f89a 3000 	ldrb.w	r3, [sl]
 8010052:	2b2a      	cmp	r3, #42	; 0x2a
 8010054:	d015      	beq.n	8010082 <_svfiprintf_r+0xf6>
 8010056:	9a07      	ldr	r2, [sp, #28]
 8010058:	4654      	mov	r4, sl
 801005a:	2000      	movs	r0, #0
 801005c:	f04f 0c0a 	mov.w	ip, #10
 8010060:	4621      	mov	r1, r4
 8010062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010066:	3b30      	subs	r3, #48	; 0x30
 8010068:	2b09      	cmp	r3, #9
 801006a:	d94e      	bls.n	801010a <_svfiprintf_r+0x17e>
 801006c:	b1b0      	cbz	r0, 801009c <_svfiprintf_r+0x110>
 801006e:	9207      	str	r2, [sp, #28]
 8010070:	e014      	b.n	801009c <_svfiprintf_r+0x110>
 8010072:	eba0 0308 	sub.w	r3, r0, r8
 8010076:	fa09 f303 	lsl.w	r3, r9, r3
 801007a:	4313      	orrs	r3, r2
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	46a2      	mov	sl, r4
 8010080:	e7d2      	b.n	8010028 <_svfiprintf_r+0x9c>
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	1d19      	adds	r1, r3, #4
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	9103      	str	r1, [sp, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	bfbb      	ittet	lt
 801008e:	425b      	neglt	r3, r3
 8010090:	f042 0202 	orrlt.w	r2, r2, #2
 8010094:	9307      	strge	r3, [sp, #28]
 8010096:	9307      	strlt	r3, [sp, #28]
 8010098:	bfb8      	it	lt
 801009a:	9204      	strlt	r2, [sp, #16]
 801009c:	7823      	ldrb	r3, [r4, #0]
 801009e:	2b2e      	cmp	r3, #46	; 0x2e
 80100a0:	d10c      	bne.n	80100bc <_svfiprintf_r+0x130>
 80100a2:	7863      	ldrb	r3, [r4, #1]
 80100a4:	2b2a      	cmp	r3, #42	; 0x2a
 80100a6:	d135      	bne.n	8010114 <_svfiprintf_r+0x188>
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	1d1a      	adds	r2, r3, #4
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	9203      	str	r2, [sp, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	bfb8      	it	lt
 80100b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80100b8:	3402      	adds	r4, #2
 80100ba:	9305      	str	r3, [sp, #20]
 80100bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010188 <_svfiprintf_r+0x1fc>
 80100c0:	7821      	ldrb	r1, [r4, #0]
 80100c2:	2203      	movs	r2, #3
 80100c4:	4650      	mov	r0, sl
 80100c6:	f7f0 f8b3 	bl	8000230 <memchr>
 80100ca:	b140      	cbz	r0, 80100de <_svfiprintf_r+0x152>
 80100cc:	2340      	movs	r3, #64	; 0x40
 80100ce:	eba0 000a 	sub.w	r0, r0, sl
 80100d2:	fa03 f000 	lsl.w	r0, r3, r0
 80100d6:	9b04      	ldr	r3, [sp, #16]
 80100d8:	4303      	orrs	r3, r0
 80100da:	3401      	adds	r4, #1
 80100dc:	9304      	str	r3, [sp, #16]
 80100de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e2:	4826      	ldr	r0, [pc, #152]	; (801017c <_svfiprintf_r+0x1f0>)
 80100e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100e8:	2206      	movs	r2, #6
 80100ea:	f7f0 f8a1 	bl	8000230 <memchr>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d038      	beq.n	8010164 <_svfiprintf_r+0x1d8>
 80100f2:	4b23      	ldr	r3, [pc, #140]	; (8010180 <_svfiprintf_r+0x1f4>)
 80100f4:	bb1b      	cbnz	r3, 801013e <_svfiprintf_r+0x1b2>
 80100f6:	9b03      	ldr	r3, [sp, #12]
 80100f8:	3307      	adds	r3, #7
 80100fa:	f023 0307 	bic.w	r3, r3, #7
 80100fe:	3308      	adds	r3, #8
 8010100:	9303      	str	r3, [sp, #12]
 8010102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010104:	4433      	add	r3, r6
 8010106:	9309      	str	r3, [sp, #36]	; 0x24
 8010108:	e767      	b.n	800ffda <_svfiprintf_r+0x4e>
 801010a:	fb0c 3202 	mla	r2, ip, r2, r3
 801010e:	460c      	mov	r4, r1
 8010110:	2001      	movs	r0, #1
 8010112:	e7a5      	b.n	8010060 <_svfiprintf_r+0xd4>
 8010114:	2300      	movs	r3, #0
 8010116:	3401      	adds	r4, #1
 8010118:	9305      	str	r3, [sp, #20]
 801011a:	4619      	mov	r1, r3
 801011c:	f04f 0c0a 	mov.w	ip, #10
 8010120:	4620      	mov	r0, r4
 8010122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010126:	3a30      	subs	r2, #48	; 0x30
 8010128:	2a09      	cmp	r2, #9
 801012a:	d903      	bls.n	8010134 <_svfiprintf_r+0x1a8>
 801012c:	2b00      	cmp	r3, #0
 801012e:	d0c5      	beq.n	80100bc <_svfiprintf_r+0x130>
 8010130:	9105      	str	r1, [sp, #20]
 8010132:	e7c3      	b.n	80100bc <_svfiprintf_r+0x130>
 8010134:	fb0c 2101 	mla	r1, ip, r1, r2
 8010138:	4604      	mov	r4, r0
 801013a:	2301      	movs	r3, #1
 801013c:	e7f0      	b.n	8010120 <_svfiprintf_r+0x194>
 801013e:	ab03      	add	r3, sp, #12
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	462a      	mov	r2, r5
 8010144:	4b0f      	ldr	r3, [pc, #60]	; (8010184 <_svfiprintf_r+0x1f8>)
 8010146:	a904      	add	r1, sp, #16
 8010148:	4638      	mov	r0, r7
 801014a:	f3af 8000 	nop.w
 801014e:	1c42      	adds	r2, r0, #1
 8010150:	4606      	mov	r6, r0
 8010152:	d1d6      	bne.n	8010102 <_svfiprintf_r+0x176>
 8010154:	89ab      	ldrh	r3, [r5, #12]
 8010156:	065b      	lsls	r3, r3, #25
 8010158:	f53f af2c 	bmi.w	800ffb4 <_svfiprintf_r+0x28>
 801015c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801015e:	b01d      	add	sp, #116	; 0x74
 8010160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010164:	ab03      	add	r3, sp, #12
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	462a      	mov	r2, r5
 801016a:	4b06      	ldr	r3, [pc, #24]	; (8010184 <_svfiprintf_r+0x1f8>)
 801016c:	a904      	add	r1, sp, #16
 801016e:	4638      	mov	r0, r7
 8010170:	f000 f87a 	bl	8010268 <_printf_i>
 8010174:	e7eb      	b.n	801014e <_svfiprintf_r+0x1c2>
 8010176:	bf00      	nop
 8010178:	08010c84 	.word	0x08010c84
 801017c:	08010c8e 	.word	0x08010c8e
 8010180:	00000000 	.word	0x00000000
 8010184:	0800fed5 	.word	0x0800fed5
 8010188:	08010c8a 	.word	0x08010c8a

0801018c <_printf_common>:
 801018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010190:	4616      	mov	r6, r2
 8010192:	4699      	mov	r9, r3
 8010194:	688a      	ldr	r2, [r1, #8]
 8010196:	690b      	ldr	r3, [r1, #16]
 8010198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801019c:	4293      	cmp	r3, r2
 801019e:	bfb8      	it	lt
 80101a0:	4613      	movlt	r3, r2
 80101a2:	6033      	str	r3, [r6, #0]
 80101a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101a8:	4607      	mov	r7, r0
 80101aa:	460c      	mov	r4, r1
 80101ac:	b10a      	cbz	r2, 80101b2 <_printf_common+0x26>
 80101ae:	3301      	adds	r3, #1
 80101b0:	6033      	str	r3, [r6, #0]
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	0699      	lsls	r1, r3, #26
 80101b6:	bf42      	ittt	mi
 80101b8:	6833      	ldrmi	r3, [r6, #0]
 80101ba:	3302      	addmi	r3, #2
 80101bc:	6033      	strmi	r3, [r6, #0]
 80101be:	6825      	ldr	r5, [r4, #0]
 80101c0:	f015 0506 	ands.w	r5, r5, #6
 80101c4:	d106      	bne.n	80101d4 <_printf_common+0x48>
 80101c6:	f104 0a19 	add.w	sl, r4, #25
 80101ca:	68e3      	ldr	r3, [r4, #12]
 80101cc:	6832      	ldr	r2, [r6, #0]
 80101ce:	1a9b      	subs	r3, r3, r2
 80101d0:	42ab      	cmp	r3, r5
 80101d2:	dc26      	bgt.n	8010222 <_printf_common+0x96>
 80101d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101d8:	1e13      	subs	r3, r2, #0
 80101da:	6822      	ldr	r2, [r4, #0]
 80101dc:	bf18      	it	ne
 80101de:	2301      	movne	r3, #1
 80101e0:	0692      	lsls	r2, r2, #26
 80101e2:	d42b      	bmi.n	801023c <_printf_common+0xb0>
 80101e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101e8:	4649      	mov	r1, r9
 80101ea:	4638      	mov	r0, r7
 80101ec:	47c0      	blx	r8
 80101ee:	3001      	adds	r0, #1
 80101f0:	d01e      	beq.n	8010230 <_printf_common+0xa4>
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	68e5      	ldr	r5, [r4, #12]
 80101f6:	6832      	ldr	r2, [r6, #0]
 80101f8:	f003 0306 	and.w	r3, r3, #6
 80101fc:	2b04      	cmp	r3, #4
 80101fe:	bf08      	it	eq
 8010200:	1aad      	subeq	r5, r5, r2
 8010202:	68a3      	ldr	r3, [r4, #8]
 8010204:	6922      	ldr	r2, [r4, #16]
 8010206:	bf0c      	ite	eq
 8010208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801020c:	2500      	movne	r5, #0
 801020e:	4293      	cmp	r3, r2
 8010210:	bfc4      	itt	gt
 8010212:	1a9b      	subgt	r3, r3, r2
 8010214:	18ed      	addgt	r5, r5, r3
 8010216:	2600      	movs	r6, #0
 8010218:	341a      	adds	r4, #26
 801021a:	42b5      	cmp	r5, r6
 801021c:	d11a      	bne.n	8010254 <_printf_common+0xc8>
 801021e:	2000      	movs	r0, #0
 8010220:	e008      	b.n	8010234 <_printf_common+0xa8>
 8010222:	2301      	movs	r3, #1
 8010224:	4652      	mov	r2, sl
 8010226:	4649      	mov	r1, r9
 8010228:	4638      	mov	r0, r7
 801022a:	47c0      	blx	r8
 801022c:	3001      	adds	r0, #1
 801022e:	d103      	bne.n	8010238 <_printf_common+0xac>
 8010230:	f04f 30ff 	mov.w	r0, #4294967295
 8010234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010238:	3501      	adds	r5, #1
 801023a:	e7c6      	b.n	80101ca <_printf_common+0x3e>
 801023c:	18e1      	adds	r1, r4, r3
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	2030      	movs	r0, #48	; 0x30
 8010242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010246:	4422      	add	r2, r4
 8010248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801024c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010250:	3302      	adds	r3, #2
 8010252:	e7c7      	b.n	80101e4 <_printf_common+0x58>
 8010254:	2301      	movs	r3, #1
 8010256:	4622      	mov	r2, r4
 8010258:	4649      	mov	r1, r9
 801025a:	4638      	mov	r0, r7
 801025c:	47c0      	blx	r8
 801025e:	3001      	adds	r0, #1
 8010260:	d0e6      	beq.n	8010230 <_printf_common+0xa4>
 8010262:	3601      	adds	r6, #1
 8010264:	e7d9      	b.n	801021a <_printf_common+0x8e>
	...

08010268 <_printf_i>:
 8010268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801026c:	460c      	mov	r4, r1
 801026e:	4691      	mov	r9, r2
 8010270:	7e27      	ldrb	r7, [r4, #24]
 8010272:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010274:	2f78      	cmp	r7, #120	; 0x78
 8010276:	4680      	mov	r8, r0
 8010278:	469a      	mov	sl, r3
 801027a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801027e:	d807      	bhi.n	8010290 <_printf_i+0x28>
 8010280:	2f62      	cmp	r7, #98	; 0x62
 8010282:	d80a      	bhi.n	801029a <_printf_i+0x32>
 8010284:	2f00      	cmp	r7, #0
 8010286:	f000 80d8 	beq.w	801043a <_printf_i+0x1d2>
 801028a:	2f58      	cmp	r7, #88	; 0x58
 801028c:	f000 80a3 	beq.w	80103d6 <_printf_i+0x16e>
 8010290:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010298:	e03a      	b.n	8010310 <_printf_i+0xa8>
 801029a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801029e:	2b15      	cmp	r3, #21
 80102a0:	d8f6      	bhi.n	8010290 <_printf_i+0x28>
 80102a2:	a001      	add	r0, pc, #4	; (adr r0, 80102a8 <_printf_i+0x40>)
 80102a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80102a8:	08010301 	.word	0x08010301
 80102ac:	08010315 	.word	0x08010315
 80102b0:	08010291 	.word	0x08010291
 80102b4:	08010291 	.word	0x08010291
 80102b8:	08010291 	.word	0x08010291
 80102bc:	08010291 	.word	0x08010291
 80102c0:	08010315 	.word	0x08010315
 80102c4:	08010291 	.word	0x08010291
 80102c8:	08010291 	.word	0x08010291
 80102cc:	08010291 	.word	0x08010291
 80102d0:	08010291 	.word	0x08010291
 80102d4:	08010421 	.word	0x08010421
 80102d8:	08010345 	.word	0x08010345
 80102dc:	08010403 	.word	0x08010403
 80102e0:	08010291 	.word	0x08010291
 80102e4:	08010291 	.word	0x08010291
 80102e8:	08010443 	.word	0x08010443
 80102ec:	08010291 	.word	0x08010291
 80102f0:	08010345 	.word	0x08010345
 80102f4:	08010291 	.word	0x08010291
 80102f8:	08010291 	.word	0x08010291
 80102fc:	0801040b 	.word	0x0801040b
 8010300:	680b      	ldr	r3, [r1, #0]
 8010302:	1d1a      	adds	r2, r3, #4
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	600a      	str	r2, [r1, #0]
 8010308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801030c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010310:	2301      	movs	r3, #1
 8010312:	e0a3      	b.n	801045c <_printf_i+0x1f4>
 8010314:	6825      	ldr	r5, [r4, #0]
 8010316:	6808      	ldr	r0, [r1, #0]
 8010318:	062e      	lsls	r6, r5, #24
 801031a:	f100 0304 	add.w	r3, r0, #4
 801031e:	d50a      	bpl.n	8010336 <_printf_i+0xce>
 8010320:	6805      	ldr	r5, [r0, #0]
 8010322:	600b      	str	r3, [r1, #0]
 8010324:	2d00      	cmp	r5, #0
 8010326:	da03      	bge.n	8010330 <_printf_i+0xc8>
 8010328:	232d      	movs	r3, #45	; 0x2d
 801032a:	426d      	negs	r5, r5
 801032c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010330:	485e      	ldr	r0, [pc, #376]	; (80104ac <_printf_i+0x244>)
 8010332:	230a      	movs	r3, #10
 8010334:	e019      	b.n	801036a <_printf_i+0x102>
 8010336:	f015 0f40 	tst.w	r5, #64	; 0x40
 801033a:	6805      	ldr	r5, [r0, #0]
 801033c:	600b      	str	r3, [r1, #0]
 801033e:	bf18      	it	ne
 8010340:	b22d      	sxthne	r5, r5
 8010342:	e7ef      	b.n	8010324 <_printf_i+0xbc>
 8010344:	680b      	ldr	r3, [r1, #0]
 8010346:	6825      	ldr	r5, [r4, #0]
 8010348:	1d18      	adds	r0, r3, #4
 801034a:	6008      	str	r0, [r1, #0]
 801034c:	0628      	lsls	r0, r5, #24
 801034e:	d501      	bpl.n	8010354 <_printf_i+0xec>
 8010350:	681d      	ldr	r5, [r3, #0]
 8010352:	e002      	b.n	801035a <_printf_i+0xf2>
 8010354:	0669      	lsls	r1, r5, #25
 8010356:	d5fb      	bpl.n	8010350 <_printf_i+0xe8>
 8010358:	881d      	ldrh	r5, [r3, #0]
 801035a:	4854      	ldr	r0, [pc, #336]	; (80104ac <_printf_i+0x244>)
 801035c:	2f6f      	cmp	r7, #111	; 0x6f
 801035e:	bf0c      	ite	eq
 8010360:	2308      	moveq	r3, #8
 8010362:	230a      	movne	r3, #10
 8010364:	2100      	movs	r1, #0
 8010366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801036a:	6866      	ldr	r6, [r4, #4]
 801036c:	60a6      	str	r6, [r4, #8]
 801036e:	2e00      	cmp	r6, #0
 8010370:	bfa2      	ittt	ge
 8010372:	6821      	ldrge	r1, [r4, #0]
 8010374:	f021 0104 	bicge.w	r1, r1, #4
 8010378:	6021      	strge	r1, [r4, #0]
 801037a:	b90d      	cbnz	r5, 8010380 <_printf_i+0x118>
 801037c:	2e00      	cmp	r6, #0
 801037e:	d04d      	beq.n	801041c <_printf_i+0x1b4>
 8010380:	4616      	mov	r6, r2
 8010382:	fbb5 f1f3 	udiv	r1, r5, r3
 8010386:	fb03 5711 	mls	r7, r3, r1, r5
 801038a:	5dc7      	ldrb	r7, [r0, r7]
 801038c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010390:	462f      	mov	r7, r5
 8010392:	42bb      	cmp	r3, r7
 8010394:	460d      	mov	r5, r1
 8010396:	d9f4      	bls.n	8010382 <_printf_i+0x11a>
 8010398:	2b08      	cmp	r3, #8
 801039a:	d10b      	bne.n	80103b4 <_printf_i+0x14c>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	07df      	lsls	r7, r3, #31
 80103a0:	d508      	bpl.n	80103b4 <_printf_i+0x14c>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	6861      	ldr	r1, [r4, #4]
 80103a6:	4299      	cmp	r1, r3
 80103a8:	bfde      	ittt	le
 80103aa:	2330      	movle	r3, #48	; 0x30
 80103ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103b4:	1b92      	subs	r2, r2, r6
 80103b6:	6122      	str	r2, [r4, #16]
 80103b8:	f8cd a000 	str.w	sl, [sp]
 80103bc:	464b      	mov	r3, r9
 80103be:	aa03      	add	r2, sp, #12
 80103c0:	4621      	mov	r1, r4
 80103c2:	4640      	mov	r0, r8
 80103c4:	f7ff fee2 	bl	801018c <_printf_common>
 80103c8:	3001      	adds	r0, #1
 80103ca:	d14c      	bne.n	8010466 <_printf_i+0x1fe>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	b004      	add	sp, #16
 80103d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d6:	4835      	ldr	r0, [pc, #212]	; (80104ac <_printf_i+0x244>)
 80103d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	680e      	ldr	r6, [r1, #0]
 80103e0:	061f      	lsls	r7, r3, #24
 80103e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80103e6:	600e      	str	r6, [r1, #0]
 80103e8:	d514      	bpl.n	8010414 <_printf_i+0x1ac>
 80103ea:	07d9      	lsls	r1, r3, #31
 80103ec:	bf44      	itt	mi
 80103ee:	f043 0320 	orrmi.w	r3, r3, #32
 80103f2:	6023      	strmi	r3, [r4, #0]
 80103f4:	b91d      	cbnz	r5, 80103fe <_printf_i+0x196>
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	f023 0320 	bic.w	r3, r3, #32
 80103fc:	6023      	str	r3, [r4, #0]
 80103fe:	2310      	movs	r3, #16
 8010400:	e7b0      	b.n	8010364 <_printf_i+0xfc>
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	f043 0320 	orr.w	r3, r3, #32
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	2378      	movs	r3, #120	; 0x78
 801040c:	4828      	ldr	r0, [pc, #160]	; (80104b0 <_printf_i+0x248>)
 801040e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010412:	e7e3      	b.n	80103dc <_printf_i+0x174>
 8010414:	065e      	lsls	r6, r3, #25
 8010416:	bf48      	it	mi
 8010418:	b2ad      	uxthmi	r5, r5
 801041a:	e7e6      	b.n	80103ea <_printf_i+0x182>
 801041c:	4616      	mov	r6, r2
 801041e:	e7bb      	b.n	8010398 <_printf_i+0x130>
 8010420:	680b      	ldr	r3, [r1, #0]
 8010422:	6826      	ldr	r6, [r4, #0]
 8010424:	6960      	ldr	r0, [r4, #20]
 8010426:	1d1d      	adds	r5, r3, #4
 8010428:	600d      	str	r5, [r1, #0]
 801042a:	0635      	lsls	r5, r6, #24
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	d501      	bpl.n	8010434 <_printf_i+0x1cc>
 8010430:	6018      	str	r0, [r3, #0]
 8010432:	e002      	b.n	801043a <_printf_i+0x1d2>
 8010434:	0671      	lsls	r1, r6, #25
 8010436:	d5fb      	bpl.n	8010430 <_printf_i+0x1c8>
 8010438:	8018      	strh	r0, [r3, #0]
 801043a:	2300      	movs	r3, #0
 801043c:	6123      	str	r3, [r4, #16]
 801043e:	4616      	mov	r6, r2
 8010440:	e7ba      	b.n	80103b8 <_printf_i+0x150>
 8010442:	680b      	ldr	r3, [r1, #0]
 8010444:	1d1a      	adds	r2, r3, #4
 8010446:	600a      	str	r2, [r1, #0]
 8010448:	681e      	ldr	r6, [r3, #0]
 801044a:	6862      	ldr	r2, [r4, #4]
 801044c:	2100      	movs	r1, #0
 801044e:	4630      	mov	r0, r6
 8010450:	f7ef feee 	bl	8000230 <memchr>
 8010454:	b108      	cbz	r0, 801045a <_printf_i+0x1f2>
 8010456:	1b80      	subs	r0, r0, r6
 8010458:	6060      	str	r0, [r4, #4]
 801045a:	6863      	ldr	r3, [r4, #4]
 801045c:	6123      	str	r3, [r4, #16]
 801045e:	2300      	movs	r3, #0
 8010460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010464:	e7a8      	b.n	80103b8 <_printf_i+0x150>
 8010466:	6923      	ldr	r3, [r4, #16]
 8010468:	4632      	mov	r2, r6
 801046a:	4649      	mov	r1, r9
 801046c:	4640      	mov	r0, r8
 801046e:	47d0      	blx	sl
 8010470:	3001      	adds	r0, #1
 8010472:	d0ab      	beq.n	80103cc <_printf_i+0x164>
 8010474:	6823      	ldr	r3, [r4, #0]
 8010476:	079b      	lsls	r3, r3, #30
 8010478:	d413      	bmi.n	80104a2 <_printf_i+0x23a>
 801047a:	68e0      	ldr	r0, [r4, #12]
 801047c:	9b03      	ldr	r3, [sp, #12]
 801047e:	4298      	cmp	r0, r3
 8010480:	bfb8      	it	lt
 8010482:	4618      	movlt	r0, r3
 8010484:	e7a4      	b.n	80103d0 <_printf_i+0x168>
 8010486:	2301      	movs	r3, #1
 8010488:	4632      	mov	r2, r6
 801048a:	4649      	mov	r1, r9
 801048c:	4640      	mov	r0, r8
 801048e:	47d0      	blx	sl
 8010490:	3001      	adds	r0, #1
 8010492:	d09b      	beq.n	80103cc <_printf_i+0x164>
 8010494:	3501      	adds	r5, #1
 8010496:	68e3      	ldr	r3, [r4, #12]
 8010498:	9903      	ldr	r1, [sp, #12]
 801049a:	1a5b      	subs	r3, r3, r1
 801049c:	42ab      	cmp	r3, r5
 801049e:	dcf2      	bgt.n	8010486 <_printf_i+0x21e>
 80104a0:	e7eb      	b.n	801047a <_printf_i+0x212>
 80104a2:	2500      	movs	r5, #0
 80104a4:	f104 0619 	add.w	r6, r4, #25
 80104a8:	e7f5      	b.n	8010496 <_printf_i+0x22e>
 80104aa:	bf00      	nop
 80104ac:	08010c95 	.word	0x08010c95
 80104b0:	08010ca6 	.word	0x08010ca6

080104b4 <memcpy>:
 80104b4:	440a      	add	r2, r1
 80104b6:	4291      	cmp	r1, r2
 80104b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80104bc:	d100      	bne.n	80104c0 <memcpy+0xc>
 80104be:	4770      	bx	lr
 80104c0:	b510      	push	{r4, lr}
 80104c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104ca:	4291      	cmp	r1, r2
 80104cc:	d1f9      	bne.n	80104c2 <memcpy+0xe>
 80104ce:	bd10      	pop	{r4, pc}

080104d0 <memmove>:
 80104d0:	4288      	cmp	r0, r1
 80104d2:	b510      	push	{r4, lr}
 80104d4:	eb01 0402 	add.w	r4, r1, r2
 80104d8:	d902      	bls.n	80104e0 <memmove+0x10>
 80104da:	4284      	cmp	r4, r0
 80104dc:	4623      	mov	r3, r4
 80104de:	d807      	bhi.n	80104f0 <memmove+0x20>
 80104e0:	1e43      	subs	r3, r0, #1
 80104e2:	42a1      	cmp	r1, r4
 80104e4:	d008      	beq.n	80104f8 <memmove+0x28>
 80104e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104ee:	e7f8      	b.n	80104e2 <memmove+0x12>
 80104f0:	4402      	add	r2, r0
 80104f2:	4601      	mov	r1, r0
 80104f4:	428a      	cmp	r2, r1
 80104f6:	d100      	bne.n	80104fa <memmove+0x2a>
 80104f8:	bd10      	pop	{r4, pc}
 80104fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010502:	e7f7      	b.n	80104f4 <memmove+0x24>

08010504 <_free_r>:
 8010504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010506:	2900      	cmp	r1, #0
 8010508:	d048      	beq.n	801059c <_free_r+0x98>
 801050a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801050e:	9001      	str	r0, [sp, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	f1a1 0404 	sub.w	r4, r1, #4
 8010516:	bfb8      	it	lt
 8010518:	18e4      	addlt	r4, r4, r3
 801051a:	f000 f8d3 	bl	80106c4 <__malloc_lock>
 801051e:	4a20      	ldr	r2, [pc, #128]	; (80105a0 <_free_r+0x9c>)
 8010520:	9801      	ldr	r0, [sp, #4]
 8010522:	6813      	ldr	r3, [r2, #0]
 8010524:	4615      	mov	r5, r2
 8010526:	b933      	cbnz	r3, 8010536 <_free_r+0x32>
 8010528:	6063      	str	r3, [r4, #4]
 801052a:	6014      	str	r4, [r2, #0]
 801052c:	b003      	add	sp, #12
 801052e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010532:	f000 b8cd 	b.w	80106d0 <__malloc_unlock>
 8010536:	42a3      	cmp	r3, r4
 8010538:	d90b      	bls.n	8010552 <_free_r+0x4e>
 801053a:	6821      	ldr	r1, [r4, #0]
 801053c:	1862      	adds	r2, r4, r1
 801053e:	4293      	cmp	r3, r2
 8010540:	bf04      	itt	eq
 8010542:	681a      	ldreq	r2, [r3, #0]
 8010544:	685b      	ldreq	r3, [r3, #4]
 8010546:	6063      	str	r3, [r4, #4]
 8010548:	bf04      	itt	eq
 801054a:	1852      	addeq	r2, r2, r1
 801054c:	6022      	streq	r2, [r4, #0]
 801054e:	602c      	str	r4, [r5, #0]
 8010550:	e7ec      	b.n	801052c <_free_r+0x28>
 8010552:	461a      	mov	r2, r3
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	b10b      	cbz	r3, 801055c <_free_r+0x58>
 8010558:	42a3      	cmp	r3, r4
 801055a:	d9fa      	bls.n	8010552 <_free_r+0x4e>
 801055c:	6811      	ldr	r1, [r2, #0]
 801055e:	1855      	adds	r5, r2, r1
 8010560:	42a5      	cmp	r5, r4
 8010562:	d10b      	bne.n	801057c <_free_r+0x78>
 8010564:	6824      	ldr	r4, [r4, #0]
 8010566:	4421      	add	r1, r4
 8010568:	1854      	adds	r4, r2, r1
 801056a:	42a3      	cmp	r3, r4
 801056c:	6011      	str	r1, [r2, #0]
 801056e:	d1dd      	bne.n	801052c <_free_r+0x28>
 8010570:	681c      	ldr	r4, [r3, #0]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	6053      	str	r3, [r2, #4]
 8010576:	4421      	add	r1, r4
 8010578:	6011      	str	r1, [r2, #0]
 801057a:	e7d7      	b.n	801052c <_free_r+0x28>
 801057c:	d902      	bls.n	8010584 <_free_r+0x80>
 801057e:	230c      	movs	r3, #12
 8010580:	6003      	str	r3, [r0, #0]
 8010582:	e7d3      	b.n	801052c <_free_r+0x28>
 8010584:	6825      	ldr	r5, [r4, #0]
 8010586:	1961      	adds	r1, r4, r5
 8010588:	428b      	cmp	r3, r1
 801058a:	bf04      	itt	eq
 801058c:	6819      	ldreq	r1, [r3, #0]
 801058e:	685b      	ldreq	r3, [r3, #4]
 8010590:	6063      	str	r3, [r4, #4]
 8010592:	bf04      	itt	eq
 8010594:	1949      	addeq	r1, r1, r5
 8010596:	6021      	streq	r1, [r4, #0]
 8010598:	6054      	str	r4, [r2, #4]
 801059a:	e7c7      	b.n	801052c <_free_r+0x28>
 801059c:	b003      	add	sp, #12
 801059e:	bd30      	pop	{r4, r5, pc}
 80105a0:	20000660 	.word	0x20000660

080105a4 <_malloc_r>:
 80105a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105a6:	1ccd      	adds	r5, r1, #3
 80105a8:	f025 0503 	bic.w	r5, r5, #3
 80105ac:	3508      	adds	r5, #8
 80105ae:	2d0c      	cmp	r5, #12
 80105b0:	bf38      	it	cc
 80105b2:	250c      	movcc	r5, #12
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	4606      	mov	r6, r0
 80105b8:	db01      	blt.n	80105be <_malloc_r+0x1a>
 80105ba:	42a9      	cmp	r1, r5
 80105bc:	d903      	bls.n	80105c6 <_malloc_r+0x22>
 80105be:	230c      	movs	r3, #12
 80105c0:	6033      	str	r3, [r6, #0]
 80105c2:	2000      	movs	r0, #0
 80105c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c6:	f000 f87d 	bl	80106c4 <__malloc_lock>
 80105ca:	4921      	ldr	r1, [pc, #132]	; (8010650 <_malloc_r+0xac>)
 80105cc:	680a      	ldr	r2, [r1, #0]
 80105ce:	4614      	mov	r4, r2
 80105d0:	b99c      	cbnz	r4, 80105fa <_malloc_r+0x56>
 80105d2:	4f20      	ldr	r7, [pc, #128]	; (8010654 <_malloc_r+0xb0>)
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	b923      	cbnz	r3, 80105e2 <_malloc_r+0x3e>
 80105d8:	4621      	mov	r1, r4
 80105da:	4630      	mov	r0, r6
 80105dc:	f000 f862 	bl	80106a4 <_sbrk_r>
 80105e0:	6038      	str	r0, [r7, #0]
 80105e2:	4629      	mov	r1, r5
 80105e4:	4630      	mov	r0, r6
 80105e6:	f000 f85d 	bl	80106a4 <_sbrk_r>
 80105ea:	1c43      	adds	r3, r0, #1
 80105ec:	d123      	bne.n	8010636 <_malloc_r+0x92>
 80105ee:	230c      	movs	r3, #12
 80105f0:	6033      	str	r3, [r6, #0]
 80105f2:	4630      	mov	r0, r6
 80105f4:	f000 f86c 	bl	80106d0 <__malloc_unlock>
 80105f8:	e7e3      	b.n	80105c2 <_malloc_r+0x1e>
 80105fa:	6823      	ldr	r3, [r4, #0]
 80105fc:	1b5b      	subs	r3, r3, r5
 80105fe:	d417      	bmi.n	8010630 <_malloc_r+0x8c>
 8010600:	2b0b      	cmp	r3, #11
 8010602:	d903      	bls.n	801060c <_malloc_r+0x68>
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	441c      	add	r4, r3
 8010608:	6025      	str	r5, [r4, #0]
 801060a:	e004      	b.n	8010616 <_malloc_r+0x72>
 801060c:	6863      	ldr	r3, [r4, #4]
 801060e:	42a2      	cmp	r2, r4
 8010610:	bf0c      	ite	eq
 8010612:	600b      	streq	r3, [r1, #0]
 8010614:	6053      	strne	r3, [r2, #4]
 8010616:	4630      	mov	r0, r6
 8010618:	f000 f85a 	bl	80106d0 <__malloc_unlock>
 801061c:	f104 000b 	add.w	r0, r4, #11
 8010620:	1d23      	adds	r3, r4, #4
 8010622:	f020 0007 	bic.w	r0, r0, #7
 8010626:	1ac2      	subs	r2, r0, r3
 8010628:	d0cc      	beq.n	80105c4 <_malloc_r+0x20>
 801062a:	1a1b      	subs	r3, r3, r0
 801062c:	50a3      	str	r3, [r4, r2]
 801062e:	e7c9      	b.n	80105c4 <_malloc_r+0x20>
 8010630:	4622      	mov	r2, r4
 8010632:	6864      	ldr	r4, [r4, #4]
 8010634:	e7cc      	b.n	80105d0 <_malloc_r+0x2c>
 8010636:	1cc4      	adds	r4, r0, #3
 8010638:	f024 0403 	bic.w	r4, r4, #3
 801063c:	42a0      	cmp	r0, r4
 801063e:	d0e3      	beq.n	8010608 <_malloc_r+0x64>
 8010640:	1a21      	subs	r1, r4, r0
 8010642:	4630      	mov	r0, r6
 8010644:	f000 f82e 	bl	80106a4 <_sbrk_r>
 8010648:	3001      	adds	r0, #1
 801064a:	d1dd      	bne.n	8010608 <_malloc_r+0x64>
 801064c:	e7cf      	b.n	80105ee <_malloc_r+0x4a>
 801064e:	bf00      	nop
 8010650:	20000660 	.word	0x20000660
 8010654:	20000664 	.word	0x20000664

08010658 <_realloc_r>:
 8010658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065a:	4607      	mov	r7, r0
 801065c:	4614      	mov	r4, r2
 801065e:	460e      	mov	r6, r1
 8010660:	b921      	cbnz	r1, 801066c <_realloc_r+0x14>
 8010662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010666:	4611      	mov	r1, r2
 8010668:	f7ff bf9c 	b.w	80105a4 <_malloc_r>
 801066c:	b922      	cbnz	r2, 8010678 <_realloc_r+0x20>
 801066e:	f7ff ff49 	bl	8010504 <_free_r>
 8010672:	4625      	mov	r5, r4
 8010674:	4628      	mov	r0, r5
 8010676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010678:	f000 f830 	bl	80106dc <_malloc_usable_size_r>
 801067c:	42a0      	cmp	r0, r4
 801067e:	d20f      	bcs.n	80106a0 <_realloc_r+0x48>
 8010680:	4621      	mov	r1, r4
 8010682:	4638      	mov	r0, r7
 8010684:	f7ff ff8e 	bl	80105a4 <_malloc_r>
 8010688:	4605      	mov	r5, r0
 801068a:	2800      	cmp	r0, #0
 801068c:	d0f2      	beq.n	8010674 <_realloc_r+0x1c>
 801068e:	4631      	mov	r1, r6
 8010690:	4622      	mov	r2, r4
 8010692:	f7ff ff0f 	bl	80104b4 <memcpy>
 8010696:	4631      	mov	r1, r6
 8010698:	4638      	mov	r0, r7
 801069a:	f7ff ff33 	bl	8010504 <_free_r>
 801069e:	e7e9      	b.n	8010674 <_realloc_r+0x1c>
 80106a0:	4635      	mov	r5, r6
 80106a2:	e7e7      	b.n	8010674 <_realloc_r+0x1c>

080106a4 <_sbrk_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	4d06      	ldr	r5, [pc, #24]	; (80106c0 <_sbrk_r+0x1c>)
 80106a8:	2300      	movs	r3, #0
 80106aa:	4604      	mov	r4, r0
 80106ac:	4608      	mov	r0, r1
 80106ae:	602b      	str	r3, [r5, #0]
 80106b0:	f7f2 fde8 	bl	8003284 <_sbrk>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_sbrk_r+0x1a>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b103      	cbz	r3, 80106be <_sbrk_r+0x1a>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	2000209c 	.word	0x2000209c

080106c4 <__malloc_lock>:
 80106c4:	4801      	ldr	r0, [pc, #4]	; (80106cc <__malloc_lock+0x8>)
 80106c6:	f000 b811 	b.w	80106ec <__retarget_lock_acquire_recursive>
 80106ca:	bf00      	nop
 80106cc:	200020a4 	.word	0x200020a4

080106d0 <__malloc_unlock>:
 80106d0:	4801      	ldr	r0, [pc, #4]	; (80106d8 <__malloc_unlock+0x8>)
 80106d2:	f000 b80c 	b.w	80106ee <__retarget_lock_release_recursive>
 80106d6:	bf00      	nop
 80106d8:	200020a4 	.word	0x200020a4

080106dc <_malloc_usable_size_r>:
 80106dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106e0:	1f18      	subs	r0, r3, #4
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	bfbc      	itt	lt
 80106e6:	580b      	ldrlt	r3, [r1, r0]
 80106e8:	18c0      	addlt	r0, r0, r3
 80106ea:	4770      	bx	lr

080106ec <__retarget_lock_acquire_recursive>:
 80106ec:	4770      	bx	lr

080106ee <__retarget_lock_release_recursive>:
 80106ee:	4770      	bx	lr

080106f0 <_init>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	bf00      	nop
 80106f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106f6:	bc08      	pop	{r3}
 80106f8:	469e      	mov	lr, r3
 80106fa:	4770      	bx	lr

080106fc <_fini>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	bf00      	nop
 8010700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010702:	bc08      	pop	{r3}
 8010704:	469e      	mov	lr, r3
 8010706:	4770      	bx	lr
