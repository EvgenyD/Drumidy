
Drumidy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db50  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800dd30  0800dd30  0001dd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df7c  0800df7c  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df84  0800df84  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df84  0800df84  0001df84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800df8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c98  20000280  0800e20c  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f18  0800e20c  00021f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002663b  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000481d  00000000  00000000  000468eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cd8  00000000  00000000  0004b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ad0  00000000  00000000  0004cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002439c  00000000  00000000  0004e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019b61  00000000  00000000  00072c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0a1a  00000000  00000000  0008c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d1c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dfc  00000000  00000000  0016d244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dd18 	.word	0x0800dd18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	0800dd18 	.word	0x0800dd18

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_TIM_PeriodElapsedCallback>:
//	tx_com( (uint8_t *)buffer_in , _len);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

	// 10kHz trigger, 0.1ms
	if (htim->Instance==htim4.Instance)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d109      	bne.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x28>
      {
		HAL_ADCEx_MultiModeStart_DMA(&hadc1,  (uint32_t *) adc_buf, 5);//
 80005e4:	2205      	movs	r2, #5
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005ea:	f003 f95b 	bl	80038a4 <HAL_ADCEx_MultiModeStart_DMA>
		cnt++;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005f6:	6013      	str	r3, [r2, #0]
      }

	// 3.33Hz active sensing, 300ms
	if (htim->Instance==htim2.Instance)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d102      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x3a>
      {
		upd_active_sens = 1;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]

      }

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200004f4 	.word	0x200004f4
 8000618:	20000aa8 	.word	0x20000aa8
 800061c:	200006c4 	.word	0x200006c4
 8000620:	200005b0 	.word	0x200005b0
 8000624:	20000abc 	.word	0x20000abc
 8000628:	2000029c 	.word	0x2000029c

0800062c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_UART_RxCpltCallback+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d102      	bne.n	8000646 <HAL_UART_RxCpltCallback+0x1a>
		buffer_in[15] = 1;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_UART_RxCpltCallback+0x2c>)
 8000642:	2201      	movs	r2, #1
 8000644:	73da      	strb	r2, [r3, #15]
	}

}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000b08 	.word	0x20000b08
 8000658:	20000a1c 	.word	0x20000a1c

0800065c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==hadc1.Instance)	{
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b49      	ldr	r3, [pc, #292]	; (8000790 <HAL_ADC_ConvCpltCallback+0x134>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	f040 808b 	bne.w	8000788 <HAL_ADC_ConvCpltCallback+0x12c>
//		}

		// resulting order: 5x[ADC2] + 4x{ADC1} + 1xDummy
		// [PA6] - [PA7] - [PF1] - [PA5] - [PA4] - {PA0} - {PA1} - {PF0} - {PB0} - {XXX}
		//	2		0		4		5		6		9		7		3		1
		adc_val[0] = adc_buf[1] >> 16;
 8000672:	4b48      	ldr	r3, [pc, #288]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0c1b      	lsrs	r3, r3, #16
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b47      	ldr	r3, [pc, #284]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 800067c:	801a      	strh	r2, [r3, #0]
		adc_val[1] = adc_buf[3] & 0xFFFF;
 800067e:	4b45      	ldr	r3, [pc, #276]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b44      	ldr	r3, [pc, #272]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000686:	805a      	strh	r2, [r3, #2]
		adc_val[2] = adc_buf[0] >> 16;
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	0c1b      	lsrs	r3, r3, #16
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b41      	ldr	r3, [pc, #260]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000692:	809a      	strh	r2, [r3, #4]
		adc_val[3] = adc_buf[2] & 0xFFFF;
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 800069c:	80da      	strh	r2, [r3, #6]
		adc_val[4] = adc_buf[2] >> 16;
 800069e:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	0c1b      	lsrs	r3, r3, #16
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006a8:	811a      	strh	r2, [r3, #8]
		adc_val[5] = adc_buf[3] >> 16;
 80006aa:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006b4:	815a      	strh	r2, [r3, #10]
		adc_val[6] = adc_buf[4] >> 16;
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	0c1b      	lsrs	r3, r3, #16
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b36      	ldr	r3, [pc, #216]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006c0:	819a      	strh	r2, [r3, #12]
		adc_val[7] = adc_buf[1] & 0xFFFF;
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006ca:	81da      	strh	r2, [r3, #14]
		adc_val[8] = adc_buf[0] & 0xFFFF;
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_ConvCpltCallback+0x138>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006d4:	821a      	strh	r2, [r3, #16]

		getAuxState(aux_current_state);
 80006d6:	4831      	ldr	r0, [pc, #196]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 80006d8:	f000 fff8 	bl	80016cc <getAuxState>

		STEP_TIME = HAL_GetTick();
 80006dc:	f001 fce0 	bl	80020a0 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x144>)
 80006e4:	601a      	str	r2, [r3, #0]

		Update_channel(&channel[0], adc_val[0], aux_current_state[0]);
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	482c      	ldr	r0, [pc, #176]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x148>)
 80006f4:	f00a fc28 	bl	800af48 <Update_channel>
		Update_channel(&channel[1], adc_val[1], aux_current_state[1]);
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 80006fa:	885b      	ldrh	r3, [r3, #2]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	461a      	mov	r2, r3
 8000704:	4828      	ldr	r0, [pc, #160]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000706:	f00a fc1f 	bl	800af48 <Update_channel>
		Update_channel(&channel[2], adc_val[2], aux_current_state[2]);
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	461a      	mov	r2, r3
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <HAL_ADC_ConvCpltCallback+0x150>)
 8000718:	f00a fc16 	bl	800af48 <Update_channel>
		Update_channel(&channel[3], adc_val[3], aux_current_state[3]);
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 800071e:	88db      	ldrh	r3, [r3, #6]
 8000720:	4619      	mov	r1, r3
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 8000724:	78db      	ldrb	r3, [r3, #3]
 8000726:	461a      	mov	r2, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <HAL_ADC_ConvCpltCallback+0x154>)
 800072a:	f00a fc0d 	bl	800af48 <Update_channel>
		Update_channel(&channel[4], adc_val[4], aux_current_state[4]);
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000730:	891b      	ldrh	r3, [r3, #8]
 8000732:	4619      	mov	r1, r3
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	461a      	mov	r2, r3
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_ADC_ConvCpltCallback+0x158>)
 800073c:	f00a fc04 	bl	800af48 <Update_channel>
		Update_channel(&channel[5], adc_val[5], aux_current_state[5]);
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000742:	895b      	ldrh	r3, [r3, #10]
 8000744:	4619      	mov	r1, r3
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	461a      	mov	r2, r3
 800074c:	481a      	ldr	r0, [pc, #104]	; (80007b8 <HAL_ADC_ConvCpltCallback+0x15c>)
 800074e:	f00a fbfb 	bl	800af48 <Update_channel>
		Update_channel(&channel[6], adc_val[6], aux_current_state[6]);
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000754:	899b      	ldrh	r3, [r3, #12]
 8000756:	4619      	mov	r1, r3
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 800075a:	799b      	ldrb	r3, [r3, #6]
 800075c:	461a      	mov	r2, r3
 800075e:	4817      	ldr	r0, [pc, #92]	; (80007bc <HAL_ADC_ConvCpltCallback+0x160>)
 8000760:	f00a fbf2 	bl	800af48 <Update_channel>
		Update_channel(&channel[7], adc_val[7], aux_current_state[7]);
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000766:	89db      	ldrh	r3, [r3, #14]
 8000768:	4619      	mov	r1, r3
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 800076c:	79db      	ldrb	r3, [r3, #7]
 800076e:	461a      	mov	r2, r3
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <HAL_ADC_ConvCpltCallback+0x164>)
 8000772:	f00a fbe9 	bl	800af48 <Update_channel>
		Update_channel(&channel[8], adc_val[8], aux_current_state[8]);
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000778:	8a1b      	ldrh	r3, [r3, #16]
 800077a:	4619      	mov	r1, r3
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_ADC_ConvCpltCallback+0x140>)
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <HAL_ADC_ConvCpltCallback+0x168>)
 8000784:	f00a fbe0 	bl	800af48 <Update_channel>

	}// end adc1
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200006c4 	.word	0x200006c4
 8000794:	20000aa8 	.word	0x20000aa8
 8000798:	200004d4 	.word	0x200004d4
 800079c:	200004e8 	.word	0x200004e8
 80007a0:	20000540 	.word	0x20000540
 80007a4:	20000794 	.word	0x20000794
 80007a8:	200007dc 	.word	0x200007dc
 80007ac:	20000824 	.word	0x20000824
 80007b0:	2000086c 	.word	0x2000086c
 80007b4:	200008b4 	.word	0x200008b4
 80007b8:	200008fc 	.word	0x200008fc
 80007bc:	20000944 	.word	0x20000944
 80007c0:	2000098c 	.word	0x2000098c
 80007c4:	200009d4 	.word	0x200009d4

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b09b      	sub	sp, #108	; 0x6c
 80007cc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f001 fc02 	bl	8001fd6 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f001 fc6f 	bl	80020b8 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 fad1 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 fde5 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 80007e2:	f000 fdb9 	bl	8001358 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fd6b 	bl	80012c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007ea:	f000 fb35 	bl	8000e58 <MX_ADC1_Init>
  MX_TIM4_Init();
 80007ee:	f000 fce3 	bl	80011b8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80007f2:	f000 fc93 	bl	800111c <MX_TIM2_Init>
  MX_ADC2_Init();
 80007f6:	f000 fbef 	bl	8000fd8 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80007fa:	f00b fe41 	bl	800c480 <MX_USB_Device_Init>
  MX_TIM6_Init();
 80007fe:	f000 fd29 	bl	8001254 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000802:	4892      	ldr	r0, [pc, #584]	; (8000a4c <main+0x284>)
 8000804:	f006 fd06 	bl	8007214 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000808:	4891      	ldr	r0, [pc, #580]	; (8000a50 <main+0x288>)
 800080a:	f006 fd03 	bl	8007214 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim6);

	HAL_ADC_Start (&hadc1);
 800080e:	4891      	ldr	r0, [pc, #580]	; (8000a54 <main+0x28c>)
 8000810:	f002 f83c 	bl	800288c <HAL_ADC_Start>
	HAL_ADC_Start (&hadc2);
 8000814:	4890      	ldr	r0, [pc, #576]	; (8000a58 <main+0x290>)
 8000816:	f002 f839 	bl	800288c <HAL_ADC_Start>

	HAL_Delay(200);
 800081a:	20c8      	movs	r0, #200	; 0xc8
 800081c:	f001 fc4c 	bl	80020b8 <HAL_Delay>
//	getAuxState(aux_type);
	HAL_Delay(200);
 8000820:	20c8      	movs	r0, #200	; 0xc8
 8000822:	f001 fc49 	bl	80020b8 <HAL_Delay>

	initDrum(&channel[0], HHOPEN, HHPEDAL, AUX_TYPE_PEDAL	);
 8000826:	2301      	movs	r3, #1
 8000828:	222c      	movs	r2, #44	; 0x2c
 800082a:	212e      	movs	r1, #46	; 0x2e
 800082c:	488b      	ldr	r0, [pc, #556]	; (8000a5c <main+0x294>)
 800082e:	f00a fb1a 	bl	800ae66 <initDrum>
	channel[0].alt_voice = HHCLOSE;
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <main+0x294>)
 8000834:	222a      	movs	r2, #42	; 0x2a
 8000836:	705a      	strb	r2, [r3, #1]
	channel[0].peak_min_length = 3;
 8000838:	4b88      	ldr	r3, [pc, #544]	; (8000a5c <main+0x294>)
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]

	initDrum(&channel[1], SNARE , SNRIM  , AUX_TYPE_DIGIPAD	);
 800083e:	2303      	movs	r3, #3
 8000840:	2225      	movs	r2, #37	; 0x25
 8000842:	2126      	movs	r1, #38	; 0x26
 8000844:	4886      	ldr	r0, [pc, #536]	; (8000a60 <main+0x298>)
 8000846:	f00a fb0e 	bl	800ae66 <initDrum>
	initDrum(&channel[2], KICK  , KICK 	 , AUX_TYPE_DIGIPAD	);
 800084a:	2303      	movs	r3, #3
 800084c:	2224      	movs	r2, #36	; 0x24
 800084e:	2124      	movs	r1, #36	; 0x24
 8000850:	4884      	ldr	r0, [pc, #528]	; (8000a64 <main+0x29c>)
 8000852:	f00a fb08 	bl	800ae66 <initDrum>

	initDrum(&channel[3], TOM1 , TOM1  , AUX_TYPE_PAD	);
 8000856:	2300      	movs	r3, #0
 8000858:	2230      	movs	r2, #48	; 0x30
 800085a:	2130      	movs	r1, #48	; 0x30
 800085c:	4882      	ldr	r0, [pc, #520]	; (8000a68 <main+0x2a0>)
 800085e:	f00a fb02 	bl	800ae66 <initDrum>
	initDrum(&channel[4], TOM2 , TOM2  , AUX_TYPE_PAD	);
 8000862:	2300      	movs	r3, #0
 8000864:	222d      	movs	r2, #45	; 0x2d
 8000866:	212d      	movs	r1, #45	; 0x2d
 8000868:	4880      	ldr	r0, [pc, #512]	; (8000a6c <main+0x2a4>)
 800086a:	f00a fafc 	bl	800ae66 <initDrum>
	initDrum(&channel[5], TOMF , TOMF  , AUX_TYPE_PAD	);
 800086e:	2300      	movs	r3, #0
 8000870:	222b      	movs	r2, #43	; 0x2b
 8000872:	212b      	movs	r1, #43	; 0x2b
 8000874:	487e      	ldr	r0, [pc, #504]	; (8000a70 <main+0x2a8>)
 8000876:	f00a faf6 	bl	800ae66 <initDrum>

	initDrum(&channel[6], CRASH,  MUTE , AUX_TYPE_MUTE	);
 800087a:	2302      	movs	r3, #2
 800087c:	2200      	movs	r2, #0
 800087e:	2131      	movs	r1, #49	; 0x31
 8000880:	487c      	ldr	r0, [pc, #496]	; (8000a74 <main+0x2ac>)
 8000882:	f00a faf0 	bl	800ae66 <initDrum>
	initDrum(&channel[7], RIDE ,  MUTE , AUX_TYPE_MUTE	);
 8000886:	2302      	movs	r3, #2
 8000888:	2200      	movs	r2, #0
 800088a:	2133      	movs	r1, #51	; 0x33
 800088c:	487a      	ldr	r0, [pc, #488]	; (8000a78 <main+0x2b0>)
 800088e:	f00a faea 	bl	800ae66 <initDrum>
	initDrum(&channel[8], BELL ,  MUTE , AUX_TYPE_MUTE	);
 8000892:	2302      	movs	r3, #2
 8000894:	2200      	movs	r2, #0
 8000896:	2135      	movs	r1, #53	; 0x35
 8000898:	4878      	ldr	r0, [pc, #480]	; (8000a7c <main+0x2b4>)
 800089a:	f00a fae4 	bl	800ae66 <initDrum>

	Load_Setting();
 800089e:	f001 f8dd 	bl	8001a5c <Load_Setting>
	sprintf(buffer_out, "LOAD\n %08lX %08lX %08lX %08lX\n %08lX %08lX %08lX %08lX\n %08lX %08lX %08lX %08lX\n %08lX %08lX %08lX %08lX\n",
 80008a2:	4b77      	ldr	r3, [pc, #476]	; (8000a80 <main+0x2b8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
 80008a8:	4b75      	ldr	r3, [pc, #468]	; (8000a80 <main+0x2b8>)
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	6239      	str	r1, [r7, #32]
 80008ae:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <main+0x2b8>)
 80008b0:	6898      	ldr	r0, [r3, #8]
 80008b2:	4b73      	ldr	r3, [pc, #460]	; (8000a80 <main+0x2b8>)
 80008b4:	68dc      	ldr	r4, [r3, #12]
 80008b6:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <main+0x2b8>)
 80008b8:	691d      	ldr	r5, [r3, #16]
 80008ba:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <main+0x2b8>)
 80008bc:	695e      	ldr	r6, [r3, #20]
 80008be:	4b70      	ldr	r3, [pc, #448]	; (8000a80 <main+0x2b8>)
 80008c0:	699a      	ldr	r2, [r3, #24]
 80008c2:	61fa      	str	r2, [r7, #28]
 80008c4:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <main+0x2b8>)
 80008c6:	69d9      	ldr	r1, [r3, #28]
 80008c8:	61b9      	str	r1, [r7, #24]
 80008ca:	4b6d      	ldr	r3, [pc, #436]	; (8000a80 <main+0x2b8>)
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <main+0x2b8>)
 80008d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008d4:	613a      	str	r2, [r7, #16]
 80008d6:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <main+0x2b8>)
 80008d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008da:	60f9      	str	r1, [r7, #12]
 80008dc:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <main+0x2b8>)
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <main+0x2b8>)
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	4b65      	ldr	r3, [pc, #404]	; (8000a80 <main+0x2b8>)
 80008ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008ec:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <main+0x2b8>)
 80008ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f0:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <main+0x2b8>)
 80008f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f4:	930d      	str	r3, [sp, #52]	; 0x34
 80008f6:	920c      	str	r2, [sp, #48]	; 0x30
 80008f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	920a      	str	r2, [sp, #40]	; 0x28
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	9309      	str	r3, [sp, #36]	; 0x24
 8000902:	68f9      	ldr	r1, [r7, #12]
 8000904:	9108      	str	r1, [sp, #32]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	9207      	str	r2, [sp, #28]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	9306      	str	r3, [sp, #24]
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	9105      	str	r1, [sp, #20]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	9204      	str	r2, [sp, #16]
 8000916:	9603      	str	r6, [sp, #12]
 8000918:	9502      	str	r5, [sp, #8]
 800091a:	9401      	str	r4, [sp, #4]
 800091c:	9000      	str	r0, [sp, #0]
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000922:	4958      	ldr	r1, [pc, #352]	; (8000a84 <main+0x2bc>)
 8000924:	4858      	ldr	r0, [pc, #352]	; (8000a88 <main+0x2c0>)
 8000926:	f00c fdfb 	bl	800d520 <siprintf>
			saved_config[0] ,saved_config[1] ,saved_config[2] ,saved_config[3] ,
			saved_config[4] ,saved_config[5] ,saved_config[6] ,saved_config[7] ,
			saved_config[8] ,saved_config[9] ,saved_config[10],saved_config[11],
			saved_config[12],saved_config[13],saved_config[14],saved_config[15]);

	HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 800092a:	4857      	ldr	r0, [pc, #348]	; (8000a88 <main+0x2c0>)
 800092c:	f7ff fc78 	bl	8000220 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	4954      	ldr	r1, [pc, #336]	; (8000a88 <main+0x2c0>)
 8000938:	4854      	ldr	r0, [pc, #336]	; (8000a8c <main+0x2c4>)
 800093a:	f007 f993 	bl	8007c64 <HAL_UART_Transmit>

	HAL_Delay(500);
 800093e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000942:	f001 fbb9 	bl	80020b8 <HAL_Delay>
	Save_Setting();
 8000946:	f000 ff1d 	bl	8001784 <Save_Setting>
	HAL_Delay(500);
 800094a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094e:	f001 fbb3 	bl	80020b8 <HAL_Delay>

	config_Mode = 0;
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <main+0x2c8>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &config_Mode, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	494d      	ldr	r1, [pc, #308]	; (8000a90 <main+0x2c8>)
 800095c:	484b      	ldr	r0, [pc, #300]	; (8000a8c <main+0x2c4>)
 800095e:	f007 fa17 	bl	8007d90 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */


  while (1)
  {
	  while (config_Mode){
 8000962:	e0e7      	b.n	8000b34 <main+0x36c>
		uint8_t chnl = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		buffer_in[0] = 0;
 800096a:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <main+0x2cc>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]

		sprintf(buffer_out, "\nConfig mode (x for exit).\nType number of the pad [1..9], or hit the drum:\n");
 8000970:	4a45      	ldr	r2, [pc, #276]	; (8000a88 <main+0x2c0>)
 8000972:	4b49      	ldr	r3, [pc, #292]	; (8000a98 <main+0x2d0>)
 8000974:	4610      	mov	r0, r2
 8000976:	4619      	mov	r1, r3
 8000978:	234c      	movs	r3, #76	; 0x4c
 800097a:	461a      	mov	r2, r3
 800097c:	f00c fdbc 	bl	800d4f8 <memcpy>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8000980:	4841      	ldr	r0, [pc, #260]	; (8000a88 <main+0x2c0>)
 8000982:	f7ff fc4d 	bl	8000220 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	2332      	movs	r3, #50	; 0x32
 800098c:	493e      	ldr	r1, [pc, #248]	; (8000a88 <main+0x2c0>)
 800098e:	483f      	ldr	r0, [pc, #252]	; (8000a8c <main+0x2c4>)
 8000990:	f007 f968 	bl	8007c64 <HAL_UART_Transmit>
		HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8000994:	2201      	movs	r2, #1
 8000996:	493f      	ldr	r1, [pc, #252]	; (8000a94 <main+0x2cc>)
 8000998:	483c      	ldr	r0, [pc, #240]	; (8000a8c <main+0x2c4>)
 800099a:	f007 f9f9 	bl	8007d90 <HAL_UART_Receive_IT>

		while (chnl == 0){
 800099e:	e07d      	b.n	8000a9c <main+0x2d4>
			  for (uint8_t ch = 0; ch<9; ch++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80009a6:	e036      	b.n	8000a16 <main+0x24e>
				  if ((channel[ch].main_rdy)||(channel[ch].aux_rdy)){
 80009a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80009ac:	492b      	ldr	r1, [pc, #172]	; (8000a5c <main+0x294>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	3316      	adds	r3, #22
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10b      	bne.n	80009d8 <main+0x210>
 80009c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80009c4:	4925      	ldr	r1, [pc, #148]	; (8000a5c <main+0x294>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3334      	adds	r3, #52	; 0x34
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d019      	beq.n	8000a0c <main+0x244>
					  channel[ch].main_rdy = 0;
 80009d8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80009dc:	491f      	ldr	r1, [pc, #124]	; (8000a5c <main+0x294>)
 80009de:	4613      	mov	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4413      	add	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	440b      	add	r3, r1
 80009e8:	3316      	adds	r3, #22
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
					  channel[ch].aux_rdy = 0;
 80009ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80009f2:	491a      	ldr	r1, [pc, #104]	; (8000a5c <main+0x294>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	440b      	add	r3, r1
 80009fe:	3334      	adds	r3, #52	; 0x34
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
					  chnl = ch;
 8000a04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  for (uint8_t ch = 0; ch<9; ch++)
 8000a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a10:	3301      	adds	r3, #1
 8000a12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000a16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d9c4      	bls.n	80009a8 <main+0x1e0>
				  }
			  if ((buffer_in[0]>=1) && (buffer_in[0]<=9))
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <main+0x2cc>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d007      	beq.n	8000a36 <main+0x26e>
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <main+0x2cc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	d803      	bhi.n	8000a36 <main+0x26e>
				  chnl = buffer_in[0];
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <main+0x2cc>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			  if (buffer_in[0] == 'x'){
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <main+0x2cc>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b78      	cmp	r3, #120	; 0x78
 8000a3c:	d12e      	bne.n	8000a9c <main+0x2d4>
				  chnl = 255;
 8000a3e:	23ff      	movs	r3, #255	; 0xff
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				  config_Mode = 0;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <main+0x2c8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
				  break;
 8000a4a:	e02c      	b.n	8000aa6 <main+0x2de>
 8000a4c:	20000abc 	.word	0x20000abc
 8000a50:	200004f4 	.word	0x200004f4
 8000a54:	200006c4 	.word	0x200006c4
 8000a58:	20000544 	.word	0x20000544
 8000a5c:	20000794 	.word	0x20000794
 8000a60:	200007dc 	.word	0x200007dc
 8000a64:	20000824 	.word	0x20000824
 8000a68:	2000086c 	.word	0x2000086c
 8000a6c:	200008b4 	.word	0x200008b4
 8000a70:	200008fc 	.word	0x200008fc
 8000a74:	20000944 	.word	0x20000944
 8000a78:	2000098c 	.word	0x2000098c
 8000a7c:	200009d4 	.word	0x200009d4
 8000a80:	200005b4 	.word	0x200005b4
 8000a84:	0800dd30 	.word	0x0800dd30
 8000a88:	20000b94 	.word	0x20000b94
 8000a8c:	20000b08 	.word	0x20000b08
 8000a90:	2000029d 	.word	0x2000029d
 8000a94:	20000a1c 	.word	0x20000a1c
 8000a98:	0800dd9c 	.word	0x0800dd9c
		while (chnl == 0){
 8000a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f43f af7d 	beq.w	80009a0 <main+0x1d8>
			  }
		}
		// got the correct channel.
		sprintf(buffer_out, "Current settings for channel %d:\n Voices: main %d, aux %d, main alt %d\n AUX type: %d",
 8000aa6:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
				chnl, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice, channel[chnl].aux_type);
 8000aaa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000aae:	49ae      	ldr	r1, [pc, #696]	; (8000d68 <main+0x5a0>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	440b      	add	r3, r1
 8000aba:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, "Current settings for channel %d:\n Voices: main %d, aux %d, main alt %d\n AUX type: %d",
 8000abc:	461e      	mov	r6, r3
				chnl, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice, channel[chnl].aux_type);
 8000abe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ac2:	49a9      	ldr	r1, [pc, #676]	; (8000d68 <main+0x5a0>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	3302      	adds	r3, #2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, "Current settings for channel %d:\n Voices: main %d, aux %d, main alt %d\n AUX type: %d",
 8000ad2:	461c      	mov	r4, r3
				chnl, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice, channel[chnl].aux_type);
 8000ad4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ad8:	49a3      	ldr	r1, [pc, #652]	; (8000d68 <main+0x5a0>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	4413      	add	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, "Current settings for channel %d:\n Voices: main %d, aux %d, main alt %d\n AUX type: %d",
 8000ae8:	461d      	mov	r5, r3
				chnl, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice, channel[chnl].aux_type);
 8000aea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000aee:	499e      	ldr	r1, [pc, #632]	; (8000d68 <main+0x5a0>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4413      	add	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	440b      	add	r3, r1
 8000afa:	3303      	adds	r3, #3
 8000afc:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, "Current settings for channel %d:\n Voices: main %d, aux %d, main alt %d\n AUX type: %d",
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	9501      	str	r5, [sp, #4]
 8000b02:	9400      	str	r4, [sp, #0]
 8000b04:	4633      	mov	r3, r6
 8000b06:	4602      	mov	r2, r0
 8000b08:	4998      	ldr	r1, [pc, #608]	; (8000d6c <main+0x5a4>)
 8000b0a:	4899      	ldr	r0, [pc, #612]	; (8000d70 <main+0x5a8>)
 8000b0c:	f00c fd08 	bl	800d520 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 50);
 8000b10:	4897      	ldr	r0, [pc, #604]	; (8000d70 <main+0x5a8>)
 8000b12:	f7ff fb85 	bl	8000220 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	2332      	movs	r3, #50	; 0x32
 8000b1c:	4994      	ldr	r1, [pc, #592]	; (8000d70 <main+0x5a8>)
 8000b1e:	4895      	ldr	r0, [pc, #596]	; (8000d74 <main+0x5ac>)
 8000b20:	f007 f8a0 	bl	8007c64 <HAL_UART_Transmit>

		config_Mode = 0;
 8000b24:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <main+0x5b0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4992      	ldr	r1, [pc, #584]	; (8000d78 <main+0x5b0>)
 8000b2e:	4891      	ldr	r0, [pc, #580]	; (8000d74 <main+0x5ac>)
 8000b30:	f007 f92e 	bl	8007d90 <HAL_UART_Receive_IT>
	  while (config_Mode){
 8000b34:	4b90      	ldr	r3, [pc, #576]	; (8000d78 <main+0x5b0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f47f af13 	bne.w	8000964 <main+0x19c>

	  }

	  if (upd_active_sens){
 8000b3e:	4b8f      	ldr	r3, [pc, #572]	; (8000d7c <main+0x5b4>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d004      	beq.n	8000b50 <main+0x388>
		  upd_active_sens = 0;
 8000b46:	4b8d      	ldr	r3, [pc, #564]	; (8000d7c <main+0x5b4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		  sendMidiAS();
 8000b4c:	f000 fc94 	bl	8001478 <sendMidiAS>
	  }


	  for (uint8_t ch = 0; ch<9; ch++){
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000b56:	e100      	b.n	8000d5a <main+0x592>

		  if (channel[ch].main_rdy){
 8000b58:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b5c:	4982      	ldr	r1, [pc, #520]	; (8000d68 <main+0x5a0>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3316      	adds	r3, #22
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d06c      	beq.n	8000c4a <main+0x482>
			  // custom volume calculation
			  channel[ch].main_rdy_volume = channel[ch].main_rdy_height>>5;
 8000b70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b74:	497c      	ldr	r1, [pc, #496]	; (8000d68 <main+0x5a0>)
 8000b76:	4613      	mov	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	3318      	adds	r3, #24
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	095b      	lsrs	r3, r3, #5
 8000b86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b8a:	b2d8      	uxtb	r0, r3
 8000b8c:	4976      	ldr	r1, [pc, #472]	; (8000d68 <main+0x5a0>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3320      	adds	r3, #32
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	701a      	strb	r2, [r3, #0]
			  sendDebug(ch);
 8000b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fce0 	bl	8001568 <sendDebug>

			  // if aux is a pedal and is pressed
			  if ((channel[ch].aux_type == AUX_TYPE_PEDAL) && (channel[ch].aux_status == CHANNEL_STATUS_PRESSED))
 8000ba8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bac:	496e      	ldr	r1, [pc, #440]	; (8000d68 <main+0x5a0>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3303      	adds	r3, #3
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d123      	bne.n	8000c08 <main+0x440>
 8000bc0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bc4:	4968      	ldr	r1, [pc, #416]	; (8000d68 <main+0x5a0>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3315      	adds	r3, #21
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d117      	bne.n	8000c08 <main+0x440>
				  sendMidiGEN(channel[ch].alt_voice ,channel[ch].main_rdy_volume);
 8000bd8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bdc:	4962      	ldr	r1, [pc, #392]	; (8000d68 <main+0x5a0>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4413      	add	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	3301      	adds	r3, #1
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bf0:	495d      	ldr	r1, [pc, #372]	; (8000d68 <main+0x5a0>)
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3320      	adds	r3, #32
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f000 fc4b 	bl	800149c <sendMidiGEN>
 8000c06:	e015      	b.n	8000c34 <main+0x46c>
			  // TODO: implement muting
			  else
				  sendMidiGEN(channel[ch].main_voice,channel[ch].main_rdy_volume);
 8000c08:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c0c:	4956      	ldr	r1, [pc, #344]	; (8000d68 <main+0x5a0>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	7818      	ldrb	r0, [r3, #0]
 8000c1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c1e:	4952      	ldr	r1, [pc, #328]	; (8000d68 <main+0x5a0>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	440b      	add	r3, r1
 8000c2a:	3320      	adds	r3, #32
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f000 fc34 	bl	800149c <sendMidiGEN>

			  channel[ch].main_rdy = 0;
 8000c34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c38:	494b      	ldr	r1, [pc, #300]	; (8000d68 <main+0x5a0>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	3316      	adds	r3, #22
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
		  }

		  if (channel[ch].aux_rdy){
 8000c4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c4e:	4946      	ldr	r1, [pc, #280]	; (8000d68 <main+0x5a0>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	3334      	adds	r3, #52	; 0x34
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d076      	beq.n	8000d50 <main+0x588>
			  sendDebug(ch);
 8000c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fc7e 	bl	8001568 <sendDebug>
			  // pedal type (both mute pedal, and digipad)
			  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED){
 8000c6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c70:	493d      	ldr	r1, [pc, #244]	; (8000d68 <main+0x5a0>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	333c      	adds	r3, #60	; 0x3c
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d12e      	bne.n	8000ce2 <main+0x51a>
//				  sendDebug(ch);

				  if (channel[ch].aux_type == AUX_TYPE_MUTE)
 8000c84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000c88:	4937      	ldr	r1, [pc, #220]	; (8000d68 <main+0x5a0>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3303      	adds	r3, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d10d      	bne.n	8000cb8 <main+0x4f0>
				  	  sendMidiGEN(channel[ch].main_voice, 1);
 8000c9c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000ca0:	4931      	ldr	r1, [pc, #196]	; (8000d68 <main+0x5a0>)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fbf3 	bl	800149c <sendMidiGEN>
 8000cb6:	e014      	b.n	8000ce2 <main+0x51a>
// 			  	  	  sendMidiOFF(channel[ch].main_voice, channel[ch].main_rdy_volume);

				  else
					  if (ch == 0)
 8000cb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <main+0x4fe>
						  sendMidiHHPedalOn();
 8000cc0:	f000 fc16 	bl	80014f0 <sendMidiHHPedalOn>
 8000cc4:	e00d      	b.n	8000ce2 <main+0x51a>
					  else
						  sendMidiGEN(channel[ch].aux_voice,100);
 8000cc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000cca:	4927      	ldr	r1, [pc, #156]	; (8000d68 <main+0x5a0>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fbdd 	bl	800149c <sendMidiGEN>
			  }
			  // pedal release event
			  if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_IDLE)
 8000ce2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000ce6:	4920      	ldr	r1, [pc, #128]	; (8000d68 <main+0x5a0>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	333c      	adds	r3, #60	; 0x3c
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d105      	bne.n	8000d06 <main+0x53e>
				  if (ch == 0)
 8000cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <main+0x53e>
					  sendMidiHHPedalOff();
 8000d02:	f000 fc0b 	bl	800151c <sendMidiHHPedalOff>

			  // pad type
			  if (channel[ch].aux_rdy_state == CHANNEL_PAD_TRIGGERED){
 8000d06:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d0a:	4917      	ldr	r1, [pc, #92]	; (8000d68 <main+0x5a0>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	333c      	adds	r3, #60	; 0x3c
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10d      	bne.n	8000d3a <main+0x572>
				  sendMidiGEN(channel[ch].aux_voice,100);
 8000d1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d22:	4911      	ldr	r1, [pc, #68]	; (8000d68 <main+0x5a0>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3302      	adds	r3, #2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fbb1 	bl	800149c <sendMidiGEN>
			  }

			  channel[ch].aux_rdy=0;
 8000d3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d3e:	490a      	ldr	r1, [pc, #40]	; (8000d68 <main+0x5a0>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3334      	adds	r3, #52	; 0x34
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
	  for (uint8_t ch = 0; ch<9; ch++){
 8000d50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d54:	3301      	adds	r3, #1
 8000d56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000d5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	f67f aefa 	bls.w	8000b58 <main+0x390>
	  while (config_Mode){
 8000d64:	e6e6      	b.n	8000b34 <main+0x36c>
 8000d66:	bf00      	nop
 8000d68:	20000794 	.word	0x20000794
 8000d6c:	0800dde8 	.word	0x0800dde8
 8000d70:	20000b94 	.word	0x20000b94
 8000d74:	20000b08 	.word	0x20000b08
 8000d78:	2000029d 	.word	0x2000029d
 8000d7c:	2000029c 	.word	0x2000029c

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0a4      	sub	sp, #144	; 0x90
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d8a:	2238      	movs	r2, #56	; 0x38
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00c fbbd 	bl	800d50e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2244      	movs	r2, #68	; 0x44
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00c fbaf 	bl	800d50e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f005 f9ff 	bl	80061b4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000db6:	2322      	movs	r3, #34	; 0x22
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dd4:	2355      	movs	r3, #85	; 0x55
 8000dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 fa93 	bl	800631c <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dfc:	f000 fe4e 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2303      	movs	r3, #3
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fd96 	bl	800694c <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e26:	f000 fe39 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB
 8000e2a:	f24a 0302 	movw	r3, #40962	; 0xa002
 8000e2e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e38:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 ff9f 	bl	8006d84 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e4c:	f000 fe26 	bl	8001a9c <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3790      	adds	r7, #144	; 0x90
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00c fb4c 	bl	800d50e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e76:	4b52      	ldr	r3, [pc, #328]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7e:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e92:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e98:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e9e:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee2:	4837      	ldr	r0, [pc, #220]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000ee4:	f001 fb4a 	bl	800257c <HAL_ADC_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000eee:	f000 fdd5 	bl	8001a9c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000f0a:	f002 fd9b 	bl	8003a44 <HAL_ADCEx_MultiModeConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000f14:	f000 fdc2 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <MX_ADC1_Init+0x16c>)
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1c:	2306      	movs	r3, #6
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f24:	237f      	movs	r3, #127	; 0x7f
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4822      	ldr	r0, [pc, #136]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000f36:	f001 ff9d 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f40:	f000 fdac 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_ADC1_Init+0x170>)
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481b      	ldr	r0, [pc, #108]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000f52:	f001 ff8f 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f5c:	f000 fd9e 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_ADC1_Init+0x174>)
 8000f62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f64:	2312      	movs	r3, #18
 8000f66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000f6e:	f001 ff81 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000f78:	f000 fd90 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_ADC1_Init+0x178>)
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f80:	2318      	movs	r3, #24
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000f8a:	f001 ff73 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000f94:	f000 fd82 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_ADC1_Init+0x17c>)
 8000f9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_ADC1_Init+0x168>)
 8000fa8:	f001 ff64 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000fb2:	f000 fd73 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200006c4 	.word	0x200006c4
 8000fc4:	04300002 	.word	0x04300002
 8000fc8:	08600004 	.word	0x08600004
 8000fcc:	2a000400 	.word	0x2a000400
 8000fd0:	3ef08000 	.word	0x3ef08000
 8000fd4:	c3210000 	.word	0xc3210000

08000fd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00c fa92 	bl	800d50e <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_ADC2_Init+0x128>)
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <MX_ADC2_Init+0x12c>)
 8000fee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <MX_ADC2_Init+0x128>)
 8000ff2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ff6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff8:	4b41      	ldr	r3, [pc, #260]	; (8001100 <MX_ADC2_Init+0x128>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <MX_ADC2_Init+0x128>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001004:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MX_ADC2_Init+0x128>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <MX_ADC2_Init+0x128>)
 800100c:	2201      	movs	r2, #1
 800100e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <MX_ADC2_Init+0x128>)
 8001012:	2208      	movs	r2, #8
 8001014:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_ADC2_Init+0x128>)
 8001018:	2200      	movs	r2, #0
 800101a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <MX_ADC2_Init+0x128>)
 800101e:	2200      	movs	r2, #0
 8001020:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 5;
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_ADC2_Init+0x128>)
 8001024:	2205      	movs	r2, #5
 8001026:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <MX_ADC2_Init+0x128>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_ADC2_Init+0x128>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <MX_ADC2_Init+0x128>)
 800103a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <MX_ADC2_Init+0x128>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <MX_ADC2_Init+0x128>)
 800104a:	f001 fa97 	bl	800257c <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001054:	f000 fd22 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_ADC2_Init+0x130>)
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105c:	2306      	movs	r3, #6
 800105e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001060:	2301      	movs	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001064:	237f      	movs	r3, #127	; 0x7f
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4822      	ldr	r0, [pc, #136]	; (8001100 <MX_ADC2_Init+0x128>)
 8001076:	f001 fefd 	bl	8002e74 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001080:	f000 fd0c 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_ADC2_Init+0x134>)
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001088:	230c      	movs	r3, #12
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	481b      	ldr	r0, [pc, #108]	; (8001100 <MX_ADC2_Init+0x128>)
 8001092:	f001 feef 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800109c:	f000 fcfe 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_ADC2_Init+0x138>)
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010a4:	2312      	movs	r3, #18
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_ADC2_Init+0x128>)
 80010ae:	f001 fee1 	bl	8002e74 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80010b8:	f000 fcf0 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_ADC2_Init+0x13c>)
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010c0:	2318      	movs	r3, #24
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC2_Init+0x128>)
 80010ca:	f001 fed3 	bl	8002e74 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80010d4:	f000 fce2 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_ADC2_Init+0x140>)
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC2_Init+0x128>)
 80010e8:	f001 fec4 	bl	8002e74 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80010f2:	f000 fcd3 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000544 	.word	0x20000544
 8001104:	50000100 	.word	0x50000100
 8001108:	0c900008 	.word	0x0c900008
 800110c:	10c00010 	.word	0x10c00010
 8001110:	2a000400 	.word	0x2a000400
 8001114:	36902000 	.word	0x36902000
 8001118:	47520000 	.word	0x47520000

0800111c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_TIM2_Init+0x94>)
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5.1E7;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x98>)
 8001152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM2_Init+0x94>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001162:	f005 ffff 	bl	8007164 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800116c:	f000 fc96 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM2_Init+0x94>)
 800117e:	f006 fa33 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 fc88 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_TIM2_Init+0x94>)
 800119a:	f006 fc4b 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f000 fc7a 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000abc 	.word	0x20000abc
 80011b4:	030a32c0 	.word	0x030a32c0

080011b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM4_Init+0x94>)
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <MX_TIM4_Init+0x98>)
 80011da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM4_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM4_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 17000;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM4_Init+0x94>)
 80011ea:	f244 2268 	movw	r2, #17000	; 0x4268
 80011ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM4_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM4_Init+0x94>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM4_Init+0x94>)
 80011fe:	f005 ffb1 	bl	8007164 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001208:	f000 fc48 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM4_Init+0x94>)
 800121a:	f006 f9e5 	bl	80075e8 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fc3a 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM4_Init+0x94>)
 8001236:	f006 fbfd 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 fc2c 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200004f4 	.word	0x200004f4
 8001250:	40000800 	.word	0x40000800

08001254 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_TIM6_Init+0x64>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_TIM6_Init+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_TIM6_Init+0x64>)
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_TIM6_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_TIM6_Init+0x64>)
 8001278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_TIM6_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM6_Init+0x64>)
 8001286:	f005 ff6d 	bl	8007164 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001290:	f000 fc04 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM6_Init+0x64>)
 80012a2:	f006 fbc7 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f000 fbf6 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000a5c 	.word	0x20000a5c
 80012bc:	40001000 	.word	0x40001000

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <MX_USART2_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART2_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800130a:	f006 fc5b 	bl	8007bc4 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 fbc2 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800131c:	f007 fc0d 	bl	8008b3a <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f000 fbb9 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800132e:	f007 fc42 	bl	8008bb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 fbb0 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800133e:	f007 fbc3 	bl	8008ac8 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 fba8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000b08 	.word	0x20000b08
 8001354:	40004400 	.word	0x40004400

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_DMA_Init+0x50>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <MX_DMA_Init+0x50>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6493      	str	r3, [r2, #72]	; 0x48
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_DMA_Init+0x50>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_DMA_Init+0x50>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <MX_DMA_Init+0x50>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_DMA_Init+0x50>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200b      	movs	r0, #11
 8001394:	f002 fcd1 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001398:	200b      	movs	r0, #11
 800139a:	f002 fce8 	bl	8003d6e <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <MX_GPIO_Init+0xc4>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_GPIO_Init+0xc4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001410:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_GPIO_Init+0xc8>)
 8001412:	f003 fb35 	bl	8004a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG_IN7_Pin DIG_IN1_Pin DIG_IN3_Pin DIG_IN5_Pin */
  GPIO_InitStruct.Pin = DIG_IN7_Pin|DIG_IN1_Pin|DIG_IN3_Pin|DIG_IN5_Pin;
 8001416:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 800141a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f003 f98d 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_IN9_Pin DIG_IN6_Pin DIG_IN4_Pin DIG_IN2_Pin */
  GPIO_InitStruct.Pin = DIG_IN9_Pin|DIG_IN6_Pin|DIG_IN4_Pin|DIG_IN2_Pin;
 8001432:	23f0      	movs	r3, #240	; 0xf0
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <MX_GPIO_Init+0xc8>)
 8001446:	f003 f981 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_GPIO_Init+0xc8>)
 8001464:	f003 f972 	bl	800474c <HAL_GPIO_Init>

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	48000400 	.word	0x48000400

08001478 <sendMidiAS>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */

void sendMidiAS(){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint8_t bff[4] = {0x0F, 0xFE, 0x00, 0x00};
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <sendMidiAS+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	607b      	str	r3, [r7, #4]
  tx_midi((uint8_t *)bff,4);
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2104      	movs	r1, #4
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f859 	bl	8001540 <tx_midi>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0800de40 	.word	0x0800de40

0800149c <sendMidiGEN>:

// MIDI generic ON/OFF message
void sendMidiGEN(uint8_t note, uint8_t vel){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
  uint8_t bff[8] = {TAB,  0x99, 0, 0, TAB,  0x99,0, 0x00};
 80014ac:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <sendMidiGEN+0x50>)
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b6:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	72fb      	strb	r3, [r7, #11]
  bff[6] = 0x7f & note;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73bb      	strb	r3, [r7, #14]
  tx_midi((uint8_t *)bff,8);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2108      	movs	r1, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f82e 	bl	8001540 <tx_midi>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	0800de44 	.word	0x0800de44

080014f0 <sendMidiHHPedalOn>:

  tx_midi((uint8_t *)bff,4);
}

// MIDI HiHat pedal press message
void sendMidiHHPedalOn(){
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
  uint8_t bff[20] = { TAB,  0xA9, HHOPEN , 0x7F, TAB,  0xA9, HHCLOSE, 0x7F, TAB, 0xA9, 0x15, 0x7F,
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <sendMidiHHPedalOn+0x28>)
 80014f8:	1d3c      	adds	r4, r7, #4
 80014fa:	461d      	mov	r5, r3
 80014fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	6023      	str	r3, [r4, #0]
		  	  	  	  TAB,  0x99, HHPEDAL, 0x64, TAB,  0x99, HHPEDAL, 0x00};
  tx_midi((uint8_t *)bff, 20);
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2114      	movs	r1, #20
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f819 	bl	8001540 <tx_midi>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bdb0      	pop	{r4, r5, r7, pc}
 8001516:	bf00      	nop
 8001518:	0800de50 	.word	0x0800de50

0800151c <sendMidiHHPedalOff>:

// pedal aftertouch for hihat
void sendMidiHHPedalOff(){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  uint8_t bff[4] = { TAB,  0xA9, HHPEDAL , 0x3F};
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <sendMidiHHPedalOff+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	607b      	str	r3, [r7, #4]
  tx_midi((uint8_t *)bff,4);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2104      	movs	r1, #4
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f807 	bl	8001540 <tx_midi>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800de64 	.word	0x0800de64

08001540 <tx_midi>:
////  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//}


void tx_midi(uint8_t *_buffer, uint16_t len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
  CDC_Transmit_FS(_buffer, len);
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f00b fb71 	bl	800cc38 <CDC_Transmit_FS>
  TIM2->CNT = 0; // restart active sense timer
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <sendDebug>:

void sendDebug(uint8_t _ch)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	af06      	add	r7, sp, #24
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]

  if (channel[_ch].main_rdy)
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	494f      	ldr	r1, [pc, #316]	; (80016b4 <sendDebug+0x14c>)
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3316      	adds	r3, #22
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d051      	beq.n	800162c <sendDebug+0xc4>
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 8001588:	7bfd      	ldrb	r5, [r7, #15]
			  channel[_ch].main_voice, channel[_ch].alt_voice, channel[_ch].main_rdy_volume,
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	4949      	ldr	r1, [pc, #292]	; (80016b4 <sendDebug+0x14c>)
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 800159a:	469c      	mov	ip, r3
			  channel[_ch].main_voice, channel[_ch].alt_voice, channel[_ch].main_rdy_volume,
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	4945      	ldr	r1, [pc, #276]	; (80016b4 <sendDebug+0x14c>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3301      	adds	r3, #1
 80015ac:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 80015ae:	461e      	mov	r6, r3
			  channel[_ch].main_voice, channel[_ch].alt_voice, channel[_ch].main_rdy_volume,
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	4940      	ldr	r1, [pc, #256]	; (80016b4 <sendDebug+0x14c>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3320      	adds	r3, #32
 80015c0:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	493b      	ldr	r1, [pc, #236]	; (80016b4 <sendDebug+0x14c>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	3318      	adds	r3, #24
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	4836      	ldr	r0, [pc, #216]	; (80016b4 <sendDebug+0x14c>)
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4403      	add	r3, r0
 80015e4:	3324      	adds	r3, #36	; 0x24
 80015e6:	6818      	ldr	r0, [r3, #0]
			  channel[_ch].main_rdy_height, channel[_ch].main_rdy_length,
			  channel[_ch].main_status, channel[_ch].aux_status);
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	4c32      	ldr	r4, [pc, #200]	; (80016b4 <sendDebug+0x14c>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4423      	add	r3, r4
 80015f6:	3314      	adds	r3, #20
 80015f8:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 80015fa:	607b      	str	r3, [r7, #4]
			  channel[_ch].main_status, channel[_ch].aux_status);
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	4c2d      	ldr	r4, [pc, #180]	; (80016b4 <sendDebug+0x14c>)
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4423      	add	r3, r4
 800160a:	3315      	adds	r3, #21
 800160c:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>MAIN %d: voice %X (%X), vol %X, H=%lu L=%lu [%d %d])\n",_ch,
 800160e:	9305      	str	r3, [sp, #20]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	9204      	str	r2, [sp, #16]
 8001614:	9003      	str	r0, [sp, #12]
 8001616:	9102      	str	r1, [sp, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	9600      	str	r6, [sp, #0]
 800161e:	4663      	mov	r3, ip
 8001620:	462a      	mov	r2, r5
 8001622:	4925      	ldr	r1, [pc, #148]	; (80016b8 <sendDebug+0x150>)
 8001624:	4825      	ldr	r0, [pc, #148]	; (80016bc <sendDebug+0x154>)
 8001626:	f00b ff7b 	bl	800d520 <siprintf>
 800162a:	e030      	b.n	800168e <sendDebug+0x126>
  else
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 800162c:	7bf8      	ldrb	r0, [r7, #15]
			  channel[_ch].aux_voice, channel[_ch].aux_rdy_state,
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	4920      	ldr	r1, [pc, #128]	; (80016b4 <sendDebug+0x14c>)
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3302      	adds	r3, #2
 800163e:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001640:	461e      	mov	r6, r3
			  channel[_ch].aux_voice, channel[_ch].aux_rdy_state,
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	491b      	ldr	r1, [pc, #108]	; (80016b4 <sendDebug+0x14c>)
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	333c      	adds	r3, #60	; 0x3c
 8001652:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001654:	461c      	mov	r4, r3
			  channel[_ch].main_status, channel[_ch].aux_status);
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <sendDebug+0x14c>)
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3314      	adds	r3, #20
 8001666:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 8001668:	461d      	mov	r5, r3
			  channel[_ch].main_status, channel[_ch].aux_status);
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sendDebug+0x14c>)
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	3315      	adds	r3, #21
 800167a:	781b      	ldrb	r3, [r3, #0]
	  sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch,
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	9501      	str	r5, [sp, #4]
 8001680:	9400      	str	r4, [sp, #0]
 8001682:	4633      	mov	r3, r6
 8001684:	4602      	mov	r2, r0
 8001686:	490e      	ldr	r1, [pc, #56]	; (80016c0 <sendDebug+0x158>)
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <sendDebug+0x154>)
 800168a:	f00b ff49 	bl	800d520 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)buffer_out, strlen((char const*)buffer_out) , 10);
 800168e:	480b      	ldr	r0, [pc, #44]	; (80016bc <sendDebug+0x154>)
 8001690:	f7fe fdc6 	bl	8000220 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	230a      	movs	r3, #10
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <sendDebug+0x154>)
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <sendDebug+0x15c>)
 800169e:	f006 fae1 	bl	8007c64 <HAL_UART_Transmit>

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <sendDebug+0x160>)
 80016a8:	f003 fa02 	bl	8004ab0 <HAL_GPIO_TogglePin>

}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b4:	20000794 	.word	0x20000794
 80016b8:	0800de68 	.word	0x0800de68
 80016bc:	20000b94 	.word	0x20000b94
 80016c0:	0800dea0 	.word	0x0800dea0
 80016c4:	20000b08 	.word	0x20000b08
 80016c8:	48000400 	.word	0x48000400

080016cc <getAuxState>:


// READ Diginal state of aux channels
void getAuxState (GPIO_PinState *_state){
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	_state[0] = HAL_GPIO_ReadPin(DIG_IN1_GPIO_Port, DIG_IN1_Pin);
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f003 f9b8 	bl	8004a50 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	701a      	strb	r2, [r3, #0]
	_state[1] = HAL_GPIO_ReadPin(DIG_IN2_GPIO_Port, DIG_IN2_Pin);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1c5c      	adds	r4, r3, #1
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <getAuxState+0xb4>)
 80016f0:	f003 f9ae 	bl	8004a50 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	7023      	strb	r3, [r4, #0]
	_state[2] = HAL_GPIO_ReadPin(DIG_IN3_GPIO_Port, DIG_IN3_Pin);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	1c9c      	adds	r4, r3, #2
 80016fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f003 f9a4 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	7023      	strb	r3, [r4, #0]
	_state[3] = HAL_GPIO_ReadPin(DIG_IN4_GPIO_Port, DIG_IN4_Pin);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1cdc      	adds	r4, r3, #3
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	481b      	ldr	r0, [pc, #108]	; (8001780 <getAuxState+0xb4>)
 8001714:	f003 f99c 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	7023      	strb	r3, [r4, #0]

	_state[4] = HAL_GPIO_ReadPin(DIG_IN5_GPIO_Port, DIG_IN5_Pin);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	1d1c      	adds	r4, r3, #4
 8001720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f003 f992 	bl	8004a50 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	7023      	strb	r3, [r4, #0]
	_state[5] = HAL_GPIO_ReadPin(DIG_IN6_GPIO_Port, DIG_IN6_Pin);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1d5c      	adds	r4, r3, #5
 8001734:	2120      	movs	r1, #32
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <getAuxState+0xb4>)
 8001738:	f003 f98a 	bl	8004a50 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	7023      	strb	r3, [r4, #0]
	_state[6] = HAL_GPIO_ReadPin(DIG_IN7_GPIO_Port, DIG_IN7_Pin);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1d9c      	adds	r4, r3, #6
 8001744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174c:	f003 f980 	bl	8004a50 <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	7023      	strb	r3, [r4, #0]
	_state[7] = 0; //HAL_GPIO_ReadPin(DIG_IN8_GPIO_Port, DIG_IN8_Pin);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3307      	adds	r3, #7
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

	_state[8] = HAL_GPIO_ReadPin(DIG_IN9_GPIO_Port, DIG_IN9_Pin);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f103 0408 	add.w	r4, r3, #8
 8001762:	2110      	movs	r1, #16
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <getAuxState+0xb4>)
 8001766:	f003 f973 	bl	8004a50 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]
	_state[9] = 0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3309      	adds	r3, #9
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	bf00      	nop
 8001780:	48000400 	.word	0x48000400

08001784 <Save_Setting>:

void Save_Setting()
{
 8001784:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001788:	b0ca      	sub	sp, #296	; 0x128
 800178a:	af00      	add	r7, sp, #0
	uint32_t SavingBuff[64];
	uint8_t i;
	uint32_t error = 0;
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
	uint64_t val = 0;
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f04f 0400 	mov.w	r4, #0
 800179c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80017a0:	e9c2 3400 	strd	r3, r4, [r2]

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4aaa      	ldr	r2, [pc, #680]	; (8001a50 <Save_Setting+0x2cc>)
 80017a8:	461c      	mov	r4, r3
 80017aa:	4613      	mov	r3, r2
 80017ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.Banks = FLASH_BANK_1,
	        .Page = 63,
			.NbPages = 1
	};

	for (i=0;i<64;i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80017b8:	e00b      	b.n	80017d2 <Save_Setting+0x4e>
			SavingBuff[i] = 0;
 80017ba:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2100      	movs	r1, #0
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i=0;i<64;i++)
 80017c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80017d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017d6:	2b3f      	cmp	r3, #63	; 0x3f
 80017d8:	d9ef      	bls.n	80017ba <Save_Setting+0x36>
//112233445566778899 AABBCCDDEEFF
	SavingBuff[0] = 0xC4C0FFEE;
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	4a9d      	ldr	r2, [pc, #628]	; (8001a54 <Save_Setting+0x2d0>)
 80017e0:	601a      	str	r2, [r3, #0]
	SavingBuff[1] = 0;
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]

	// 0x11223344
	for (i = 1; i < 10; i++){
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80017f0:	e0d7      	b.n	80019a2 <Save_Setting+0x21e>
		// channel configuration settings
		SavingBuff[2*i    ]  = (channel[i-1].main_voice & 0xFF)*0x01000000;
 80017f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017f6:	1e5a      	subs	r2, r3, #1
 80017f8:	4997      	ldr	r1, [pc, #604]	; (8001a58 <Save_Setting+0x2d4>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	0619      	lsls	r1, r3, #24
 8001808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800180c:	005a      	lsls	r2, r3, #1
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].aux_voice  & 0xFF)*0x00010000;
 8001816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800181a:	005a      	lsls	r2, r3, #1
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	488b      	ldr	r0, [pc, #556]	; (8001a58 <Save_Setting+0x2d4>)
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4403      	add	r3, r0
 8001836:	3302      	adds	r3, #2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	4618      	mov	r0, r3
 800183e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001842:	005a      	lsls	r2, r3, #1
 8001844:	4401      	add	r1, r0
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].alt_voice  & 0xFF)*0x00000100;
 800184e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001852:	005a      	lsls	r2, r3, #1
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800185c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	487d      	ldr	r0, [pc, #500]	; (8001a58 <Save_Setting+0x2d4>)
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4403      	add	r3, r0
 800186e:	3301      	adds	r3, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4618      	mov	r0, r3
 8001876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800187a:	005a      	lsls	r2, r3, #1
 800187c:	4401      	add	r1, r0
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i    ] += (channel[i-1].aux_type   & 0xFF);
 8001886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800188a:	005a      	lsls	r2, r3, #1
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	486f      	ldr	r0, [pc, #444]	; (8001a58 <Save_Setting+0x2d4>)
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4403      	add	r3, r0
 80018a6:	3303      	adds	r3, #3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	4401      	add	r1, r0
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// channel parameter settings
		SavingBuff[2*i + 1]  = (channel[i-1].peak_threshold 	& 0xFF)*0x01000000;
 80018bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	4965      	ldr	r1, [pc, #404]	; (8001a58 <Save_Setting+0x2d4>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3304      	adds	r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	3201      	adds	r2, #1
 80018dc:	0619      	lsls	r1, r3, #24
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_min_length 	& 0xFF)*0x00010000;
 80018e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	f107 0318 	add.w	r3, r7, #24
 80018f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80018fa:	1e5a      	subs	r2, r3, #1
 80018fc:	4856      	ldr	r0, [pc, #344]	; (8001a58 <Save_Setting+0x2d4>)
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4403      	add	r3, r0
 8001908:	330c      	adds	r3, #12
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	3201      	adds	r2, #1
 8001918:	4419      	add	r1, r3
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].peak_max_length  & 0xFF)*0x00000100;
 8001922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001936:	1e5a      	subs	r2, r3, #1
 8001938:	4847      	ldr	r0, [pc, #284]	; (8001a58 <Save_Setting+0x2d4>)
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4403      	add	r3, r0
 8001944:	3308      	adds	r3, #8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8001950:	0052      	lsls	r2, r2, #1
 8001952:	3201      	adds	r2, #1
 8001954:	4419      	add	r1, r3
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2*i + 1] += (channel[i-1].time_between_peaks  & 0xFF);
 800195e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800196e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4838      	ldr	r0, [pc, #224]	; (8001a58 <Save_Setting+0x2d4>)
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4403      	add	r3, r0
 8001980:	3310      	adds	r3, #16
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800198a:	0052      	lsls	r2, r2, #1
 800198c:	3201      	adds	r2, #1
 800198e:	4419      	add	r1, r3
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i < 10; i++){
 8001998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800199c:	3301      	adds	r3, #1
 800199e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80019a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	f67f af23 	bls.w	80017f2 <Save_Setting+0x6e>
	}

	HAL_FLASH_Unlock();
 80019ac:	f002 fcc2 	bl	8004334 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 80019b0:	f107 0214 	add.w	r2, r7, #20
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fda3 	bl	8004504 <HAL_FLASHEx_Erase>

	for (i=0;i<32;i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 80019c4:	e037      	b.n	8001a36 <Save_Setting+0x2b2>
	{
		val = (((uint64_t)SavingBuff[i*2+1])<<32) + SavingBuff[i*2];
 80019c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	f107 0318 	add.w	r3, r7, #24
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0b00 	mov.w	fp, #0
 80019e0:	f04f 0c00 	mov.w	ip, #0
 80019e4:	468c      	mov	ip, r1
 80019e6:	f04f 0b00 	mov.w	fp, #0
 80019ea:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80019ee:	0051      	lsls	r1, r2, #1
 80019f0:	f107 0218 	add.w	r2, r7, #24
 80019f4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80019f8:	4611      	mov	r1, r2
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	eb1b 0301 	adds.w	r3, fp, r1
 8001a02:	eb4c 0402 	adc.w	r4, ip, r2
 8001a06:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a0a:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_USER_START_ADDR + 8*i, val);
 8001a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a12:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001a16:	f503 537c 	add.w	r3, r3, #16128	; 0x3f00
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	2000      	movs	r0, #0
 8001a28:	f002 fc2e 	bl	8004288 <HAL_FLASH_Program>
	for (i=0;i<32;i++)
 8001a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a30:	3301      	adds	r3, #1
 8001a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8001a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001a3a:	2b1f      	cmp	r3, #31
 8001a3c:	d9c3      	bls.n	80019c6 <Save_Setting+0x242>
	}
	HAL_FLASH_Lock();
 8001a3e:	f002 fc9b 	bl	8004378 <HAL_FLASH_Lock>
}
 8001a42:	bf00      	nop
 8001a44:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800debc 	.word	0x0800debc
 8001a54:	c4c0ffee 	.word	0xc4c0ffee
 8001a58:	20000794 	.word	0x20000794

08001a5c <Load_Setting>:


void Load_Setting()
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i=0;i<64;i++){
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e00c      	b.n	8001a82 <Load_Setting+0x26>
		saved_config[i] = *(userConfig+i);
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <Load_Setting+0x38>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	441a      	add	r2, r3
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <Load_Setting+0x3c>)
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<64;i++){
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b3f      	cmp	r3, #63	; 0x3f
 8001a86:	d9ef      	bls.n	8001a68 <Load_Setting+0xc>
	}

}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200005b4 	.word	0x200005b4

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <Error_Handler+0x6>

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_MspInit+0x44>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_MspInit+0x44>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_MspInit+0x44>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_MspInit+0x44>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ada:	f004 fc0f 	bl	80062fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0c:	f040 8092 	bne.w	8001c34 <HAL_ADC_MspInit+0x148>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b10:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a73      	ldr	r2, [pc, #460]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001b18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b1a:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10b      	bne.n	8001b3a <HAL_ADC_MspInit+0x4e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b22:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a70      	ldr	r2, [pc, #448]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b40:	f043 0320 	orr.w	r3, r3, #32
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a64      	ldr	r2, [pc, #400]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b82:	2301      	movs	r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4855      	ldr	r0, [pc, #340]	; (8001cec <HAL_ADC_MspInit+0x200>)
 8001b96:	f002 fdd9 	bl	800474c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f002 fdcc 	bl	800474c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	484a      	ldr	r0, [pc, #296]	; (8001cf0 <HAL_ADC_MspInit+0x204>)
 8001bc8:	f002 fdc0 	bl	800474c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bcc:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bce:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <HAL_ADC_MspInit+0x20c>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd8:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bea:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c00:	4b3c      	ldr	r3, [pc, #240]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c06:	483b      	ldr	r0, [pc, #236]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001c08:	f002 f8cc 	bl	8003da4 <HAL_DMA_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001c12:	f7ff ff43 	bl	8001a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a36      	ldr	r2, [pc, #216]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c1c:	4a35      	ldr	r2, [pc, #212]	; (8001cf4 <HAL_ADC_MspInit+0x208>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2012      	movs	r0, #18
 8001c28:	f002 f887 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c2c:	2012      	movs	r0, #18
 8001c2e:	f002 f89e 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c32:	e052      	b.n	8001cda <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_ADC_MspInit+0x210>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d14d      	bne.n	8001cda <HAL_ADC_MspInit+0x1ee>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001c46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_ADC_MspInit+0x1f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_MspInit+0x17c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_ADC_MspInit+0x1fc>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4810      	ldr	r0, [pc, #64]	; (8001cec <HAL_ADC_MspInit+0x200>)
 8001cac:	f002 fd4e 	bl	800474c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb0:	23f0      	movs	r3, #240	; 0xf0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f002 fd41 	bl	800474c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2012      	movs	r0, #18
 8001cd0:	f002 f833 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001cd4:	2012      	movs	r0, #18
 8001cd6:	f002 f84a 	bl	8003d6e <HAL_NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3738      	adds	r7, #56	; 0x38
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002a0 	.word	0x200002a0
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48001400 	.word	0x48001400
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	20000734 	.word	0x20000734
 8001cf8:	40020008 	.word	0x40020008
 8001cfc:	50000100 	.word	0x50000100

08001d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d114      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	201c      	movs	r0, #28
 8001d30:	f002 f803 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d34:	201c      	movs	r0, #28
 8001d36:	f002 f81a 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001d3a:	e02a      	b.n	8001d92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_TIM_Base_MspInit+0xa0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d114      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	201e      	movs	r0, #30
 8001d64:	f001 ffe9 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d68:	201e      	movs	r0, #30
 8001d6a:	f002 f800 	bl	8003d6e <HAL_NVIC_EnableIRQ>
}
 8001d6e:	e010      	b.n	8001d92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_TIM_Base_MspInit+0xa4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10b      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_TIM_Base_MspInit+0x9c>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40000800 	.word	0x40000800
 8001da4:	40001000 	.word	0x40001000

08001da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d128      	bne.n	8001e1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f002 fc98 	bl	800474c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40004400 	.word	0x40004400
 8001e28:	40021000 	.word	0x40021000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f900 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <DMA1_Channel1_IRQHandler+0x10>)
 8001e86:	f002 f8b0 	bl	8003fea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000734 	.word	0x20000734

08001e94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <ADC1_2_IRQHandler+0x14>)
 8001e9a:	f000 fdb3 	bl	8002a04 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001e9e:	4803      	ldr	r0, [pc, #12]	; (8001eac <ADC1_2_IRQHandler+0x18>)
 8001ea0:	f000 fdb0 	bl	8002a04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200006c4 	.word	0x200006c4
 8001eac:	20000544 	.word	0x20000544

08001eb0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USB_LP_IRQHandler+0x10>)
 8001eb6:	f002 ff1c 	bl	8004cf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20001c20 	.word	0x20001c20

08001ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM2_IRQHandler+0x10>)
 8001eca:	f005 fa0d 	bl	80072e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000abc 	.word	0x20000abc

08001ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <TIM4_IRQHandler+0x10>)
 8001ede:	f005 fa03 	bl	80072e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200004f4 	.word	0x200004f4

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f00b fac2 	bl	800d4a4 <__errno>
 8001f20:	4602      	mov	r2, r0
 8001f22:	230c      	movs	r3, #12
 8001f24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20008000 	.word	0x20008000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	200002a4 	.word	0x200002a4
 8001f54:	20001f18 	.word	0x20001f18

08001f58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <SystemInit+0x28>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <SystemInit+0x28>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SystemInit+0x28>)
 8001f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f72:	609a      	str	r2, [r3, #8]
#endif
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8a:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <LoopForever+0xe>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa0:	4c0b      	ldr	r4, [pc, #44]	; (8001fd0 <LoopForever+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fae:	f7ff ffd3 	bl	8001f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f00b fa7d 	bl	800d4b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb6:	f7fe fc07 	bl	80007c8 <main>

08001fba <LoopForever>:

LoopForever:
    b LoopForever
 8001fba:	e7fe      	b.n	8001fba <LoopForever>
  ldr   r0, =_estack
 8001fbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8001fc8:	0800df8c 	.word	0x0800df8c
  ldr r2, =_sbss
 8001fcc:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8001fd0:	20001f18 	.word	0x20001f18

08001fd4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <COMP1_2_3_IRQHandler>

08001fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f001 fe9f 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f80e 	bl	8002008 <HAL_InitTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	e001      	b.n	8001ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff8:	f7ff fd54 	bl	8001aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]

}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_InitTick+0x68>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d022      	beq.n	8002062 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_InitTick+0x6c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_InitTick+0x68>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f001 feaa 	bl	8003d8a <HAL_SYSTICK_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	d809      	bhi.n	8002056 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002042:	2200      	movs	r2, #0
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	f04f 30ff 	mov.w	r0, #4294967295
 800204a:	f001 fe76 	bl	8003d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_InitTick+0x70>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e007      	b.n	8002066 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e004      	b.n	8002066 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000004 	.word	0x20000004
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4413      	add	r3, r2
 800208a:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_IncTick+0x1c>)
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20000f7c 	.word	0x20000f7c
 800209c:	2000000c 	.word	0x2000000c

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000f7c 	.word	0x20000f7c

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d004      	beq.n	80020dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_Delay+0x40>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020dc:	bf00      	nop
 80020de:	f7ff ffdf 	bl	80020a0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d8f7      	bhi.n	80020de <HAL_Delay+0x26>
  {
  }
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c

080020fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3360      	adds	r3, #96	; 0x60
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <LL_ADC_SetOffset+0x44>)
 8002186:	4013      	ands	r3, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	4313      	orrs	r3, r2
 8002194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	03fff000 	.word	0x03fff000

080021ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	461a      	mov	r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800220e:	b480      	push	{r7}
 8002210:	b087      	sub	sp, #28
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3360      	adds	r3, #96	; 0x60
 800221e:	461a      	mov	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	431a      	orrs	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	615a      	str	r2, [r3, #20]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b087      	sub	sp, #28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3330      	adds	r3, #48	; 0x30
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	211f      	movs	r1, #31
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 011f 	and.w	r1, r3, #31
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3314      	adds	r3, #20
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0e5b      	lsrs	r3, r3, #25
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0d1b      	lsrs	r3, r3, #20
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2107      	movs	r1, #7
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	0d1b      	lsrs	r3, r3, #20
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0318 	and.w	r3, r3, #24
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c0:	40d9      	lsrs	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	400b      	ands	r3, r1
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	0007ffff 	.word	0x0007ffff

080023e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 031f 	and.w	r3, r3, #31
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800242c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6093      	str	r3, [r2, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a4:	d101      	bne.n	80024aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsEnabled+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsEnabled+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002516:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b08      	cmp	r3, #8
 8002566:	d101      	bne.n	800256c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e16b      	b.n	800286e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff faa1 	bl	8001aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff3f 	bl	8002440 <LL_ADC_IsDeepPowerDownEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff25 	bl	800241c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff5a 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff3e 	bl	8002468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025ec:	4ba2      	ldr	r3, [pc, #648]	; (8002878 <HAL_ADC_Init+0x2fc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	4aa2      	ldr	r2, [pc, #648]	; (800287c <HAL_ADC_Init+0x300>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025fc:	e002      	b.n	8002604 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3b01      	subs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f9      	bne.n	80025fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff3e 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff77 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002640:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 8106 	bne.w	800285c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8102 	bne.w	800285c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002660:	f043 0202 	orr.w	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff37 	bl	80024e0 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002678:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800267c:	f7ff ff30 	bl	80024e0 <LL_ADC_IsEnabled>
 8002680:	4604      	mov	r4, r0
 8002682:	487f      	ldr	r0, [pc, #508]	; (8002880 <HAL_ADC_Init+0x304>)
 8002684:	f7ff ff2c 	bl	80024e0 <LL_ADC_IsEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	4323      	orrs	r3, r4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4619      	mov	r1, r3
 8002696:	487b      	ldr	r0, [pc, #492]	; (8002884 <HAL_ADC_Init+0x308>)
 8002698:	f7ff fd30 	bl	80020fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7f5b      	ldrb	r3, [r3, #29]
 80026a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d106      	bne.n	80026d8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	045b      	lsls	r3, r3, #17
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_ADC_Init+0x30c>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	430b      	orrs	r3, r1
 8002706:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff03 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002728:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff10 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002734:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d16d      	bne.n	8002818 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d16a      	bne.n	8002818 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002746:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275e:	f023 0302 	bic.w	r3, r3, #2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	430b      	orrs	r3, r1
 800276a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002782:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800278c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6911      	ldr	r1, [r2, #16]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027a2:	e013      	b.n	80027cc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d118      	bne.n	8002808 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027e0:	f023 0304 	bic.w	r3, r3, #4
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027ec:	4311      	orrs	r1, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027f2:	4311      	orrs	r1, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027f8:	430a      	orrs	r2, r1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	e007      	b.n	8002818 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10c      	bne.n	800283a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f023 010f 	bic.w	r1, r3, #15
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
 8002838:	e007      	b.n	800284a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 020f 	bic.w	r2, r2, #15
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
 800285a:	e007      	b.n	800286c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800286c:	7ffb      	ldrb	r3, [r7, #31]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
 8002876:	bf00      	nop
 8002878:	20000004 	.word	0x20000004
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	50000100 	.word	0x50000100
 8002884:	50000300 	.word	0x50000300
 8002888:	fff04007 	.word	0xfff04007

0800288c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002894:	4859      	ldr	r0, [pc, #356]	; (80029fc <HAL_ADC_Start+0x170>)
 8002896:	f7ff fda5 	bl	80023e4 <LL_ADC_GetMultimode>
 800289a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe44 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 809f 	bne.w	80029ec <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_Start+0x30>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e09a      	b.n	80029f2 <HAL_ADC_Start+0x166>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fec5 	bl	8003654 <ADC_Enable>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 8086 	bne.w	80029e2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a44      	ldr	r2, [pc, #272]	; (8002a00 <HAL_ADC_Start+0x174>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d002      	beq.n	80028fa <HAL_ADC_Start+0x6e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e001      	b.n	80028fe <HAL_ADC_Start+0x72>
 80028fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	4293      	cmp	r3, r2
 8002904:	d002      	beq.n	800290c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d106      	bne.n	8002934 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f023 0206 	bic.w	r2, r3, #6
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
 8002932:	e002      	b.n	800293a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	221c      	movs	r2, #28
 8002940:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <HAL_ADC_Start+0x174>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d002      	beq.n	800295a <HAL_ADC_Start+0xce>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e001      	b.n	800295e <HAL_ADC_Start+0xd2>
 800295a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4293      	cmp	r3, r2
 8002964:	d008      	beq.n	8002978 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d002      	beq.n	8002978 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d114      	bne.n	80029a2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fdb3 	bl	8002506 <LL_ADC_REG_StartConversion>
 80029a0:	e026      	b.n	80029f0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_ADC_Start+0x174>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d002      	beq.n	80029be <HAL_ADC_Start+0x132>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e001      	b.n	80029c2 <HAL_ADC_Start+0x136>
 80029be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
 80029e0:	e006      	b.n	80029f0 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029ea:	e001      	b.n	80029f0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	50000300 	.word	0x50000300
 8002a00:	50000100 	.word	0x50000100

08002a04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a20:	4883      	ldr	r0, [pc, #524]	; (8002c30 <HAL_ADC_IRQHandler+0x22c>)
 8002a22:	f7ff fcdf 	bl	80023e4 <LL_ADC_GetMultimode>
 8002a26:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x5e>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d012      	beq.n	8002a62 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 ffeb 	bl	8003a30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x72>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8085 	beq.w	8002b8c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d07f      	beq.n	8002b8c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fbf9 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d064      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5e      	ldr	r2, [pc, #376]	; (8002c34 <HAL_ADC_IRQHandler+0x230>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d002      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0xc0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e001      	b.n	8002ac8 <HAL_ADC_IRQHandler+0xc4>
 8002ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d008      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d002      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d104      	bne.n	8002aec <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	623b      	str	r3, [r7, #32]
 8002aea:	e00d      	b.n	8002b08 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <HAL_ADC_IRQHandler+0x230>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d002      	beq.n	8002afc <HAL_ADC_IRQHandler+0xf8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e001      	b.n	8002b00 <HAL_ADC_IRQHandler+0xfc>
 8002afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b00:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d135      	bne.n	8002b7e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d12e      	bne.n	8002b7e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fd02 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d11a      	bne.n	8002b66 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 020c 	bic.w	r2, r2, #12
 8002b3e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d112      	bne.n	8002b7e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b64:	e00b      	b.n	8002b7e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fd fd6c 	bl	800065c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	220c      	movs	r2, #12
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x19c>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 809e 	beq.w	8002ce8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8098 	beq.w	8002ce8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fba2 	bl	800231e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002bda:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb5d 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_ADC_IRQHandler+0x230>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d002      	beq.n	8002bf8 <HAL_ADC_IRQHandler+0x1f4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	e001      	b.n	8002bfc <HAL_ADC_IRQHandler+0x1f8>
 8002bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d008      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d002      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d104      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	e011      	b.n	8002c44 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <HAL_ADC_IRQHandler+0x230>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d006      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x234>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e005      	b.n	8002c3c <HAL_ADC_IRQHandler+0x238>
 8002c30:	50000300 	.word	0x50000300
 8002c34:	50000100 	.word	0x50000100
 8002c38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c3c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d142      	bne.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d03f      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d13a      	bne.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d133      	bne.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12e      	bne.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fc67 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11a      	bne.n	8002cc2 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c9a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d112      	bne.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cc0:	e00b      	b.n	8002cda <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fe80 	bl	80039e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2260      	movs	r2, #96	; 0x60
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x312>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f89f 	bl	8002e4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x342>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fe66 	bl	8003a08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x372>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fe58 	bl	8003a1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d036      	beq.n	8002dee <HAL_ADC_IRQHandler+0x3ea>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d031      	beq.n	8002dee <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002d92:	2301      	movs	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
 8002d96:	e014      	b.n	8002dc2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d9e:	4825      	ldr	r0, [pc, #148]	; (8002e34 <HAL_ADC_IRQHandler+0x430>)
 8002da0:	f7ff fb2e 	bl	8002400 <LL_ADC_GetMultiDMATransfer>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002daa:	2301      	movs	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	e008      	b.n	8002dc2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10e      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f83d 	bl	8002e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d018      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x426>
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d013      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e12:	f043 0208 	orr.w	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fde5 	bl	80039f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	50000300 	.word	0x50000300

08002e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b0b6      	sub	sp, #216	; 0xd8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x22>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e3c7      	b.n	8003626 <HAL_ADC_ConfigChannel+0x7b2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb43 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 83ac 	bne.w	8003608 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff fa02 	bl	80022c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fb31 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fb3d 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002eda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 81d9 	bne.w	800329a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 81d4 	bne.w	800329a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efa:	d10f      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff fa1c 	bl	8002344 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f9b0 	bl	800227a <LL_ADC_SetSamplingTimeCommonConfig>
 8002f1a:	e00e      	b.n	8002f3a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f7ff fa0b 	bl	8002344 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f9a0 	bl	800227a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d022      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f6c:	f7ff f8fa 	bl	8002164 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6919      	ldr	r1, [r3, #16]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f7ff f946 	bl	800220e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	7f1b      	ldrb	r3, [r3, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x124>
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x126>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7ff f952 	bl	8002244 <LL_ADC_SetOffsetSaturation>
 8002fa0:	e17b      	b.n	800329a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f8ff 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x15a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f8f4 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	e01e      	b.n	800300c <HAL_ADC_ConfigChannel+0x198>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f8e9 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e004      	b.n	800300a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1b0>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	e018      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1e2>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e004      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800304c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	429a      	cmp	r2, r3
 8003058:	d106      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f8b8 	bl	80021d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f89c 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x220>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f891 	bl	80021ac <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	e01e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x25e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f886 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e004      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80030c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x276>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	e018      	b.n	800311c <HAL_ADC_ConfigChannel+0x2a8>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800310e:	2320      	movs	r3, #32
 8003110:	e004      	b.n	800311c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	429a      	cmp	r2, r3
 800311e:	d106      	bne.n	800312e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f855 	bl	80021d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2102      	movs	r1, #2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f839 	bl	80021ac <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <HAL_ADC_ConfigChannel+0x2e6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f82e 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	e01e      	b.n	8003198 <HAL_ADC_ConfigChannel+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2102      	movs	r1, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f823 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800317c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003180:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e004      	b.n	8003196 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800318c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x33c>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	e016      	b.n	80031de <HAL_ADC_ConfigChannel+0x36a>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80031d0:	2320      	movs	r3, #32
 80031d2:	e004      	b.n	80031de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80031d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	429a      	cmp	r2, r3
 80031e0:	d106      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fff4 	bl	80021d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2103      	movs	r1, #3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe ffd8 	bl	80021ac <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_ADC_ConfigChannel+0x3a8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2103      	movs	r1, #3
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe ffcd 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	f003 021f 	and.w	r2, r3, #31
 800321a:	e017      	b.n	800324c <HAL_ADC_ConfigChannel+0x3d8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2103      	movs	r1, #3
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ffc2 	bl	80021ac <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003236:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x3f0>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	e011      	b.n	8003288 <HAL_ADC_ConfigChannel+0x414>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003274:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e003      	b.n	8003288 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	429a      	cmp	r2, r3
 800328a:	d106      	bne.n	800329a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	2103      	movs	r1, #3
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe ff9f 	bl	80021d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f91e 	bl	80024e0 <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 8140 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	461a      	mov	r2, r3
 80032ba:	f7ff f86f 	bl	800239c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4a8f      	ldr	r2, [pc, #572]	; (8003500 <HAL_ADC_ConfigChannel+0x68c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	f040 8131 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x47e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	bf94      	ite	ls
 80032ea:	2301      	movls	r3, #1
 80032ec:	2300      	movhi	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e019      	b.n	8003326 <HAL_ADC_ConfigChannel+0x4b2>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003302:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800330e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b09      	cmp	r3, #9
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003326:	2b00      	cmp	r3, #0
 8003328:	d079      	beq.n	800341e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x4d2>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	3301      	adds	r3, #1
 800333e:	069b      	lsls	r3, r3, #26
 8003340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003344:	e015      	b.n	8003372 <HAL_ADC_ConfigChannel+0x4fe>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800335e:	2320      	movs	r3, #32
 8003360:	e003      	b.n	800336a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3301      	adds	r3, #1
 800336c:	069b      	lsls	r3, r3, #26
 800336e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x51e>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	3301      	adds	r3, #1
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	e017      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x54e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x574>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	051b      	lsls	r3, r3, #20
 80033e6:	e018      	b.n	800341a <HAL_ADC_ConfigChannel+0x5a6>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f003 021f 	and.w	r2, r3, #31
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800341a:	430b      	orrs	r3, r1
 800341c:	e081      	b.n	8003522 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_ADC_ConfigChannel+0x5c6>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	3301      	adds	r3, #1
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003438:	e015      	b.n	8003466 <HAL_ADC_ConfigChannel+0x5f2>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	069b      	lsls	r3, r3, #26
 8003462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x612>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	3301      	adds	r3, #1
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	e017      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x642>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	61fb      	str	r3, [r7, #28]
  return result;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	ea42 0103 	orr.w	r1, r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x66e>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	0e9b      	lsrs	r3, r3, #26
 80034cc:	3301      	adds	r3, #1
 80034ce:	f003 021f 	and.w	r2, r3, #31
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	3b1e      	subs	r3, #30
 80034da:	051b      	lsls	r3, r3, #20
 80034dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e0:	e01e      	b.n	8003520 <HAL_ADC_ConfigChannel+0x6ac>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	613b      	str	r3, [r7, #16]
  return result;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e006      	b.n	800350c <HAL_ADC_ConfigChannel+0x698>
 80034fe:	bf00      	nop
 8003500:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 021f 	and.w	r2, r3, #31
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	051b      	lsls	r3, r3, #20
 800351c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	430b      	orrs	r3, r1
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	4619      	mov	r1, r3
 8003528:	f7fe ff0c 	bl	8002344 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_ADC_ConfigChannel+0x7bc>)
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d070      	beq.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003538:	483e      	ldr	r0, [pc, #248]	; (8003634 <HAL_ADC_ConfigChannel+0x7c0>)
 800353a:	f7fe fe05 	bl	8002148 <LL_ADC_GetCommonPathInternalCh>
 800353e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3c      	ldr	r2, [pc, #240]	; (8003638 <HAL_ADC_ConfigChannel+0x7c4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x6e2>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3a      	ldr	r2, [pc, #232]	; (800363c <HAL_ADC_ConfigChannel+0x7c8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d126      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800355a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d120      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800356a:	d156      	bne.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003574:	4619      	mov	r1, r3
 8003576:	482f      	ldr	r0, [pc, #188]	; (8003634 <HAL_ADC_ConfigChannel+0x7c0>)
 8003578:	f7fe fdd3 	bl	8002122 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_ADC_ConfigChannel+0x7cc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	4a30      	ldr	r2, [pc, #192]	; (8003644 <HAL_ADC_ConfigChannel+0x7d0>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	099a      	lsrs	r2, r3, #6
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003594:	e002      	b.n	800359c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b01      	subs	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f9      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a2:	e03a      	b.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a27      	ldr	r2, [pc, #156]	; (8003648 <HAL_ADC_ConfigChannel+0x7d4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x762>
 80035ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a23      	ldr	r2, [pc, #140]	; (800364c <HAL_ADC_ConfigChannel+0x7d8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02a      	beq.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035cc:	4619      	mov	r1, r3
 80035ce:	4819      	ldr	r0, [pc, #100]	; (8003634 <HAL_ADC_ConfigChannel+0x7c0>)
 80035d0:	f7fe fda7 	bl	8002122 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d4:	e021      	b.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_ADC_ConfigChannel+0x7dc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d11c      	bne.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_ADC_ConfigChannel+0x7d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d011      	beq.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035fe:	4619      	mov	r1, r3
 8003600:	480c      	ldr	r0, [pc, #48]	; (8003634 <HAL_ADC_ConfigChannel+0x7c0>)
 8003602:	f7fe fd8e 	bl	8002122 <LL_ADC_SetCommonPathInternalCh>
 8003606:	e008      	b.n	800361a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003622:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003626:	4618      	mov	r0, r3
 8003628:	37d8      	adds	r7, #216	; 0xd8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	80080000 	.word	0x80080000
 8003634:	50000300 	.word	0x50000300
 8003638:	c3210000 	.word	0xc3210000
 800363c:	90c00010 	.word	0x90c00010
 8003640:	20000004 	.word	0x20000004
 8003644:	053e2d63 	.word	0x053e2d63
 8003648:	c7520000 	.word	0xc7520000
 800364c:	50000100 	.word	0x50000100
 8003650:	cb840000 	.word	0xcb840000

08003654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe ff3d 	bl	80024e0 <LL_ADC_IsEnabled>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d146      	bne.n	80036fa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <ADC_Enable+0xb0>)
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e032      	b.n	80036fc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe ff0c 	bl	80024b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036a0:	f7fe fcfe 	bl	80020a0 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a6:	e021      	b.n	80036ec <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe ff17 	bl	80024e0 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fefb 	bl	80024b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c2:	f7fe fced 	bl	80020a0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d90d      	bls.n	80036ec <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f043 0210 	orr.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d1d6      	bne.n	80036a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	8000003f 	.word	0x8000003f

08003708 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800371e:	2b00      	cmp	r3, #0
 8003720:	d14b      	bne.n	80037ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fdad 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d032      	beq.n	80037b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d12b      	bne.n	80037b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11f      	bne.n	80037b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	65da      	str	r2, [r3, #92]	; 0x5c
 800377e:	e018      	b.n	80037b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d111      	bne.n	80037b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7fc ff52 	bl	800065c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037b8:	e00e      	b.n	80037d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fb4a 	bl	8002e60 <HAL_ADC_ErrorCallback>
}
 80037cc:	e004      	b.n	80037d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fb22 	bl	8002e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fb1c 	bl	8002e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <LL_ADC_IsEnabled>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <LL_ADC_IsEnabled+0x18>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <LL_ADC_IsEnabled+0x1a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_REG_StartConversion>:
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_ADC_REG_IsConversionOngoing>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d101      	bne.n	8003896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0a2      	sub	sp, #136	; 0x88
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ffe2 	bl	800387e <LL_ADC_REG_IsConversionOngoing>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
 80038c2:	e07e      	b.n	80039c2 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e077      	b.n	80039c2 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e2:	d102      	bne.n	80038ea <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_ADCEx_MultiModeStart_DMA+0x128>)
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e001      	b.n	80038ee <HAL_ADCEx_MultiModeStart_DMA+0x4a>
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <HAL_ADCEx_MultiModeStart_DMA+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e05a      	b.n	80039c2 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fea1 	bl	8003654 <ADC_Enable>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8003918:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fe95 	bl	8003654 <ADC_Enable>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003930:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13e      	bne.n	80039b6 <HAL_ADCEx_MultiModeStart_DMA+0x112>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 800396c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	221c      	movs	r2, #28
 8003976:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0210 	orr.w	r2, r2, #16
 800398e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003998:	330c      	adds	r3, #12
 800399a:	4619      	mov	r1, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f000 faa8 	bl	8003ef4 <HAL_DMA_Start_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff51 	bl	8003856 <LL_ADC_REG_StartConversion>
 80039b4:	e003      	b.n	80039be <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80039be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3788      	adds	r7, #136	; 0x88
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	50000100 	.word	0x50000100
 80039d0:	08003709 	.word	0x08003709
 80039d4:	080037e1 	.word	0x080037e1
 80039d8:	080037fd 	.word	0x080037fd
 80039dc:	50000300 	.word	0x50000300

080039e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b0a1      	sub	sp, #132	; 0x84
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e087      	b.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a72:	d102      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003a74:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	e001      	b.n	8003a7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e06a      	b.n	8003b72 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff feed 	bl	800387e <LL_ADC_REG_IsConversionOngoing>
 8003aa4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fee7 	bl	800387e <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d14c      	bne.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d149      	bne.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003abc:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003abe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d028      	beq.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ada:	035b      	lsls	r3, r3, #13
 8003adc:	430b      	orrs	r3, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ae4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ae8:	f7ff fea2 	bl	8003830 <LL_ADC_IsEnabled>
 8003aec:	4604      	mov	r4, r0
 8003aee:	4823      	ldr	r0, [pc, #140]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003af0:	f7ff fe9e 	bl	8003830 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d133      	bne.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	431a      	orrs	r2, r3
 8003b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b18:	e024      	b.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b2a:	f7ff fe81 	bl	8003830 <LL_ADC_IsEnabled>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4812      	ldr	r0, [pc, #72]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003b32:	f7ff fe7d 	bl	8003830 <LL_ADC_IsEnabled>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4323      	orrs	r3, r4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d112      	bne.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b46:	f023 030f 	bic.w	r3, r3, #15
 8003b4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b4c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b4e:	e009      	b.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b62:	e000      	b.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3784      	adds	r7, #132	; 0x84
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000300 	.word	0x50000300

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4907      	ldr	r1, [pc, #28]	; (8003c20 <__NVIC_EnableIRQ+0x38>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db0a      	blt.n	8003c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	490c      	ldr	r1, [pc, #48]	; (8003c70 <__NVIC_SetPriority+0x4c>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c4c:	e00a      	b.n	8003c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <__NVIC_SetPriority+0x50>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	440b      	add	r3, r1
 8003c62:	761a      	strb	r2, [r3, #24]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf28      	it	cs
 8003c96:	2304      	movcs	r3, #4
 8003c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d902      	bls.n	8003ca8 <NVIC_EncodePriority+0x30>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3b03      	subs	r3, #3
 8003ca6:	e000      	b.n	8003caa <NVIC_EncodePriority+0x32>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	43d9      	mvns	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	4313      	orrs	r3, r2
         );
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf0:	d301      	bcc.n	8003cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00f      	b.n	8003d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <SysTick_Config+0x40>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cfe:	210f      	movs	r1, #15
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	f7ff ff8e 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SysTick_Config+0x40>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SysTick_Config+0x40>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010

08003d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff29 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d48:	f7ff ff40 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff90 	bl	8003c78 <NVIC_EncodePriority>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff5f 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff33 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ffa4 	bl	8003ce0 <SysTick_Config>
 8003d98:	4603      	mov	r3, r0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e08d      	b.n	8003ed2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_DMA_Init+0x138>)
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d80f      	bhi.n	8003de2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b45      	ldr	r3, [pc, #276]	; (8003ee0 <HAL_DMA_Init+0x13c>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a45      	ldr	r2, [pc, #276]	; (8003ee4 <HAL_DMA_Init+0x140>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	009a      	lsls	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a42      	ldr	r2, [pc, #264]	; (8003ee8 <HAL_DMA_Init+0x144>)
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
 8003de0:	e00e      	b.n	8003e00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b40      	ldr	r3, [pc, #256]	; (8003eec <HAL_DMA_Init+0x148>)
 8003dea:	4413      	add	r3, r2
 8003dec:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <HAL_DMA_Init+0x140>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	009a      	lsls	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_DMA_Init+0x14c>)
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9b6 	bl	80041c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e60:	d102      	bne.n	8003e68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_DMA_Init+0x104>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d80c      	bhi.n	8003ea8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9d6 	bl	8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e008      	b.n	8003eba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40020407 	.word	0x40020407
 8003ee0:	bffdfff8 	.word	0xbffdfff8
 8003ee4:	cccccccd 	.word	0xcccccccd
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	bffdfbf8 	.word	0xbffdfbf8
 8003ef0:	40020400 	.word	0x40020400

08003ef4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMA_Start_IT+0x20>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e066      	b.n	8003fe2 <HAL_DMA_Start_IT+0xee>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d155      	bne.n	8003fd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f8fb 	bl	8004148 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 020e 	orr.w	r2, r2, #14
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e00f      	b.n	8003f8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0204 	bic.w	r2, r2, #4
 8003f7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 020a 	orr.w	r2, r2, #10
 8003f8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e005      	b.n	8003fe0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2204      	movs	r2, #4
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d026      	beq.n	8004064 <HAL_DMA_IRQHandler+0x7a>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d021      	beq.n	8004064 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0204 	bic.w	r2, r2, #4
 800403c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f003 021f 	and.w	r2, r3, #31
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2104      	movs	r1, #4
 800404c:	fa01 f202 	lsl.w	r2, r1, r2
 8004050:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	2b00      	cmp	r3, #0
 8004058:	d071      	beq.n	800413e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004062:	e06c      	b.n	800413e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2202      	movs	r2, #2
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02e      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d029      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020a 	bic.w	r2, r2, #10
 800409e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f003 021f 	and.w	r2, r3, #31
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	2102      	movs	r1, #2
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d038      	beq.n	800413e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040d4:	e033      	b.n	800413e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2208      	movs	r2, #8
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d02a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d025      	beq.n	8004140 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 020e 	bic.w	r2, r2, #14
 8004102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800413e:	bf00      	nop
 8004140:	bf00      	nop
}
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800415e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f003 021f 	and.w	r2, r3, #31
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b10      	cmp	r3, #16
 8004194:	d108      	bne.n	80041a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041a6:	e007      	b.n	80041b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d802      	bhi.n	80041de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e001      	b.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041e0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b08      	subs	r3, #8
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a0b      	ldr	r2, [pc, #44]	; (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800420e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2201      	movs	r2, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40020407 	.word	0x40020407
 8004230:	40020800 	.word	0x40020800
 8004234:	40020820 	.word	0x40020820
 8004238:	cccccccd 	.word	0xcccccccd
 800423c:	40020880 	.word	0x40020880

08004240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004262:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	1000823f 	.word	0x1000823f
 8004284:	40020940 	.word	0x40020940

08004288 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_FLASH_Program+0xa4>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_FLASH_Program+0x1e>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e03e      	b.n	8004324 <HAL_FLASH_Program+0x9c>
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_FLASH_Program+0xa4>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042b0:	f000 f87c 	bl	80043ac <FLASH_WaitForLastOperation>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d12e      	bne.n	800431c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_FLASH_Program+0xa4>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80042ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	f000 f8c0 	bl	8004454 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80042d4:	2301      	movs	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	e010      	b.n	80042fc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d002      	beq.n	80042e6 <HAL_FLASH_Program+0x5e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d10a      	bne.n	80042fc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	f000 f8d6 	bl	800449c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d102      	bne.n	80042fc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80042f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042fa:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004300:	f000 f854 	bl	80043ac <FLASH_WaitForLastOperation>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_FLASH_Program+0xa8>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	43db      	mvns	r3, r3
 8004316:	4906      	ldr	r1, [pc, #24]	; (8004330 <HAL_FLASH_Program+0xa8>)
 8004318:	4013      	ands	r3, r2
 800431a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_FLASH_Program+0xa4>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004322:	7dfb      	ldrb	r3, [r7, #23]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000010 	.word	0x20000010
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_FLASH_Unlock+0x38>)
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	da0b      	bge.n	800435e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_FLASH_Unlock+0x38>)
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <HAL_FLASH_Unlock+0x3c>)
 800434a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <HAL_FLASH_Unlock+0x38>)
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_FLASH_Unlock+0x40>)
 8004350:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_FLASH_Unlock+0x38>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da01      	bge.n	800435e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800435e:	79fb      	ldrb	r3, [r7, #7]
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40022000 	.word	0x40022000
 8004370:	45670123 	.word	0x45670123
 8004374:	cdef89ab 	.word	0xcdef89ab

08004378 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_FLASH_Lock+0x30>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_FLASH_Lock+0x30>)
 8004388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800438c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_FLASH_Lock+0x30>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da01      	bge.n	800439a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800439a:	79fb      	ldrb	r3, [r7, #7]
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40022000 	.word	0x40022000

080043ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7fd fe74 	bl	80020a0 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80043ba:	e009      	b.n	80043d0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80043bc:	f7fd fe70 	bl	80020a0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d201      	bcs.n	80043d0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e038      	b.n	8004442 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d0ee      	beq.n	80043bc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80043e6:	4013      	ands	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <FLASH_WaitForLastOperation+0xa4>)
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <FLASH_WaitForLastOperation+0xa4>)
 80043fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <FLASH_WaitForLastOperation+0x6a>
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	618b      	str	r3, [r1, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <FLASH_WaitForLastOperation+0x7e>
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004428:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e009      	b.n	8004442 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800443a:	4b04      	ldr	r3, [pc, #16]	; (800444c <FLASH_WaitForLastOperation+0xa0>)
 800443c:	2201      	movs	r2, #1
 800443e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40022000 	.word	0x40022000
 8004450:	20000010 	.word	0x20000010

08004454 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004454:	b490      	push	{r4, r7}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004460:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <FLASH_Program_DoubleWord+0x44>)
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <FLASH_Program_DoubleWord+0x44>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004472:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004476:	e9d7 1200 	ldrd	r1, r2, [r7]
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	0013      	movs	r3, r2
 8004484:	2400      	movs	r4, #0
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	3204      	adds	r2, #4
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bc90      	pop	{r4, r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000

0800449c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80044a6:	2340      	movs	r3, #64	; 0x40
 80044a8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <FLASH_Program_Fast+0x64>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <FLASH_Program_Fast+0x64>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044be:	f3ef 8310 	mrs	r3, PRIMASK
 80044c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80044c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80044c8:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3304      	adds	r3, #4
 80044d6:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3304      	adds	r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
    row_index--;
 80044de:	7ffb      	ldrb	r3, [r7, #31]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80044e4:	7ffb      	ldrb	r3, [r7, #31]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ef      	bne.n	80044ca <FLASH_Program_Fast+0x2e>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80044f4:	bf00      	nop
 80044f6:	3724      	adds	r7, #36	; 0x24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40022000 	.word	0x40022000

08004504 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800450e:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_FLASHEx_Erase+0x16>
 8004516:	2302      	movs	r3, #2
 8004518:	e089      	b.n	800462e <HAL_FLASHEx_Erase+0x12a>
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004524:	f7ff ff42 	bl	80043ac <FLASH_WaitForLastOperation>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d179      	bne.n	8004626 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004532:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 8004534:	2200      	movs	r2, #0
 8004536:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	2b00      	cmp	r3, #0
 8004542:	d019      	beq.n	8004578 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004544:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3c      	ldr	r2, [pc, #240]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 800454a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800454e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004550:	4b3a      	ldr	r3, [pc, #232]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a36      	ldr	r2, [pc, #216]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 8004562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004566:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 800456a:	2203      	movs	r2, #3
 800456c:	771a      	strb	r2, [r3, #28]
 800456e:	e016      	b.n	800459e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004570:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 8004572:	2201      	movs	r2, #1
 8004574:	771a      	strb	r2, [r3, #28]
 8004576:	e012      	b.n	800459e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d009      	beq.n	8004598 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004584:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2c      	ldr	r2, [pc, #176]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 800458a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 8004592:	2202      	movs	r2, #2
 8004594:	771a      	strb	r2, [r3, #28]
 8004596:	e002      	b.n	800459e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d111      	bne.n	80045ca <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f848 	bl	8004640 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b4:	f7ff fefa 	bl	80043ac <FLASH_WaitForLastOperation>
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80045bc:	4b1f      	ldr	r3, [pc, #124]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6153      	str	r3, [r2, #20]
 80045c8:	e02b      	b.n	8004622 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	e01b      	b.n	8004612 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4619      	mov	r1, r3
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f000 f84b 	bl	800467c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ea:	f7ff fedf 	bl	80043ac <FLASH_WaitForLastOperation>
 80045ee:	4603      	mov	r3, r0
 80045f0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_FLASHEx_Erase+0x138>)
 80045f8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80045fc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	601a      	str	r2, [r3, #0]
          break;
 800460a:	e00a      	b.n	8004622 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3301      	adds	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4413      	add	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d3db      	bcc.n	80045da <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004622:	f000 f84f 	bl	80046c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <HAL_FLASHEx_Erase+0x134>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000010 	.word	0x20000010
 800463c:	40022000 	.word	0x40022000

08004640 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <FLASH_MassErase+0x38>)
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <FLASH_MassErase+0x38>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <FLASH_MassErase+0x38>)
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <FLASH_MassErase+0x38>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6153      	str	r3, [r2, #20]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40022000 	.word	0x40022000

0800467c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <FLASH_PageErase+0x44>)
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004696:	490a      	ldr	r1, [pc, #40]	; (80046c0 <FLASH_PageErase+0x44>)
 8004698:	4313      	orrs	r3, r2
 800469a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <FLASH_PageErase+0x44>)
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <FLASH_PageErase+0x44>)
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <FLASH_PageErase+0x44>)
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <FLASH_PageErase+0x44>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	6153      	str	r3, [r2, #20]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40022000 	.word	0x40022000

080046c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80046ca:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <FLASH_FlushCaches+0x80>)
 80046cc:	7f1b      	ldrb	r3, [r3, #28]
 80046ce:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d002      	beq.n	80046dc <FLASH_FlushCaches+0x18>
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d111      	bne.n	8004700 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <FLASH_FlushCaches+0x84>)
 80046fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d002      	beq.n	800470c <FLASH_FlushCaches+0x48>
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d111      	bne.n	8004730 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <FLASH_FlushCaches+0x84>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <FLASH_FlushCaches+0x84>)
 8004712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <FLASH_FlushCaches+0x84>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <FLASH_FlushCaches+0x84>)
 800471e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004722:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <FLASH_FlushCaches+0x84>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <FLASH_FlushCaches+0x84>)
 800472a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800472e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <FLASH_FlushCaches+0x80>)
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000010 	.word	0x20000010
 8004748:	40022000 	.word	0x40022000

0800474c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800475a:	e15a      	b.n	8004a12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 814c 	beq.w	8004a0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d00b      	beq.n	8004794 <HAL_GPIO_Init+0x48>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d007      	beq.n	8004794 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004788:	2b11      	cmp	r3, #17
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b12      	cmp	r3, #18
 8004792:	d130      	bne.n	80047f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ca:	2201      	movs	r2, #1
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0201 	and.w	r2, r3, #1
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2203      	movs	r2, #3
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0xea>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b12      	cmp	r3, #18
 8004834:	d123      	bne.n	800487e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	6939      	ldr	r1, [r7, #16]
 800487a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2203      	movs	r2, #3
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80a6 	beq.w	8004a0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c0:	4b5b      	ldr	r3, [pc, #364]	; (8004a30 <HAL_GPIO_Init+0x2e4>)
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	4a5a      	ldr	r2, [pc, #360]	; (8004a30 <HAL_GPIO_Init+0x2e4>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6613      	str	r3, [r2, #96]	; 0x60
 80048cc:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <HAL_GPIO_Init+0x2e4>)
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d8:	4a56      	ldr	r2, [pc, #344]	; (8004a34 <HAL_GPIO_Init+0x2e8>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	220f      	movs	r2, #15
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004902:	d01f      	beq.n	8004944 <HAL_GPIO_Init+0x1f8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a4c      	ldr	r2, [pc, #304]	; (8004a38 <HAL_GPIO_Init+0x2ec>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d019      	beq.n	8004940 <HAL_GPIO_Init+0x1f4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a4b      	ldr	r2, [pc, #300]	; (8004a3c <HAL_GPIO_Init+0x2f0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_GPIO_Init+0x1f0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a4a      	ldr	r2, [pc, #296]	; (8004a40 <HAL_GPIO_Init+0x2f4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00d      	beq.n	8004938 <HAL_GPIO_Init+0x1ec>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a49      	ldr	r2, [pc, #292]	; (8004a44 <HAL_GPIO_Init+0x2f8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <HAL_GPIO_Init+0x1e8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a48      	ldr	r2, [pc, #288]	; (8004a48 <HAL_GPIO_Init+0x2fc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_GPIO_Init+0x1e4>
 800492c:	2305      	movs	r3, #5
 800492e:	e00a      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 8004930:	2306      	movs	r3, #6
 8004932:	e008      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 8004934:	2304      	movs	r3, #4
 8004936:	e006      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 8004938:	2303      	movs	r3, #3
 800493a:	e004      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 800493c:	2302      	movs	r3, #2
 800493e:	e002      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_GPIO_Init+0x1fa>
 8004944:	2300      	movs	r3, #0
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	f002 0203 	and.w	r2, r2, #3
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4093      	lsls	r3, r2
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004956:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_GPIO_Init+0x2e8>)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004964:	4b39      	ldr	r3, [pc, #228]	; (8004a4c <HAL_GPIO_Init+0x300>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	43db      	mvns	r3, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <HAL_GPIO_Init+0x300>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <HAL_GPIO_Init+0x300>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	43db      	mvns	r3, r3
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4013      	ands	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049b2:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <HAL_GPIO_Init+0x300>)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049b8:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_GPIO_Init+0x300>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_GPIO_Init+0x300>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_GPIO_Init+0x300>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a06:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <HAL_GPIO_Init+0x300>)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f ae9d 	bne.w	800475c <HAL_GPIO_Init+0x10>
  }
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40010000 	.word	0x40010000
 8004a38:	48000400 	.word	0x48000400
 8004a3c:	48000800 	.word	0x48000800
 8004a40:	48000c00 	.word	0x48000c00
 8004a44:	48001000 	.word	0x48001000
 8004a48:	48001400 	.word	0x48001400
 8004a4c:	40010400 	.word	0x40010400

08004a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e001      	b.n	8004a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a9c:	e002      	b.n	8004aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	43d9      	mvns	r1, r3
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae6:	b08b      	sub	sp, #44	; 0x2c
 8004ae8:	af06      	add	r7, sp, #24
 8004aea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0d7      	b.n	8004ca6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f008 f9da 	bl	800cec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 f908 	bl	8008d32 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	e04c      	b.n	8004bc2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	3301      	adds	r3, #1
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	7bfa      	ldrb	r2, [r7, #15]
 8004b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	b298      	uxth	r0, r3
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	440b      	add	r3, r1
 8004b64:	3336      	adds	r3, #54	; 0x36
 8004b66:	4602      	mov	r2, r0
 8004b68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	440b      	add	r3, r1
 8004b7a:	3303      	adds	r3, #3
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3338      	adds	r3, #56	; 0x38
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b94:	7bfa      	ldrb	r2, [r7, #15]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	440b      	add	r3, r1
 8004ba2:	333c      	adds	r3, #60	; 0x3c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3340      	adds	r3, #64	; 0x40
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3ad      	bcc.n	8004b28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	e044      	b.n	8004c5c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3b5      	bcc.n	8004bd2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	687e      	ldr	r6, [r7, #4]
 8004c6e:	466d      	mov	r5, sp
 8004c70:	f106 0410 	add.w	r4, r6, #16
 8004c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	1d33      	adds	r3, r6, #4
 8004c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c80:	6838      	ldr	r0, [r7, #0]
 8004c82:	f004 f871 	bl	8008d68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d102      	bne.n	8004ca4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f001 fa5e 	bl	8006160 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_PCD_Start+0x16>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e012      	b.n	8004cea <HAL_PCD_Start+0x3c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 f817 	bl	8008d04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f006 f803 	bl	800ace6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f006 f808 	bl	800ad14 <USB_ReadInterrupts>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0e:	d102      	bne.n	8004d16 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb5b 	bl	80053cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f005 fffa 	bl	800ad14 <USB_ReadInterrupts>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d112      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f008 f938 	bl	800cfba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f91e 	bl	8004f8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f005 ffdc 	bl	800ad14 <USB_ReadInterrupts>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d66:	d10b      	bne.n	8004d80 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d7a:	b292      	uxth	r2, r2
 8004d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 ffc5 	bl	800ad14 <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d94:	d10b      	bne.n	8004dae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da8:	b292      	uxth	r2, r2
 8004daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f005 ffae 	bl	800ad14 <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	d133      	bne.n	8004e2c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0204 	bic.w	r2, r2, #4
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0208 	bic.w	r2, r2, #8
 8004dee:	b292      	uxth	r2, r2
 8004df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e06:	2100      	movs	r1, #0
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f008 facb 	bl	800d3a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f008 f90c 	bl	800d02c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e26:	b292      	uxth	r2, r2
 8004e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f005 ff6f 	bl	800ad14 <USB_ReadInterrupts>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d126      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	b292      	uxth	r2, r2
 8004e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0204 	orr.w	r2, r2, #4
 8004e84:	b292      	uxth	r2, r2
 8004e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f008 f8b4 	bl	800cff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 ff3d 	bl	800ad14 <USB_ReadInterrupts>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d13f      	bne.n	8004f24 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eb6:	b292      	uxth	r2, r2
 8004eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d12b      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0204 	orr.w	r2, r2, #4
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0208 	orr.w	r2, r2, #8
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f008 fa44 	bl	800d3a4 <HAL_PCDEx_LPM_Callback>
 8004f1c:	e002      	b.n	8004f24 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f008 f86a 	bl	800cff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f005 fef3 	bl	800ad14 <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d10e      	bne.n	8004f58 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f008 f823 	bl	800cf9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 fed9 	bl	800ad14 <USB_ReadInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6c:	d10b      	bne.n	8004f86 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f80:	b292      	uxth	r2, r2
 8004f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_PCD_SetAddress+0x1a>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e013      	b.n	8004fd0 <HAL_PCD_SetAddress+0x42>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f005 fe7c 	bl	800acbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	70fb      	strb	r3, [r7, #3]
 8004fea:	460b      	mov	r3, r1
 8004fec:	803b      	strh	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0e      	bge.n	800501c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	705a      	strb	r2, [r3, #1]
 800501a:	e00e      	b.n	800503a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 0207 	and.w	r2, r3, #7
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005046:	883a      	ldrh	r2, [r7, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	78ba      	ldrb	r2, [r7, #2]
 8005050:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005064:	78bb      	ldrb	r3, [r7, #2]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d102      	bne.n	8005070 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_PCD_EP_Open+0xa6>
 800507a:	2302      	movs	r3, #2
 800507c:	e00e      	b.n	800509c <HAL_PCD_EP_Open+0xc4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	4618      	mov	r0, r3
 800508e:	f003 fe8d 	bl	8008dac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800509a:	7afb      	ldrb	r3, [r7, #11]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0e      	bge.n	80050d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	705a      	strb	r2, [r3, #1]
 80050d4:	e00e      	b.n	80050f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 0207 	and.w	r2, r3, #7
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	4413      	add	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_PCD_EP_Close+0x6a>
 800510a:	2302      	movs	r3, #2
 800510c:	e00e      	b.n	800512c <HAL_PCD_EP_Close+0x88>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	4618      	mov	r0, r3
 800511e:	f004 f9b3 	bl	8009488 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	460b      	mov	r3, r1
 8005142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	b2da      	uxtb	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	4618      	mov	r0, r3
 8005192:	f004 fb66 	bl	8009862 <USB_EPStartXfer>
 8005196:	e005      	b.n	80051a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	4618      	mov	r0, r3
 80051a0:	f004 fb5f 	bl	8009862 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	f003 0207 	and.w	r2, r3, #7
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80051d0:	681b      	ldr	r3, [r3, #0]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	460b      	mov	r3, r1
 80051ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ee:	7afb      	ldrb	r3, [r7, #11]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2201      	movs	r2, #1
 8005228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	b2da      	uxtb	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005236:	7afb      	ldrb	r3, [r7, #11]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6979      	ldr	r1, [r7, #20]
 8005246:	4618      	mov	r0, r3
 8005248:	f004 fb0b 	bl	8009862 <USB_EPStartXfer>
 800524c:	e005      	b.n	800525a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	4618      	mov	r0, r3
 8005256:	f004 fb04 	bl	8009862 <USB_EPStartXfer>
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d901      	bls.n	8005282 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04c      	b.n	800531c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005286:	2b00      	cmp	r3, #0
 8005288:	da0e      	bge.n	80052a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	705a      	strb	r2, [r3, #1]
 80052a6:	e00c      	b.n	80052c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_PCD_EP_SetStall+0x7e>
 80052de:	2302      	movs	r3, #2
 80052e0:	e01c      	b.n	800531c <HAL_PCD_EP_SetStall+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f005 fbe5 	bl	800aac0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d108      	bne.n	8005312 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f005 fd11 	bl	800ad34 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d901      	bls.n	8005342 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e040      	b.n	80053c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da0e      	bge.n	8005368 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	705a      	strb	r2, [r3, #1]
 8005366:	e00e      	b.n	8005386 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	f003 0207 	and.w	r2, r3, #7
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_PCD_EP_ClrStall+0x82>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e00e      	b.n	80053c4 <HAL_PCD_EP_ClrStall+0xa0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f005 fbd4 	bl	800ab62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053d4:	e2d1      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053de:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80053e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80053ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 8152 	bne.w	800569a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80053f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d150      	bne.n	80054a2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	81fb      	strh	r3, [r7, #14]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	89fb      	ldrh	r3, [r7, #14]
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29b      	uxth	r3, r3
 8005422:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3328      	adds	r3, #40	; 0x28
 8005428:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	4413      	add	r3, r2
 8005444:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	441a      	add	r2, r3
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005460:	2100      	movs	r1, #0
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f007 fd81 	bl	800cf6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8282 	beq.w	800597a <PCD_EP_ISR_Handler+0x5ae>
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 827d 	bne.w	800597a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800548c:	b2da      	uxtb	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b292      	uxth	r2, r2
 8005494:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054a0:	e26b      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d032      	beq.n	8005522 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f005 fc69 	bl	800adce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005508:	4013      	ands	r3, r2
 800550a:	823b      	strh	r3, [r7, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	8a3a      	ldrh	r2, [r7, #16]
 8005512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005516:	b292      	uxth	r2, r2
 8005518:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f007 fcf8 	bl	800cf10 <HAL_PCD_SetupStageCallback>
 8005520:	e22b      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005522:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005526:	2b00      	cmp	r3, #0
 8005528:	f280 8227 	bge.w	800597a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29a      	uxth	r2, r3
 8005534:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005538:	4013      	ands	r3, r2
 800553a:	83bb      	strh	r3, [r7, #28]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	8bba      	ldrh	r2, [r7, #28]
 8005542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005546:	b292      	uxth	r2, r2
 8005548:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	4413      	add	r3, r2
 8005564:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d019      	beq.n	80055ae <PCD_EP_ISR_Handler+0x1e2>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d015      	beq.n	80055ae <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005592:	b29b      	uxth	r3, r3
 8005594:	f005 fc1b 	bl	800adce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	441a      	add	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f007 fcc3 	bl	800cf34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	4413      	add	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d112      	bne.n	80055fc <PCD_EP_ISR_Handler+0x230>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e02f      	b.n	800565c <PCD_EP_ISR_Handler+0x290>
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b3e      	cmp	r3, #62	; 0x3e
 8005602:	d813      	bhi.n	800562c <PCD_EP_ISR_Handler+0x260>
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <PCD_EP_ISR_Handler+0x252>
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	3301      	adds	r3, #1
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29a      	uxth	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e017      	b.n	800565c <PCD_EP_ISR_Handler+0x290>
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	633b      	str	r3, [r7, #48]	; 0x30
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <PCD_EP_ISR_Handler+0x27a>
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	3b01      	subs	r3, #1
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	b29b      	uxth	r3, r3
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005656:	b29a      	uxth	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	827b      	strh	r3, [r7, #18]
 800566e:	8a7b      	ldrh	r3, [r7, #18]
 8005670:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005674:	827b      	strh	r3, [r7, #18]
 8005676:	8a7b      	ldrh	r3, [r7, #18]
 8005678:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800567c:	827b      	strh	r3, [r7, #18]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	8a7b      	ldrh	r3, [r7, #18]
 8005684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005694:	b29b      	uxth	r3, r3
 8005696:	8013      	strh	r3, [r2, #0]
 8005698:	e16f      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f280 80e4 	bge.w	800587e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056cc:	4013      	ands	r3, r2
 80056ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80056e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056e4:	b292      	uxth	r2, r2
 80056e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80056e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	7b1b      	ldrb	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d120      	bne.n	8005748 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4413      	add	r3, r2
 8005720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800572a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800572c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 8083 	beq.w	800583a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	6959      	ldr	r1, [r3, #20]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	88da      	ldrh	r2, [r3, #6]
 8005740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005742:	f005 fb44 	bl	800adce <USB_ReadPMA>
 8005746:	e078      	b.n	800583a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	78db      	ldrb	r3, [r3, #3]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d108      	bne.n	8005762 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005752:	461a      	mov	r2, r3
 8005754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f91d 	bl	8005996 <HAL_PCD_EP_DB_Receive>
 800575c:	4603      	mov	r3, r0
 800575e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005760:	e06b      	b.n	800583a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577c:	847b      	strh	r3, [r7, #34]	; 0x22
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800578e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01f      	beq.n	80057fc <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80057e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d028      	beq.n	800583a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	6959      	ldr	r1, [r3, #20]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	891a      	ldrh	r2, [r3, #8]
 80057f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f6:	f005 faea 	bl	800adce <USB_ReadPMA>
 80057fa:	e01e      	b.n	800583a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4413      	add	r3, r2
 8005816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005820:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	6959      	ldr	r1, [r3, #20]
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	895a      	ldrh	r2, [r3, #10]
 8005834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005836:	f005 faca 	bl	800adce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005840:	441a      	add	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800584c:	441a      	add	r2, r3
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <PCD_EP_ISR_Handler+0x498>
 800585a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d206      	bcs.n	8005872 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f007 fb62 	bl	800cf34 <HAL_PCD_DataOutStageCallback>
 8005870:	e005      	b.n	800587e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f003 fff2 	bl	8009862 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800587e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d078      	beq.n	800597a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8005888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4413      	add	r3, r2
 800589a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	843b      	strh	r3, [r7, #32]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	441a      	add	r2, r3
 80058c6:	8c3b      	ldrh	r3, [r7, #32]
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	78db      	ldrb	r3, [r3, #3]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d108      	bne.n	80058ee <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d144      	bne.n	800596e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80058e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d13f      	bne.n	800596e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	4413      	add	r3, r2
 8005908:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005912:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	8bfb      	ldrh	r3, [r7, #30]
 800591a:	429a      	cmp	r2, r3
 800591c:	d906      	bls.n	800592c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	8bfb      	ldrh	r3, [r7, #30]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	619a      	str	r2, [r3, #24]
 800592a:	e002      	b.n	8005932 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	2200      	movs	r2, #0
 8005930:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f007 fb12 	bl	800cf6a <HAL_PCD_DataInStageCallback>
 8005946:	e018      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	8bfb      	ldrh	r3, [r7, #30]
 800594e:	441a      	add	r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	8bfb      	ldrh	r3, [r7, #30]
 800595a:	441a      	add	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005966:	4618      	mov	r0, r3
 8005968:	f003 ff7b 	bl	8009862 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800596c:	e005      	b.n	800597a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800596e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005970:	461a      	mov	r2, r3
 8005972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f917 	bl	8005ba8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005982:	b29b      	uxth	r3, r3
 8005984:	b21b      	sxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	f6ff ad25 	blt.w	80053d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3738      	adds	r7, #56	; 0x38
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b088      	sub	sp, #32
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d07c      	beq.n	8005aa8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	8b7b      	ldrh	r3, [r7, #26]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d306      	bcc.n	80059ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	8b7b      	ldrh	r3, [r7, #26]
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	619a      	str	r2, [r3, #24]
 80059ea:	e002      	b.n	80059f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d123      	bne.n	8005a42 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	833b      	strh	r3, [r7, #24]
 8005a16:	8b3b      	ldrh	r3, [r7, #24]
 8005a18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a1c:	833b      	strh	r3, [r7, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	441a      	add	r2, r3
 8005a2c:	8b3b      	ldrh	r3, [r7, #24]
 8005a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01f      	beq.n	8005a8c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	82fb      	strh	r3, [r7, #22]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a8c:	8b7b      	ldrh	r3, [r7, #26]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8085 	beq.w	8005b9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6959      	ldr	r1, [r3, #20]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	891a      	ldrh	r2, [r3, #8]
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	f005 f994 	bl	800adce <USB_ReadPMA>
 8005aa6:	e07a      	b.n	8005b9e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005acc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d306      	bcc.n	8005ae6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	8b7b      	ldrh	r3, [r7, #26]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	e002      	b.n	8005aec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d123      	bne.n	8005b3c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	83fb      	strh	r3, [r7, #30]
 8005b10:	8bfb      	ldrh	r3, [r7, #30]
 8005b12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b16:	83fb      	strh	r3, [r7, #30]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	8bfb      	ldrh	r3, [r7, #30]
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d11f      	bne.n	8005b86 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b60:	83bb      	strh	r3, [r7, #28]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8bbb      	ldrh	r3, [r7, #28]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b86:	8b7b      	ldrh	r3, [r7, #26]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6959      	ldr	r1, [r3, #20]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	895a      	ldrh	r2, [r3, #10]
 8005b98:	8b7b      	ldrh	r3, [r7, #26]
 8005b9a:	f005 f918 	bl	800adce <USB_ReadPMA>
    }
  }

  return count;
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b092      	sub	sp, #72	; 0x48
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8130 	beq.w	8005e22 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005be6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d906      	bls.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	619a      	str	r2, [r3, #24]
 8005bfe:	e002      	b.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d12c      	bne.n	8005c68 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f007 f9a8 	bl	800cf6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 822d 	beq.w	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	827b      	strh	r3, [r7, #18]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8a7b      	ldrh	r3, [r7, #18]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
 8005c66:	e20b      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01f      	beq.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 81e1 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d309      	bcc.n	8005cf6 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	621a      	str	r2, [r3, #32]
 8005cf4:	e014      	b.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8005cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d0a:	e009      	b.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d155      	bne.n	8005dd4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	00da      	lsls	r2, r3, #3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d112      	bne.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e047      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x264>
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d80:	d811      	bhi.n	8005da6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	3301      	adds	r3, #1
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	e032      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x264>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x214>
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	3b01      	subs	r3, #1
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e01b      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x264>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d117      	bne.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x264>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	4413      	add	r3, r2
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	00da      	lsls	r2, r3, #3
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6959      	ldr	r1, [r3, #20]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	891a      	ldrh	r2, [r3, #8]
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f004 ff96 	bl	800ad4c <USB_WritePMA>
 8005e20:	e12e      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e46:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d306      	bcc.n	8005e60 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e58:	1ad2      	subs	r2, r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	619a      	str	r2, [r3, #24]
 8005e5e:	e002      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d12c      	bne.n	8005ec8 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f007 f878 	bl	800cf6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 80fd 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
 8005ec6:	e0db      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11f      	bne.n	8005f12 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 80b1 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f24:	441a      	add	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	69da      	ldr	r2, [r3, #28]
 8005f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f30:	441a      	add	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d309      	bcc.n	8005f56 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	621a      	str	r2, [r3, #32]
 8005f54:	e014      	b.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8005f5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f6a:	e009      	b.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d155      	bne.n	800603a <HAL_PCD_EP_DB_Transmit+0x492>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	647b      	str	r3, [r7, #68]	; 0x44
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	4413      	add	r3, r2
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	00da      	lsls	r2, r3, #3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d112      	bne.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x43a>
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e044      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe6:	d811      	bhi.n	800600c <HAL_PCD_EP_DB_Transmit+0x464>
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_PCD_EP_DB_Transmit+0x456>
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	b29b      	uxth	r3, r3
 8006002:	029b      	lsls	r3, r3, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e02f      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_PCD_EP_DB_Transmit+0x47a>
 800601c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601e:	3b01      	subs	r3, #1
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e018      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d114      	bne.n	800606c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	4413      	add	r3, r2
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	00da      	lsls	r2, r3, #3
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	4413      	add	r3, r2
 800605e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006062:	633b      	str	r3, [r7, #48]	; 0x30
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	b29a      	uxth	r2, r3
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6959      	ldr	r1, [r3, #20]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	895a      	ldrh	r2, [r3, #10]
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	b29b      	uxth	r3, r3
 800607c:	f004 fe66 	bl	800ad4c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	823b      	strh	r3, [r7, #16]
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	f083 0310 	eor.w	r3, r3, #16
 80060a2:	823b      	strh	r3, [r7, #16]
 80060a4:	8a3b      	ldrh	r3, [r7, #16]
 80060a6:	f083 0320 	eor.w	r3, r3, #32
 80060aa:	823b      	strh	r3, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	8a3b      	ldrh	r3, [r7, #16]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3748      	adds	r7, #72	; 0x48
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	817b      	strh	r3, [r7, #10]
 80060e8:	4613      	mov	r3, r2
 80060ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	897b      	ldrh	r3, [r7, #10]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e009      	b.n	8006124 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006110:	897a      	ldrh	r2, [r7, #10]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006124:	893b      	ldrh	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	b29a      	uxth	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	80da      	strh	r2, [r3, #6]
 8006138:	e00b      	b.n	8006152 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2201      	movs	r2, #1
 800613e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	b29a      	uxth	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	b29a      	uxth	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006184:	b29b      	uxth	r3, r3
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006198:	b29b      	uxth	r3, r3
 800619a:	f043 0302 	orr.w	r3, r3, #2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d141      	bne.n	8006246 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061c2:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ce:	d131      	bne.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d0:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d6:	4a46      	ldr	r2, [pc, #280]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e0:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061e8:	4a41      	ldr	r2, [pc, #260]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f0:	4b40      	ldr	r3, [pc, #256]	; (80062f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2232      	movs	r2, #50	; 0x32
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	0c9b      	lsrs	r3, r3, #18
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006206:	e002      	b.n	800620e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b01      	subs	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620e:	4b38      	ldr	r3, [pc, #224]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621a:	d102      	bne.n	8006222 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f2      	bne.n	8006208 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006222:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622e:	d158      	bne.n	80062e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e057      	b.n	80062e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006234:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800623a:	4a2d      	ldr	r2, [pc, #180]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006244:	e04d      	b.n	80062e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624c:	d141      	bne.n	80062d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800624e:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625a:	d131      	bne.n	80062c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800625c:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006262:	4a23      	ldr	r2, [pc, #140]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800626c:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006274:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800627a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2232      	movs	r2, #50	; 0x32
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	0c9b      	lsrs	r3, r3, #18
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006292:	e002      	b.n	800629a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3b01      	subs	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800629a:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a6:	d102      	bne.n	80062ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f2      	bne.n	8006294 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d112      	bne.n	80062e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e011      	b.n	80062e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c6:	4a0a      	ldr	r2, [pc, #40]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80062d0:	e007      	b.n	80062e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062da:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40007000 	.word	0x40007000
 80062f4:	20000004 	.word	0x20000004
 80062f8:	431bde83 	.word	0x431bde83

080062fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800630a:	6093      	str	r3, [r2, #8]
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40007000 	.word	0x40007000

0800631c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e308      	b.n	8006940 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d075      	beq.n	8006426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800633a:	4ba3      	ldr	r3, [pc, #652]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
 8006342:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006344:	4ba0      	ldr	r3, [pc, #640]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d102      	bne.n	800635a <HAL_RCC_OscConfig+0x3e>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d002      	beq.n	8006360 <HAL_RCC_OscConfig+0x44>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d10b      	bne.n	8006378 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	4b99      	ldr	r3, [pc, #612]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05b      	beq.n	8006424 <HAL_RCC_OscConfig+0x108>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d157      	bne.n	8006424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e2e3      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d106      	bne.n	8006390 <HAL_RCC_OscConfig+0x74>
 8006382:	4b91      	ldr	r3, [pc, #580]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a90      	ldr	r2, [pc, #576]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e01d      	b.n	80063cc <HAL_RCC_OscConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006398:	d10c      	bne.n	80063b4 <HAL_RCC_OscConfig+0x98>
 800639a:	4b8b      	ldr	r3, [pc, #556]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a8a      	ldr	r2, [pc, #552]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a87      	ldr	r2, [pc, #540]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e00b      	b.n	80063cc <HAL_RCC_OscConfig+0xb0>
 80063b4:	4b84      	ldr	r3, [pc, #528]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a83      	ldr	r2, [pc, #524]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b81      	ldr	r3, [pc, #516]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a80      	ldr	r2, [pc, #512]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fe64 	bl	80020a0 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fb fe60 	bl	80020a0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e2a8      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ee:	4b76      	ldr	r3, [pc, #472]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0xc0>
 80063fa:	e014      	b.n	8006426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fb fe50 	bl	80020a0 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006404:	f7fb fe4c 	bl	80020a0 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	; 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e294      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006416:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0xe8>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d075      	beq.n	800651e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006432:	4b65      	ldr	r3, [pc, #404]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800643c:	4b62      	ldr	r3, [pc, #392]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d102      	bne.n	8006452 <HAL_RCC_OscConfig+0x136>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d002      	beq.n	8006458 <HAL_RCC_OscConfig+0x13c>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d11f      	bne.n	8006498 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_RCC_OscConfig+0x154>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e267      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006470:	4b55      	ldr	r3, [pc, #340]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	061b      	lsls	r3, r3, #24
 800647e:	4952      	ldr	r1, [pc, #328]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006480:	4313      	orrs	r3, r2
 8006482:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006484:	4b51      	ldr	r3, [pc, #324]	; (80065cc <HAL_RCC_OscConfig+0x2b0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7fb fdbd 	bl	8002008 <HAL_InitTick>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d043      	beq.n	800651c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e253      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d023      	beq.n	80064e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a0:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a48      	ldr	r2, [pc, #288]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fb fdf8 	bl	80020a0 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fb fdf4 	bl	80020a0 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e23c      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064c6:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	4939      	ldr	r1, [pc, #228]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	604b      	str	r3, [r1, #4]
 80064e6:	e01a      	b.n	800651e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e8:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a36      	ldr	r2, [pc, #216]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80064ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb fdd4 	bl	80020a0 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064fc:	f7fb fdd0 	bl	80020a0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e218      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x1e0>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d03c      	beq.n	80065a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01c      	beq.n	800656c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006532:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006542:	f7fb fdad 	bl	80020a0 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654a:	f7fb fda9 	bl	80020a0 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e1f1      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ef      	beq.n	800654a <HAL_RCC_OscConfig+0x22e>
 800656a:	e01b      	b.n	80065a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 800656e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657c:	f7fb fd90 	bl	80020a0 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006584:	f7fb fd8c 	bl	80020a0 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e1d4      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ef      	bne.n	8006584 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80ab 	beq.w	8006708 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <HAL_RCC_OscConfig+0x2ac>)
 80065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_RCC_OscConfig+0x2b4>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e005      	b.n	80065d2 <HAL_RCC_OscConfig+0x2b6>
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	20000008 	.word	0x20000008
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	4baf      	ldr	r3, [pc, #700]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	4aae      	ldr	r2, [pc, #696]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	6593      	str	r3, [r2, #88]	; 0x58
 80065e2:	4bac      	ldr	r3, [pc, #688]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80065e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065ee:	2301      	movs	r3, #1
 80065f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065f2:	4ba9      	ldr	r3, [pc, #676]	; (8006898 <HAL_RCC_OscConfig+0x57c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d118      	bne.n	8006630 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065fe:	4ba6      	ldr	r3, [pc, #664]	; (8006898 <HAL_RCC_OscConfig+0x57c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4aa5      	ldr	r2, [pc, #660]	; (8006898 <HAL_RCC_OscConfig+0x57c>)
 8006604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800660a:	f7fb fd49 	bl	80020a0 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006612:	f7fb fd45 	bl	80020a0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e18d      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006624:	4b9c      	ldr	r3, [pc, #624]	; (8006898 <HAL_RCC_OscConfig+0x57c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d108      	bne.n	800664a <HAL_RCC_OscConfig+0x32e>
 8006638:	4b96      	ldr	r3, [pc, #600]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	4a95      	ldr	r2, [pc, #596]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006648:	e024      	b.n	8006694 <HAL_RCC_OscConfig+0x378>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b05      	cmp	r3, #5
 8006650:	d110      	bne.n	8006674 <HAL_RCC_OscConfig+0x358>
 8006652:	4b90      	ldr	r3, [pc, #576]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	4a8e      	ldr	r2, [pc, #568]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800665a:	f043 0304 	orr.w	r3, r3, #4
 800665e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006662:	4b8c      	ldr	r3, [pc, #560]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	4a8a      	ldr	r2, [pc, #552]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006672:	e00f      	b.n	8006694 <HAL_RCC_OscConfig+0x378>
 8006674:	4b87      	ldr	r3, [pc, #540]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667a:	4a86      	ldr	r2, [pc, #536]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800667c:	f023 0301 	bic.w	r3, r3, #1
 8006680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006684:	4b83      	ldr	r3, [pc, #524]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668a:	4a82      	ldr	r2, [pc, #520]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800668c:	f023 0304 	bic.w	r3, r3, #4
 8006690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d016      	beq.n	80066ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669c:	f7fb fd00 	bl	80020a0 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a4:	f7fb fcfc 	bl	80020a0 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e142      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ba:	4b76      	ldr	r3, [pc, #472]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0ed      	beq.n	80066a4 <HAL_RCC_OscConfig+0x388>
 80066c8:	e015      	b.n	80066f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7fb fce9 	bl	80020a0 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fb fce5 	bl	80020a0 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e12b      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066e8:	4b6a      	ldr	r3, [pc, #424]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ed      	bne.n	80066d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d105      	bne.n	8006708 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fc:	4b65      	ldr	r3, [pc, #404]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	4a64      	ldr	r2, [pc, #400]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006706:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d03c      	beq.n	800678e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01c      	beq.n	8006756 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800671c:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800671e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006722:	4a5c      	ldr	r2, [pc, #368]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fb fcb8 	bl	80020a0 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006734:	f7fb fcb4 	bl	80020a0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e0fc      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006746:	4b53      	ldr	r3, [pc, #332]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0ef      	beq.n	8006734 <HAL_RCC_OscConfig+0x418>
 8006754:	e01b      	b.n	800678e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006756:	4b4f      	ldr	r3, [pc, #316]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800675c:	4a4d      	ldr	r2, [pc, #308]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006766:	f7fb fc9b 	bl	80020a0 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800676e:	f7fb fc97 	bl	80020a0 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e0df      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006780:	4b44      	ldr	r3, [pc, #272]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1ef      	bne.n	800676e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80d3 	beq.w	800693e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	f000 808d 	beq.w	80068c0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d15a      	bne.n	8006864 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ae:	4b39      	ldr	r3, [pc, #228]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a38      	ldr	r2, [pc, #224]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80067b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fb fc71 	bl	80020a0 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fb fc6d 	bl	80020a0 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e0b5      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d4:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f0      	bne.n	80067c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e0:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	4b2d      	ldr	r3, [pc, #180]	; (800689c <HAL_RCC_OscConfig+0x580>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6a11      	ldr	r1, [r2, #32]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067f0:	3a01      	subs	r2, #1
 80067f2:	0112      	lsls	r2, r2, #4
 80067f4:	4311      	orrs	r1, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80067fa:	0212      	lsls	r2, r2, #8
 80067fc:	4311      	orrs	r1, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006802:	0852      	lsrs	r2, r2, #1
 8006804:	3a01      	subs	r2, #1
 8006806:	0552      	lsls	r2, r2, #21
 8006808:	4311      	orrs	r1, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800680e:	0852      	lsrs	r2, r2, #1
 8006810:	3a01      	subs	r2, #1
 8006812:	0652      	lsls	r2, r2, #25
 8006814:	4311      	orrs	r1, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800681a:	06d2      	lsls	r2, r2, #27
 800681c:	430a      	orrs	r2, r1
 800681e:	491d      	ldr	r1, [pc, #116]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006820:	4313      	orrs	r3, r2
 8006822:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006824:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800682a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800682e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006830:	4b18      	ldr	r3, [pc, #96]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4a17      	ldr	r2, [pc, #92]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800683a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fb fc30 	bl	80020a0 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006844:	f7fb fc2c 	bl	80020a0 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e074      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x528>
 8006862:	e06c      	b.n	800693e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800686a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800686e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4a07      	ldr	r2, [pc, #28]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <HAL_RCC_OscConfig+0x578>)
 8006882:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fb fc08 	bl	80020a0 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006892:	e00e      	b.n	80068b2 <HAL_RCC_OscConfig+0x596>
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
 800689c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a0:	f7fb fbfe 	bl	80020a0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e046      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068b2:	4b25      	ldr	r3, [pc, #148]	; (8006948 <HAL_RCC_OscConfig+0x62c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x584>
 80068be:	e03e      	b.n	800693e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e039      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068cc:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <HAL_RCC_OscConfig+0x62c>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f003 0203 	and.w	r2, r3, #3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d12c      	bne.n	800693a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	3b01      	subs	r3, #1
 80068ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d123      	bne.n	800693a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068fe:	429a      	cmp	r2, r3
 8006900:	d11b      	bne.n	800693a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d113      	bne.n	800693a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	3b01      	subs	r3, #1
 8006920:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006922:	429a      	cmp	r2, r3
 8006924:	d109      	bne.n	800693a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	3b01      	subs	r3, #1
 8006934:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000

0800694c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e11e      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006964:	4b91      	ldr	r3, [pc, #580]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d910      	bls.n	8006994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006972:	4b8e      	ldr	r3, [pc, #568]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f023 020f 	bic.w	r2, r3, #15
 800697a:	498c      	ldr	r1, [pc, #560]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006982:	4b8a      	ldr	r3, [pc, #552]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d001      	beq.n	8006994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e106      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d073      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d129      	bne.n	80069fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a8:	4b81      	ldr	r3, [pc, #516]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0f4      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069b8:	f000 f99e 	bl	8006cf8 <RCC_GetSysClockFreqFromPLLSource>
 80069bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4a7c      	ldr	r2, [pc, #496]	; (8006bb4 <HAL_RCC_ClockConfig+0x268>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d93f      	bls.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069c6:	4b7a      	ldr	r3, [pc, #488]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d033      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d12f      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069e6:	4b72      	ldr	r3, [pc, #456]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ee:	4a70      	ldr	r2, [pc, #448]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 80069f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069f6:	2380      	movs	r3, #128	; 0x80
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e024      	b.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d107      	bne.n	8006a14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a04:	4b6a      	ldr	r3, [pc, #424]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0c6      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a14:	4b66      	ldr	r3, [pc, #408]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e0be      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a24:	f000 f8ce 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4a61      	ldr	r2, [pc, #388]	; (8006bb4 <HAL_RCC_ClockConfig+0x268>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d909      	bls.n	8006a46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a32:	4b5f      	ldr	r3, [pc, #380]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	4a5d      	ldr	r2, [pc, #372]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	4b5a      	ldr	r3, [pc, #360]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0203 	bic.w	r2, r3, #3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4957      	ldr	r1, [pc, #348]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a58:	f7fb fb22 	bl	80020a0 <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7fb fb1e 	bl	80020a0 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e095      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	4b4e      	ldr	r3, [pc, #312]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 020c 	and.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1eb      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d023      	beq.n	8006adc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aa0:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4a42      	ldr	r2, [pc, #264]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006aaa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ab8:	4b3d      	ldr	r3, [pc, #244]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ac0:	4a3b      	ldr	r2, [pc, #236]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac8:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4936      	ldr	r1, [pc, #216]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	608b      	str	r3, [r1, #8]
 8006ada:	e008      	b.n	8006aee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d105      	bne.n	8006aee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ae2:	4b33      	ldr	r3, [pc, #204]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4a32      	ldr	r2, [pc, #200]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aee:	4b2f      	ldr	r3, [pc, #188]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d21d      	bcs.n	8006b38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afc:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f023 020f 	bic.w	r2, r3, #15
 8006b04:	4929      	ldr	r1, [pc, #164]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b0c:	f7fb fac8 	bl	80020a0 <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b14:	f7fb fac4 	bl	80020a0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e03b      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1ed      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b44:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	4917      	ldr	r1, [pc, #92]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	490f      	ldr	r1, [pc, #60]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b76:	f000 f825 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <HAL_RCC_ClockConfig+0x264>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	4a0c      	ldr	r2, [pc, #48]	; (8006bb8 <HAL_RCC_ClockConfig+0x26c>)
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8006b92:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <HAL_RCC_ClockConfig+0x270>)
 8006b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <HAL_RCC_ClockConfig+0x274>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fb fa34 	bl	8002008 <HAL_InitTick>
 8006ba0:	4603      	mov	r3, r0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40022000 	.word	0x40022000
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	04c4b400 	.word	0x04c4b400
 8006bb8:	0800df18 	.word	0x0800df18
 8006bbc:	20000004 	.word	0x20000004
 8006bc0:	20000008 	.word	0x20000008

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bca:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d102      	bne.n	8006bdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	e047      	b.n	8006c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006bdc:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d102      	bne.n	8006bee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be8:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	e03e      	b.n	8006c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006bee:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	2b0c      	cmp	r3, #12
 8006bf8:	d136      	bne.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bfa:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c04:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	091b      	lsrs	r3, r3, #4
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d10c      	bne.n	8006c32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c18:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c22:	68d2      	ldr	r2, [r2, #12]
 8006c24:	0a12      	lsrs	r2, r2, #8
 8006c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c2a:	fb02 f303 	mul.w	r3, r2, r3
 8006c2e:	617b      	str	r3, [r7, #20]
      break;
 8006c30:	e00c      	b.n	8006c4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c32:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c3c:	68d2      	ldr	r2, [r2, #12]
 8006c3e:	0a12      	lsrs	r2, r2, #8
 8006c40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	617b      	str	r3, [r7, #20]
      break;
 8006c4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	0e5b      	lsrs	r3, r3, #25
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	3301      	adds	r3, #1
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	e001      	b.n	8006c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c6c:	693b      	ldr	r3, [r7, #16]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	00f42400 	.word	0x00f42400
 8006c84:	007a1200 	.word	0x007a1200

08006c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c8c:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000004 	.word	0x20000004

08006ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ca4:	f7ff fff0 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 8006ca8:	4601      	mov	r1, r0
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	0800df28 	.word	0x0800df28

08006ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cd0:	f7ff ffda 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	0adb      	lsrs	r3, r3, #11
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	0800df28 	.word	0x0800df28

08006cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d10c      	bne.n	8006d36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d1c:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d26:	68d2      	ldr	r2, [r2, #12]
 8006d28:	0a12      	lsrs	r2, r2, #8
 8006d2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	617b      	str	r3, [r7, #20]
    break;
 8006d34:	e00c      	b.n	8006d50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	4a0e      	ldr	r2, [pc, #56]	; (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d40:	68d2      	ldr	r2, [r2, #12]
 8006d42:	0a12      	lsrs	r2, r2, #8
 8006d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	617b      	str	r3, [r7, #20]
    break;
 8006d4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d50:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	0e5b      	lsrs	r3, r3, #25
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d6a:	687b      	ldr	r3, [r7, #4]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	007a1200 	.word	0x007a1200
 8006d80:	00f42400 	.word	0x00f42400

08006d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d90:	2300      	movs	r3, #0
 8006d92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8098 	beq.w	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006da2:	2300      	movs	r3, #0
 8006da4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da6:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10d      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db2:	4b40      	ldr	r3, [pc, #256]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	4a3f      	ldr	r2, [pc, #252]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dce:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a39      	ldr	r2, [pc, #228]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dda:	f7fb f961 	bl	80020a0 <HAL_GetTick>
 8006dde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006de0:	e009      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de2:	f7fb f95d 	bl	80020a0 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d902      	bls.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	74fb      	strb	r3, [r7, #19]
        break;
 8006df4:	e005      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df6:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ef      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e02:	7cfb      	ldrb	r3, [r7, #19]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d159      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01e      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d019      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e24:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e40:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e46:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e50:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e62:	f7fb f91d 	bl	80020a0 <HAL_GetTick>
 8006e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e68:	e00b      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e6a:	f7fb f919 	bl	80020a0 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d902      	bls.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8006e80:	e006      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0ec      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e90:	7cfb      	ldrb	r3, [r7, #19]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	4903      	ldr	r1, [pc, #12]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006eac:	e008      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006eae:	7cfb      	ldrb	r3, [r7, #19]
 8006eb0:	74bb      	strb	r3, [r7, #18]
 8006eb2:	e005      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ec0:	7c7b      	ldrb	r3, [r7, #17]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d105      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec6:	4ba6      	ldr	r3, [pc, #664]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	4aa5      	ldr	r2, [pc, #660]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ede:	4ba0      	ldr	r3, [pc, #640]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	f023 0203 	bic.w	r2, r3, #3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	499c      	ldr	r1, [pc, #624]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f00:	4b97      	ldr	r3, [pc, #604]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f06:	f023 020c 	bic.w	r2, r3, #12
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	4994      	ldr	r1, [pc, #592]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f22:	4b8f      	ldr	r3, [pc, #572]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	498b      	ldr	r1, [pc, #556]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f44:	4b86      	ldr	r3, [pc, #536]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	4983      	ldr	r1, [pc, #524]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f66:	4b7e      	ldr	r3, [pc, #504]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	497a      	ldr	r1, [pc, #488]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f88:	4b75      	ldr	r3, [pc, #468]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	4972      	ldr	r1, [pc, #456]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006faa:	4b6d      	ldr	r3, [pc, #436]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	4969      	ldr	r1, [pc, #420]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fcc:	4b64      	ldr	r3, [pc, #400]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	4961      	ldr	r1, [pc, #388]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fee:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	4958      	ldr	r1, [pc, #352]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007010:	4b53      	ldr	r3, [pc, #332]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	4950      	ldr	r1, [pc, #320]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702e:	d105      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007030:	4b4b      	ldr	r3, [pc, #300]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a4a      	ldr	r2, [pc, #296]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800703a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007044:	2b00      	cmp	r3, #0
 8007046:	d015      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	4942      	ldr	r1, [pc, #264]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007066:	d105      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007068:	4b3d      	ldr	r3, [pc, #244]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a3c      	ldr	r2, [pc, #240]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007072:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d015      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007080:	4b37      	ldr	r3, [pc, #220]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007086:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4934      	ldr	r1, [pc, #208]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800709e:	d105      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070a0:	4b2f      	ldr	r3, [pc, #188]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4a2e      	ldr	r2, [pc, #184]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d015      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070b8:	4b29      	ldr	r3, [pc, #164]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	4926      	ldr	r1, [pc, #152]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d6:	d105      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d8:	4b21      	ldr	r3, [pc, #132]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4a20      	ldr	r2, [pc, #128]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070f0:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	4918      	ldr	r1, [pc, #96]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a12      	ldr	r2, [pc, #72]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007128:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	490a      	ldr	r1, [pc, #40]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007154:	7cbb      	ldrb	r3, [r7, #18]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000

08007164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e049      	b.n	800720a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa fdb8 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 fb1a 	bl	80077dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e04a      	b.n	80072c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d018      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x6c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007256:	d013      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x6c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00e      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x6c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x6c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1a      	ldr	r2, [pc, #104]	; (80072dc <HAL_TIM_Base_Start_IT+0xc8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x6c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d115      	bne.n	80072ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007288:	4013      	ands	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b06      	cmp	r3, #6
 8007290:	d015      	beq.n	80072be <HAL_TIM_Base_Start_IT+0xaa>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007298:	d011      	beq.n	80072be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	e008      	b.n	80072be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40013400 	.word	0x40013400
 80072e0:	40014000 	.word	0x40014000
 80072e4:	00010007 	.word	0x00010007

080072e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d122      	bne.n	8007344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d11b      	bne.n	8007344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0202 	mvn.w	r2, #2
 8007314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa38 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 8007330:	e005      	b.n	800733e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa2a 	bl	800778c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa3b 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b04      	cmp	r3, #4
 8007350:	d122      	bne.n	8007398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b04      	cmp	r3, #4
 800735e:	d11b      	bne.n	8007398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0204 	mvn.w	r2, #4
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa0e 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa00 	bl	800778c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa11 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d122      	bne.n	80073ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d11b      	bne.n	80073ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0208 	mvn.w	r2, #8
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2204      	movs	r2, #4
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9e4 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9d6 	bl	800778c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9e7 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0210 	mvn.w	r2, #16
 8007410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2208      	movs	r2, #8
 8007416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9ba 	bl	80077a0 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9ac 	bl	800778c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9bd 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b01      	cmp	r3, #1
 800744c:	d10e      	bne.n	800746c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d107      	bne.n	800746c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0201 	mvn.w	r2, #1
 8007464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7f9 f8b2 	bl	80005d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	d10e      	bne.n	8007498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d107      	bne.n	8007498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb5a 	bl	8007b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a6:	d10e      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b2:	2b80      	cmp	r3, #128	; 0x80
 80074b4:	d107      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb4d 	bl	8007b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d10e      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d107      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f96b 	bl	80077c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f003 0320 	and.w	r3, r3, #32
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d10e      	bne.n	800751e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b20      	cmp	r3, #32
 800750c:	d107      	bne.n	800751e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f06f 0220 	mvn.w	r2, #32
 8007516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb0d 	bl	8007b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800752c:	d10f      	bne.n	800754e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753c:	d107      	bne.n	800754e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb13 	bl	8007b74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800755c:	d10f      	bne.n	800757e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756c:	d107      	bne.n	800757e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fb05 	bl	8007b88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758c:	d10f      	bne.n	80075ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759c:	d107      	bne.n	80075ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80075a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 faf7 	bl	8007b9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075bc:	d10f      	bne.n	80075de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80075cc:	d107      	bne.n	80075de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80075d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fae9 	bl	8007bb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIM_ConfigClockSource+0x18>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e0b9      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x18c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800761e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b70      	cmp	r3, #112	; 0x70
 800763a:	d02e      	beq.n	800769a <HAL_TIM_ConfigClockSource+0xb2>
 800763c:	2b70      	cmp	r3, #112	; 0x70
 800763e:	d812      	bhi.n	8007666 <HAL_TIM_ConfigClockSource+0x7e>
 8007640:	2b30      	cmp	r3, #48	; 0x30
 8007642:	f000 8084 	beq.w	800774e <HAL_TIM_ConfigClockSource+0x166>
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d806      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x70>
 800764a:	2b10      	cmp	r3, #16
 800764c:	d07f      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d07d      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d07b      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007656:	e084      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007658:	2b50      	cmp	r3, #80	; 0x50
 800765a:	d048      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x106>
 800765c:	2b60      	cmp	r3, #96	; 0x60
 800765e:	d056      	beq.n	800770e <HAL_TIM_ConfigClockSource+0x126>
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d064      	beq.n	800772e <HAL_TIM_ConfigClockSource+0x146>
      break;
 8007664:	e07d      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007666:	4a45      	ldr	r2, [pc, #276]	; (800777c <HAL_TIM_ConfigClockSource+0x194>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d070      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 800766c:	4a43      	ldr	r2, [pc, #268]	; (800777c <HAL_TIM_ConfigClockSource+0x194>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d809      	bhi.n	8007686 <HAL_TIM_ConfigClockSource+0x9e>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	d027      	beq.n	80076c8 <HAL_TIM_ConfigClockSource+0xe0>
 8007678:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800767c:	d067      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007682:	d06d      	beq.n	8007760 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007684:	e06d      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007686:	4a3e      	ldr	r2, [pc, #248]	; (8007780 <HAL_TIM_ConfigClockSource+0x198>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d060      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 800768c:	4a3d      	ldr	r2, [pc, #244]	; (8007784 <HAL_TIM_ConfigClockSource+0x19c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d05d      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
 8007692:	4a3d      	ldr	r2, [pc, #244]	; (8007788 <HAL_TIM_ConfigClockSource+0x1a0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d05a      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x166>
      break;
 8007698:	e063      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f000 f9a3 	bl	80079f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	609a      	str	r2, [r3, #8]
      break;
 80076c6:	e04c      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f000 f98c 	bl	80079f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ea:	609a      	str	r2, [r3, #8]
      break;
 80076ec:	e039      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f000 f8fe 	bl	80078fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2150      	movs	r1, #80	; 0x50
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f957 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 800770c:	e029      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	6859      	ldr	r1, [r3, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	461a      	mov	r2, r3
 800771c:	f000 f91d 	bl	800795a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2160      	movs	r1, #96	; 0x60
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f947 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 800772c:	e019      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6859      	ldr	r1, [r3, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	f000 f8de 	bl	80078fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f937 	bl	80079ba <TIM_ITRx_SetConfig>
      break;
 800774c:	e009      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 f92e 	bl	80079ba <TIM_ITRx_SetConfig>
        break;
 800775e:	e000      	b.n	8007762 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8007760:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	00100020 	.word	0x00100020
 8007780:	00100040 	.word	0x00100040
 8007784:	00100070 	.word	0x00100070
 8007788:	00100030 	.word	0x00100030

0800778c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <TIM_Base_SetConfig+0x104>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00f      	beq.n	8007814 <TIM_Base_SetConfig+0x38>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d00b      	beq.n	8007814 <TIM_Base_SetConfig+0x38>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a39      	ldr	r2, [pc, #228]	; (80078e4 <TIM_Base_SetConfig+0x108>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d007      	beq.n	8007814 <TIM_Base_SetConfig+0x38>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a38      	ldr	r2, [pc, #224]	; (80078e8 <TIM_Base_SetConfig+0x10c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_Base_SetConfig+0x38>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a37      	ldr	r2, [pc, #220]	; (80078ec <TIM_Base_SetConfig+0x110>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d108      	bne.n	8007826 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a2d      	ldr	r2, [pc, #180]	; (80078e0 <TIM_Base_SetConfig+0x104>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01b      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007834:	d017      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a2a      	ldr	r2, [pc, #168]	; (80078e4 <TIM_Base_SetConfig+0x108>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d013      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a29      	ldr	r2, [pc, #164]	; (80078e8 <TIM_Base_SetConfig+0x10c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00f      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a28      	ldr	r2, [pc, #160]	; (80078ec <TIM_Base_SetConfig+0x110>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00b      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a27      	ldr	r2, [pc, #156]	; (80078f0 <TIM_Base_SetConfig+0x114>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d007      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a26      	ldr	r2, [pc, #152]	; (80078f4 <TIM_Base_SetConfig+0x118>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_Base_SetConfig+0x8a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <TIM_Base_SetConfig+0x11c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d108      	bne.n	8007878 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <TIM_Base_SetConfig+0x104>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00f      	beq.n	80078c4 <TIM_Base_SetConfig+0xe8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a11      	ldr	r2, [pc, #68]	; (80078ec <TIM_Base_SetConfig+0x110>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00b      	beq.n	80078c4 <TIM_Base_SetConfig+0xe8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a10      	ldr	r2, [pc, #64]	; (80078f0 <TIM_Base_SetConfig+0x114>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d007      	beq.n	80078c4 <TIM_Base_SetConfig+0xe8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a0f      	ldr	r2, [pc, #60]	; (80078f4 <TIM_Base_SetConfig+0x118>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_Base_SetConfig+0xe8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a0e      	ldr	r2, [pc, #56]	; (80078f8 <TIM_Base_SetConfig+0x11c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d103      	bne.n	80078cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	615a      	str	r2, [r3, #20]
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40013400 	.word	0x40013400
 80078f0:	40014000 	.word	0x40014000
 80078f4:	40014400 	.word	0x40014400
 80078f8:	40014800 	.word	0x40014800

080078fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 030a 	bic.w	r3, r3, #10
 8007938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0210 	bic.w	r2, r3, #16
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	031b      	lsls	r3, r3, #12
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	bf00      	nop
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	f043 0307 	orr.w	r3, r3, #7
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	021a      	lsls	r2, r3, #8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	609a      	str	r2, [r3, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e065      	b.n	8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d108      	bne.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d018      	beq.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac2:	d013      	beq.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00e      	beq.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d009      	beq.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d004      	beq.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d10c      	bne.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40013400 	.word	0x40013400
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40014000 	.word	0x40014000

08007b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e042      	b.n	8007c5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d106      	bne.n	8007bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fa f8dd 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2224      	movs	r2, #36	; 0x24
 8007bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0201 	bic.w	r2, r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f99a 	bl	8007f40 <UART_SetConfig>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e022      	b.n	8007c5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc36 	bl	8008490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fcbd 	bl	80085d4 <UART_CheckIdleState>
 8007c5a:	4603      	mov	r3, r0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	f040 8083 	bne.w	8007d86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <HAL_UART_Transmit+0x28>
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e07b      	b.n	8007d88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Transmit+0x3a>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e074      	b.n	8007d88 <HAL_UART_Transmit+0x124>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2221      	movs	r2, #33	; 0x21
 8007cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cb6:	f7fa f9f3 	bl	80020a0 <HAL_GetTick>
 8007cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d108      	bne.n	8007ce8 <HAL_UART_Transmit+0x84>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	61bb      	str	r3, [r7, #24]
 8007ce6:	e003      	b.n	8007cf0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007cf8:	e02c      	b.n	8007d54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2180      	movs	r1, #128	; 0x80
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fcad 	bl	8008664 <UART_WaitOnFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e039      	b.n	8007d88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	3302      	adds	r3, #2
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	e007      	b.n	8007d42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1cc      	bne.n	8007cfa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2200      	movs	r2, #0
 8007d68:	2140      	movs	r1, #64	; 0x40
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fc7a 	bl	8008664 <UART_WaitOnFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e006      	b.n	8007d88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e000      	b.n	8007d88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
  }
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	f040 80bc 	bne.w	8007f22 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_UART_Receive_IT+0x26>
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e0b4      	b.n	8007f24 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_UART_Receive_IT+0x38>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e0ad      	b.n	8007f24 <HAL_UART_Receive_IT+0x194>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	88fa      	ldrh	r2, [r7, #6]
 8007de2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df4:	d10e      	bne.n	8007e14 <HAL_UART_Receive_IT+0x84>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d105      	bne.n	8007e0a <HAL_UART_Receive_IT+0x7a>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e08:	e02d      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e12:	e028      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <HAL_UART_Receive_IT+0xa8>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <HAL_UART_Receive_IT+0x9e>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	22ff      	movs	r2, #255	; 0xff
 8007e28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e2c:	e01b      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	227f      	movs	r2, #127	; 0x7f
 8007e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e36:	e016      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e40:	d10d      	bne.n	8007e5e <HAL_UART_Receive_IT+0xce>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <HAL_UART_Receive_IT+0xc4>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	227f      	movs	r2, #127	; 0x7f
 8007e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e52:	e008      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	223f      	movs	r2, #63	; 0x3f
 8007e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e5c:	e003      	b.n	8007e66 <HAL_UART_Receive_IT+0xd6>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2222      	movs	r2, #34	; 0x22
 8007e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f042 0201 	orr.w	r2, r2, #1
 8007e84:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d12a      	bne.n	8007ee6 <HAL_UART_Receive_IT+0x156>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d324      	bcc.n	8007ee6 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_UART_Receive_IT+0x126>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <HAL_UART_Receive_IT+0x1a0>)
 8007eb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8007eb4:	e002      	b.n	8007ebc <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a1e      	ldr	r2, [pc, #120]	; (8007f34 <HAL_UART_Receive_IT+0x1a4>)
 8007eba:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	e01b      	b.n	8007f1e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eee:	d107      	bne.n	8007f00 <HAL_UART_Receive_IT+0x170>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a0f      	ldr	r2, [pc, #60]	; (8007f38 <HAL_UART_Receive_IT+0x1a8>)
 8007efc:	66da      	str	r2, [r3, #108]	; 0x6c
 8007efe:	e002      	b.n	8007f06 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a0e      	ldr	r2, [pc, #56]	; (8007f3c <HAL_UART_Receive_IT+0x1ac>)
 8007f04:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007f1c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	080089c1 	.word	0x080089c1
 8007f34:	080088b9 	.word	0x080088b9
 8007f38:	0800880f 	.word	0x0800880f
 8007f3c:	08008765 	.word	0x08008765

08007f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007f44:	b088      	sub	sp, #32
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4bb0      	ldr	r3, [pc, #704]	; (8008238 <UART_SetConfig+0x2f8>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	69f9      	ldr	r1, [r7, #28]
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4aa5      	ldr	r2, [pc, #660]	; (800823c <UART_SetConfig+0x2fc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	69f9      	ldr	r1, [r7, #28]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	f023 010f 	bic.w	r1, r3, #15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a96      	ldr	r2, [pc, #600]	; (8008240 <UART_SetConfig+0x300>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d121      	bne.n	8008030 <UART_SetConfig+0xf0>
 8007fec:	4b95      	ldr	r3, [pc, #596]	; (8008244 <UART_SetConfig+0x304>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d816      	bhi.n	8008028 <UART_SetConfig+0xe8>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <UART_SetConfig+0xc0>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008011 	.word	0x08008011
 8008004:	0800801d 	.word	0x0800801d
 8008008:	08008017 	.word	0x08008017
 800800c:	08008023 	.word	0x08008023
 8008010:	2301      	movs	r3, #1
 8008012:	76fb      	strb	r3, [r7, #27]
 8008014:	e0be      	b.n	8008194 <UART_SetConfig+0x254>
 8008016:	2302      	movs	r3, #2
 8008018:	76fb      	strb	r3, [r7, #27]
 800801a:	e0bb      	b.n	8008194 <UART_SetConfig+0x254>
 800801c:	2304      	movs	r3, #4
 800801e:	76fb      	strb	r3, [r7, #27]
 8008020:	e0b8      	b.n	8008194 <UART_SetConfig+0x254>
 8008022:	2308      	movs	r3, #8
 8008024:	76fb      	strb	r3, [r7, #27]
 8008026:	e0b5      	b.n	8008194 <UART_SetConfig+0x254>
 8008028:	2310      	movs	r3, #16
 800802a:	76fb      	strb	r3, [r7, #27]
 800802c:	bf00      	nop
 800802e:	e0b1      	b.n	8008194 <UART_SetConfig+0x254>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a84      	ldr	r2, [pc, #528]	; (8008248 <UART_SetConfig+0x308>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d134      	bne.n	80080a4 <UART_SetConfig+0x164>
 800803a:	4b82      	ldr	r3, [pc, #520]	; (8008244 <UART_SetConfig+0x304>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	f003 030c 	and.w	r3, r3, #12
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d829      	bhi.n	800809c <UART_SetConfig+0x15c>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x110>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008085 	.word	0x08008085
 8008054:	0800809d 	.word	0x0800809d
 8008058:	0800809d 	.word	0x0800809d
 800805c:	0800809d 	.word	0x0800809d
 8008060:	08008091 	.word	0x08008091
 8008064:	0800809d 	.word	0x0800809d
 8008068:	0800809d 	.word	0x0800809d
 800806c:	0800809d 	.word	0x0800809d
 8008070:	0800808b 	.word	0x0800808b
 8008074:	0800809d 	.word	0x0800809d
 8008078:	0800809d 	.word	0x0800809d
 800807c:	0800809d 	.word	0x0800809d
 8008080:	08008097 	.word	0x08008097
 8008084:	2300      	movs	r3, #0
 8008086:	76fb      	strb	r3, [r7, #27]
 8008088:	e084      	b.n	8008194 <UART_SetConfig+0x254>
 800808a:	2302      	movs	r3, #2
 800808c:	76fb      	strb	r3, [r7, #27]
 800808e:	e081      	b.n	8008194 <UART_SetConfig+0x254>
 8008090:	2304      	movs	r3, #4
 8008092:	76fb      	strb	r3, [r7, #27]
 8008094:	e07e      	b.n	8008194 <UART_SetConfig+0x254>
 8008096:	2308      	movs	r3, #8
 8008098:	76fb      	strb	r3, [r7, #27]
 800809a:	e07b      	b.n	8008194 <UART_SetConfig+0x254>
 800809c:	2310      	movs	r3, #16
 800809e:	76fb      	strb	r3, [r7, #27]
 80080a0:	bf00      	nop
 80080a2:	e077      	b.n	8008194 <UART_SetConfig+0x254>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a68      	ldr	r2, [pc, #416]	; (800824c <UART_SetConfig+0x30c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d120      	bne.n	80080f0 <UART_SetConfig+0x1b0>
 80080ae:	4b65      	ldr	r3, [pc, #404]	; (8008244 <UART_SetConfig+0x304>)
 80080b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d00f      	beq.n	80080dc <UART_SetConfig+0x19c>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d802      	bhi.n	80080c6 <UART_SetConfig+0x186>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <UART_SetConfig+0x190>
 80080c4:	e010      	b.n	80080e8 <UART_SetConfig+0x1a8>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d005      	beq.n	80080d6 <UART_SetConfig+0x196>
 80080ca:	2b30      	cmp	r3, #48	; 0x30
 80080cc:	d009      	beq.n	80080e2 <UART_SetConfig+0x1a2>
 80080ce:	e00b      	b.n	80080e8 <UART_SetConfig+0x1a8>
 80080d0:	2300      	movs	r3, #0
 80080d2:	76fb      	strb	r3, [r7, #27]
 80080d4:	e05e      	b.n	8008194 <UART_SetConfig+0x254>
 80080d6:	2302      	movs	r3, #2
 80080d8:	76fb      	strb	r3, [r7, #27]
 80080da:	e05b      	b.n	8008194 <UART_SetConfig+0x254>
 80080dc:	2304      	movs	r3, #4
 80080de:	76fb      	strb	r3, [r7, #27]
 80080e0:	e058      	b.n	8008194 <UART_SetConfig+0x254>
 80080e2:	2308      	movs	r3, #8
 80080e4:	76fb      	strb	r3, [r7, #27]
 80080e6:	e055      	b.n	8008194 <UART_SetConfig+0x254>
 80080e8:	2310      	movs	r3, #16
 80080ea:	76fb      	strb	r3, [r7, #27]
 80080ec:	bf00      	nop
 80080ee:	e051      	b.n	8008194 <UART_SetConfig+0x254>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a56      	ldr	r2, [pc, #344]	; (8008250 <UART_SetConfig+0x310>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d120      	bne.n	800813c <UART_SetConfig+0x1fc>
 80080fa:	4b52      	ldr	r3, [pc, #328]	; (8008244 <UART_SetConfig+0x304>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d00f      	beq.n	8008128 <UART_SetConfig+0x1e8>
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d802      	bhi.n	8008112 <UART_SetConfig+0x1d2>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <UART_SetConfig+0x1dc>
 8008110:	e010      	b.n	8008134 <UART_SetConfig+0x1f4>
 8008112:	2b80      	cmp	r3, #128	; 0x80
 8008114:	d005      	beq.n	8008122 <UART_SetConfig+0x1e2>
 8008116:	2bc0      	cmp	r3, #192	; 0xc0
 8008118:	d009      	beq.n	800812e <UART_SetConfig+0x1ee>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x1f4>
 800811c:	2300      	movs	r3, #0
 800811e:	76fb      	strb	r3, [r7, #27]
 8008120:	e038      	b.n	8008194 <UART_SetConfig+0x254>
 8008122:	2302      	movs	r3, #2
 8008124:	76fb      	strb	r3, [r7, #27]
 8008126:	e035      	b.n	8008194 <UART_SetConfig+0x254>
 8008128:	2304      	movs	r3, #4
 800812a:	76fb      	strb	r3, [r7, #27]
 800812c:	e032      	b.n	8008194 <UART_SetConfig+0x254>
 800812e:	2308      	movs	r3, #8
 8008130:	76fb      	strb	r3, [r7, #27]
 8008132:	e02f      	b.n	8008194 <UART_SetConfig+0x254>
 8008134:	2310      	movs	r3, #16
 8008136:	76fb      	strb	r3, [r7, #27]
 8008138:	bf00      	nop
 800813a:	e02b      	b.n	8008194 <UART_SetConfig+0x254>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a3e      	ldr	r2, [pc, #248]	; (800823c <UART_SetConfig+0x2fc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d124      	bne.n	8008190 <UART_SetConfig+0x250>
 8008146:	4b3f      	ldr	r3, [pc, #252]	; (8008244 <UART_SetConfig+0x304>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008154:	d012      	beq.n	800817c <UART_SetConfig+0x23c>
 8008156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815a:	d802      	bhi.n	8008162 <UART_SetConfig+0x222>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <UART_SetConfig+0x230>
 8008160:	e012      	b.n	8008188 <UART_SetConfig+0x248>
 8008162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008166:	d006      	beq.n	8008176 <UART_SetConfig+0x236>
 8008168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800816c:	d009      	beq.n	8008182 <UART_SetConfig+0x242>
 800816e:	e00b      	b.n	8008188 <UART_SetConfig+0x248>
 8008170:	2300      	movs	r3, #0
 8008172:	76fb      	strb	r3, [r7, #27]
 8008174:	e00e      	b.n	8008194 <UART_SetConfig+0x254>
 8008176:	2302      	movs	r3, #2
 8008178:	76fb      	strb	r3, [r7, #27]
 800817a:	e00b      	b.n	8008194 <UART_SetConfig+0x254>
 800817c:	2304      	movs	r3, #4
 800817e:	76fb      	strb	r3, [r7, #27]
 8008180:	e008      	b.n	8008194 <UART_SetConfig+0x254>
 8008182:	2308      	movs	r3, #8
 8008184:	76fb      	strb	r3, [r7, #27]
 8008186:	e005      	b.n	8008194 <UART_SetConfig+0x254>
 8008188:	2310      	movs	r3, #16
 800818a:	76fb      	strb	r3, [r7, #27]
 800818c:	bf00      	nop
 800818e:	e001      	b.n	8008194 <UART_SetConfig+0x254>
 8008190:	2310      	movs	r3, #16
 8008192:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a28      	ldr	r2, [pc, #160]	; (800823c <UART_SetConfig+0x2fc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f040 80a1 	bne.w	80082e2 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081a0:	7efb      	ldrb	r3, [r7, #27]
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d823      	bhi.n	80081ee <UART_SetConfig+0x2ae>
 80081a6:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <UART_SetConfig+0x26c>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081ef 	.word	0x080081ef
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081ef 	.word	0x080081ef
 80081bc:	080081df 	.word	0x080081df
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	080081ef 	.word	0x080081ef
 80081c8:	080081ef 	.word	0x080081ef
 80081cc:	080081e7 	.word	0x080081e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7fe fd66 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 80081d4:	6178      	str	r0, [r7, #20]
        break;
 80081d6:	e00f      	b.n	80081f8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d8:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <UART_SetConfig+0x314>)
 80081da:	617b      	str	r3, [r7, #20]
        break;
 80081dc:	e00c      	b.n	80081f8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081de:	f7fe fcf1 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 80081e2:	6178      	str	r0, [r7, #20]
        break;
 80081e4:	e008      	b.n	80081f8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ea:	617b      	str	r3, [r7, #20]
        break;
 80081ec:	e004      	b.n	80081f8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	76bb      	strb	r3, [r7, #26]
        break;
 80081f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8130 	beq.w	8008460 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	4a14      	ldr	r2, [pc, #80]	; (8008258 <UART_SetConfig+0x318>)
 8008206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820a:	461a      	mov	r2, r3
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008212:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	4613      	mov	r3, r2
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	4413      	add	r3, r2
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	d305      	bcc.n	8008230 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	429a      	cmp	r2, r3
 800822e:	d915      	bls.n	800825c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	76bb      	strb	r3, [r7, #26]
 8008234:	e114      	b.n	8008460 <UART_SetConfig+0x520>
 8008236:	bf00      	nop
 8008238:	cfff69f3 	.word	0xcfff69f3
 800823c:	40008000 	.word	0x40008000
 8008240:	40013800 	.word	0x40013800
 8008244:	40021000 	.word	0x40021000
 8008248:	40004400 	.word	0x40004400
 800824c:	40004800 	.word	0x40004800
 8008250:	40004c00 	.word	0x40004c00
 8008254:	00f42400 	.word	0x00f42400
 8008258:	0800df30 	.word	0x0800df30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4618      	mov	r0, r3
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	4a87      	ldr	r2, [pc, #540]	; (8008488 <UART_SetConfig+0x548>)
 800826a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800826e:	b29b      	uxth	r3, r3
 8008270:	f04f 0400 	mov.w	r4, #0
 8008274:	461a      	mov	r2, r3
 8008276:	4623      	mov	r3, r4
 8008278:	f7f8 f82a 	bl	80002d0 <__aeabi_uldivmod>
 800827c:	4603      	mov	r3, r0
 800827e:	460c      	mov	r4, r1
 8008280:	4619      	mov	r1, r3
 8008282:	4622      	mov	r2, r4
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	f04f 0400 	mov.w	r4, #0
 800828c:	0214      	lsls	r4, r2, #8
 800828e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008292:	020b      	lsls	r3, r1, #8
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6852      	ldr	r2, [r2, #4]
 8008298:	0852      	lsrs	r2, r2, #1
 800829a:	4611      	mov	r1, r2
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	eb13 0b01 	adds.w	fp, r3, r1
 80082a4:	eb44 0c02 	adc.w	ip, r4, r2
 80082a8:	4658      	mov	r0, fp
 80082aa:	4661      	mov	r1, ip
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f04f 0400 	mov.w	r4, #0
 80082b4:	461a      	mov	r2, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	f7f8 f80a 	bl	80002d0 <__aeabi_uldivmod>
 80082bc:	4603      	mov	r3, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082c8:	d308      	bcc.n	80082dc <UART_SetConfig+0x39c>
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d0:	d204      	bcs.n	80082dc <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e0c1      	b.n	8008460 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	76bb      	strb	r3, [r7, #26]
 80082e0:	e0be      	b.n	8008460 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ea:	d164      	bne.n	80083b6 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80082ec:	7efb      	ldrb	r3, [r7, #27]
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d827      	bhi.n	8008342 <UART_SetConfig+0x402>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <UART_SetConfig+0x3b8>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	08008325 	.word	0x08008325
 8008300:	0800832d 	.word	0x0800832d
 8008304:	08008343 	.word	0x08008343
 8008308:	08008333 	.word	0x08008333
 800830c:	08008343 	.word	0x08008343
 8008310:	08008343 	.word	0x08008343
 8008314:	08008343 	.word	0x08008343
 8008318:	0800833b 	.word	0x0800833b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800831c:	f7fe fcc0 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 8008320:	6178      	str	r0, [r7, #20]
        break;
 8008322:	e013      	b.n	800834c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008324:	f7fe fcd2 	bl	8006ccc <HAL_RCC_GetPCLK2Freq>
 8008328:	6178      	str	r0, [r7, #20]
        break;
 800832a:	e00f      	b.n	800834c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800832c:	4b57      	ldr	r3, [pc, #348]	; (800848c <UART_SetConfig+0x54c>)
 800832e:	617b      	str	r3, [r7, #20]
        break;
 8008330:	e00c      	b.n	800834c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008332:	f7fe fc47 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8008336:	6178      	str	r0, [r7, #20]
        break;
 8008338:	e008      	b.n	800834c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833e:	617b      	str	r3, [r7, #20]
        break;
 8008340:	e004      	b.n	800834c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	76bb      	strb	r3, [r7, #26]
        break;
 800834a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8086 	beq.w	8008460 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	4a4b      	ldr	r2, [pc, #300]	; (8008488 <UART_SetConfig+0x548>)
 800835a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800835e:	461a      	mov	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	fbb3 f3f2 	udiv	r3, r3, r2
 8008366:	005a      	lsls	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	fbb2 f3f3 	udiv	r3, r2, r3
 8008378:	b29b      	uxth	r3, r3
 800837a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	2b0f      	cmp	r3, #15
 8008380:	d916      	bls.n	80083b0 <UART_SetConfig+0x470>
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d212      	bcs.n	80083b0 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	b29b      	uxth	r3, r3
 800838e:	f023 030f 	bic.w	r3, r3, #15
 8008392:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	b29b      	uxth	r3, r3
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	b29a      	uxth	r2, r3
 80083a0:	89fb      	ldrh	r3, [r7, #14]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	89fa      	ldrh	r2, [r7, #14]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	e057      	b.n	8008460 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	76bb      	strb	r3, [r7, #26]
 80083b4:	e054      	b.n	8008460 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083b6:	7efb      	ldrb	r3, [r7, #27]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d828      	bhi.n	800840e <UART_SetConfig+0x4ce>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0x484>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083e9 	.word	0x080083e9
 80083c8:	080083f1 	.word	0x080083f1
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	0800840f 	.word	0x0800840f
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	0800840f 	.word	0x0800840f
 80083dc:	0800840f 	.word	0x0800840f
 80083e0:	0800840f 	.word	0x0800840f
 80083e4:	08008407 	.word	0x08008407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e8:	f7fe fc5a 	bl	8006ca0 <HAL_RCC_GetPCLK1Freq>
 80083ec:	6178      	str	r0, [r7, #20]
        break;
 80083ee:	e013      	b.n	8008418 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f0:	f7fe fc6c 	bl	8006ccc <HAL_RCC_GetPCLK2Freq>
 80083f4:	6178      	str	r0, [r7, #20]
        break;
 80083f6:	e00f      	b.n	8008418 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f8:	4b24      	ldr	r3, [pc, #144]	; (800848c <UART_SetConfig+0x54c>)
 80083fa:	617b      	str	r3, [r7, #20]
        break;
 80083fc:	e00c      	b.n	8008418 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fe:	f7fe fbe1 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8008402:	6178      	str	r0, [r7, #20]
        break;
 8008404:	e008      	b.n	8008418 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	617b      	str	r3, [r7, #20]
        break;
 800840c:	e004      	b.n	8008418 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	76bb      	strb	r3, [r7, #26]
        break;
 8008416:	bf00      	nop
    }

    if (pclk != 0U)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d020      	beq.n	8008460 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	4a19      	ldr	r2, [pc, #100]	; (8008488 <UART_SetConfig+0x548>)
 8008424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008428:	461a      	mov	r2, r3
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	085b      	lsrs	r3, r3, #1
 8008436:	441a      	add	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008440:	b29b      	uxth	r3, r3
 8008442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d908      	bls.n	800845c <UART_SetConfig+0x51c>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008450:	d204      	bcs.n	800845c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e001      	b.n	8008460 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800847c:	7ebb      	ldrb	r3, [r7, #26]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008488:	0800df30 	.word	0x0800df30
 800848c:	00f42400 	.word	0x00f42400

08008490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01a      	beq.n	80085a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858e:	d10a      	bne.n	80085a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
  }
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085e4:	f7f9 fd5c 	bl	80020a0 <HAL_GetTick>
 80085e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d10e      	bne.n	8008616 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f82c 	bl	8008664 <UART_WaitOnFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e022      	b.n	800865c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d10e      	bne.n	8008642 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f816 	bl	8008664 <UART_WaitOnFlagUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e00c      	b.n	800865c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	4613      	mov	r3, r2
 8008672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008674:	e062      	b.n	800873c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867c:	d05e      	beq.n	800873c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800867e:	f7f9 fd0f 	bl	80020a0 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	429a      	cmp	r2, r3
 800868c:	d302      	bcc.n	8008694 <UART_WaitOnFlagUntilTimeout+0x30>
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d11d      	bne.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0201 	bic.w	r2, r2, #1
 80086b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e045      	b.n	800875c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d02e      	beq.n	800873c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ec:	d126      	bne.n	800873c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008706:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0201 	bic.w	r2, r2, #1
 8008716:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e00f      	b.n	800875c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4013      	ands	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	429a      	cmp	r2, r3
 8008758:	d08d      	beq.n	8008676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008772:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877a:	2b22      	cmp	r3, #34	; 0x22
 800877c:	d13b      	bne.n	80087f6 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008786:	89bb      	ldrh	r3, [r7, #12]
 8008788:	b2d9      	uxtb	r1, r3
 800878a:	89fb      	ldrh	r3, [r7, #14]
 800878c:	b2da      	uxtb	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008792:	400a      	ands	r2, r1
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d122      	bne.n	8008806 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087ce:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7f7 ff1c 	bl	800062c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087f4:	e007      	b.n	8008806 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0208 	orr.w	r2, r2, #8
 8008804:	619a      	str	r2, [r3, #24]
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800881c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008824:	2b22      	cmp	r3, #34	; 0x22
 8008826:	d13b      	bne.n	80088a0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008834:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008836:	89ba      	ldrh	r2, [r7, #12]
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	4013      	ands	r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008846:	1c9a      	adds	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d122      	bne.n	80088b0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008878:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0201 	bic.w	r2, r2, #1
 8008888:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7f7 fec7 	bl	800062c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800889e:	e007      	b.n	80088b0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699a      	ldr	r2, [r3, #24]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0208 	orr.w	r2, r2, #8
 80088ae:	619a      	str	r2, [r3, #24]
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088c6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ce:	2b22      	cmp	r3, #34	; 0x22
 80088d0:	d168      	bne.n	80089a4 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088d8:	81fb      	strh	r3, [r7, #14]
 80088da:	e03f      	b.n	800895c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088e4:	893b      	ldrh	r3, [r7, #8]
 80088e6:	b2d9      	uxtb	r1, r3
 80088e8:	89bb      	ldrh	r3, [r7, #12]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f0:	400a      	ands	r2, r1
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d11b      	bne.n	8008956 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7f7 fe6b 	bl	800062c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008956:	89fb      	ldrh	r3, [r7, #14]
 8008958:	3b01      	subs	r3, #1
 800895a:	81fb      	strh	r3, [r7, #14]
 800895c:	89fb      	ldrh	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1bc      	bne.n	80088dc <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008968:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800896a:	897b      	ldrh	r3, [r7, #10]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d021      	beq.n	80089b4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008976:	897a      	ldrh	r2, [r7, #10]
 8008978:	429a      	cmp	r2, r3
 800897a:	d21b      	bcs.n	80089b4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800898a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a0b      	ldr	r2, [pc, #44]	; (80089bc <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008990:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0220 	orr.w	r2, r2, #32
 80089a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089a2:	e007      	b.n	80089b4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0208 	orr.w	r2, r2, #8
 80089b2:	619a      	str	r2, [r3, #24]
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	08008765 	.word	0x08008765

080089c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ce:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	2b22      	cmp	r3, #34	; 0x22
 80089d8:	d168      	bne.n	8008aac <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089e0:	82fb      	strh	r3, [r7, #22]
 80089e2:	e03f      	b.n	8008a64 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80089f2:	8a3a      	ldrh	r2, [r7, #16]
 80089f4:	8abb      	ldrh	r3, [r7, #20]
 80089f6:	4013      	ands	r3, r2
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	1c9a      	adds	r2, r3, #2
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11b      	bne.n	8008a5e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a34:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6812      	ldr	r2, [r2, #0]
 8008a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a44:	f023 0301 	bic.w	r3, r3, #1
 8008a48:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7f7 fde7 	bl	800062c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008a5e:	8afb      	ldrh	r3, [r7, #22]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	82fb      	strh	r3, [r7, #22]
 8008a64:	8afb      	ldrh	r3, [r7, #22]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1bc      	bne.n	80089e4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a70:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a72:	8a7b      	ldrh	r3, [r7, #18]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d021      	beq.n	8008abc <UART_RxISR_16BIT_FIFOEN+0xfc>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a7e:	8a7a      	ldrh	r2, [r7, #18]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d21b      	bcs.n	8008abc <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008a92:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a0b      	ldr	r2, [pc, #44]	; (8008ac4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008a98:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0220 	orr.w	r2, r2, #32
 8008aa8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aaa:	e007      	b.n	8008abc <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	619a      	str	r2, [r3, #24]
}
 8008abc:	bf00      	nop
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	0800880f 	.word	0x0800880f

08008ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_UARTEx_DisableFifoMode+0x16>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e027      	b.n	8008b2e <HAL_UARTEx_DisableFifoMode+0x66>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2224      	movs	r2, #36	; 0x24
 8008aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0201 	bic.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e02d      	b.n	8008bae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2224      	movs	r2, #36	; 0x24
 8008b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0201 	bic.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f850 	bl	8008c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e02d      	b.n	8008c2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2224      	movs	r2, #36	; 0x24
 8008bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0201 	bic.w	r2, r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f812 	bl	8008c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b089      	sub	sp, #36	; 0x24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008c3c:	4a2f      	ldr	r2, [pc, #188]	; (8008cfc <UARTEx_SetNbDataToProcess+0xc8>)
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c46:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008c4a:	4a2d      	ldr	r2, [pc, #180]	; (8008d00 <UARTEx_SetNbDataToProcess+0xcc>)
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c54:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d108      	bne.n	8008c72 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c70:	e03d      	b.n	8008cee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c72:	2308      	movs	r3, #8
 8008c74:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c76:	2308      	movs	r3, #8
 8008c78:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	0e5b      	lsrs	r3, r3, #25
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	0f5b      	lsrs	r3, r3, #29
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c9a:	7fbb      	ldrb	r3, [r7, #30]
 8008c9c:	7f3a      	ldrb	r2, [r7, #28]
 8008c9e:	f107 0120 	add.w	r1, r7, #32
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cac:	7f3a      	ldrb	r2, [r7, #28]
 8008cae:	f107 0120 	add.w	r1, r7, #32
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cc4:	7ffb      	ldrb	r3, [r7, #31]
 8008cc6:	7f7a      	ldrb	r2, [r7, #29]
 8008cc8:	f107 0120 	add.w	r1, r7, #32
 8008ccc:	440a      	add	r2, r1
 8008cce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cd6:	7f7a      	ldrb	r2, [r7, #29]
 8008cd8:	f107 0120 	add.w	r1, r7, #32
 8008cdc:	440a      	add	r2, r1
 8008cde:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ce2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cee:	bf00      	nop
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	0800decc 	.word	0x0800decc
 8008d00:	0800ded4 	.word	0x0800ded4

08008d04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d14:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008d18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d3a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008d3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4013      	ands	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d68:	b084      	sub	sp, #16
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	f107 0014 	add.w	r0, r7, #20
 8008d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	b004      	add	sp, #16
 8008da8:	4770      	bx	lr
	...

08008dac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b09b      	sub	sp, #108	; 0x6c
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	78db      	ldrb	r3, [r3, #3]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d81f      	bhi.n	8008e1e <USB_ActivateEndpoint+0x72>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USB_ActivateEndpoint+0x38>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e27 	.word	0x08008e27
 8008df0:	08008e03 	.word	0x08008e03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008df4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008e00:	e012      	b.n	8008e28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008e06:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008e0e:	e00b      	b.n	8008e28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008e10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008e1c:	e004      	b.n	8008e28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008e24:	e000      	b.n	8008e28 <USB_ActivateEndpoint+0x7c>
      break;
 8008e26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	b21b      	sxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	b21a      	sxth	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	b21b      	sxth	r3, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	b21b      	sxth	r3, r3
 8008e6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	7b1b      	ldrb	r3, [r3, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 8149 	bne.w	8009130 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8084 	beq.w	8008fb0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	00da      	lsls	r2, r3, #3
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	88db      	ldrh	r3, [r3, #6]
 8008ed0:	085b      	lsrs	r3, r3, #1
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	81fb      	strh	r3, [r7, #14]
 8008eea:	89fb      	ldrh	r3, [r7, #14]
 8008eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01b      	beq.n	8008f2c <USB_ActivateEndpoint+0x180>
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0a:	81bb      	strh	r3, [r7, #12]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	441a      	add	r2, r3
 8008f16:	89bb      	ldrh	r3, [r7, #12]
 8008f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	78db      	ldrb	r3, [r3, #3]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d020      	beq.n	8008f76 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4a:	813b      	strh	r3, [r7, #8]
 8008f4c:	893b      	ldrh	r3, [r7, #8]
 8008f4e:	f083 0320 	eor.w	r3, r3, #32
 8008f52:	813b      	strh	r3, [r7, #8]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	441a      	add	r2, r3
 8008f5e:	893b      	ldrh	r3, [r7, #8]
 8008f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	8013      	strh	r3, [r2, #0]
 8008f74:	e27f      	b.n	8009476 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8c:	817b      	strh	r3, [r7, #10]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	441a      	add	r2, r3
 8008f98:	897b      	ldrh	r3, [r7, #10]
 8008f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	8013      	strh	r3, [r2, #0]
 8008fae:	e262      	b.n	8009476 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	4413      	add	r3, r2
 8008fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	00da      	lsls	r2, r3, #3
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	4413      	add	r3, r2
 8008fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	88db      	ldrh	r3, [r3, #6]
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	4413      	add	r3, r2
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	00da      	lsls	r2, r3, #3
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	4413      	add	r3, r2
 8009002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009006:	623b      	str	r3, [r7, #32]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d112      	bne.n	8009036 <USB_ActivateEndpoint+0x28a>
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800901a:	b29a      	uxth	r2, r3
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902e:	b29a      	uxth	r2, r3
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	801a      	strh	r2, [r3, #0]
 8009034:	e02f      	b.n	8009096 <USB_ActivateEndpoint+0x2ea>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b3e      	cmp	r3, #62	; 0x3e
 800903c:	d813      	bhi.n	8009066 <USB_ActivateEndpoint+0x2ba>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	085b      	lsrs	r3, r3, #1
 8009044:	663b      	str	r3, [r7, #96]	; 0x60
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <USB_ActivateEndpoint+0x2ac>
 8009052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009054:	3301      	adds	r3, #1
 8009056:	663b      	str	r3, [r7, #96]	; 0x60
 8009058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905a:	b29b      	uxth	r3, r3
 800905c:	029b      	lsls	r3, r3, #10
 800905e:	b29a      	uxth	r2, r3
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	801a      	strh	r2, [r3, #0]
 8009064:	e017      	b.n	8009096 <USB_ActivateEndpoint+0x2ea>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	663b      	str	r3, [r7, #96]	; 0x60
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <USB_ActivateEndpoint+0x2d4>
 800907a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800907c:	3b01      	subs	r3, #1
 800907e:	663b      	str	r3, [r7, #96]	; 0x60
 8009080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009082:	b29b      	uxth	r3, r3
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009090:	b29a      	uxth	r2, r3
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	83fb      	strh	r3, [r7, #30]
 80090a4:	8bfb      	ldrh	r3, [r7, #30]
 80090a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d01b      	beq.n	80090e6 <USB_ActivateEndpoint+0x33a>
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c4:	83bb      	strh	r3, [r7, #28]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	441a      	add	r2, r3
 80090d0:	8bbb      	ldrh	r3, [r7, #28]
 80090d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090fc:	837b      	strh	r3, [r7, #26]
 80090fe:	8b7b      	ldrh	r3, [r7, #26]
 8009100:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009104:	837b      	strh	r3, [r7, #26]
 8009106:	8b7b      	ldrh	r3, [r7, #26]
 8009108:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800910c:	837b      	strh	r3, [r7, #26]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	441a      	add	r2, r3
 8009118:	8b7b      	ldrh	r3, [r7, #26]
 800911a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800911e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912a:	b29b      	uxth	r3, r3
 800912c:	8013      	strh	r3, [r2, #0]
 800912e:	e1a2      	b.n	8009476 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	441a      	add	r2, r3
 8009154:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800915c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009160:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009168:	b29b      	uxth	r3, r3
 800916a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009176:	b29b      	uxth	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800917c:	4413      	add	r3, r2
 800917e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	00da      	lsls	r2, r3, #3
 8009186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009188:	4413      	add	r3, r2
 800918a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800918e:	657b      	str	r3, [r7, #84]	; 0x54
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	891b      	ldrh	r3, [r3, #8]
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	b29b      	uxth	r3, r3
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	b29a      	uxth	r2, r3
 800919c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919e:	801a      	strh	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	653b      	str	r3, [r7, #80]	; 0x50
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b0:	4413      	add	r3, r2
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	00da      	lsls	r2, r3, #3
 80091ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091bc:	4413      	add	r3, r2
 80091be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	895b      	ldrh	r3, [r3, #10]
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 8091 	bne.w	8009300 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80091ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d01b      	beq.n	800922e <USB_ActivateEndpoint+0x482>
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	441a      	add	r2, r3
 8009218:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800921a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800921e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922a:	b29b      	uxth	r3, r3
 800922c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	873b      	strh	r3, [r7, #56]	; 0x38
 800923c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800923e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01b      	beq.n	800927e <USB_ActivateEndpoint+0x4d2>
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	441a      	add	r2, r3
 8009268:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800926a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800926e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800927a:	b29b      	uxth	r3, r3
 800927c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009294:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009296:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009298:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800929c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800929e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80092a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	441a      	add	r2, r3
 80092b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80092b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	441a      	add	r2, r3
 80092e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80092ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	8013      	strh	r3, [r2, #0]
 80092fe:	e0ba      	b.n	8009476 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009310:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01d      	beq.n	8009358 <USB_ActivateEndpoint+0x5ac>
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009368:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800936c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01d      	beq.n	80093b0 <USB_ActivateEndpoint+0x604>
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	441a      	add	r2, r3
 8009398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	78db      	ldrb	r3, [r3, #3]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d024      	beq.n	8009402 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80093d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80093d6:	f083 0320 	eor.w	r3, r3, #32
 80093da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	441a      	add	r2, r3
 80093e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80093ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	8013      	strh	r3, [r2, #0]
 8009400:	e01d      	b.n	800943e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800942a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943a:	b29b      	uxth	r3, r3
 800943c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009454:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	441a      	add	r2, r3
 8009460:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009472:	b29b      	uxth	r3, r3
 8009474:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009476:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800947a:	4618      	mov	r0, r3
 800947c:	376c      	adds	r7, #108	; 0x6c
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop

08009488 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009488:	b480      	push	{r7}
 800948a:	b08d      	sub	sp, #52	; 0x34
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	7b1b      	ldrb	r3, [r3, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f040 808e 	bne.w	80095b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	785b      	ldrb	r3, [r3, #1]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d044      	beq.n	800952e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	81bb      	strh	r3, [r7, #12]
 80094b2:	89bb      	ldrh	r3, [r7, #12]
 80094b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01b      	beq.n	80094f4 <USB_DeactivateEndpoint+0x6c>
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d2:	817b      	strh	r3, [r7, #10]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	441a      	add	r2, r3
 80094de:	897b      	ldrh	r3, [r7, #10]
 80094e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950a:	813b      	strh	r3, [r7, #8]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	441a      	add	r2, r3
 8009516:	893b      	ldrh	r3, [r7, #8]
 8009518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800951c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009528:	b29b      	uxth	r3, r3
 800952a:	8013      	strh	r3, [r2, #0]
 800952c:	e192      	b.n	8009854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	827b      	strh	r3, [r7, #18]
 800953c:	8a7b      	ldrh	r3, [r7, #18]
 800953e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01b      	beq.n	800957e <USB_DeactivateEndpoint+0xf6>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955c:	823b      	strh	r3, [r7, #16]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	441a      	add	r2, r3
 8009568:	8a3b      	ldrh	r3, [r7, #16]
 800956a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800956e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957a:	b29b      	uxth	r3, r3
 800957c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009594:	81fb      	strh	r3, [r7, #14]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	441a      	add	r2, r3
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8013      	strh	r3, [r2, #0]
 80095b6:	e14d      	b.n	8009854 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	785b      	ldrb	r3, [r3, #1]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 80a5 	bne.w	800970c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	843b      	strh	r3, [r7, #32]
 80095d0:	8c3b      	ldrh	r3, [r7, #32]
 80095d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01b      	beq.n	8009612 <USB_DeactivateEndpoint+0x18a>
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f0:	83fb      	strh	r3, [r7, #30]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	441a      	add	r2, r3
 80095fc:	8bfb      	ldrh	r3, [r7, #30]
 80095fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800960a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960e:	b29b      	uxth	r3, r3
 8009610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	83bb      	strh	r3, [r7, #28]
 8009620:	8bbb      	ldrh	r3, [r7, #28]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01b      	beq.n	8009662 <USB_DeactivateEndpoint+0x1da>
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009640:	837b      	strh	r3, [r7, #26]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	441a      	add	r2, r3
 800964c:	8b7b      	ldrh	r3, [r7, #26]
 800964e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800965a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800965e:	b29b      	uxth	r3, r3
 8009660:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29b      	uxth	r3, r3
 8009670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009678:	833b      	strh	r3, [r7, #24]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	441a      	add	r2, r3
 8009684:	8b3b      	ldrh	r3, [r7, #24]
 8009686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800968a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800968e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009696:	b29b      	uxth	r3, r3
 8009698:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b0:	82fb      	strh	r3, [r7, #22]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	441a      	add	r2, r3
 80096bc:	8afb      	ldrh	r3, [r7, #22]
 80096be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e8:	82bb      	strh	r3, [r7, #20]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	441a      	add	r2, r3
 80096f4:	8abb      	ldrh	r3, [r7, #20]
 80096f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009706:	b29b      	uxth	r3, r3
 8009708:	8013      	strh	r3, [r2, #0]
 800970a:	e0a3      	b.n	8009854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800971a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800971c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01b      	beq.n	800975c <USB_DeactivateEndpoint+0x2d4>
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
 8009732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800973a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	441a      	add	r2, r3
 8009746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800974c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009758:	b29b      	uxth	r3, r3
 800975a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	857b      	strh	r3, [r7, #42]	; 0x2a
 800976a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01b      	beq.n	80097ac <USB_DeactivateEndpoint+0x324>
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978a:	853b      	strh	r3, [r7, #40]	; 0x28
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	441a      	add	r2, r3
 8009796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	441a      	add	r2, r3
 80097ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	441a      	add	r2, r3
 8009806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800980c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009818:	b29b      	uxth	r3, r3
 800981a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	b29b      	uxth	r3, r3
 800982a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800982e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009832:	847b      	strh	r3, [r7, #34]	; 0x22
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	441a      	add	r2, r3
 800983e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800984c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009850:	b29b      	uxth	r3, r3
 8009852:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3734      	adds	r7, #52	; 0x34
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b0c4      	sub	sp, #272	; 0x110
 8009866:	af00      	add	r7, sp, #0
 8009868:	1d3b      	adds	r3, r7, #4
 800986a:	6018      	str	r0, [r3, #0]
 800986c:	463b      	mov	r3, r7
 800986e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009870:	463b      	mov	r3, r7
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	785b      	ldrb	r3, [r3, #1]
 8009876:	2b01      	cmp	r3, #1
 8009878:	f040 8566 	bne.w	800a348 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800987c:	463b      	mov	r3, r7
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699a      	ldr	r2, [r3, #24]
 8009882:	463b      	mov	r3, r7
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	429a      	cmp	r2, r3
 800988a:	d905      	bls.n	8009898 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800988c:	463b      	mov	r3, r7
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009896:	e004      	b.n	80098a2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009898:	463b      	mov	r3, r7
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80098a2:	463b      	mov	r3, r7
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	7b1b      	ldrb	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d12c      	bne.n	8009906 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80098ac:	463b      	mov	r3, r7
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6959      	ldr	r1, [r3, #20]
 80098b2:	463b      	mov	r3, r7
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	88da      	ldrh	r2, [r3, #6]
 80098b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098bc:	b29b      	uxth	r3, r3
 80098be:	1d38      	adds	r0, r7, #4
 80098c0:	6800      	ldr	r0, [r0, #0]
 80098c2:	f001 fa43 	bl	800ad4c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098c6:	1d3b      	adds	r3, r7, #4
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	1d3b      	adds	r3, r7, #4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4413      	add	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	463b      	mov	r3, r7
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	00da      	lsls	r2, r3, #3
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	4413      	add	r3, r2
 80098ea:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	f000 bcec 	b.w	800a2de <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009906:	463b      	mov	r3, r7
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	78db      	ldrb	r3, [r3, #3]
 800990c:	2b02      	cmp	r3, #2
 800990e:	f040 8356 	bne.w	8009fbe <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009912:	463b      	mov	r3, r7
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	463b      	mov	r3, r7
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	429a      	cmp	r2, r3
 8009920:	f240 82fa 	bls.w	8009f18 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009924:	1d3b      	adds	r3, r7, #4
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	463b      	mov	r3, r7
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8009942:	1d3b      	adds	r3, r7, #4
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	463b      	mov	r3, r7
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	441a      	add	r2, r3
 8009950:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009964:	b29b      	uxth	r3, r3
 8009966:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8009968:	463b      	mov	r3, r7
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009972:	463b      	mov	r3, r7
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a1a      	ldr	r2, [r3, #32]
 8009978:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800997c:	1ad2      	subs	r2, r2, r3
 800997e:	463b      	mov	r3, r7
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009984:	1d3b      	adds	r3, r7, #4
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 815e 	beq.w	8009c5c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
 80099a6:	463b      	mov	r3, r7
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d164      	bne.n	8009a7a <USB_EPStartXfer+0x218>
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099be:	b29b      	uxth	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	4413      	add	r3, r2
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	00da      	lsls	r2, r3, #3
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	4413      	add	r3, r2
 80099d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d112      	bne.n	8009a08 <USB_EPStartXfer+0x1a6>
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	801a      	strh	r2, [r3, #0]
 80099f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	e054      	b.n	8009ab2 <USB_EPStartXfer+0x250>
 8009a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a0e:	d817      	bhi.n	8009a40 <USB_EPStartXfer+0x1de>
 8009a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d004      	beq.n	8009a30 <USB_EPStartXfer+0x1ce>
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	029b      	lsls	r3, r3, #10
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	e038      	b.n	8009ab2 <USB_EPStartXfer+0x250>
 8009a40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a44:	095b      	lsrs	r3, r3, #5
 8009a46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a4e:	f003 031f 	and.w	r3, r3, #31
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <USB_EPStartXfer+0x1fe>
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	029b      	lsls	r3, r3, #10
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	e01b      	b.n	8009ab2 <USB_EPStartXfer+0x250>
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d116      	bne.n	8009ab2 <USB_EPStartXfer+0x250>
 8009a84:	1d3b      	adds	r3, r7, #4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a92:	4413      	add	r3, r2
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
 8009a96:	463b      	mov	r3, r7
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	00da      	lsls	r2, r3, #3
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	895b      	ldrh	r3, [r3, #10]
 8009ab8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009abc:	463b      	mov	r3, r7
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6959      	ldr	r1, [r3, #20]
 8009ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009acc:	1d38      	adds	r0, r7, #4
 8009ace:	6800      	ldr	r0, [r0, #0]
 8009ad0:	f001 f93c 	bl	800ad4c <USB_WritePMA>
            ep->xfer_buff += len;
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695a      	ldr	r2, [r3, #20]
 8009ada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ade:	441a      	add	r2, r3
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	463b      	mov	r3, r7
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d90e      	bls.n	8009b14 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8009af6:	463b      	mov	r3, r7
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009b00:	463b      	mov	r3, r7
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b0a:	1ad2      	subs	r2, r2, r3
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	621a      	str	r2, [r3, #32]
 8009b12:	e008      	b.n	8009b26 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b14:	463b      	mov	r3, r7
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8009b1e:	463b      	mov	r3, r7
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b26:	463b      	mov	r3, r7
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d164      	bne.n	8009bfa <USB_EPStartXfer+0x398>
 8009b30:	1d3b      	adds	r3, r7, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	1d3b      	adds	r3, r7, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	61fb      	str	r3, [r7, #28]
 8009b48:	463b      	mov	r3, r7
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	00da      	lsls	r2, r3, #3
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	4413      	add	r3, r2
 8009b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d112      	bne.n	8009b88 <USB_EPStartXfer+0x326>
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	e057      	b.n	8009c38 <USB_EPStartXfer+0x3d6>
 8009b88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8009b8e:	d817      	bhi.n	8009bc0 <USB_EPStartXfer+0x35e>
 8009b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <USB_EPStartXfer+0x34e>
 8009ba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009baa:	3301      	adds	r3, #1
 8009bac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	029b      	lsls	r3, r3, #10
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	e03b      	b.n	8009c38 <USB_EPStartXfer+0x3d6>
 8009bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bce:	f003 031f 	and.w	r3, r3, #31
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <USB_EPStartXfer+0x37e>
 8009bd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009be0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	029b      	lsls	r3, r3, #10
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	801a      	strh	r2, [r3, #0]
 8009bf8:	e01e      	b.n	8009c38 <USB_EPStartXfer+0x3d6>
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d119      	bne.n	8009c38 <USB_EPStartXfer+0x3d6>
 8009c04:	1d3b      	adds	r3, r7, #4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0a:	1d3b      	adds	r3, r7, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	461a      	mov	r2, r3
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	4413      	add	r3, r2
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1c:	463b      	mov	r3, r7
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	4413      	add	r3, r2
 8009c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c2c:	623b      	str	r3, [r7, #32]
 8009c2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c38:	463b      	mov	r3, r7
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	891b      	ldrh	r3, [r3, #8]
 8009c3e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c42:	463b      	mov	r3, r7
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6959      	ldr	r1, [r3, #20]
 8009c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009c52:	1d38      	adds	r0, r7, #4
 8009c54:	6800      	ldr	r0, [r0, #0]
 8009c56:	f001 f879 	bl	800ad4c <USB_WritePMA>
 8009c5a:	e340      	b.n	800a2de <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d164      	bne.n	8009d30 <USB_EPStartXfer+0x4ce>
 8009c66:	1d3b      	adds	r3, r7, #4
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c6c:	1d3b      	adds	r3, r7, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7a:	4413      	add	r3, r2
 8009c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c7e:	463b      	mov	r3, r7
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	00da      	lsls	r2, r3, #3
 8009c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c88:	4413      	add	r3, r2
 8009c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d112      	bne.n	8009cbe <USB_EPStartXfer+0x45c>
 8009c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e057      	b.n	8009d6e <USB_EPStartXfer+0x50c>
 8009cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8009cc4:	d817      	bhi.n	8009cf6 <USB_EPStartXfer+0x494>
 8009cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <USB_EPStartXfer+0x484>
 8009cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	029b      	lsls	r3, r3, #10
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf2:	801a      	strh	r2, [r3, #0]
 8009cf4:	e03b      	b.n	8009d6e <USB_EPStartXfer+0x50c>
 8009cf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <USB_EPStartXfer+0x4b4>
 8009d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d10:	3b01      	subs	r3, #1
 8009d12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	029b      	lsls	r3, r3, #10
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2c:	801a      	strh	r2, [r3, #0]
 8009d2e:	e01e      	b.n	8009d6e <USB_EPStartXfer+0x50c>
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d119      	bne.n	8009d6e <USB_EPStartXfer+0x50c>
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d40:	1d3b      	adds	r3, r7, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4e:	4413      	add	r3, r2
 8009d50:	657b      	str	r3, [r7, #84]	; 0x54
 8009d52:	463b      	mov	r3, r7
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	00da      	lsls	r2, r3, #3
 8009d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d62:	653b      	str	r3, [r7, #80]	; 0x50
 8009d64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d6e:	463b      	mov	r3, r7
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	891b      	ldrh	r3, [r3, #8]
 8009d74:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d78:	463b      	mov	r3, r7
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6959      	ldr	r1, [r3, #20]
 8009d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009d88:	1d38      	adds	r0, r7, #4
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	f000 ffde 	bl	800ad4c <USB_WritePMA>
            ep->xfer_buff += len;
 8009d90:	463b      	mov	r3, r7
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	695a      	ldr	r2, [r3, #20]
 8009d96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d9a:	441a      	add	r2, r3
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009da2:	463b      	mov	r3, r7
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a1a      	ldr	r2, [r3, #32]
 8009da8:	463b      	mov	r3, r7
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d90e      	bls.n	8009dd0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8009db2:	463b      	mov	r3, r7
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009dbc:	463b      	mov	r3, r7
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	463b      	mov	r3, r7
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	621a      	str	r2, [r3, #32]
 8009dce:	e008      	b.n	8009de2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8009dd0:	463b      	mov	r3, r7
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8009dda:	463b      	mov	r3, r7
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2200      	movs	r2, #0
 8009de0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009de2:	1d3b      	adds	r3, r7, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	647b      	str	r3, [r7, #68]	; 0x44
 8009de8:	463b      	mov	r3, r7
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d164      	bne.n	8009ebc <USB_EPStartXfer+0x65a>
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df8:	1d3b      	adds	r3, r7, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	461a      	mov	r2, r3
 8009e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e06:	4413      	add	r3, r2
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	00da      	lsls	r2, r3, #3
 8009e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e14:	4413      	add	r3, r2
 8009e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d112      	bne.n	8009e4a <USB_EPStartXfer+0x5e8>
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	801a      	strh	r2, [r3, #0]
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	801a      	strh	r2, [r3, #0]
 8009e48:	e054      	b.n	8009ef4 <USB_EPStartXfer+0x692>
 8009e4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e50:	d817      	bhi.n	8009e82 <USB_EPStartXfer+0x620>
 8009e52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <USB_EPStartXfer+0x610>
 8009e68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	029b      	lsls	r3, r3, #10
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	801a      	strh	r2, [r3, #0]
 8009e80:	e038      	b.n	8009ef4 <USB_EPStartXfer+0x692>
 8009e82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e86:	095b      	lsrs	r3, r3, #5
 8009e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e90:	f003 031f 	and.w	r3, r3, #31
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <USB_EPStartXfer+0x640>
 8009e98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	029b      	lsls	r3, r3, #10
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	801a      	strh	r2, [r3, #0]
 8009eba:	e01b      	b.n	8009ef4 <USB_EPStartXfer+0x692>
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d116      	bne.n	8009ef4 <USB_EPStartXfer+0x692>
 8009ec6:	1d3b      	adds	r3, r7, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed4:	4413      	add	r3, r2
 8009ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed8:	463b      	mov	r3, r7
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	00da      	lsls	r2, r3, #3
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8009eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	895b      	ldrh	r3, [r3, #10]
 8009efa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009efe:	463b      	mov	r3, r7
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6959      	ldr	r1, [r3, #20]
 8009f04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009f0e:	1d38      	adds	r0, r7, #4
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	f000 ff1b 	bl	800ad4c <USB_WritePMA>
 8009f16:	e1e2      	b.n	800a2de <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8009f18:	463b      	mov	r3, r7
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009f22:	1d3b      	adds	r3, r7, #4
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	463b      	mov	r3, r7
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009f40:	1d3b      	adds	r3, r7, #4
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	463b      	mov	r3, r7
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	441a      	add	r2, r3
 8009f4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8009f6c:	1d3b      	adds	r3, r7, #4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f7a:	4413      	add	r3, r2
 8009f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f7e:	463b      	mov	r3, r7
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	00da      	lsls	r2, r3, #3
 8009f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f88:	4413      	add	r3, r2
 8009f8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	891b      	ldrh	r3, [r3, #8]
 8009fa0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6959      	ldr	r1, [r3, #20]
 8009faa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009fb4:	1d38      	adds	r0, r7, #4
 8009fb6:	6800      	ldr	r0, [r0, #0]
 8009fb8:	f000 fec8 	bl	800ad4c <USB_WritePMA>
 8009fbc:	e18f      	b.n	800a2de <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009fbe:	1d3b      	adds	r3, r7, #4
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 808f 	beq.w	800a0f8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fda:	1d3b      	adds	r3, r7, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d164      	bne.n	800a0b4 <USB_EPStartXfer+0x852>
 8009fea:	1d3b      	adds	r3, r7, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	673b      	str	r3, [r7, #112]	; 0x70
 8009ff0:	1d3b      	adds	r3, r7, #4
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ffe:	4413      	add	r3, r2
 800a000:	673b      	str	r3, [r7, #112]	; 0x70
 800a002:	463b      	mov	r3, r7
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	00da      	lsls	r2, r3, #3
 800a00a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a00c:	4413      	add	r3, r2
 800a00e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a012:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d112      	bne.n	800a042 <USB_EPStartXfer+0x7e0>
 800a01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a026:	b29a      	uxth	r2, r3
 800a028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03e:	801a      	strh	r2, [r3, #0]
 800a040:	e054      	b.n	800a0ec <USB_EPStartXfer+0x88a>
 800a042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a046:	2b3e      	cmp	r3, #62	; 0x3e
 800a048:	d817      	bhi.n	800a07a <USB_EPStartXfer+0x818>
 800a04a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <USB_EPStartXfer+0x808>
 800a060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a064:	3301      	adds	r3, #1
 800a066:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06e:	b29b      	uxth	r3, r3
 800a070:	029b      	lsls	r3, r3, #10
 800a072:	b29a      	uxth	r2, r3
 800a074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	e038      	b.n	800a0ec <USB_EPStartXfer+0x88a>
 800a07a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a084:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a088:	f003 031f 	and.w	r3, r3, #31
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d104      	bne.n	800a09a <USB_EPStartXfer+0x838>
 800a090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a094:	3b01      	subs	r3, #1
 800a096:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a09a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b0:	801a      	strh	r2, [r3, #0]
 800a0b2:	e01b      	b.n	800a0ec <USB_EPStartXfer+0x88a>
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d116      	bne.n	800a0ec <USB_EPStartXfer+0x88a>
 800a0be:	1d3b      	adds	r3, r7, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0cc:	4413      	add	r3, r2
 800a0ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	00da      	lsls	r2, r3, #3
 800a0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0e0:	677b      	str	r3, [r7, #116]	; 0x74
 800a0e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	895b      	ldrh	r3, [r3, #10]
 800a0f2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800a0f6:	e097      	b.n	800a228 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d168      	bne.n	800a1d4 <USB_EPStartXfer+0x972>
 800a102:	1d3b      	adds	r3, r7, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a10a:	1d3b      	adds	r3, r7, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a112:	b29b      	uxth	r3, r3
 800a114:	461a      	mov	r2, r3
 800a116:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a11a:	4413      	add	r3, r2
 800a11c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a120:	463b      	mov	r3, r7
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	00da      	lsls	r2, r3, #3
 800a128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a12c:	4413      	add	r3, r2
 800a12e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a132:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a134:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d112      	bne.n	800a162 <USB_EPStartXfer+0x900>
 800a13c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a146:	b29a      	uxth	r2, r3
 800a148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a14a:	801a      	strh	r2, [r3, #0]
 800a14c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a15e:	801a      	strh	r2, [r3, #0]
 800a160:	e05d      	b.n	800a21e <USB_EPStartXfer+0x9bc>
 800a162:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a166:	2b3e      	cmp	r3, #62	; 0x3e
 800a168:	d817      	bhi.n	800a19a <USB_EPStartXfer+0x938>
 800a16a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a16e:	085b      	lsrs	r3, r3, #1
 800a170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a174:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <USB_EPStartXfer+0x928>
 800a180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a184:	3301      	adds	r3, #1
 800a186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a18a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a18e:	b29b      	uxth	r3, r3
 800a190:	029b      	lsls	r3, r3, #10
 800a192:	b29a      	uxth	r2, r3
 800a194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e041      	b.n	800a21e <USB_EPStartXfer+0x9bc>
 800a19a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a19e:	095b      	lsrs	r3, r3, #5
 800a1a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1a8:	f003 031f 	and.w	r3, r3, #31
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <USB_EPStartXfer+0x958>
 800a1b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	029b      	lsls	r3, r3, #10
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1d0:	801a      	strh	r2, [r3, #0]
 800a1d2:	e024      	b.n	800a21e <USB_EPStartXfer+0x9bc>
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d11f      	bne.n	800a21e <USB_EPStartXfer+0x9bc>
 800a1de:	1d3b      	adds	r3, r7, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1e6:	1d3b      	adds	r3, r7, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1fc:	463b      	mov	r3, r7
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	00da      	lsls	r2, r3, #3
 800a204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a208:	4413      	add	r3, r2
 800a20a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a20e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a21c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a21e:	463b      	mov	r3, r7
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	891b      	ldrh	r3, [r3, #8]
 800a224:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a228:	463b      	mov	r3, r7
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6959      	ldr	r1, [r3, #20]
 800a22e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a232:	b29b      	uxth	r3, r3
 800a234:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a238:	1d38      	adds	r0, r7, #4
 800a23a:	6800      	ldr	r0, [r0, #0]
 800a23c:	f000 fd86 	bl	800ad4c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a240:	463b      	mov	r3, r7
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	785b      	ldrb	r3, [r3, #1]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d122      	bne.n	800a290 <USB_EPStartXfer+0xa2e>
 800a24a:	1d3b      	adds	r3, r7, #4
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a264:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	463b      	mov	r3, r7
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	441a      	add	r2, r3
 800a276:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a27a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a27e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	8013      	strh	r3, [r2, #0]
 800a28e:	e026      	b.n	800a2de <USB_EPStartXfer+0xa7c>
 800a290:	463b      	mov	r3, r7
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d121      	bne.n	800a2de <USB_EPStartXfer+0xa7c>
 800a29a:	1d3b      	adds	r3, r7, #4
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	463b      	mov	r3, r7
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a2b8:	1d3b      	adds	r3, r7, #4
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	463b      	mov	r3, r7
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	441a      	add	r2, r3
 800a2c6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a2de:	1d3b      	adds	r3, r7, #4
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f107 020e 	add.w	r2, r7, #14
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2fc:	8013      	strh	r3, [r2, #0]
 800a2fe:	f107 030e 	add.w	r3, r7, #14
 800a302:	f107 020e 	add.w	r2, r7, #14
 800a306:	8812      	ldrh	r2, [r2, #0]
 800a308:	f082 0210 	eor.w	r2, r2, #16
 800a30c:	801a      	strh	r2, [r3, #0]
 800a30e:	f107 030e 	add.w	r3, r7, #14
 800a312:	f107 020e 	add.w	r2, r7, #14
 800a316:	8812      	ldrh	r2, [r2, #0]
 800a318:	f082 0220 	eor.w	r2, r2, #32
 800a31c:	801a      	strh	r2, [r3, #0]
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	463b      	mov	r3, r7
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	441a      	add	r2, r3
 800a32c:	f107 030e 	add.w	r3, r7, #14
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a33a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	b29b      	uxth	r3, r3
 800a344:	8013      	strh	r3, [r2, #0]
 800a346:	e3b5      	b.n	800aab4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a348:	463b      	mov	r3, r7
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	7b1b      	ldrb	r3, [r3, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f040 8090 	bne.w	800a474 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800a354:	463b      	mov	r3, r7
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	699a      	ldr	r2, [r3, #24]
 800a35a:	463b      	mov	r3, r7
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	429a      	cmp	r2, r3
 800a362:	d90e      	bls.n	800a382 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800a364:	463b      	mov	r3, r7
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800a36e:	463b      	mov	r3, r7
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	699a      	ldr	r2, [r3, #24]
 800a374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a378:	1ad2      	subs	r2, r2, r3
 800a37a:	463b      	mov	r3, r7
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	619a      	str	r2, [r3, #24]
 800a380:	e008      	b.n	800a394 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800a382:	463b      	mov	r3, r7
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800a38c:	463b      	mov	r3, r7
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2200      	movs	r2, #0
 800a392:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a394:	1d3b      	adds	r3, r7, #4
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a39c:	1d3b      	adds	r3, r7, #4
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	00da      	lsls	r2, r3, #3
 800a3ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3be:	4413      	add	r3, r2
 800a3c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d116      	bne.n	800a3fe <USB_EPStartXfer+0xb9c>
 800a3d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e32c      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
 800a3fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a402:	2b3e      	cmp	r3, #62	; 0x3e
 800a404:	d818      	bhi.n	800a438 <USB_EPStartXfer+0xbd6>
 800a406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a40a:	085b      	lsrs	r3, r3, #1
 800a40c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a410:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d004      	beq.n	800a426 <USB_EPStartXfer+0xbc4>
 800a41c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a420:	3301      	adds	r3, #1
 800a422:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a426:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	029b      	lsls	r3, r3, #10
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e30f      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
 800a438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a43c:	095b      	lsrs	r3, r3, #5
 800a43e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a446:	f003 031f 	and.w	r3, r3, #31
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d104      	bne.n	800a458 <USB_EPStartXfer+0xbf6>
 800a44e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a452:	3b01      	subs	r3, #1
 800a454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a458:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	029b      	lsls	r3, r3, #10
 800a460:	b29b      	uxth	r3, r3
 800a462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a470:	801a      	strh	r2, [r3, #0]
 800a472:	e2f1      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800a474:	463b      	mov	r3, r7
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	78db      	ldrb	r3, [r3, #3]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	f040 818f 	bne.w	800a79e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a480:	463b      	mov	r3, r7
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d175      	bne.n	800a576 <USB_EPStartXfer+0xd14>
 800a48a:	1d3b      	adds	r3, r7, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a492:	1d3b      	adds	r3, r7, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	461a      	mov	r2, r3
 800a49e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4a8:	463b      	mov	r3, r7
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	00da      	lsls	r2, r3, #3
 800a4b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4be:	463b      	mov	r3, r7
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d116      	bne.n	800a4f6 <USB_EPStartXfer+0xc94>
 800a4c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4f2:	801a      	strh	r2, [r3, #0]
 800a4f4:	e065      	b.n	800a5c2 <USB_EPStartXfer+0xd60>
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b3e      	cmp	r3, #62	; 0x3e
 800a4fe:	d81a      	bhi.n	800a536 <USB_EPStartXfer+0xcd4>
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	085b      	lsrs	r3, r3, #1
 800a508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a50c:	463b      	mov	r3, r7
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <USB_EPStartXfer+0xcc2>
 800a51a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a51e:	3301      	adds	r3, #1
 800a520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a524:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a528:	b29b      	uxth	r3, r3
 800a52a:	029b      	lsls	r3, r3, #10
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	e045      	b.n	800a5c2 <USB_EPStartXfer+0xd60>
 800a536:	463b      	mov	r3, r7
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	095b      	lsrs	r3, r3, #5
 800a53e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a542:	463b      	mov	r3, r7
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 031f 	and.w	r3, r3, #31
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <USB_EPStartXfer+0xcf8>
 800a550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a554:	3b01      	subs	r3, #1
 800a556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a55a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a55e:	b29b      	uxth	r3, r3
 800a560:	029b      	lsls	r3, r3, #10
 800a562:	b29b      	uxth	r3, r3
 800a564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	e025      	b.n	800a5c2 <USB_EPStartXfer+0xd60>
 800a576:	463b      	mov	r3, r7
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d120      	bne.n	800a5c2 <USB_EPStartXfer+0xd60>
 800a580:	1d3b      	adds	r3, r7, #4
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a588:	1d3b      	adds	r3, r7, #4
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a590:	b29b      	uxth	r3, r3
 800a592:	461a      	mov	r2, r3
 800a594:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a598:	4413      	add	r3, r2
 800a59a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a59e:	463b      	mov	r3, r7
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	00da      	lsls	r2, r3, #3
 800a5a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	1d3b      	adds	r3, r7, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d175      	bne.n	800a6c0 <USB_EPStartXfer+0xe5e>
 800a5d4:	1d3b      	adds	r3, r7, #4
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5dc:	1d3b      	adds	r3, r7, #4
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5f2:	463b      	mov	r3, r7
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	00da      	lsls	r2, r3, #3
 800a5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5fe:	4413      	add	r3, r2
 800a600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a608:	463b      	mov	r3, r7
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d116      	bne.n	800a640 <USB_EPStartXfer+0xdde>
 800a612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a61e:	b29a      	uxth	r2, r3
 800a620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a624:	801a      	strh	r2, [r3, #0]
 800a626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a636:	b29a      	uxth	r2, r3
 800a638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	e061      	b.n	800a704 <USB_EPStartXfer+0xea2>
 800a640:	463b      	mov	r3, r7
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	2b3e      	cmp	r3, #62	; 0x3e
 800a648:	d81a      	bhi.n	800a680 <USB_EPStartXfer+0xe1e>
 800a64a:	463b      	mov	r3, r7
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	085b      	lsrs	r3, r3, #1
 800a652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a656:	463b      	mov	r3, r7
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <USB_EPStartXfer+0xe0c>
 800a664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a668:	3301      	adds	r3, #1
 800a66a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a672:	b29b      	uxth	r3, r3
 800a674:	029b      	lsls	r3, r3, #10
 800a676:	b29a      	uxth	r2, r3
 800a678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	e041      	b.n	800a704 <USB_EPStartXfer+0xea2>
 800a680:	463b      	mov	r3, r7
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a68c:	463b      	mov	r3, r7
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	f003 031f 	and.w	r3, r3, #31
 800a696:	2b00      	cmp	r3, #0
 800a698:	d104      	bne.n	800a6a4 <USB_EPStartXfer+0xe42>
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	029b      	lsls	r3, r3, #10
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	e021      	b.n	800a704 <USB_EPStartXfer+0xea2>
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d11c      	bne.n	800a704 <USB_EPStartXfer+0xea2>
 800a6ca:	1d3b      	adds	r3, r7, #4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6da:	4413      	add	r3, r2
 800a6dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	00da      	lsls	r2, r3, #3
 800a6e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a702:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800a704:	463b      	mov	r3, r7
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 81a4 	beq.w	800aa58 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a710:	1d3b      	adds	r3, r7, #4
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	463b      	mov	r3, r7
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a724:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <USB_EPStartXfer+0xeda>
 800a730:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10d      	bne.n	800a758 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a73c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8187 	bne.w	800aa58 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a74a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	f040 8180 	bne.w	800aa58 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a758:	1d3b      	adds	r3, r7, #4
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	463b      	mov	r3, r7
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a772:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800a776:	1d3b      	adds	r3, r7, #4
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	463b      	mov	r3, r7
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	441a      	add	r2, r3
 800a784:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800a788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a798:	b29b      	uxth	r3, r3
 800a79a:	8013      	strh	r3, [r2, #0]
 800a79c:	e15c      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a79e:	463b      	mov	r3, r7
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	78db      	ldrb	r3, [r3, #3]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	f040 8155 	bne.w	800aa54 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800a7aa:	463b      	mov	r3, r7
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	699a      	ldr	r2, [r3, #24]
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d90e      	bls.n	800a7d8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800a7c4:	463b      	mov	r3, r7
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	699a      	ldr	r2, [r3, #24]
 800a7ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	619a      	str	r2, [r3, #24]
 800a7d6:	e008      	b.n	800a7ea <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800a7d8:	463b      	mov	r3, r7
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d16f      	bne.n	800a8d4 <USB_EPStartXfer+0x1072>
 800a7f4:	1d3b      	adds	r3, r7, #4
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7fc:	1d3b      	adds	r3, r7, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a804:	b29b      	uxth	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a80c:	4413      	add	r3, r2
 800a80e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a812:	463b      	mov	r3, r7
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	00da      	lsls	r2, r3, #3
 800a81a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a81e:	4413      	add	r3, r2
 800a820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d116      	bne.n	800a85e <USB_EPStartXfer+0xffc>
 800a830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a854:	b29a      	uxth	r2, r3
 800a856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e05f      	b.n	800a91e <USB_EPStartXfer+0x10bc>
 800a85e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a862:	2b3e      	cmp	r3, #62	; 0x3e
 800a864:	d818      	bhi.n	800a898 <USB_EPStartXfer+0x1036>
 800a866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a86a:	085b      	lsrs	r3, r3, #1
 800a86c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a870:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <USB_EPStartXfer+0x1024>
 800a87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a880:	3301      	adds	r3, #1
 800a882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29a      	uxth	r2, r3
 800a890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	e042      	b.n	800a91e <USB_EPStartXfer+0x10bc>
 800a898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a89c:	095b      	lsrs	r3, r3, #5
 800a89e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a8a6:	f003 031f 	and.w	r3, r3, #31
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <USB_EPStartXfer+0x1056>
 800a8ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	029b      	lsls	r3, r3, #10
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e024      	b.n	800a91e <USB_EPStartXfer+0x10bc>
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d11f      	bne.n	800a91e <USB_EPStartXfer+0x10bc>
 800a8de:	1d3b      	adds	r3, r7, #4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8e6:	1d3b      	adds	r3, r7, #4
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	00da      	lsls	r2, r3, #3
 800a904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a908:	4413      	add	r3, r2
 800a90a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a90e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a916:	b29a      	uxth	r2, r3
 800a918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	1d3b      	adds	r3, r7, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a926:	463b      	mov	r3, r7
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d16f      	bne.n	800aa10 <USB_EPStartXfer+0x11ae>
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a938:	1d3b      	adds	r3, r7, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a940:	b29b      	uxth	r3, r3
 800a942:	461a      	mov	r2, r3
 800a944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a948:	4413      	add	r3, r2
 800a94a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a94e:	463b      	mov	r3, r7
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	00da      	lsls	r2, r3, #3
 800a956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a95a:	4413      	add	r3, r2
 800a95c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a964:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d116      	bne.n	800a99a <USB_EPStartXfer+0x1138>
 800a96c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	b29b      	uxth	r3, r3
 800a974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a978:	b29a      	uxth	r2, r3
 800a97a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a97e:	801a      	strh	r2, [r3, #0]
 800a980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	b29b      	uxth	r3, r3
 800a988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a98c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a990:	b29a      	uxth	r2, r3
 800a992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a996:	801a      	strh	r2, [r3, #0]
 800a998:	e05e      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
 800a99a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a99e:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a0:	d818      	bhi.n	800a9d4 <USB_EPStartXfer+0x1172>
 800a9a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9a6:	085b      	lsrs	r3, r3, #1
 800a9a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <USB_EPStartXfer+0x1160>
 800a9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9bc:	3301      	adds	r3, #1
 800a9be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	029b      	lsls	r3, r3, #10
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e041      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
 800a9d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9d8:	095b      	lsrs	r3, r3, #5
 800a9da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9e2:	f003 031f 	and.w	r3, r3, #31
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d104      	bne.n	800a9f4 <USB_EPStartXfer+0x1192>
 800a9ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	029b      	lsls	r3, r3, #10
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa0c:	801a      	strh	r2, [r3, #0]
 800aa0e:	e023      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
 800aa10:	463b      	mov	r3, r7
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d11e      	bne.n	800aa58 <USB_EPStartXfer+0x11f6>
 800aa1a:	1d3b      	adds	r3, r7, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa30:	463b      	mov	r3, r7
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	00da      	lsls	r2, r3, #3
 800aa38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa50:	801a      	strh	r2, [r3, #0]
 800aa52:	e001      	b.n	800aa58 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e02e      	b.n	800aab6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa58:	1d3b      	adds	r3, r7, #4
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	463b      	mov	r3, r7
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa72:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800aa76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aa7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800aa82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aa86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800aa8e:	1d3b      	adds	r3, r7, #4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	463b      	mov	r3, r7
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	441a      	add	r2, r3
 800aa9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800aaa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	785b      	ldrb	r3, [r3, #1]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d020      	beq.n	800ab14 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae8:	81bb      	strh	r3, [r7, #12]
 800aaea:	89bb      	ldrh	r3, [r7, #12]
 800aaec:	f083 0310 	eor.w	r3, r3, #16
 800aaf0:	81bb      	strh	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	441a      	add	r2, r3
 800aafc:	89bb      	ldrh	r3, [r7, #12]
 800aafe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	8013      	strh	r3, [r2, #0]
 800ab12:	e01f      	b.n	800ab54 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2a:	81fb      	strh	r3, [r7, #14]
 800ab2c:	89fb      	ldrh	r3, [r7, #14]
 800ab2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab32:	81fb      	strh	r3, [r7, #14]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	441a      	add	r2, r3
 800ab3e:	89fb      	ldrh	r3, [r7, #14]
 800ab40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b087      	sub	sp, #28
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	7b1b      	ldrb	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 809d 	bne.w	800acb0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d04c      	beq.n	800ac18 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	823b      	strh	r3, [r7, #16]
 800ab8c:	8a3b      	ldrh	r3, [r7, #16]
 800ab8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01b      	beq.n	800abce <USB_EPClearStall+0x6c>
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abac:	81fb      	strh	r3, [r7, #14]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	441a      	add	r2, r3
 800abb8:	89fb      	ldrh	r3, [r7, #14]
 800abba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abca:	b29b      	uxth	r3, r3
 800abcc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	78db      	ldrb	r3, [r3, #3]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d06c      	beq.n	800acb0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abec:	81bb      	strh	r3, [r7, #12]
 800abee:	89bb      	ldrh	r3, [r7, #12]
 800abf0:	f083 0320 	eor.w	r3, r3, #32
 800abf4:	81bb      	strh	r3, [r7, #12]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	441a      	add	r2, r3
 800ac00:	89bb      	ldrh	r3, [r7, #12]
 800ac02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	8013      	strh	r3, [r2, #0]
 800ac16:	e04b      	b.n	800acb0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	82fb      	strh	r3, [r7, #22]
 800ac26:	8afb      	ldrh	r3, [r7, #22]
 800ac28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01b      	beq.n	800ac68 <USB_EPClearStall+0x106>
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac46:	82bb      	strh	r3, [r7, #20]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	441a      	add	r2, r3
 800ac52:	8abb      	ldrh	r3, [r7, #20]
 800ac54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7e:	827b      	strh	r3, [r7, #18]
 800ac80:	8a7b      	ldrh	r3, [r7, #18]
 800ac82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac86:	827b      	strh	r3, [r7, #18]
 800ac88:	8a7b      	ldrh	r3, [r7, #18]
 800ac8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac8e:	827b      	strh	r3, [r7, #18]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	441a      	add	r2, r3
 800ac9a:	8a7b      	ldrh	r3, [r7, #18]
 800ac9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acac:	b29b      	uxth	r3, r3
 800acae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	460b      	mov	r3, r1
 800acc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800acca:	78fb      	ldrb	r3, [r7, #3]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2280      	movs	r2, #128	; 0x80
 800acd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b083      	sub	sp, #12
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad26:	68fb      	ldr	r3, [r7, #12]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b08d      	sub	sp, #52	; 0x34
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4611      	mov	r1, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	80fb      	strh	r3, [r7, #6]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad62:	88bb      	ldrh	r3, [r7, #4]
 800ad64:	3301      	adds	r3, #1
 800ad66:	085b      	lsrs	r3, r3, #1
 800ad68:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad72:	88fa      	ldrh	r2, [r7, #6]
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad82:	e01b      	b.n	800adbc <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adac:	3302      	adds	r3, #2
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	3301      	adds	r3, #1
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	3b01      	subs	r3, #1
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e0      	bne.n	800ad84 <USB_WritePMA+0x38>
  }
}
 800adc2:	bf00      	nop
 800adc4:	3734      	adds	r7, #52	; 0x34
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800adce:	b480      	push	{r7}
 800add0:	b08b      	sub	sp, #44	; 0x2c
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	4611      	mov	r1, r2
 800adda:	461a      	mov	r2, r3
 800addc:	460b      	mov	r3, r1
 800adde:	80fb      	strh	r3, [r7, #6]
 800ade0:	4613      	mov	r3, r2
 800ade2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ade4:	88bb      	ldrh	r3, [r7, #4]
 800ade6:	085b      	lsrs	r3, r3, #1
 800ade8:	b29b      	uxth	r3, r3
 800adea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800adf4:	88fa      	ldrh	r2, [r7, #6]
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adfe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
 800ae04:	e018      	b.n	800ae38 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	3302      	adds	r3, #2
 800ae12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	0a1b      	lsrs	r3, r3, #8
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	3b01      	subs	r3, #1
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e3      	bne.n	800ae06 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ae3e:	88bb      	ldrh	r3, [r7, #4]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	701a      	strb	r2, [r3, #0]
  }
}
 800ae5a:	bf00      	nop
 800ae5c:	372c      	adds	r7, #44	; 0x2c
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <initDrum>:
#include "drumidy.h"


void initDrum(DRUM* _chnl, DRM_voice _main_voice, DRM_voice _aux_voice, DRM_type _aux_type)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	4608      	mov	r0, r1
 800ae70:	4611      	mov	r1, r2
 800ae72:	461a      	mov	r2, r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	70fb      	strb	r3, [r7, #3]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70bb      	strb	r3, [r7, #2]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	707b      	strb	r3, [r7, #1]
	// main configuration
	_chnl->main_voice 			= _main_voice;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	701a      	strb	r2, [r3, #0]
	_chnl->aux_voice  			= _aux_voice;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	78ba      	ldrb	r2, [r7, #2]
 800ae8a:	709a      	strb	r2, [r3, #2]
	_chnl->aux_type   			= _aux_type;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	787a      	ldrb	r2, [r7, #1]
 800ae90:	70da      	strb	r2, [r3, #3]

	// parameters default values
	_chnl->peak_threshold		= 50;		// 50,  ADC max 4096
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2232      	movs	r2, #50	; 0x32
 800ae96:	605a      	str	r2, [r3, #4]
	_chnl->peak_max_length		= 201;		// 201 	x0.1=20.1ms
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	22c9      	movs	r2, #201	; 0xc9
 800ae9c:	609a      	str	r2, [r3, #8]
	_chnl->peak_min_length		= 15; 		// 15 	x0.1=1.5ms
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	220f      	movs	r2, #15
 800aea2:	60da      	str	r2, [r3, #12]
	_chnl->time_between_peaks	= 60;		// 60,	ms
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	223c      	movs	r2, #60	; 0x3c
 800aea8:	611a      	str	r2, [r3, #16]

	// likely to overwrite
	_chnl->alt_voice  			= MUTE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	705a      	strb	r2, [r3, #1]

	// update all variables
	_chnl->main_status 			= CHANNEL_STATUS_IDLE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	751a      	strb	r2, [r3, #20]
	_chnl->aux_status 			= CHANNEL_STATUS_IDLE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	755a      	strb	r2, [r3, #21]

	_chnl->main_rdy 		 	= 0;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	759a      	strb	r2, [r3, #22]
	_chnl->main_rdy_height 	 	= 0;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	619a      	str	r2, [r3, #24]
	_chnl->main_rdy_time	 	= 0;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	61da      	str	r2, [r3, #28]
	_chnl->main_rdy_volume	 	= 0;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2020 	strb.w	r2, [r3, #32]
	_chnl->main_rdy_length	 	= 0;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	625a      	str	r2, [r3, #36]	; 0x24

	_chnl->main_active_max 	 	= 0;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	629a      	str	r2, [r3, #40]	; 0x28
	_chnl->main_active_length	= 0;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	62da      	str	r2, [r3, #44]	; 0x2c
	_chnl->main_active_time  	= 0;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	631a      	str	r2, [r3, #48]	; 0x30

	_chnl->aux_rdy				= 0;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	_chnl->aux_rdy_time			= 0;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38
	_chnl->aux_active_time		= 0;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	641a      	str	r2, [r3, #64]	; 0x40

	if (_aux_type == AUX_TYPE_PAD){
 800af02:	787b      	ldrb	r3, [r7, #1]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10c      	bne.n	800af22 <initDrum+0xbc>
		_chnl->aux_active_state	= CHANNEL_PAD_IDLE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		_chnl->aux_rdy_state	= CHANNEL_PAD_IDLE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		_chnl->aux_last_state	= CHANNEL_PAD_IDLE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
		_chnl->aux_last_state	= CHANNEL_PEDAL_IDLE;

	}

}
 800af20:	e00b      	b.n	800af3a <initDrum+0xd4>
		_chnl->aux_active_state	= CHANNEL_PEDAL_IDLE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2202      	movs	r2, #2
 800af26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2202      	movs	r2, #2
 800af2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		_chnl->aux_last_state	= CHANNEL_PEDAL_IDLE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2202      	movs	r2, #2
 800af36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 800af3a:	bf00      	nop
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
	...

0800af48 <Update_channel>:
//}



//void sendMidiAS ();
uint8_t Update_channel(DRUM* _chnl, uint32_t _adc_reading, GPIO_PinState _aux_state){
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]
	// ### MAIN INPUT ###
	//	set threshold level
	uint16_t thresh = _chnl->peak_threshold;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	82fb      	strh	r3, [r7, #22]
	if (STEP_TIME - _chnl->main_rdy_time < _chnl->time_between_peaks){
 800af5c:	4b99      	ldr	r3, [pc, #612]	; (800b1c4 <Update_channel+0x27c>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	1ad2      	subs	r2, r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d216      	bcs.n	800af9c <Update_channel+0x54>
		thresh = (_chnl->main_rdy_height>>1) +  _chnl->peak_threshold;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	085b      	lsrs	r3, r3, #1
 800af74:	b29a      	uxth	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	4413      	add	r3, r2
 800af7e:	82fb      	strh	r3, [r7, #22]
		// if sooner then half way between peaks, accept only higher peaks
		if (STEP_TIME - _chnl->main_rdy_time < (_chnl->time_between_peaks>>1))
 800af80:	4b90      	ldr	r3, [pc, #576]	; (800b1c4 <Update_channel+0x27c>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	085b      	lsrs	r3, r3, #1
 800af90:	429a      	cmp	r2, r3
 800af92:	d20a      	bcs.n	800afaa <Update_channel+0x62>
			thresh =_chnl->main_rdy_height;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	82fb      	strh	r3, [r7, #22]
 800af9a:	e006      	b.n	800afaa <Update_channel+0x62>
	}else{
		if (_chnl->main_status == CHANNEL_STATUS_MUTED)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	7d1b      	ldrb	r3, [r3, #20]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d102      	bne.n	800afaa <Update_channel+0x62>
			_chnl->main_status  = CHANNEL_STATUS_IDLE;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	751a      	strb	r2, [r3, #20]
	}

	if (_adc_reading > thresh){
 800afaa:	8afb      	ldrh	r3, [r7, #22]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d960      	bls.n	800b074 <Update_channel+0x12c>

		_chnl->main_active_length += 1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

		// if this is first point in the peak, update starting time
		if (_chnl->main_active_time == 0){
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d106      	bne.n	800afd2 <Update_channel+0x8a>
			_chnl->main_active_time = STEP_TIME;
 800afc4:	4b7f      	ldr	r3, [pc, #508]	; (800b1c4 <Update_channel+0x27c>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	631a      	str	r2, [r3, #48]	; 0x30
			_chnl->main_status = CHANNEL_STATUS_PEAK;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2201      	movs	r2, #1
 800afd0:	751a      	strb	r2, [r3, #20]
		}
		// if the value is bigger then max, update max
		if (_adc_reading > _chnl->main_active_max)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d902      	bls.n	800afe2 <Update_channel+0x9a>
					       _chnl->main_active_max  = _adc_reading;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	629a      	str	r2, [r3, #40]	; 0x28

		// if the point is lower then half of the peak (or peak is too long)
		if ( (_adc_reading < (_chnl->main_active_max>>1)) || (_chnl->main_active_length >= _chnl->peak_max_length)){
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	429a      	cmp	r2, r3
 800afec:	d305      	bcc.n	800affa <Update_channel+0xb2>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d345      	bcc.n	800b086 <Update_channel+0x13e>
			if ((_chnl->main_active_length > _chnl->peak_min_length) && (_chnl->main_active_length <= _chnl->peak_max_length)){
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	429a      	cmp	r2, r3
 800b004:	d93f      	bls.n	800b086 <Update_channel+0x13e>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d839      	bhi.n	800b086 <Update_channel+0x13e>
				// set values to report
				_chnl->main_rdy 		=  1;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	759a      	strb	r2, [r3, #22]
				_chnl->main_rdy_height 	= _chnl->main_active_max;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	619a      	str	r2, [r3, #24]
				_chnl->main_rdy_length 	= _chnl->main_active_length;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	625a      	str	r2, [r3, #36]	; 0x24
				_chnl->main_rdy_time 	= _chnl->main_active_time;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	61da      	str	r2, [r3, #28]
				if (_chnl->aux_type == AUX_TYPE_RIM)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	78db      	ldrb	r3, [r3, #3]
 800b034:	2b04      	cmp	r3, #4
 800b036:	d110      	bne.n	800b05a <Update_channel+0x112>
					if (	(STEP_TIME - _chnl->aux_rdy_time  > 1)
 800b038:	4b62      	ldr	r3, [pc, #392]	; (800b1c4 <Update_channel+0x27c>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b01      	cmp	r3, #1
 800b044:	d909      	bls.n	800b05a <Update_channel+0x112>
						&&  (STEP_TIME - _chnl->aux_rdy_time  <= RIM_BLOCKING_TIME)){
 800b046:	4b5f      	ldr	r3, [pc, #380]	; (800b1c4 <Update_channel+0x27c>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	2b0a      	cmp	r3, #10
 800b052:	d802      	bhi.n	800b05a <Update_channel+0x112>
						_chnl->main_rdy 		=  0; // blocked by aux channel
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	759a      	strb	r2, [r3, #22]
					}


				//clean variables for next cycle
				_chnl->main_active_max    = 0;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	629a      	str	r2, [r3, #40]	; 0x28
				_chnl->main_active_time	  = 0;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	631a      	str	r2, [r3, #48]	; 0x30
				_chnl->main_active_length = 0;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	62da      	str	r2, [r3, #44]	; 0x2c
				_chnl->main_status = CHANNEL_STATUS_MUTED;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2202      	movs	r2, #2
 800b070:	751a      	strb	r2, [r3, #20]
 800b072:	e008      	b.n	800b086 <Update_channel+0x13e>
			}
		}
	} else {
		_chnl->main_active_length = 0;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	62da      	str	r2, [r3, #44]	; 0x2c
		_chnl->main_active_time	  = 0;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2200      	movs	r2, #0
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30
		_chnl->main_active_max    = 0;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// ### AUX INPUT ###
	if (_chnl->aux_type == AUX_TYPE_RIM){
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	d151      	bne.n	800b132 <Update_channel+0x1ea>
		if (_aux_state == GPIO_PIN_RESET)
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <Update_channel+0x156>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b09c:	e003      	b.n	800b0a6 <Update_channel+0x15e>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		// new peak
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d12c      	bne.n	800b10a <Update_channel+0x1c2>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d127      	bne.n	800b10a <Update_channel+0x1c2>
			if (STEP_TIME - _chnl->aux_rdy_time > _chnl->time_between_peaks) {
 800b0ba:	4b42      	ldr	r3, [pc, #264]	; (800b1c4 <Update_channel+0x27c>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	1ad2      	subs	r2, r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d91e      	bls.n	800b10a <Update_channel+0x1c2>
//				_chnl->aux_rdy			 = 1;
				_chnl->aux_rdy_time		 = STEP_TIME;
 800b0cc:	4b3d      	ldr	r3, [pc, #244]	; (800b1c4 <Update_channel+0x27c>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	755a      	strb	r2, [r3, #21]

				if (STEP_TIME - _chnl->main_rdy_time  < _chnl->time_between_peaks){
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <Update_channel+0x27c>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d204      	bcs.n	800b102 <Update_channel+0x1ba>
					_chnl->aux_rdy 		=  0; // blocked by main channel
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b100:	e003      	b.n	800b10a <Update_channel+0x1c2>
				}else{
					_chnl->aux_rdy 		=  1; // blocked by main channel
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}
			}
		}
		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b110:	2b00      	cmp	r3, #0
 800b112:	d107      	bne.n	800b124 <Update_channel+0x1dc>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d102      	bne.n	800b124 <Update_channel+0x1dc>
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	755a      	strb	r2, [r3, #21]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b130:	e0a6      	b.n	800b280 <Update_channel+0x338>

	}else if (_chnl->aux_type == AUX_TYPE_PAD){
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	78db      	ldrb	r3, [r3, #3]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d146      	bne.n	800b1c8 <Update_channel+0x280>

		if (_aux_state == GPIO_PIN_RESET)
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d104      	bne.n	800b14a <Update_channel+0x202>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b148:	e003      	b.n	800b152 <Update_channel+0x20a>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		// new peak
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d11e      	bne.n	800b19a <Update_channel+0x252>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b162:	2b00      	cmp	r3, #0
 800b164:	d119      	bne.n	800b19a <Update_channel+0x252>
			if (STEP_TIME - _chnl->aux_rdy_time > _chnl->time_between_peaks) {
 800b166:	4b17      	ldr	r3, [pc, #92]	; (800b1c4 <Update_channel+0x27c>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	429a      	cmp	r2, r3
 800b176:	d910      	bls.n	800b19a <Update_channel+0x252>
				_chnl->aux_rdy			 = 1;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				_chnl->aux_rdy_time		 = STEP_TIME;
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <Update_channel+0x27c>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	639a      	str	r2, [r3, #56]	; 0x38
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	755a      	strb	r2, [r3, #21]
			}
		}
		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d107      	bne.n	800b1b4 <Update_channel+0x26c>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d102      	bne.n	800b1b4 <Update_channel+0x26c>
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	755a      	strb	r2, [r3, #21]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c0:	e05e      	b.n	800b280 <Update_channel+0x338>
 800b1c2:	bf00      	nop
 800b1c4:	20000540 	.word	0x20000540

	} else { //AUX_TYPE_PEDAL or AUX_TYPE_MUTE or AUX_TYPE_DIGIPAD

		if (_aux_state == GPIO_PIN_SET)
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d104      	bne.n	800b1d8 <Update_channel+0x290>
			_chnl->aux_active_state = CHANNEL_PEDAL_IDLE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d6:	e003      	b.n	800b1e0 <Update_channel+0x298>
		else
			_chnl->aux_active_state = CHANNEL_PEDAL_PRESSED;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2203      	movs	r2, #3
 800b1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		// pedal pressed
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_PRESSED) && (_chnl->aux_last_state == CHANNEL_PEDAL_IDLE)){
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d11f      	bne.n	800b22a <Update_channel+0x2e2>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d11a      	bne.n	800b22a <Update_channel+0x2e2>
			if (STEP_TIME - _chnl->aux_rdy_time > (_chnl->time_between_peaks<<1)) {
 800b1f4:	4b29      	ldr	r3, [pc, #164]	; (800b29c <Update_channel+0x354>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	429a      	cmp	r2, r3
 800b206:	d907      	bls.n	800b218 <Update_channel+0x2d0>
				_chnl->aux_rdy			 = 1;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				_chnl->aux_rdy_time		 = STEP_TIME;
 800b210:	4b22      	ldr	r3, [pc, #136]	; (800b29c <Update_channel+0x354>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			_chnl->aux_status		 = CHANNEL_STATUS_PRESSED;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2203      	movs	r2, #3
 800b228:	755a      	strb	r2, [r3, #21]

		}

		// pedal released
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_IDLE) && (_chnl->aux_last_state == CHANNEL_PEDAL_PRESSED)){
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b230:	2b02      	cmp	r3, #2
 800b232:	d11f      	bne.n	800b274 <Update_channel+0x32c>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d11a      	bne.n	800b274 <Update_channel+0x32c>
			if (STEP_TIME - _chnl->aux_rdy_time > (_chnl->time_between_peaks<<1)) {
 800b23e:	4b17      	ldr	r3, [pc, #92]	; (800b29c <Update_channel+0x354>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	429a      	cmp	r2, r3
 800b250:	d907      	bls.n	800b262 <Update_channel+0x31a>
				_chnl->aux_rdy			 = 1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				_chnl->aux_rdy_time		 = STEP_TIME;
 800b25a:	4b10      	ldr	r3, [pc, #64]	; (800b29c <Update_channel+0x354>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	639a      	str	r2, [r3, #56]	; 0x38
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	755a      	strb	r2, [r3, #21]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	}

	// for fun return 1 if there is data to report
	return (_chnl->main_rdy | _chnl->aux_rdy);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	7d9a      	ldrb	r2, [r3, #22]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b28a:	4313      	orrs	r3, r2
 800b28c:	b2db      	uxtb	r3, r3
}
 800b28e:	4618      	mov	r0, r3
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20000540 	.word	0x20000540

0800b2a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e01f      	b.n	800b2f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	79fa      	ldrb	r2, [r7, #7]
 800b2ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f001 feb9 	bl	800d064 <USBD_LL_Init>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b314:	2303      	movs	r3, #3
 800b316:	e016      	b.n	800b346 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	f107 020e 	add.w	r2, r7, #14
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	4602      	mov	r2, r0
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b082      	sub	sp, #8
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f001 fee4 	bl	800d124 <USBD_LL_Start>
 800b35c:	4603      	mov	r3, r0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d009      	beq.n	800b3aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	4798      	blx	r3
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
  }

  return USBD_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 ff16 	bl	800c228 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b418:	f003 031f 	and.w	r3, r3, #31
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d00e      	beq.n	800b43e <USBD_LL_SetupStage+0x5a>
 800b420:	2b01      	cmp	r3, #1
 800b422:	d302      	bcc.n	800b42a <USBD_LL_SetupStage+0x46>
 800b424:	2b02      	cmp	r3, #2
 800b426:	d014      	beq.n	800b452 <USBD_LL_SetupStage+0x6e>
 800b428:	e01d      	b.n	800b466 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f9d6 	bl	800b7e4 <USBD_StdDevReq>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
      break;
 800b43c:	e020      	b.n	800b480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fa3a 	bl	800b8c0 <USBD_StdItfReq>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]
      break;
 800b450:	e016      	b.n	800b480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fa76 	bl	800b94c <USBD_StdEPReq>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
      break;
 800b464:	e00c      	b.n	800b480 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b46c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b470:	b2db      	uxtb	r3, r3
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 feb5 	bl	800d1e4 <USBD_LL_StallEP>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]
      break;
 800b47e:	bf00      	nop
  }

  return ret;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	460b      	mov	r3, r1
 800b494:	607a      	str	r2, [r7, #4]
 800b496:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d137      	bne.n	800b50e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d14a      	bne.n	800b546 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	689a      	ldr	r2, [r3, #8]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d913      	bls.n	800b4e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	689a      	ldr	r2, [r3, #8]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	1ad2      	subs	r2, r2, r3
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	bf28      	it	cs
 800b4d6:	4613      	movcs	r3, r2
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 ff97 	bl	800c410 <USBD_CtlContinueRx>
 800b4e2:	e030      	b.n	800b546 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d105      	bne.n	800b506 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 ff93 	bl	800c432 <USBD_CtlSendStatus>
 800b50c:	e01b      	b.n	800b546 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d013      	beq.n	800b542 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b520:	2b03      	cmp	r3, #3
 800b522:	d10e      	bne.n	800b542 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	7afa      	ldrb	r2, [r7, #11]
 800b52e:	4611      	mov	r1, r2
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	4798      	blx	r3
 800b534:	4603      	mov	r3, r0
 800b536:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
 800b540:	e002      	b.n	800b548 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	e000      	b.n	800b548 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	460b      	mov	r3, r1
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d16a      	bne.n	800b63a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3314      	adds	r3, #20
 800b568:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b570:	2b02      	cmp	r3, #2
 800b572:	d155      	bne.n	800b620 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	689a      	ldr	r2, [r3, #8]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d914      	bls.n	800b5aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	1ad2      	subs	r2, r2, r3
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	461a      	mov	r2, r3
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 ff0c 	bl	800c3b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59c:	2300      	movs	r3, #0
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f001 fec9 	bl	800d33a <USBD_LL_PrepareReceive>
 800b5a8:	e03a      	b.n	800b620 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	68da      	ldr	r2, [r3, #12]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d11c      	bne.n	800b5f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d316      	bcc.n	800b5f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d20f      	bcs.n	800b5f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 feed 	bl	800c3b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f001 fea6 	bl	800d33a <USBD_LL_PrepareReceive>
 800b5ee:	e017      	b.n	800b620 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b602:	2b03      	cmp	r3, #3
 800b604:	d105      	bne.n	800b612 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b612:	2180      	movs	r1, #128	; 0x80
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f001 fde5 	bl	800d1e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f000 ff1c 	bl	800c458 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b626:	2b01      	cmp	r3, #1
 800b628:	d123      	bne.n	800b672 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f7ff fe9b 	bl	800b366 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b638:	e01b      	b.n	800b672 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d013      	beq.n	800b66e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d10e      	bne.n	800b66e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	7afa      	ldrb	r2, [r7, #11]
 800b65a:	4611      	mov	r1, r2
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	4798      	blx	r3
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	e002      	b.n	800b674 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b66e:	2303      	movs	r3, #3
 800b670:	e000      	b.n	800b674 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	6852      	ldr	r2, [r2, #4]
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6c0:	2340      	movs	r3, #64	; 0x40
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fd47 	bl	800d15a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2240      	movs	r2, #64	; 0x40
 800b6d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6dc:	2340      	movs	r3, #64	; 0x40
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2180      	movs	r1, #128	; 0x80
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 fd39 	bl	800d15a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2240      	movs	r2, #64	; 0x40
 800b6f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2204      	movs	r2, #4
 800b736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b756:	2b04      	cmp	r3, #4
 800b758:	d105      	bne.n	800b766 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b782:	2b03      	cmp	r3, #3
 800b784:	d10b      	bne.n	800b79e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d005      	beq.n	800b79e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7c6:	8a3b      	ldrh	r3, [r7, #16]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	b21a      	sxth	r2, r3
 800b7cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	b21b      	sxth	r3, r3
 800b7d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7d6:	89fb      	ldrh	r3, [r7, #14]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	371c      	adds	r7, #28
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7fa:	2b20      	cmp	r3, #32
 800b7fc:	d004      	beq.n	800b808 <USBD_StdDevReq+0x24>
 800b7fe:	2b40      	cmp	r3, #64	; 0x40
 800b800:	d002      	beq.n	800b808 <USBD_StdDevReq+0x24>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <USBD_StdDevReq+0x38>
 800b806:	e050      	b.n	800b8aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	4798      	blx	r3
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
    break;
 800b81a:	e04b      	b.n	800b8b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	2b09      	cmp	r3, #9
 800b822:	d83c      	bhi.n	800b89e <USBD_StdDevReq+0xba>
 800b824:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <USBD_StdDevReq+0x48>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b881 	.word	0x0800b881
 800b830:	0800b895 	.word	0x0800b895
 800b834:	0800b89f 	.word	0x0800b89f
 800b838:	0800b88b 	.word	0x0800b88b
 800b83c:	0800b89f 	.word	0x0800b89f
 800b840:	0800b85f 	.word	0x0800b85f
 800b844:	0800b855 	.word	0x0800b855
 800b848:	0800b89f 	.word	0x0800b89f
 800b84c:	0800b877 	.word	0x0800b877
 800b850:	0800b869 	.word	0x0800b869
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b854:	6839      	ldr	r1, [r7, #0]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f9d0 	bl	800bbfc <USBD_GetDescriptor>
      break;
 800b85c:	e024      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fb5f 	bl	800bf24 <USBD_SetAddress>
      break;
 800b866:	e01f      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fb9c 	bl	800bfa8 <USBD_SetConfig>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e018      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fc39 	bl	800c0f0 <USBD_GetConfig>
      break;
 800b87e:	e013      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fc68 	bl	800c158 <USBD_GetStatus>
      break;
 800b888:	e00e      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc96 	bl	800c1be <USBD_SetFeature>
      break;
 800b892:	e009      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fca5 	bl	800c1e6 <USBD_ClrFeature>
      break;
 800b89c:	e004      	b.n	800b8a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fcfb 	bl	800c29c <USBD_CtlError>
      break;
 800b8a6:	bf00      	nop
    }
    break;
 800b8a8:	e004      	b.n	800b8b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fcf5 	bl	800c29c <USBD_CtlError>
    break;
 800b8b2:	bf00      	nop
  }

  return ret;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop

0800b8c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	d003      	beq.n	800b8e2 <USBD_StdItfReq+0x22>
 800b8da:	2b40      	cmp	r3, #64	; 0x40
 800b8dc:	d001      	beq.n	800b8e2 <USBD_StdItfReq+0x22>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d12a      	bne.n	800b938 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d81d      	bhi.n	800b92a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	889b      	ldrh	r3, [r3, #4]
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d813      	bhi.n	800b920 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	4798      	blx	r3
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	88db      	ldrh	r3, [r3, #6]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d110      	bne.n	800b934 <USBD_StdItfReq+0x74>
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10d      	bne.n	800b934 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fd8a 	bl	800c432 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b91e:	e009      	b.n	800b934 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b920:	6839      	ldr	r1, [r7, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fcba 	bl	800c29c <USBD_CtlError>
      break;
 800b928:	e004      	b.n	800b934 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fcb5 	bl	800c29c <USBD_CtlError>
      break;
 800b932:	e000      	b.n	800b936 <USBD_StdItfReq+0x76>
      break;
 800b934:	bf00      	nop
    }
    break;
 800b936:	e004      	b.n	800b942 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fcae 	bl	800c29c <USBD_CtlError>
    break;
 800b940:	bf00      	nop
  }

  return ret;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	889b      	ldrh	r3, [r3, #4]
 800b95e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b968:	2b20      	cmp	r3, #32
 800b96a:	d004      	beq.n	800b976 <USBD_StdEPReq+0x2a>
 800b96c:	2b40      	cmp	r3, #64	; 0x40
 800b96e:	d002      	beq.n	800b976 <USBD_StdEPReq+0x2a>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <USBD_StdEPReq+0x3e>
 800b974:	e137      	b.n	800bbe6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	4798      	blx	r3
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
    break;
 800b988:	e132      	b.n	800bbf0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d03e      	beq.n	800ba10 <USBD_StdEPReq+0xc4>
 800b992:	2b03      	cmp	r3, #3
 800b994:	d002      	beq.n	800b99c <USBD_StdEPReq+0x50>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d079      	beq.n	800ba8e <USBD_StdEPReq+0x142>
 800b99a:	e11e      	b.n	800bbda <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d002      	beq.n	800b9ac <USBD_StdEPReq+0x60>
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d015      	beq.n	800b9d6 <USBD_StdEPReq+0x8a>
 800b9aa:	e02b      	b.n	800ba04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00c      	beq.n	800b9cc <USBD_StdEPReq+0x80>
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b80      	cmp	r3, #128	; 0x80
 800b9b6:	d009      	beq.n	800b9cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 fc11 	bl	800d1e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9c2:	2180      	movs	r1, #128	; 0x80
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 fc0d 	bl	800d1e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b9ca:	e020      	b.n	800ba0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fc64 	bl	800c29c <USBD_CtlError>
        break;
 800b9d4:	e01b      	b.n	800ba0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	885b      	ldrh	r3, [r3, #2]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10e      	bne.n	800b9fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00b      	beq.n	800b9fc <USBD_StdEPReq+0xb0>
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b80      	cmp	r3, #128	; 0x80
 800b9e8:	d008      	beq.n	800b9fc <USBD_StdEPReq+0xb0>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	88db      	ldrh	r3, [r3, #6]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d104      	bne.n	800b9fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f001 fbf4 	bl	800d1e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fd18 	bl	800c432 <USBD_CtlSendStatus>

        break;
 800ba02:	e004      	b.n	800ba0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fc48 	bl	800c29c <USBD_CtlError>
        break;
 800ba0c:	bf00      	nop
      }
      break;
 800ba0e:	e0e9      	b.n	800bbe4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d002      	beq.n	800ba20 <USBD_StdEPReq+0xd4>
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d015      	beq.n	800ba4a <USBD_StdEPReq+0xfe>
 800ba1e:	e02f      	b.n	800ba80 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00c      	beq.n	800ba40 <USBD_StdEPReq+0xf4>
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b80      	cmp	r3, #128	; 0x80
 800ba2a:	d009      	beq.n	800ba40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f001 fbd7 	bl	800d1e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba36:	2180      	movs	r1, #128	; 0x80
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f001 fbd3 	bl	800d1e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ba3e:	e025      	b.n	800ba8c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc2a 	bl	800c29c <USBD_CtlError>
        break;
 800ba48:	e020      	b.n	800ba8c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	885b      	ldrh	r3, [r3, #2]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d11b      	bne.n	800ba8a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f001 fbde 	bl	800d222 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fce3 	bl	800c432 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	6839      	ldr	r1, [r7, #0]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba7e:	e004      	b.n	800ba8a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fc0a 	bl	800c29c <USBD_CtlError>
        break;
 800ba88:	e000      	b.n	800ba8c <USBD_StdEPReq+0x140>
        break;
 800ba8a:	bf00      	nop
      }
      break;
 800ba8c:	e0aa      	b.n	800bbe4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d002      	beq.n	800ba9e <USBD_StdEPReq+0x152>
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d032      	beq.n	800bb02 <USBD_StdEPReq+0x1b6>
 800ba9c:	e097      	b.n	800bbce <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <USBD_StdEPReq+0x168>
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b80      	cmp	r3, #128	; 0x80
 800baa8:	d004      	beq.n	800bab4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fbf5 	bl	800c29c <USBD_CtlError>
          break;
 800bab2:	e091      	b.n	800bbd8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da0b      	bge.n	800bad4 <USBD_StdEPReq+0x188>
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	3310      	adds	r3, #16
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	4413      	add	r3, r2
 800bad0:	3304      	adds	r3, #4
 800bad2:	e00b      	b.n	800baec <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	3304      	adds	r3, #4
 800baec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2200      	movs	r2, #0
 800baf2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2202      	movs	r2, #2
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fc3f 	bl	800c37e <USBD_CtlSendData>
        break;
 800bb00:	e06a      	b.n	800bbd8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bb02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da11      	bge.n	800bb2e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb0a:	7bbb      	ldrb	r3, [r7, #14]
 800bb0c:	f003 020f 	and.w	r2, r3, #15
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	3324      	adds	r3, #36	; 0x24
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d117      	bne.n	800bb54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 fbb8 	bl	800c29c <USBD_CtlError>
            break;
 800bb2c:	e054      	b.n	800bbd8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	f003 020f 	and.w	r2, r3, #15
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	440b      	add	r3, r1
 800bb40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d104      	bne.n	800bb54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fba5 	bl	800c29c <USBD_CtlError>
            break;
 800bb52:	e041      	b.n	800bbd8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da0b      	bge.n	800bb74 <USBD_StdEPReq+0x228>
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	3310      	adds	r3, #16
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4413      	add	r3, r2
 800bb70:	3304      	adds	r3, #4
 800bb72:	e00b      	b.n	800bb8c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	4413      	add	r3, r2
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <USBD_StdEPReq+0x24e>
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	2b80      	cmp	r3, #128	; 0x80
 800bb98:	d103      	bne.n	800bba2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	e00e      	b.n	800bbc0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fb5a 	bl	800d260 <USBD_LL_IsStallEP>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d003      	beq.n	800bbba <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e002      	b.n	800bbc0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fbd9 	bl	800c37e <USBD_CtlSendData>
          break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fb63 	bl	800c29c <USBD_CtlError>
        break;
 800bbd6:	bf00      	nop
      }
      break;
 800bbd8:	e004      	b.n	800bbe4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fb5d 	bl	800c29c <USBD_CtlError>
      break;
 800bbe2:	bf00      	nop
    }
    break;
 800bbe4:	e004      	b.n	800bbf0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fb57 	bl	800c29c <USBD_CtlError>
    break;
 800bbee:	bf00      	nop
  }

  return ret;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	885b      	ldrh	r3, [r3, #2]
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	2b0e      	cmp	r3, #14
 800bc1e:	f200 8152 	bhi.w	800bec6 <USBD_GetDescriptor+0x2ca>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <USBD_GetDescriptor+0x2c>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc99 	.word	0x0800bc99
 800bc2c:	0800bcb1 	.word	0x0800bcb1
 800bc30:	0800bcf1 	.word	0x0800bcf1
 800bc34:	0800bec7 	.word	0x0800bec7
 800bc38:	0800bec7 	.word	0x0800bec7
 800bc3c:	0800be67 	.word	0x0800be67
 800bc40:	0800be93 	.word	0x0800be93
 800bc44:	0800bec7 	.word	0x0800bec7
 800bc48:	0800bec7 	.word	0x0800bec7
 800bc4c:	0800bec7 	.word	0x0800bec7
 800bc50:	0800bec7 	.word	0x0800bec7
 800bc54:	0800bec7 	.word	0x0800bec7
 800bc58:	0800bec7 	.word	0x0800bec7
 800bc5c:	0800bec7 	.word	0x0800bec7
 800bc60:	0800bc65 	.word	0x0800bc65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00b      	beq.n	800bc88 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	7c12      	ldrb	r2, [r2, #16]
 800bc7c:	f107 0108 	add.w	r1, r7, #8
 800bc80:	4610      	mov	r0, r2
 800bc82:	4798      	blx	r3
 800bc84:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bc86:	e126      	b.n	800bed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fb06 	bl	800c29c <USBD_CtlError>
      err++;
 800bc90:	7afb      	ldrb	r3, [r7, #11]
 800bc92:	3301      	adds	r3, #1
 800bc94:	72fb      	strb	r3, [r7, #11]
    break;
 800bc96:	e11e      	b.n	800bed6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
    break;
 800bcae:	e112      	b.n	800bed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c1b      	ldrb	r3, [r3, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10d      	bne.n	800bcd4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc0:	f107 0208 	add.w	r2, r7, #8
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	4798      	blx	r3
 800bcc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3301      	adds	r3, #1
 800bcce:	2202      	movs	r2, #2
 800bcd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bcd2:	e100      	b.n	800bed6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
 800bce4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3301      	adds	r3, #1
 800bcea:	2202      	movs	r2, #2
 800bcec:	701a      	strb	r2, [r3, #0]
    break;
 800bcee:	e0f2      	b.n	800bed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b05      	cmp	r3, #5
 800bcf8:	f200 80ac 	bhi.w	800be54 <USBD_GetDescriptor+0x258>
 800bcfc:	a201      	add	r2, pc, #4	; (adr r2, 800bd04 <USBD_GetDescriptor+0x108>)
 800bcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd02:	bf00      	nop
 800bd04:	0800bd1d 	.word	0x0800bd1d
 800bd08:	0800bd51 	.word	0x0800bd51
 800bd0c:	0800bd85 	.word	0x0800bd85
 800bd10:	0800bdb9 	.word	0x0800bdb9
 800bd14:	0800bded 	.word	0x0800bded
 800bd18:	0800be21 	.word	0x0800be21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	f107 0108 	add.w	r1, r7, #8
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd3e:	e091      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 faaa 	bl	800c29c <USBD_CtlError>
        err++;
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	72fb      	strb	r3, [r7, #11]
      break;
 800bd4e:	e089      	b.n	800be64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7c12      	ldrb	r2, [r2, #16]
 800bd68:	f107 0108 	add.w	r1, r7, #8
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3
 800bd70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd72:	e077      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fa90 	bl	800c29c <USBD_CtlError>
        err++;
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	72fb      	strb	r3, [r7, #11]
      break;
 800bd82:	e06f      	b.n	800be64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00b      	beq.n	800bda8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	7c12      	ldrb	r2, [r2, #16]
 800bd9c:	f107 0108 	add.w	r1, r7, #8
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bda6:	e05d      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fa76 	bl	800c29c <USBD_CtlError>
        err++;
 800bdb0:	7afb      	ldrb	r3, [r7, #11]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	72fb      	strb	r3, [r7, #11]
      break;
 800bdb6:	e055      	b.n	800be64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7c12      	ldrb	r2, [r2, #16]
 800bdd0:	f107 0108 	add.w	r1, r7, #8
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdda:	e043      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fa5c 	bl	800c29c <USBD_CtlError>
        err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
      break;
 800bdea:	e03b      	b.n	800be64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00b      	beq.n	800be10 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	7c12      	ldrb	r2, [r2, #16]
 800be04:	f107 0108 	add.w	r1, r7, #8
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
 800be0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be0e:	e029      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa42 	bl	800c29c <USBD_CtlError>
        err++;
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	3301      	adds	r3, #1
 800be1c:	72fb      	strb	r3, [r7, #11]
      break;
 800be1e:	e021      	b.n	800be64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	7c12      	ldrb	r2, [r2, #16]
 800be38:	f107 0108 	add.w	r1, r7, #8
 800be3c:	4610      	mov	r0, r2
 800be3e:	4798      	blx	r3
 800be40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be42:	e00f      	b.n	800be64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa28 	bl	800c29c <USBD_CtlError>
        err++;
 800be4c:	7afb      	ldrb	r3, [r7, #11]
 800be4e:	3301      	adds	r3, #1
 800be50:	72fb      	strb	r3, [r7, #11]
      break;
 800be52:	e007      	b.n	800be64 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa20 	bl	800c29c <USBD_CtlError>
      err++;
 800be5c:	7afb      	ldrb	r3, [r7, #11]
 800be5e:	3301      	adds	r3, #1
 800be60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800be62:	bf00      	nop
    }
    break;
 800be64:	e037      	b.n	800bed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	7c1b      	ldrb	r3, [r3, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be76:	f107 0208 	add.w	r2, r7, #8
 800be7a:	4610      	mov	r0, r2
 800be7c:	4798      	blx	r3
 800be7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800be80:	e029      	b.n	800bed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa09 	bl	800c29c <USBD_CtlError>
      err++;
 800be8a:	7afb      	ldrb	r3, [r7, #11]
 800be8c:	3301      	adds	r3, #1
 800be8e:	72fb      	strb	r3, [r7, #11]
    break;
 800be90:	e021      	b.n	800bed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7c1b      	ldrb	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10d      	bne.n	800beb6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea2:	f107 0208 	add.w	r2, r7, #8
 800bea6:	4610      	mov	r0, r2
 800bea8:	4798      	blx	r3
 800beaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	2207      	movs	r2, #7
 800beb2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800beb4:	e00f      	b.n	800bed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f9ef 	bl	800c29c <USBD_CtlError>
      err++;
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	3301      	adds	r3, #1
 800bec2:	72fb      	strb	r3, [r7, #11]
    break;
 800bec4:	e007      	b.n	800bed6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f9e7 	bl	800c29c <USBD_CtlError>
    err++;
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	3301      	adds	r3, #1
 800bed2:	72fb      	strb	r3, [r7, #11]
    break;
 800bed4:	bf00      	nop
  }

  if (err != 0U)
 800bed6:	7afb      	ldrb	r3, [r7, #11]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d11e      	bne.n	800bf1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	88db      	ldrh	r3, [r3, #6]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d016      	beq.n	800bf12 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800bee4:	893b      	ldrh	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00e      	beq.n	800bf08 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	88da      	ldrh	r2, [r3, #6]
 800beee:	893b      	ldrh	r3, [r7, #8]
 800bef0:	4293      	cmp	r3, r2
 800bef2:	bf28      	it	cs
 800bef4:	4613      	movcs	r3, r2
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800befa:	893b      	ldrh	r3, [r7, #8]
 800befc:	461a      	mov	r2, r3
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fa3c 	bl	800c37e <USBD_CtlSendData>
 800bf06:	e009      	b.n	800bf1c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f9c6 	bl	800c29c <USBD_CtlError>
 800bf10:	e004      	b.n	800bf1c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa8d 	bl	800c432 <USBD_CtlSendStatus>
 800bf18:	e000      	b.n	800bf1c <USBD_GetDescriptor+0x320>
    return;
 800bf1a:	bf00      	nop
    }
  }
}
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop

0800bf24 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	889b      	ldrh	r3, [r3, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d130      	bne.n	800bf98 <USBD_SetAddress+0x74>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	88db      	ldrh	r3, [r3, #6]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d12c      	bne.n	800bf98 <USBD_SetAddress+0x74>
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	885b      	ldrh	r3, [r3, #2]
 800bf42:	2b7f      	cmp	r3, #127	; 0x7f
 800bf44:	d828      	bhi.n	800bf98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	885b      	ldrh	r3, [r3, #2]
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d104      	bne.n	800bf66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f99c 	bl	800c29c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf64:	e01c      	b.n	800bfa0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7bfa      	ldrb	r2, [r7, #15]
 800bf6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f001 f9a1 	bl	800d2ba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa5a 	bl	800c432 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d004      	beq.n	800bf8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2202      	movs	r2, #2
 800bf88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8c:	e008      	b.n	800bfa0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf96:	e003      	b.n	800bfa0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f97e 	bl	800c29c <USBD_CtlError>
  }
}
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	885b      	ldrh	r3, [r3, #2]
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	4b4b      	ldr	r3, [pc, #300]	; (800c0ec <USBD_SetConfig+0x144>)
 800bfbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfc0:	4b4a      	ldr	r3, [pc, #296]	; (800c0ec <USBD_SetConfig+0x144>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d905      	bls.n	800bfd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f966 	bl	800c29c <USBD_CtlError>
    return USBD_FAIL;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e087      	b.n	800c0e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d002      	beq.n	800bfe4 <USBD_SetConfig+0x3c>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d025      	beq.n	800c02e <USBD_SetConfig+0x86>
 800bfe2:	e071      	b.n	800c0c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800bfe4:	4b41      	ldr	r3, [pc, #260]	; (800c0ec <USBD_SetConfig+0x144>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01c      	beq.n	800c026 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bfec:	4b3f      	ldr	r3, [pc, #252]	; (800c0ec <USBD_SetConfig+0x144>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bff6:	4b3d      	ldr	r3, [pc, #244]	; (800c0ec <USBD_SetConfig+0x144>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff f9bd 	bl	800b37c <USBD_SetClassConfig>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f944 	bl	800c29c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c014:	e065      	b.n	800c0e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa0b 	bl	800c432 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2203      	movs	r2, #3
 800c020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c024:	e05d      	b.n	800c0e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa03 	bl	800c432 <USBD_CtlSendStatus>
    break;
 800c02c:	e059      	b.n	800c0e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c02e:	4b2f      	ldr	r3, [pc, #188]	; (800c0ec <USBD_SetConfig+0x144>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d112      	bne.n	800c05c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c03e:	4b2b      	ldr	r3, [pc, #172]	; (800c0ec <USBD_SetConfig+0x144>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c048:	4b28      	ldr	r3, [pc, #160]	; (800c0ec <USBD_SetConfig+0x144>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff f9b0 	bl	800b3b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f9ec 	bl	800c432 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c05a:	e042      	b.n	800c0e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c05c:	4b23      	ldr	r3, [pc, #140]	; (800c0ec <USBD_SetConfig+0x144>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	429a      	cmp	r2, r3
 800c068:	d02a      	beq.n	800c0c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff f99e 	bl	800b3b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c078:	4b1c      	ldr	r3, [pc, #112]	; (800c0ec <USBD_SetConfig+0x144>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c082:	4b1a      	ldr	r3, [pc, #104]	; (800c0ec <USBD_SetConfig+0x144>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff f977 	bl	800b37c <USBD_SetClassConfig>
 800c08e:	4603      	mov	r3, r0
 800c090:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00f      	beq.n	800c0b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f8fe 	bl	800c29c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff f983 	bl	800b3b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2202      	movs	r2, #2
 800c0b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c0b6:	e014      	b.n	800c0e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f9ba 	bl	800c432 <USBD_CtlSendStatus>
    break;
 800c0be:	e010      	b.n	800c0e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f9b6 	bl	800c432 <USBD_CtlSendStatus>
    break;
 800c0c6:	e00c      	b.n	800c0e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f8e6 	bl	800c29c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <USBD_SetConfig+0x144>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff f96c 	bl	800b3b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e0:	bf00      	nop
  }

  return ret;
 800c0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	200002a8 	.word	0x200002a8

0800c0f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	88db      	ldrh	r3, [r3, #6]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d004      	beq.n	800c10c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f8c9 	bl	800c29c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c10a:	e021      	b.n	800c150 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c112:	2b01      	cmp	r3, #1
 800c114:	db17      	blt.n	800c146 <USBD_GetConfig+0x56>
 800c116:	2b02      	cmp	r3, #2
 800c118:	dd02      	ble.n	800c120 <USBD_GetConfig+0x30>
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d00b      	beq.n	800c136 <USBD_GetConfig+0x46>
 800c11e:	e012      	b.n	800c146 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3308      	adds	r3, #8
 800c12a:	2201      	movs	r2, #1
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f925 	bl	800c37e <USBD_CtlSendData>
      break;
 800c134:	e00c      	b.n	800c150 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3304      	adds	r3, #4
 800c13a:	2201      	movs	r2, #1
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f91d 	bl	800c37e <USBD_CtlSendData>
      break;
 800c144:	e004      	b.n	800c150 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f8a7 	bl	800c29c <USBD_CtlError>
      break;
 800c14e:	bf00      	nop
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c168:	3b01      	subs	r3, #1
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d81e      	bhi.n	800c1ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	88db      	ldrh	r3, [r3, #6]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d004      	beq.n	800c180 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c176:	6839      	ldr	r1, [r7, #0]
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f88f 	bl	800c29c <USBD_CtlError>
      break;
 800c17e:	e01a      	b.n	800c1b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f043 0202 	orr.w	r2, r3, #2
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	330c      	adds	r3, #12
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f8ea 	bl	800c37e <USBD_CtlSendData>
    break;
 800c1aa:	e004      	b.n	800c1b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f874 	bl	800c29c <USBD_CtlError>
    break;
 800c1b4:	bf00      	nop
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	885b      	ldrh	r3, [r3, #2]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d106      	bne.n	800c1de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f92a 	bl	800c432 <USBD_CtlSendStatus>
  }
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d80b      	bhi.n	800c214 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	885b      	ldrh	r3, [r3, #2]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d10c      	bne.n	800c21e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f910 	bl	800c432 <USBD_CtlSendStatus>
      }
      break;
 800c212:	e004      	b.n	800c21e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f840 	bl	800c29c <USBD_CtlError>
      break;
 800c21c:	e000      	b.n	800c220 <USBD_ClrFeature+0x3a>
      break;
 800c21e:	bf00      	nop
  }
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	781a      	ldrb	r2, [r3, #0]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3301      	adds	r3, #1
 800c242:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff faa8 	bl	800b7a8 <SWAPBYTE>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3301      	adds	r3, #1
 800c264:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff fa9b 	bl	800b7a8 <SWAPBYTE>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3301      	adds	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff fa8e 	bl	800b7a8 <SWAPBYTE>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	80da      	strh	r2, [r3, #6]
}
 800c294:	bf00      	nop
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2a6:	2180      	movs	r1, #128	; 0x80
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 ff9b 	bl	800d1e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 ff97 	bl	800d1e4 <USBD_LL_StallEP>
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b086      	sub	sp, #24
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	60f8      	str	r0, [r7, #12]
 800c2c6:	60b9      	str	r1, [r7, #8]
 800c2c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d036      	beq.n	800c342 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c2d8:	6938      	ldr	r0, [r7, #16]
 800c2da:	f000 f836 	bl	800c34a <USBD_GetLen>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	7812      	ldrb	r2, [r2, #0]
 800c2f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	4413      	add	r3, r2
 800c304:	2203      	movs	r2, #3
 800c306:	701a      	strb	r2, [r3, #0]
  idx++;
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	3301      	adds	r3, #1
 800c30c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c30e:	e013      	b.n	800c338 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	4413      	add	r3, r2
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	7812      	ldrb	r2, [r2, #0]
 800c31a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	3301      	adds	r3, #1
 800c320:	613b      	str	r3, [r7, #16]
    idx++;
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	3301      	adds	r3, #1
 800c326:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
    idx++;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	3301      	adds	r3, #1
 800c336:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1e7      	bne.n	800c310 <USBD_GetString+0x52>
 800c340:	e000      	b.n	800c344 <USBD_GetString+0x86>
    return;
 800c342:	bf00      	nop
  }
}
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c35a:	e005      	b.n	800c368 <USBD_GetLen+0x1e>
  {
    len++;
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	3301      	adds	r3, #1
 800c360:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	3301      	adds	r3, #1
 800c366:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f5      	bne.n	800c35c <USBD_GetLen+0x12>
  }

  return len;
 800c370:	7bfb      	ldrb	r3, [r7, #15]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2202      	movs	r2, #2
 800c38e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 ffa7 	bl	800d2f8 <USBD_LL_Transmit>

  return USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 ff96 	bl	800d2f8 <USBD_LL_Transmit>

  return USBD_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	2100      	movs	r1, #0
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 ff9a 	bl	800d33a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	2100      	movs	r1, #0
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 ff89 	bl	800d33a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2204      	movs	r2, #4
 800c43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c442:	2300      	movs	r3, #0
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 ff55 	bl	800d2f8 <USBD_LL_Transmit>

  return USBD_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2205      	movs	r2, #5
 800c464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 ff63 	bl	800d33a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c484:	2200      	movs	r2, #0
 800c486:	4912      	ldr	r1, [pc, #72]	; (800c4d0 <MX_USB_Device_Init+0x50>)
 800c488:	4812      	ldr	r0, [pc, #72]	; (800c4d4 <MX_USB_Device_Init+0x54>)
 800c48a:	f7fe ff09 	bl	800b2a0 <USBD_Init>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c494:	f7f5 fb02 	bl	8001a9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c498:	490f      	ldr	r1, [pc, #60]	; (800c4d8 <MX_USB_Device_Init+0x58>)
 800c49a:	480e      	ldr	r0, [pc, #56]	; (800c4d4 <MX_USB_Device_Init+0x54>)
 800c49c:	f7fe ff30 	bl	800b300 <USBD_RegisterClass>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c4a6:	f7f5 faf9 	bl	8001a9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c4aa:	490c      	ldr	r1, [pc, #48]	; (800c4dc <MX_USB_Device_Init+0x5c>)
 800c4ac:	4809      	ldr	r0, [pc, #36]	; (800c4d4 <MX_USB_Device_Init+0x54>)
 800c4ae:	f000 fa85 	bl	800c9bc <USBD_CDC_RegisterInterface>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c4b8:	f7f5 faf0 	bl	8001a9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c4bc:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <MX_USB_Device_Init+0x54>)
 800c4be:	f7fe ff46 	bl	800b34e <USBD_Start>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c4c8:	f7f5 fae8 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c4cc:	bf00      	nop
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	200001c8 	.word	0x200001c8
 800c4d4:	20000f80 	.word	0x20000f80
 800c4d8:	2000003c 	.word	0x2000003c
 800c4dc:	200001b4 	.word	0x200001b4

0800c4e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c4f0:	f000 ff8e 	bl	800d410 <USBD_static_malloc>
 800c4f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d105      	bne.n	800c508 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c504:	2302      	movs	r3, #2
 800c506:	e066      	b.n	800c5d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7c1b      	ldrb	r3, [r3, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d119      	bne.n	800c54c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51c:	2202      	movs	r2, #2
 800c51e:	2181      	movs	r1, #129	; 0x81
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fe1a 	bl	800d15a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c52c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c530:	2202      	movs	r2, #2
 800c532:	2101      	movs	r1, #1
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fe10 	bl	800d15a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2210      	movs	r2, #16
 800c546:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c54a:	e016      	b.n	800c57a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c54c:	2340      	movs	r3, #64	; 0x40
 800c54e:	2202      	movs	r2, #2
 800c550:	2181      	movs	r1, #129	; 0x81
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fe01 	bl	800d15a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c55e:	2340      	movs	r3, #64	; 0x40
 800c560:	2202      	movs	r2, #2
 800c562:	2101      	movs	r1, #1
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fdf8 	bl	800d15a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2210      	movs	r2, #16
 800c576:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c57a:	2308      	movs	r3, #8
 800c57c:	2203      	movs	r2, #3
 800c57e:	2182      	movs	r1, #130	; 0x82
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fdea 	bl	800d15a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	7c1b      	ldrb	r3, [r3, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5ba:	2101      	movs	r1, #1
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 febc 	bl	800d33a <USBD_LL_PrepareReceive>
 800c5c2:	e007      	b.n	800c5d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5ca:	2340      	movs	r3, #64	; 0x40
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 feb3 	bl	800d33a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5ea:	2181      	movs	r1, #129	; 0x81
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fdda 	bl	800d1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fdd3 	bl	800d1a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c608:	2182      	movs	r1, #130	; 0x82
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fdcb 	bl	800d1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 fef6 	bl	800d42c <USBD_static_free>
    pdev->pClassData = NULL;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c664:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d03a      	beq.n	800c6f4 <USBD_CDC_Setup+0xa0>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	f040 8097 	bne.w	800c7b2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	88db      	ldrh	r3, [r3, #6]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d029      	beq.n	800c6e0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	b25b      	sxtb	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	da11      	bge.n	800c6ba <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c6a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	88d2      	ldrh	r2, [r2, #6]
 800c6a8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c6aa:	6939      	ldr	r1, [r7, #16]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	88db      	ldrh	r3, [r3, #6]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff fe63 	bl	800c37e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c6b8:	e082      	b.n	800c7c0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	785a      	ldrb	r2, [r3, #1]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	88db      	ldrh	r3, [r3, #6]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c6d0:	6939      	ldr	r1, [r7, #16]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	88db      	ldrh	r3, [r3, #6]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff fe7c 	bl	800c3d6 <USBD_CtlPrepareRx>
      break;
 800c6de:	e06f      	b.n	800c7c0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	7850      	ldrb	r0, [r2, #1]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	4798      	blx	r3
      break;
 800c6f2:	e065      	b.n	800c7c0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b0b      	cmp	r3, #11
 800c6fa:	d84f      	bhi.n	800c79c <USBD_CDC_Setup+0x148>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <USBD_CDC_Setup+0xb0>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c735 	.word	0x0800c735
 800c708:	0800c7ab 	.word	0x0800c7ab
 800c70c:	0800c79d 	.word	0x0800c79d
 800c710:	0800c79d 	.word	0x0800c79d
 800c714:	0800c79d 	.word	0x0800c79d
 800c718:	0800c79d 	.word	0x0800c79d
 800c71c:	0800c79d 	.word	0x0800c79d
 800c720:	0800c79d 	.word	0x0800c79d
 800c724:	0800c79d 	.word	0x0800c79d
 800c728:	0800c79d 	.word	0x0800c79d
 800c72c:	0800c75d 	.word	0x0800c75d
 800c730:	0800c785 	.word	0x0800c785
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d107      	bne.n	800c74e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c73e:	f107 030c 	add.w	r3, r7, #12
 800c742:	2202      	movs	r2, #2
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff fe19 	bl	800c37e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c74c:	e030      	b.n	800c7b0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fda3 	bl	800c29c <USBD_CtlError>
            ret = USBD_FAIL;
 800c756:	2303      	movs	r3, #3
 800c758:	75fb      	strb	r3, [r7, #23]
          break;
 800c75a:	e029      	b.n	800c7b0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c762:	2b03      	cmp	r3, #3
 800c764:	d107      	bne.n	800c776 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c766:	f107 030f 	add.w	r3, r7, #15
 800c76a:	2201      	movs	r2, #1
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff fe05 	bl	800c37e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c774:	e01c      	b.n	800c7b0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff fd8f 	bl	800c29c <USBD_CtlError>
            ret = USBD_FAIL;
 800c77e:	2303      	movs	r3, #3
 800c780:	75fb      	strb	r3, [r7, #23]
          break;
 800c782:	e015      	b.n	800c7b0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78a:	2b03      	cmp	r3, #3
 800c78c:	d00f      	beq.n	800c7ae <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fd83 	bl	800c29c <USBD_CtlError>
            ret = USBD_FAIL;
 800c796:	2303      	movs	r3, #3
 800c798:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c79a:	e008      	b.n	800c7ae <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7ff fd7c 	bl	800c29c <USBD_CtlError>
          ret = USBD_FAIL;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	75fb      	strb	r3, [r7, #23]
          break;
 800c7a8:	e002      	b.n	800c7b0 <USBD_CDC_Setup+0x15c>
          break;
 800c7aa:	bf00      	nop
 800c7ac:	e008      	b.n	800c7c0 <USBD_CDC_Setup+0x16c>
          break;
 800c7ae:	bf00      	nop
      }
      break;
 800c7b0:	e006      	b.n	800c7c0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff fd71 	bl	800c29c <USBD_CtlError>
      ret = USBD_FAIL;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c7be:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop

0800c7cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e04f      	b.n	800c88e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c7f6:	78fa      	ldrb	r2, [r7, #3]
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	440b      	add	r3, r1
 800c804:	3318      	adds	r3, #24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d029      	beq.n	800c860 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c80c:	78fa      	ldrb	r2, [r7, #3]
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	4613      	mov	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	440b      	add	r3, r1
 800c81a:	3318      	adds	r3, #24
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	78f9      	ldrb	r1, [r7, #3]
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	460b      	mov	r3, r1
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	440b      	add	r3, r1
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	4403      	add	r3, r0
 800c82c:	3338      	adds	r3, #56	; 0x38
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	fbb2 f1f3 	udiv	r1, r2, r3
 800c834:	fb03 f301 	mul.w	r3, r3, r1
 800c838:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d110      	bne.n	800c860 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	440b      	add	r3, r1
 800c84c:	3318      	adds	r3, #24
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c852:	78f9      	ldrb	r1, [r7, #3]
 800c854:	2300      	movs	r3, #0
 800c856:	2200      	movs	r2, #0
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fd4d 	bl	800d2f8 <USBD_LL_Transmit>
 800c85e:	e015      	b.n	800c88c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	2200      	movs	r2, #0
 800c864:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00b      	beq.n	800c88c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c888:	78fa      	ldrb	r2, [r7, #3]
 800c88a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e015      	b.n	800c8e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c8b8:	78fb      	ldrb	r3, [r7, #3]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fd5d 	bl	800d37c <USBD_LL_GetRxDataSize>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c8de:	4611      	mov	r1, r2
 800c8e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d015      	beq.n	800c932 <USBD_CDC_EP0_RxReady+0x46>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c90c:	2bff      	cmp	r3, #255	; 0xff
 800c90e:	d010      	beq.n	800c932 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c91e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c926:	b292      	uxth	r2, r2
 800c928:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	22ff      	movs	r2, #255	; 0xff
 800c92e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2265      	movs	r2, #101	; 0x65
 800c948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c94a:	4b03      	ldr	r3, [pc, #12]	; (800c958 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	200000dc 	.word	0x200000dc

0800c95c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2265      	movs	r2, #101	; 0x65
 800c968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c96a:	4b03      	ldr	r3, [pc, #12]	; (800c978 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	20000074 	.word	0x20000074

0800c97c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2265      	movs	r2, #101	; 0x65
 800c988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c98a:	4b03      	ldr	r3, [pc, #12]	; (800c998 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	20000144 	.word	0x20000144

0800c99c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	220a      	movs	r2, #10
 800c9a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c9aa:	4b03      	ldr	r3, [pc, #12]	; (800c9b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	20000030 	.word	0x20000030

0800c9bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e004      	b.n	800c9da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b087      	sub	sp, #28
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	60f8      	str	r0, [r7, #12]
 800c9ee:	60b9      	str	r1, [r7, #8]
 800c9f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	371c      	adds	r7, #28
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca28:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ca50:	2301      	movs	r3, #1
 800ca52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e01a      	b.n	800ca98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d114      	bne.n	800ca96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ca8a:	2181      	movs	r1, #129	; 0x81
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fc33 	bl	800d2f8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800caba:	2303      	movs	r3, #3
 800cabc:	e016      	b.n	800caec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7c1b      	ldrb	r3, [r3, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d109      	bne.n	800cada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cad0:	2101      	movs	r1, #1
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fc31 	bl	800d33a <USBD_LL_PrepareReceive>
 800cad8:	e007      	b.n	800caea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cae0:	2340      	movs	r3, #64	; 0x40
 800cae2:	2101      	movs	r1, #1
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fc28 	bl	800d33a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800caf8:	2200      	movs	r2, #0
 800cafa:	4905      	ldr	r1, [pc, #20]	; (800cb10 <CDC_Init_FS+0x1c>)
 800cafc:	4805      	ldr	r0, [pc, #20]	; (800cb14 <CDC_Init_FS+0x20>)
 800cafe:	f7ff ff72 	bl	800c9e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb02:	4905      	ldr	r1, [pc, #20]	; (800cb18 <CDC_Init_FS+0x24>)
 800cb04:	4803      	ldr	r0, [pc, #12]	; (800cb14 <CDC_Init_FS+0x20>)
 800cb06:	f7ff ff87 	bl	800ca18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	20001638 	.word	0x20001638
 800cb14:	20000f80 	.word	0x20000f80
 800cb18:	20001250 	.word	0x20001250

0800cb1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	4603      	mov	r3, r0
 800cb34:	6039      	str	r1, [r7, #0]
 800cb36:	71fb      	strb	r3, [r7, #7]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	2b23      	cmp	r3, #35	; 0x23
 800cb40:	d85c      	bhi.n	800cbfc <CDC_Control_FS+0xd0>
 800cb42:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <CDC_Control_FS+0x1c>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cbfd 	.word	0x0800cbfd
 800cb4c:	0800cbfd 	.word	0x0800cbfd
 800cb50:	0800cbfd 	.word	0x0800cbfd
 800cb54:	0800cbfd 	.word	0x0800cbfd
 800cb58:	0800cbfd 	.word	0x0800cbfd
 800cb5c:	0800cbfd 	.word	0x0800cbfd
 800cb60:	0800cbfd 	.word	0x0800cbfd
 800cb64:	0800cbfd 	.word	0x0800cbfd
 800cb68:	0800cbfd 	.word	0x0800cbfd
 800cb6c:	0800cbfd 	.word	0x0800cbfd
 800cb70:	0800cbfd 	.word	0x0800cbfd
 800cb74:	0800cbfd 	.word	0x0800cbfd
 800cb78:	0800cbfd 	.word	0x0800cbfd
 800cb7c:	0800cbfd 	.word	0x0800cbfd
 800cb80:	0800cbfd 	.word	0x0800cbfd
 800cb84:	0800cbfd 	.word	0x0800cbfd
 800cb88:	0800cbfd 	.word	0x0800cbfd
 800cb8c:	0800cbfd 	.word	0x0800cbfd
 800cb90:	0800cbfd 	.word	0x0800cbfd
 800cb94:	0800cbfd 	.word	0x0800cbfd
 800cb98:	0800cbfd 	.word	0x0800cbfd
 800cb9c:	0800cbfd 	.word	0x0800cbfd
 800cba0:	0800cbfd 	.word	0x0800cbfd
 800cba4:	0800cbfd 	.word	0x0800cbfd
 800cba8:	0800cbfd 	.word	0x0800cbfd
 800cbac:	0800cbfd 	.word	0x0800cbfd
 800cbb0:	0800cbfd 	.word	0x0800cbfd
 800cbb4:	0800cbfd 	.word	0x0800cbfd
 800cbb8:	0800cbfd 	.word	0x0800cbfd
 800cbbc:	0800cbfd 	.word	0x0800cbfd
 800cbc0:	0800cbfd 	.word	0x0800cbfd
 800cbc4:	0800cbfd 	.word	0x0800cbfd
 800cbc8:	0800cbd9 	.word	0x0800cbd9
 800cbcc:	0800cbeb 	.word	0x0800cbeb
 800cbd0:	0800cbfd 	.word	0x0800cbfd
 800cbd4:	0800cbfd 	.word	0x0800cbfd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 800cbd8:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <CDC_Control_FS+0xe0>)
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	6810      	ldr	r0, [r2, #0]
 800cbde:	6018      	str	r0, [r3, #0]
 800cbe0:	8891      	ldrh	r1, [r2, #4]
 800cbe2:	7992      	ldrb	r2, [r2, #6]
 800cbe4:	8099      	strh	r1, [r3, #4]
 800cbe6:	719a      	strb	r2, [r3, #6]

    break;
 800cbe8:	e009      	b.n	800cbfe <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	4a07      	ldr	r2, [pc, #28]	; (800cc0c <CDC_Control_FS+0xe0>)
 800cbee:	6810      	ldr	r0, [r2, #0]
 800cbf0:	6018      	str	r0, [r3, #0]
 800cbf2:	8891      	ldrh	r1, [r2, #4]
 800cbf4:	7992      	ldrb	r2, [r2, #6]
 800cbf6:	8099      	strh	r1, [r3, #4]
 800cbf8:	719a      	strb	r2, [r3, #6]

    case CDC_SET_CONTROL_LINE_STATE:

    break;
 800cbfa:	e000      	b.n	800cbfe <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbfc:	bf00      	nop
  }

  return (USBD_OK);
 800cbfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	200001ac 	.word	0x200001ac

0800cc10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	4805      	ldr	r0, [pc, #20]	; (800cc34 <CDC_Receive_FS+0x24>)
 800cc1e:	f7ff fefb 	bl	800ca18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc22:	4804      	ldr	r0, [pc, #16]	; (800cc34 <CDC_Receive_FS+0x24>)
 800cc24:	f7ff ff3c 	bl	800caa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20000f80 	.word	0x20000f80

0800cc38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc48:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <CDC_Transmit_FS+0x48>)
 800cc4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e00b      	b.n	800cc76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc5e:	887b      	ldrh	r3, [r7, #2]
 800cc60:	461a      	mov	r2, r3
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	4806      	ldr	r0, [pc, #24]	; (800cc80 <CDC_Transmit_FS+0x48>)
 800cc66:	f7ff febe 	bl	800c9e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc6a:	4805      	ldr	r0, [pc, #20]	; (800cc80 <CDC_Transmit_FS+0x48>)
 800cc6c:	f7ff fee8 	bl	800ca40 <USBD_CDC_TransmitPacket>
 800cc70:	4603      	mov	r3, r0
 800cc72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000f80 	.word	0x20000f80

0800cc84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
	...

0800cca8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	6039      	str	r1, [r7, #0]
 800ccb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2212      	movs	r2, #18
 800ccb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ccba:	4b03      	ldr	r3, [pc, #12]	; (800ccc8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	200001e8 	.word	0x200001e8

0800cccc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	6039      	str	r1, [r7, #0]
 800ccd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2204      	movs	r2, #4
 800ccdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccde:	4b03      	ldr	r3, [pc, #12]	; (800ccec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	200001fc 	.word	0x200001fc

0800ccf0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	4907      	ldr	r1, [pc, #28]	; (800cd24 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd06:	4808      	ldr	r0, [pc, #32]	; (800cd28 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd08:	f7ff fad9 	bl	800c2be <USBD_GetString>
 800cd0c:	e004      	b.n	800cd18 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	4904      	ldr	r1, [pc, #16]	; (800cd24 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd12:	4805      	ldr	r0, [pc, #20]	; (800cd28 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd14:	f7ff fad3 	bl	800c2be <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20001a20 	.word	0x20001a20
 800cd28:	0800dedc 	.word	0x0800dedc

0800cd2c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	4904      	ldr	r1, [pc, #16]	; (800cd4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cd3c:	4804      	ldr	r0, [pc, #16]	; (800cd50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cd3e:	f7ff fabe 	bl	800c2be <USBD_GetString>
  return USBD_StrDesc;
 800cd42:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20001a20 	.word	0x20001a20
 800cd50:	0800dee8 	.word	0x0800dee8

0800cd54 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	6039      	str	r1, [r7, #0]
 800cd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	221a      	movs	r2, #26
 800cd64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd66:	f000 f843 	bl	800cdf0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cd6a:	4b02      	ldr	r3, [pc, #8]	; (800cd74 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20000200 	.word	0x20000200

0800cd78 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4907      	ldr	r1, [pc, #28]	; (800cdac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	; (800cdb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd90:	f7ff fa95 	bl	800c2be <USBD_GetString>
 800cd94:	e004      	b.n	800cda0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4904      	ldr	r1, [pc, #16]	; (800cdac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd9a:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd9c:	f7ff fa8f 	bl	800c2be <USBD_GetString>
  }
  return USBD_StrDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	; (800cdac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	20001a20 	.word	0x20001a20
 800cdb0:	0800defc 	.word	0x0800defc

0800cdb4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d105      	bne.n	800cdd2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	4907      	ldr	r1, [pc, #28]	; (800cde8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cdca:	4808      	ldr	r0, [pc, #32]	; (800cdec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cdcc:	f7ff fa77 	bl	800c2be <USBD_GetString>
 800cdd0:	e004      	b.n	800cddc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	4904      	ldr	r1, [pc, #16]	; (800cde8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cdd6:	4805      	ldr	r0, [pc, #20]	; (800cdec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cdd8:	f7ff fa71 	bl	800c2be <USBD_GetString>
  }
  return USBD_StrDesc;
 800cddc:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20001a20 	.word	0x20001a20
 800cdec:	0800df08 	.word	0x0800df08

0800cdf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	; (800ce34 <Get_SerialNum+0x44>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <Get_SerialNum+0x48>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce02:	4b0e      	ldr	r3, [pc, #56]	; (800ce3c <Get_SerialNum+0x4c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce16:	2208      	movs	r2, #8
 800ce18:	4909      	ldr	r1, [pc, #36]	; (800ce40 <Get_SerialNum+0x50>)
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 f814 	bl	800ce48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce20:	2204      	movs	r2, #4
 800ce22:	4908      	ldr	r1, [pc, #32]	; (800ce44 <Get_SerialNum+0x54>)
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	f000 f80f 	bl	800ce48 <IntToUnicode>
  }
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	1fff7590 	.word	0x1fff7590
 800ce38:	1fff7594 	.word	0x1fff7594
 800ce3c:	1fff7598 	.word	0x1fff7598
 800ce40:	20000202 	.word	0x20000202
 800ce44:	20000212 	.word	0x20000212

0800ce48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	75fb      	strb	r3, [r7, #23]
 800ce5e:	e027      	b.n	800ceb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	0f1b      	lsrs	r3, r3, #28
 800ce64:	2b09      	cmp	r3, #9
 800ce66:	d80b      	bhi.n	800ce80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	0f1b      	lsrs	r3, r3, #28
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4619      	mov	r1, r3
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	440b      	add	r3, r1
 800ce78:	3230      	adds	r2, #48	; 0x30
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	e00a      	b.n	800ce96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	0f1b      	lsrs	r3, r3, #28
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	440b      	add	r3, r1
 800ce90:	3237      	adds	r2, #55	; 0x37
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	3301      	adds	r3, #1
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	4413      	add	r3, r2
 800cea6:	2200      	movs	r2, #0
 800cea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	3301      	adds	r3, #1
 800ceae:	75fb      	strb	r3, [r7, #23]
 800ceb0:	7dfa      	ldrb	r2, [r7, #23]
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3d3      	bcc.n	800ce60 <IntToUnicode+0x18>
  }
}
 800ceb8:	bf00      	nop
 800ceba:	371c      	adds	r7, #28
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a0d      	ldr	r2, [pc, #52]	; (800cf08 <HAL_PCD_MspInit+0x44>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d113      	bne.n	800cefe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ced6:	4b0d      	ldr	r3, [pc, #52]	; (800cf0c <HAL_PCD_MspInit+0x48>)
 800ced8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceda:	4a0c      	ldr	r2, [pc, #48]	; (800cf0c <HAL_PCD_MspInit+0x48>)
 800cedc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cee0:	6593      	str	r3, [r2, #88]	; 0x58
 800cee2:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <HAL_PCD_MspInit+0x48>)
 800cee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	2014      	movs	r0, #20
 800cef4:	f7f6 ff21 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cef8:	2014      	movs	r0, #20
 800cefa:	f7f6 ff38 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cefe:	bf00      	nop
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	40005c00 	.word	0x40005c00
 800cf0c:	40021000 	.word	0x40021000

0800cf10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cf24:	4619      	mov	r1, r3
 800cf26:	4610      	mov	r0, r2
 800cf28:	f7fe fa5c 	bl	800b3e4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cf46:	78fa      	ldrb	r2, [r7, #3]
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	78fb      	ldrb	r3, [r7, #3]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	f7fe fa94 	bl	800b48a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	460b      	mov	r3, r1
 800cf74:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cf7c:	78fa      	ldrb	r2, [r7, #3]
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	440b      	add	r3, r1
 800cf8a:	333c      	adds	r3, #60	; 0x3c
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	78fb      	ldrb	r3, [r7, #3]
 800cf90:	4619      	mov	r1, r3
 800cf92:	f7fe fadd 	bl	800b550 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cf96:	bf00      	nop
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fe fbe1 	bl	800b774 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cfb2:	bf00      	nop
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d001      	beq.n	800cfd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfce:	f7f4 fd65 	bl	8001a9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cfd8:	7bfa      	ldrb	r2, [r7, #15]
 800cfda:	4611      	mov	r1, r2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe fb8e 	bl	800b6fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fb47 	bl	800b67c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cfee:	bf00      	nop
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d006:	4618      	mov	r0, r3
 800d008:	f7fe fb89 	bl	800b71e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d005      	beq.n	800d020 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d014:	4b04      	ldr	r3, [pc, #16]	; (800d028 <HAL_PCD_SuspendCallback+0x30>)
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	4a03      	ldr	r2, [pc, #12]	; (800d028 <HAL_PCD_SuspendCallback+0x30>)
 800d01a:	f043 0306 	orr.w	r3, r3, #6
 800d01e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	e000ed00 	.word	0xe000ed00

0800d02c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d03c:	4b08      	ldr	r3, [pc, #32]	; (800d060 <HAL_PCD_ResumeCallback+0x34>)
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	4a07      	ldr	r2, [pc, #28]	; (800d060 <HAL_PCD_ResumeCallback+0x34>)
 800d042:	f023 0306 	bic.w	r3, r3, #6
 800d046:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d048:	f000 f9fa 	bl	800d440 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe fb78 	bl	800b748 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d058:	bf00      	nop
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	e000ed00 	.word	0xe000ed00

0800d064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d06c:	4a2b      	ldr	r2, [pc, #172]	; (800d11c <USBD_LL_Init+0xb8>)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a29      	ldr	r2, [pc, #164]	; (800d11c <USBD_LL_Init+0xb8>)
 800d078:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d07c:	4b27      	ldr	r3, [pc, #156]	; (800d11c <USBD_LL_Init+0xb8>)
 800d07e:	4a28      	ldr	r2, [pc, #160]	; (800d120 <USBD_LL_Init+0xbc>)
 800d080:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d082:	4b26      	ldr	r3, [pc, #152]	; (800d11c <USBD_LL_Init+0xb8>)
 800d084:	2208      	movs	r2, #8
 800d086:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d088:	4b24      	ldr	r3, [pc, #144]	; (800d11c <USBD_LL_Init+0xb8>)
 800d08a:	2202      	movs	r2, #2
 800d08c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d08e:	4b23      	ldr	r3, [pc, #140]	; (800d11c <USBD_LL_Init+0xb8>)
 800d090:	2202      	movs	r2, #2
 800d092:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d094:	4b21      	ldr	r3, [pc, #132]	; (800d11c <USBD_LL_Init+0xb8>)
 800d096:	2200      	movs	r2, #0
 800d098:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d09a:	4b20      	ldr	r3, [pc, #128]	; (800d11c <USBD_LL_Init+0xb8>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d0a0:	4b1e      	ldr	r3, [pc, #120]	; (800d11c <USBD_LL_Init+0xb8>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d0a6:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <USBD_LL_Init+0xb8>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d0ac:	481b      	ldr	r0, [pc, #108]	; (800d11c <USBD_LL_Init+0xb8>)
 800d0ae:	f7f7 fd19 	bl	8004ae4 <HAL_PCD_Init>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d0b8:	f7f4 fcf0 	bl	8001a9c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0c2:	2318      	movs	r3, #24
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	f7f9 f807 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0d2:	2358      	movs	r3, #88	; 0x58
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2180      	movs	r1, #128	; 0x80
 800d0d8:	f7f8 ffff 	bl	80060da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0e2:	23c0      	movs	r3, #192	; 0xc0
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2181      	movs	r1, #129	; 0x81
 800d0e8:	f7f8 fff7 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	f7f8 ffee 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d104:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d108:	2200      	movs	r2, #0
 800d10a:	2182      	movs	r1, #130	; 0x82
 800d10c:	f7f8 ffe5 	bl	80060da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	20001c20 	.word	0x20001c20
 800d120:	40005c00 	.word	0x40005c00

0800d124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f7 fdb7 	bl	8004cae <HAL_PCD_Start>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f980 	bl	800d44c <USBD_Get_USB_Status>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d150:	7bbb      	ldrb	r3, [r7, #14]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	4608      	mov	r0, r1
 800d164:	4611      	mov	r1, r2
 800d166:	461a      	mov	r2, r3
 800d168:	4603      	mov	r3, r0
 800d16a:	70fb      	strb	r3, [r7, #3]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70bb      	strb	r3, [r7, #2]
 800d170:	4613      	mov	r3, r2
 800d172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d182:	78bb      	ldrb	r3, [r7, #2]
 800d184:	883a      	ldrh	r2, [r7, #0]
 800d186:	78f9      	ldrb	r1, [r7, #3]
 800d188:	f7f7 ff26 	bl	8004fd8 <HAL_PCD_EP_Open>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	4618      	mov	r0, r3
 800d194:	f000 f95a 	bl	800d44c <USBD_Get_USB_Status>
 800d198:	4603      	mov	r3, r0
 800d19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1c0:	78fa      	ldrb	r2, [r7, #3]
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f7 ff6d 	bl	80050a4 <HAL_PCD_EP_Close>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 f93b 	bl	800d44c <USBD_Get_USB_Status>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1fe:	78fa      	ldrb	r2, [r7, #3]
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7f8 f82e 	bl	8005264 <HAL_PCD_EP_SetStall>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 f91c 	bl	800d44c <USBD_Get_USB_Status>
 800d214:	4603      	mov	r3, r0
 800d216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d218:	7bbb      	ldrb	r3, [r7, #14]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b084      	sub	sp, #16
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	460b      	mov	r3, r1
 800d22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d23c:	78fa      	ldrb	r2, [r7, #3]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7f8 f86f 	bl	8005324 <HAL_PCD_EP_ClrStall>
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f000 f8fd 	bl	800d44c <USBD_Get_USB_Status>
 800d252:	4603      	mov	r3, r0
 800d254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d256:	7bbb      	ldrb	r3, [r7, #14]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	da0c      	bge.n	800d296 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d27c:	78fb      	ldrb	r3, [r7, #3]
 800d27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	440b      	add	r3, r1
 800d290:	3302      	adds	r3, #2
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	e00b      	b.n	800d2ae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d296:	78fb      	ldrb	r3, [r7, #3]
 800d298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d29c:	68f9      	ldr	r1, [r7, #12]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	440b      	add	r3, r1
 800d2a8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d2ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2d4:	78fa      	ldrb	r2, [r7, #3]
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7f7 fe58 	bl	8004f8e <HAL_PCD_SetAddress>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 f8b1 	bl	800d44c <USBD_Get_USB_Status>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	460b      	mov	r3, r1
 800d306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d316:	7af9      	ldrb	r1, [r7, #11]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	f7f7 ff5f 	bl	80051de <HAL_PCD_EP_Transmit>
 800d320:	4603      	mov	r3, r0
 800d322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f890 	bl	800d44c <USBD_Get_USB_Status>
 800d32c:	4603      	mov	r3, r0
 800d32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d330:	7dbb      	ldrb	r3, [r7, #22]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b086      	sub	sp, #24
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	603b      	str	r3, [r7, #0]
 800d346:	460b      	mov	r3, r1
 800d348:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d34a:	2300      	movs	r3, #0
 800d34c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d358:	7af9      	ldrb	r1, [r7, #11]
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	f7f7 fee9 	bl	8005134 <HAL_PCD_EP_Receive>
 800d362:	4603      	mov	r3, r0
 800d364:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 f86f 	bl	800d44c <USBD_Get_USB_Status>
 800d36e:	4603      	mov	r3, r0
 800d370:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d372:	7dbb      	ldrb	r3, [r7, #22]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d38e:	78fa      	ldrb	r2, [r7, #3]
 800d390:	4611      	mov	r1, r2
 800d392:	4618      	mov	r0, r3
 800d394:	f7f7 ff0b 	bl	80051ae <HAL_PCD_EP_GetRxCount>
 800d398:	4603      	mov	r3, r0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d3b0:	78fb      	ldrb	r3, [r7, #3]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d002      	beq.n	800d3bc <HAL_PCDEx_LPM_Callback+0x18>
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d013      	beq.n	800d3e2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d3ba:	e023      	b.n	800d404 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d007      	beq.n	800d3d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d3c4:	f000 f83c 	bl	800d440 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3c8:	4b10      	ldr	r3, [pc, #64]	; (800d40c <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	4a0f      	ldr	r2, [pc, #60]	; (800d40c <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ce:	f023 0306 	bic.w	r3, r3, #6
 800d3d2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe f9b4 	bl	800b748 <USBD_LL_Resume>
    break;
 800d3e0:	e010      	b.n	800d404 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe f998 	bl	800b71e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d005      	beq.n	800d402 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3f6:	4b05      	ldr	r3, [pc, #20]	; (800d40c <HAL_PCDEx_LPM_Callback+0x68>)
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	4a04      	ldr	r2, [pc, #16]	; (800d40c <HAL_PCDEx_LPM_Callback+0x68>)
 800d3fc:	f043 0306 	orr.w	r3, r3, #6
 800d400:	6113      	str	r3, [r2, #16]
    break;
 800d402:	bf00      	nop
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	e000ed00 	.word	0xe000ed00

0800d410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d418:	4b03      	ldr	r3, [pc, #12]	; (800d428 <USBD_static_malloc+0x18>)
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	200002ac 	.word	0x200002ac

0800d42c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]

}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d444:	f7f3 fc9c 	bl	8000d80 <SystemClock_Config>
}
 800d448:	bf00      	nop
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	2b03      	cmp	r3, #3
 800d45e:	d817      	bhi.n	800d490 <USBD_Get_USB_Status+0x44>
 800d460:	a201      	add	r2, pc, #4	; (adr r2, 800d468 <USBD_Get_USB_Status+0x1c>)
 800d462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d466:	bf00      	nop
 800d468:	0800d479 	.word	0x0800d479
 800d46c:	0800d47f 	.word	0x0800d47f
 800d470:	0800d485 	.word	0x0800d485
 800d474:	0800d48b 	.word	0x0800d48b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73fb      	strb	r3, [r7, #15]
    break;
 800d47c:	e00b      	b.n	800d496 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d47e:	2303      	movs	r3, #3
 800d480:	73fb      	strb	r3, [r7, #15]
    break;
 800d482:	e008      	b.n	800d496 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d484:	2301      	movs	r3, #1
 800d486:	73fb      	strb	r3, [r7, #15]
    break;
 800d488:	e005      	b.n	800d496 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d48a:	2303      	movs	r3, #3
 800d48c:	73fb      	strb	r3, [r7, #15]
    break;
 800d48e:	e002      	b.n	800d496 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d490:	2303      	movs	r3, #3
 800d492:	73fb      	strb	r3, [r7, #15]
    break;
 800d494:	bf00      	nop
  }
  return usb_status;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <__errno>:
 800d4a4:	4b01      	ldr	r3, [pc, #4]	; (800d4ac <__errno+0x8>)
 800d4a6:	6818      	ldr	r0, [r3, #0]
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	2000021c 	.word	0x2000021c

0800d4b0 <__libc_init_array>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	4e0d      	ldr	r6, [pc, #52]	; (800d4e8 <__libc_init_array+0x38>)
 800d4b4:	4c0d      	ldr	r4, [pc, #52]	; (800d4ec <__libc_init_array+0x3c>)
 800d4b6:	1ba4      	subs	r4, r4, r6
 800d4b8:	10a4      	asrs	r4, r4, #2
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	42a5      	cmp	r5, r4
 800d4be:	d109      	bne.n	800d4d4 <__libc_init_array+0x24>
 800d4c0:	4e0b      	ldr	r6, [pc, #44]	; (800d4f0 <__libc_init_array+0x40>)
 800d4c2:	4c0c      	ldr	r4, [pc, #48]	; (800d4f4 <__libc_init_array+0x44>)
 800d4c4:	f000 fc28 	bl	800dd18 <_init>
 800d4c8:	1ba4      	subs	r4, r4, r6
 800d4ca:	10a4      	asrs	r4, r4, #2
 800d4cc:	2500      	movs	r5, #0
 800d4ce:	42a5      	cmp	r5, r4
 800d4d0:	d105      	bne.n	800d4de <__libc_init_array+0x2e>
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}
 800d4d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d4d8:	4798      	blx	r3
 800d4da:	3501      	adds	r5, #1
 800d4dc:	e7ee      	b.n	800d4bc <__libc_init_array+0xc>
 800d4de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d4e2:	4798      	blx	r3
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	e7f2      	b.n	800d4ce <__libc_init_array+0x1e>
 800d4e8:	0800df84 	.word	0x0800df84
 800d4ec:	0800df84 	.word	0x0800df84
 800d4f0:	0800df84 	.word	0x0800df84
 800d4f4:	0800df88 	.word	0x0800df88

0800d4f8 <memcpy>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	1e43      	subs	r3, r0, #1
 800d4fc:	440a      	add	r2, r1
 800d4fe:	4291      	cmp	r1, r2
 800d500:	d100      	bne.n	800d504 <memcpy+0xc>
 800d502:	bd10      	pop	{r4, pc}
 800d504:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d50c:	e7f7      	b.n	800d4fe <memcpy+0x6>

0800d50e <memset>:
 800d50e:	4402      	add	r2, r0
 800d510:	4603      	mov	r3, r0
 800d512:	4293      	cmp	r3, r2
 800d514:	d100      	bne.n	800d518 <memset+0xa>
 800d516:	4770      	bx	lr
 800d518:	f803 1b01 	strb.w	r1, [r3], #1
 800d51c:	e7f9      	b.n	800d512 <memset+0x4>
	...

0800d520 <siprintf>:
 800d520:	b40e      	push	{r1, r2, r3}
 800d522:	b500      	push	{lr}
 800d524:	b09c      	sub	sp, #112	; 0x70
 800d526:	ab1d      	add	r3, sp, #116	; 0x74
 800d528:	9002      	str	r0, [sp, #8]
 800d52a:	9006      	str	r0, [sp, #24]
 800d52c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d530:	4809      	ldr	r0, [pc, #36]	; (800d558 <siprintf+0x38>)
 800d532:	9107      	str	r1, [sp, #28]
 800d534:	9104      	str	r1, [sp, #16]
 800d536:	4909      	ldr	r1, [pc, #36]	; (800d55c <siprintf+0x3c>)
 800d538:	f853 2b04 	ldr.w	r2, [r3], #4
 800d53c:	9105      	str	r1, [sp, #20]
 800d53e:	6800      	ldr	r0, [r0, #0]
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	a902      	add	r1, sp, #8
 800d544:	f000 f866 	bl	800d614 <_svfiprintf_r>
 800d548:	9b02      	ldr	r3, [sp, #8]
 800d54a:	2200      	movs	r2, #0
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	b01c      	add	sp, #112	; 0x70
 800d550:	f85d eb04 	ldr.w	lr, [sp], #4
 800d554:	b003      	add	sp, #12
 800d556:	4770      	bx	lr
 800d558:	2000021c 	.word	0x2000021c
 800d55c:	ffff0208 	.word	0xffff0208

0800d560 <__ssputs_r>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	688e      	ldr	r6, [r1, #8]
 800d566:	429e      	cmp	r6, r3
 800d568:	4682      	mov	sl, r0
 800d56a:	460c      	mov	r4, r1
 800d56c:	4690      	mov	r8, r2
 800d56e:	4699      	mov	r9, r3
 800d570:	d837      	bhi.n	800d5e2 <__ssputs_r+0x82>
 800d572:	898a      	ldrh	r2, [r1, #12]
 800d574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d578:	d031      	beq.n	800d5de <__ssputs_r+0x7e>
 800d57a:	6825      	ldr	r5, [r4, #0]
 800d57c:	6909      	ldr	r1, [r1, #16]
 800d57e:	1a6f      	subs	r7, r5, r1
 800d580:	6965      	ldr	r5, [r4, #20]
 800d582:	2302      	movs	r3, #2
 800d584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d588:	fb95 f5f3 	sdiv	r5, r5, r3
 800d58c:	f109 0301 	add.w	r3, r9, #1
 800d590:	443b      	add	r3, r7
 800d592:	429d      	cmp	r5, r3
 800d594:	bf38      	it	cc
 800d596:	461d      	movcc	r5, r3
 800d598:	0553      	lsls	r3, r2, #21
 800d59a:	d530      	bpl.n	800d5fe <__ssputs_r+0x9e>
 800d59c:	4629      	mov	r1, r5
 800d59e:	f000 fb21 	bl	800dbe4 <_malloc_r>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	b950      	cbnz	r0, 800d5bc <__ssputs_r+0x5c>
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	f8ca 3000 	str.w	r3, [sl]
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5bc:	463a      	mov	r2, r7
 800d5be:	6921      	ldr	r1, [r4, #16]
 800d5c0:	f7ff ff9a 	bl	800d4f8 <memcpy>
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ce:	81a3      	strh	r3, [r4, #12]
 800d5d0:	6126      	str	r6, [r4, #16]
 800d5d2:	6165      	str	r5, [r4, #20]
 800d5d4:	443e      	add	r6, r7
 800d5d6:	1bed      	subs	r5, r5, r7
 800d5d8:	6026      	str	r6, [r4, #0]
 800d5da:	60a5      	str	r5, [r4, #8]
 800d5dc:	464e      	mov	r6, r9
 800d5de:	454e      	cmp	r6, r9
 800d5e0:	d900      	bls.n	800d5e4 <__ssputs_r+0x84>
 800d5e2:	464e      	mov	r6, r9
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	4641      	mov	r1, r8
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	f000 fa93 	bl	800db14 <memmove>
 800d5ee:	68a3      	ldr	r3, [r4, #8]
 800d5f0:	1b9b      	subs	r3, r3, r6
 800d5f2:	60a3      	str	r3, [r4, #8]
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	441e      	add	r6, r3
 800d5f8:	6026      	str	r6, [r4, #0]
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e7dc      	b.n	800d5b8 <__ssputs_r+0x58>
 800d5fe:	462a      	mov	r2, r5
 800d600:	f000 fb4a 	bl	800dc98 <_realloc_r>
 800d604:	4606      	mov	r6, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	d1e2      	bne.n	800d5d0 <__ssputs_r+0x70>
 800d60a:	6921      	ldr	r1, [r4, #16]
 800d60c:	4650      	mov	r0, sl
 800d60e:	f000 fa9b 	bl	800db48 <_free_r>
 800d612:	e7c8      	b.n	800d5a6 <__ssputs_r+0x46>

0800d614 <_svfiprintf_r>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	461d      	mov	r5, r3
 800d61a:	898b      	ldrh	r3, [r1, #12]
 800d61c:	061f      	lsls	r7, r3, #24
 800d61e:	b09d      	sub	sp, #116	; 0x74
 800d620:	4680      	mov	r8, r0
 800d622:	460c      	mov	r4, r1
 800d624:	4616      	mov	r6, r2
 800d626:	d50f      	bpl.n	800d648 <_svfiprintf_r+0x34>
 800d628:	690b      	ldr	r3, [r1, #16]
 800d62a:	b96b      	cbnz	r3, 800d648 <_svfiprintf_r+0x34>
 800d62c:	2140      	movs	r1, #64	; 0x40
 800d62e:	f000 fad9 	bl	800dbe4 <_malloc_r>
 800d632:	6020      	str	r0, [r4, #0]
 800d634:	6120      	str	r0, [r4, #16]
 800d636:	b928      	cbnz	r0, 800d644 <_svfiprintf_r+0x30>
 800d638:	230c      	movs	r3, #12
 800d63a:	f8c8 3000 	str.w	r3, [r8]
 800d63e:	f04f 30ff 	mov.w	r0, #4294967295
 800d642:	e0c8      	b.n	800d7d6 <_svfiprintf_r+0x1c2>
 800d644:	2340      	movs	r3, #64	; 0x40
 800d646:	6163      	str	r3, [r4, #20]
 800d648:	2300      	movs	r3, #0
 800d64a:	9309      	str	r3, [sp, #36]	; 0x24
 800d64c:	2320      	movs	r3, #32
 800d64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d652:	2330      	movs	r3, #48	; 0x30
 800d654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d658:	9503      	str	r5, [sp, #12]
 800d65a:	f04f 0b01 	mov.w	fp, #1
 800d65e:	4637      	mov	r7, r6
 800d660:	463d      	mov	r5, r7
 800d662:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d666:	b10b      	cbz	r3, 800d66c <_svfiprintf_r+0x58>
 800d668:	2b25      	cmp	r3, #37	; 0x25
 800d66a:	d13e      	bne.n	800d6ea <_svfiprintf_r+0xd6>
 800d66c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d670:	d00b      	beq.n	800d68a <_svfiprintf_r+0x76>
 800d672:	4653      	mov	r3, sl
 800d674:	4632      	mov	r2, r6
 800d676:	4621      	mov	r1, r4
 800d678:	4640      	mov	r0, r8
 800d67a:	f7ff ff71 	bl	800d560 <__ssputs_r>
 800d67e:	3001      	adds	r0, #1
 800d680:	f000 80a4 	beq.w	800d7cc <_svfiprintf_r+0x1b8>
 800d684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d686:	4453      	add	r3, sl
 800d688:	9309      	str	r3, [sp, #36]	; 0x24
 800d68a:	783b      	ldrb	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 809d 	beq.w	800d7cc <_svfiprintf_r+0x1b8>
 800d692:	2300      	movs	r3, #0
 800d694:	f04f 32ff 	mov.w	r2, #4294967295
 800d698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d69c:	9304      	str	r3, [sp, #16]
 800d69e:	9307      	str	r3, [sp, #28]
 800d6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6a6:	462f      	mov	r7, r5
 800d6a8:	2205      	movs	r2, #5
 800d6aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d6ae:	4850      	ldr	r0, [pc, #320]	; (800d7f0 <_svfiprintf_r+0x1dc>)
 800d6b0:	f7f2 fdbe 	bl	8000230 <memchr>
 800d6b4:	9b04      	ldr	r3, [sp, #16]
 800d6b6:	b9d0      	cbnz	r0, 800d6ee <_svfiprintf_r+0xda>
 800d6b8:	06d9      	lsls	r1, r3, #27
 800d6ba:	bf44      	itt	mi
 800d6bc:	2220      	movmi	r2, #32
 800d6be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6c2:	071a      	lsls	r2, r3, #28
 800d6c4:	bf44      	itt	mi
 800d6c6:	222b      	movmi	r2, #43	; 0x2b
 800d6c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6cc:	782a      	ldrb	r2, [r5, #0]
 800d6ce:	2a2a      	cmp	r2, #42	; 0x2a
 800d6d0:	d015      	beq.n	800d6fe <_svfiprintf_r+0xea>
 800d6d2:	9a07      	ldr	r2, [sp, #28]
 800d6d4:	462f      	mov	r7, r5
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	250a      	movs	r5, #10
 800d6da:	4639      	mov	r1, r7
 800d6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6e0:	3b30      	subs	r3, #48	; 0x30
 800d6e2:	2b09      	cmp	r3, #9
 800d6e4:	d94d      	bls.n	800d782 <_svfiprintf_r+0x16e>
 800d6e6:	b1b8      	cbz	r0, 800d718 <_svfiprintf_r+0x104>
 800d6e8:	e00f      	b.n	800d70a <_svfiprintf_r+0xf6>
 800d6ea:	462f      	mov	r7, r5
 800d6ec:	e7b8      	b.n	800d660 <_svfiprintf_r+0x4c>
 800d6ee:	4a40      	ldr	r2, [pc, #256]	; (800d7f0 <_svfiprintf_r+0x1dc>)
 800d6f0:	1a80      	subs	r0, r0, r2
 800d6f2:	fa0b f000 	lsl.w	r0, fp, r0
 800d6f6:	4318      	orrs	r0, r3
 800d6f8:	9004      	str	r0, [sp, #16]
 800d6fa:	463d      	mov	r5, r7
 800d6fc:	e7d3      	b.n	800d6a6 <_svfiprintf_r+0x92>
 800d6fe:	9a03      	ldr	r2, [sp, #12]
 800d700:	1d11      	adds	r1, r2, #4
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	9103      	str	r1, [sp, #12]
 800d706:	2a00      	cmp	r2, #0
 800d708:	db01      	blt.n	800d70e <_svfiprintf_r+0xfa>
 800d70a:	9207      	str	r2, [sp, #28]
 800d70c:	e004      	b.n	800d718 <_svfiprintf_r+0x104>
 800d70e:	4252      	negs	r2, r2
 800d710:	f043 0302 	orr.w	r3, r3, #2
 800d714:	9207      	str	r2, [sp, #28]
 800d716:	9304      	str	r3, [sp, #16]
 800d718:	783b      	ldrb	r3, [r7, #0]
 800d71a:	2b2e      	cmp	r3, #46	; 0x2e
 800d71c:	d10c      	bne.n	800d738 <_svfiprintf_r+0x124>
 800d71e:	787b      	ldrb	r3, [r7, #1]
 800d720:	2b2a      	cmp	r3, #42	; 0x2a
 800d722:	d133      	bne.n	800d78c <_svfiprintf_r+0x178>
 800d724:	9b03      	ldr	r3, [sp, #12]
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	9203      	str	r2, [sp, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bfb8      	it	lt
 800d730:	f04f 33ff 	movlt.w	r3, #4294967295
 800d734:	3702      	adds	r7, #2
 800d736:	9305      	str	r3, [sp, #20]
 800d738:	4d2e      	ldr	r5, [pc, #184]	; (800d7f4 <_svfiprintf_r+0x1e0>)
 800d73a:	7839      	ldrb	r1, [r7, #0]
 800d73c:	2203      	movs	r2, #3
 800d73e:	4628      	mov	r0, r5
 800d740:	f7f2 fd76 	bl	8000230 <memchr>
 800d744:	b138      	cbz	r0, 800d756 <_svfiprintf_r+0x142>
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	1b40      	subs	r0, r0, r5
 800d74a:	fa03 f000 	lsl.w	r0, r3, r0
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	4303      	orrs	r3, r0
 800d752:	3701      	adds	r7, #1
 800d754:	9304      	str	r3, [sp, #16]
 800d756:	7839      	ldrb	r1, [r7, #0]
 800d758:	4827      	ldr	r0, [pc, #156]	; (800d7f8 <_svfiprintf_r+0x1e4>)
 800d75a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d75e:	2206      	movs	r2, #6
 800d760:	1c7e      	adds	r6, r7, #1
 800d762:	f7f2 fd65 	bl	8000230 <memchr>
 800d766:	2800      	cmp	r0, #0
 800d768:	d038      	beq.n	800d7dc <_svfiprintf_r+0x1c8>
 800d76a:	4b24      	ldr	r3, [pc, #144]	; (800d7fc <_svfiprintf_r+0x1e8>)
 800d76c:	bb13      	cbnz	r3, 800d7b4 <_svfiprintf_r+0x1a0>
 800d76e:	9b03      	ldr	r3, [sp, #12]
 800d770:	3307      	adds	r3, #7
 800d772:	f023 0307 	bic.w	r3, r3, #7
 800d776:	3308      	adds	r3, #8
 800d778:	9303      	str	r3, [sp, #12]
 800d77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d77c:	444b      	add	r3, r9
 800d77e:	9309      	str	r3, [sp, #36]	; 0x24
 800d780:	e76d      	b.n	800d65e <_svfiprintf_r+0x4a>
 800d782:	fb05 3202 	mla	r2, r5, r2, r3
 800d786:	2001      	movs	r0, #1
 800d788:	460f      	mov	r7, r1
 800d78a:	e7a6      	b.n	800d6da <_svfiprintf_r+0xc6>
 800d78c:	2300      	movs	r3, #0
 800d78e:	3701      	adds	r7, #1
 800d790:	9305      	str	r3, [sp, #20]
 800d792:	4619      	mov	r1, r3
 800d794:	250a      	movs	r5, #10
 800d796:	4638      	mov	r0, r7
 800d798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d79c:	3a30      	subs	r2, #48	; 0x30
 800d79e:	2a09      	cmp	r2, #9
 800d7a0:	d903      	bls.n	800d7aa <_svfiprintf_r+0x196>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0c8      	beq.n	800d738 <_svfiprintf_r+0x124>
 800d7a6:	9105      	str	r1, [sp, #20]
 800d7a8:	e7c6      	b.n	800d738 <_svfiprintf_r+0x124>
 800d7aa:	fb05 2101 	mla	r1, r5, r1, r2
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	e7f0      	b.n	800d796 <_svfiprintf_r+0x182>
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	4622      	mov	r2, r4
 800d7ba:	4b11      	ldr	r3, [pc, #68]	; (800d800 <_svfiprintf_r+0x1ec>)
 800d7bc:	a904      	add	r1, sp, #16
 800d7be:	4640      	mov	r0, r8
 800d7c0:	f3af 8000 	nop.w
 800d7c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d7c8:	4681      	mov	r9, r0
 800d7ca:	d1d6      	bne.n	800d77a <_svfiprintf_r+0x166>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	065b      	lsls	r3, r3, #25
 800d7d0:	f53f af35 	bmi.w	800d63e <_svfiprintf_r+0x2a>
 800d7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7d6:	b01d      	add	sp, #116	; 0x74
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	ab03      	add	r3, sp, #12
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	4b07      	ldr	r3, [pc, #28]	; (800d800 <_svfiprintf_r+0x1ec>)
 800d7e4:	a904      	add	r1, sp, #16
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	f000 f882 	bl	800d8f0 <_printf_i>
 800d7ec:	e7ea      	b.n	800d7c4 <_svfiprintf_r+0x1b0>
 800d7ee:	bf00      	nop
 800d7f0:	0800df48 	.word	0x0800df48
 800d7f4:	0800df4e 	.word	0x0800df4e
 800d7f8:	0800df52 	.word	0x0800df52
 800d7fc:	00000000 	.word	0x00000000
 800d800:	0800d561 	.word	0x0800d561

0800d804 <_printf_common>:
 800d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	4691      	mov	r9, r2
 800d80a:	461f      	mov	r7, r3
 800d80c:	688a      	ldr	r2, [r1, #8]
 800d80e:	690b      	ldr	r3, [r1, #16]
 800d810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d814:	4293      	cmp	r3, r2
 800d816:	bfb8      	it	lt
 800d818:	4613      	movlt	r3, r2
 800d81a:	f8c9 3000 	str.w	r3, [r9]
 800d81e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d822:	4606      	mov	r6, r0
 800d824:	460c      	mov	r4, r1
 800d826:	b112      	cbz	r2, 800d82e <_printf_common+0x2a>
 800d828:	3301      	adds	r3, #1
 800d82a:	f8c9 3000 	str.w	r3, [r9]
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	0699      	lsls	r1, r3, #26
 800d832:	bf42      	ittt	mi
 800d834:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d838:	3302      	addmi	r3, #2
 800d83a:	f8c9 3000 	strmi.w	r3, [r9]
 800d83e:	6825      	ldr	r5, [r4, #0]
 800d840:	f015 0506 	ands.w	r5, r5, #6
 800d844:	d107      	bne.n	800d856 <_printf_common+0x52>
 800d846:	f104 0a19 	add.w	sl, r4, #25
 800d84a:	68e3      	ldr	r3, [r4, #12]
 800d84c:	f8d9 2000 	ldr.w	r2, [r9]
 800d850:	1a9b      	subs	r3, r3, r2
 800d852:	42ab      	cmp	r3, r5
 800d854:	dc28      	bgt.n	800d8a8 <_printf_common+0xa4>
 800d856:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d85a:	6822      	ldr	r2, [r4, #0]
 800d85c:	3300      	adds	r3, #0
 800d85e:	bf18      	it	ne
 800d860:	2301      	movne	r3, #1
 800d862:	0692      	lsls	r2, r2, #26
 800d864:	d42d      	bmi.n	800d8c2 <_printf_common+0xbe>
 800d866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d86a:	4639      	mov	r1, r7
 800d86c:	4630      	mov	r0, r6
 800d86e:	47c0      	blx	r8
 800d870:	3001      	adds	r0, #1
 800d872:	d020      	beq.n	800d8b6 <_printf_common+0xb2>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	68e5      	ldr	r5, [r4, #12]
 800d878:	f8d9 2000 	ldr.w	r2, [r9]
 800d87c:	f003 0306 	and.w	r3, r3, #6
 800d880:	2b04      	cmp	r3, #4
 800d882:	bf08      	it	eq
 800d884:	1aad      	subeq	r5, r5, r2
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	6922      	ldr	r2, [r4, #16]
 800d88a:	bf0c      	ite	eq
 800d88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d890:	2500      	movne	r5, #0
 800d892:	4293      	cmp	r3, r2
 800d894:	bfc4      	itt	gt
 800d896:	1a9b      	subgt	r3, r3, r2
 800d898:	18ed      	addgt	r5, r5, r3
 800d89a:	f04f 0900 	mov.w	r9, #0
 800d89e:	341a      	adds	r4, #26
 800d8a0:	454d      	cmp	r5, r9
 800d8a2:	d11a      	bne.n	800d8da <_printf_common+0xd6>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	e008      	b.n	800d8ba <_printf_common+0xb6>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	4652      	mov	r2, sl
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	47c0      	blx	r8
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d103      	bne.n	800d8be <_printf_common+0xba>
 800d8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8be:	3501      	adds	r5, #1
 800d8c0:	e7c3      	b.n	800d84a <_printf_common+0x46>
 800d8c2:	18e1      	adds	r1, r4, r3
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	2030      	movs	r0, #48	; 0x30
 800d8c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8cc:	4422      	add	r2, r4
 800d8ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8d6:	3302      	adds	r3, #2
 800d8d8:	e7c5      	b.n	800d866 <_printf_common+0x62>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	4622      	mov	r2, r4
 800d8de:	4639      	mov	r1, r7
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	47c0      	blx	r8
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d0e6      	beq.n	800d8b6 <_printf_common+0xb2>
 800d8e8:	f109 0901 	add.w	r9, r9, #1
 800d8ec:	e7d8      	b.n	800d8a0 <_printf_common+0x9c>
	...

0800d8f0 <_printf_i>:
 800d8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	7e09      	ldrb	r1, [r1, #24]
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	296e      	cmp	r1, #110	; 0x6e
 800d900:	4617      	mov	r7, r2
 800d902:	4606      	mov	r6, r0
 800d904:	4698      	mov	r8, r3
 800d906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d908:	f000 80b3 	beq.w	800da72 <_printf_i+0x182>
 800d90c:	d822      	bhi.n	800d954 <_printf_i+0x64>
 800d90e:	2963      	cmp	r1, #99	; 0x63
 800d910:	d036      	beq.n	800d980 <_printf_i+0x90>
 800d912:	d80a      	bhi.n	800d92a <_printf_i+0x3a>
 800d914:	2900      	cmp	r1, #0
 800d916:	f000 80b9 	beq.w	800da8c <_printf_i+0x19c>
 800d91a:	2958      	cmp	r1, #88	; 0x58
 800d91c:	f000 8083 	beq.w	800da26 <_printf_i+0x136>
 800d920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d924:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d928:	e032      	b.n	800d990 <_printf_i+0xa0>
 800d92a:	2964      	cmp	r1, #100	; 0x64
 800d92c:	d001      	beq.n	800d932 <_printf_i+0x42>
 800d92e:	2969      	cmp	r1, #105	; 0x69
 800d930:	d1f6      	bne.n	800d920 <_printf_i+0x30>
 800d932:	6820      	ldr	r0, [r4, #0]
 800d934:	6813      	ldr	r3, [r2, #0]
 800d936:	0605      	lsls	r5, r0, #24
 800d938:	f103 0104 	add.w	r1, r3, #4
 800d93c:	d52a      	bpl.n	800d994 <_printf_i+0xa4>
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	6011      	str	r1, [r2, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	da03      	bge.n	800d94e <_printf_i+0x5e>
 800d946:	222d      	movs	r2, #45	; 0x2d
 800d948:	425b      	negs	r3, r3
 800d94a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d94e:	486f      	ldr	r0, [pc, #444]	; (800db0c <_printf_i+0x21c>)
 800d950:	220a      	movs	r2, #10
 800d952:	e039      	b.n	800d9c8 <_printf_i+0xd8>
 800d954:	2973      	cmp	r1, #115	; 0x73
 800d956:	f000 809d 	beq.w	800da94 <_printf_i+0x1a4>
 800d95a:	d808      	bhi.n	800d96e <_printf_i+0x7e>
 800d95c:	296f      	cmp	r1, #111	; 0x6f
 800d95e:	d020      	beq.n	800d9a2 <_printf_i+0xb2>
 800d960:	2970      	cmp	r1, #112	; 0x70
 800d962:	d1dd      	bne.n	800d920 <_printf_i+0x30>
 800d964:	6823      	ldr	r3, [r4, #0]
 800d966:	f043 0320 	orr.w	r3, r3, #32
 800d96a:	6023      	str	r3, [r4, #0]
 800d96c:	e003      	b.n	800d976 <_printf_i+0x86>
 800d96e:	2975      	cmp	r1, #117	; 0x75
 800d970:	d017      	beq.n	800d9a2 <_printf_i+0xb2>
 800d972:	2978      	cmp	r1, #120	; 0x78
 800d974:	d1d4      	bne.n	800d920 <_printf_i+0x30>
 800d976:	2378      	movs	r3, #120	; 0x78
 800d978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d97c:	4864      	ldr	r0, [pc, #400]	; (800db10 <_printf_i+0x220>)
 800d97e:	e055      	b.n	800da2c <_printf_i+0x13c>
 800d980:	6813      	ldr	r3, [r2, #0]
 800d982:	1d19      	adds	r1, r3, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6011      	str	r1, [r2, #0]
 800d988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d990:	2301      	movs	r3, #1
 800d992:	e08c      	b.n	800daae <_printf_i+0x1be>
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6011      	str	r1, [r2, #0]
 800d998:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d99c:	bf18      	it	ne
 800d99e:	b21b      	sxthne	r3, r3
 800d9a0:	e7cf      	b.n	800d942 <_printf_i+0x52>
 800d9a2:	6813      	ldr	r3, [r2, #0]
 800d9a4:	6825      	ldr	r5, [r4, #0]
 800d9a6:	1d18      	adds	r0, r3, #4
 800d9a8:	6010      	str	r0, [r2, #0]
 800d9aa:	0628      	lsls	r0, r5, #24
 800d9ac:	d501      	bpl.n	800d9b2 <_printf_i+0xc2>
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	e002      	b.n	800d9b8 <_printf_i+0xc8>
 800d9b2:	0668      	lsls	r0, r5, #25
 800d9b4:	d5fb      	bpl.n	800d9ae <_printf_i+0xbe>
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	4854      	ldr	r0, [pc, #336]	; (800db0c <_printf_i+0x21c>)
 800d9ba:	296f      	cmp	r1, #111	; 0x6f
 800d9bc:	bf14      	ite	ne
 800d9be:	220a      	movne	r2, #10
 800d9c0:	2208      	moveq	r2, #8
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9c8:	6865      	ldr	r5, [r4, #4]
 800d9ca:	60a5      	str	r5, [r4, #8]
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	f2c0 8095 	blt.w	800dafc <_printf_i+0x20c>
 800d9d2:	6821      	ldr	r1, [r4, #0]
 800d9d4:	f021 0104 	bic.w	r1, r1, #4
 800d9d8:	6021      	str	r1, [r4, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d13d      	bne.n	800da5a <_printf_i+0x16a>
 800d9de:	2d00      	cmp	r5, #0
 800d9e0:	f040 808e 	bne.w	800db00 <_printf_i+0x210>
 800d9e4:	4665      	mov	r5, ip
 800d9e6:	2a08      	cmp	r2, #8
 800d9e8:	d10b      	bne.n	800da02 <_printf_i+0x112>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	07db      	lsls	r3, r3, #31
 800d9ee:	d508      	bpl.n	800da02 <_printf_i+0x112>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	6862      	ldr	r2, [r4, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	bfde      	ittt	le
 800d9f8:	2330      	movle	r3, #48	; 0x30
 800d9fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da02:	ebac 0305 	sub.w	r3, ip, r5
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	f8cd 8000 	str.w	r8, [sp]
 800da0c:	463b      	mov	r3, r7
 800da0e:	aa03      	add	r2, sp, #12
 800da10:	4621      	mov	r1, r4
 800da12:	4630      	mov	r0, r6
 800da14:	f7ff fef6 	bl	800d804 <_printf_common>
 800da18:	3001      	adds	r0, #1
 800da1a:	d14d      	bne.n	800dab8 <_printf_i+0x1c8>
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	b005      	add	sp, #20
 800da22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da26:	4839      	ldr	r0, [pc, #228]	; (800db0c <_printf_i+0x21c>)
 800da28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800da2c:	6813      	ldr	r3, [r2, #0]
 800da2e:	6821      	ldr	r1, [r4, #0]
 800da30:	1d1d      	adds	r5, r3, #4
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	6015      	str	r5, [r2, #0]
 800da36:	060a      	lsls	r2, r1, #24
 800da38:	d50b      	bpl.n	800da52 <_printf_i+0x162>
 800da3a:	07ca      	lsls	r2, r1, #31
 800da3c:	bf44      	itt	mi
 800da3e:	f041 0120 	orrmi.w	r1, r1, #32
 800da42:	6021      	strmi	r1, [r4, #0]
 800da44:	b91b      	cbnz	r3, 800da4e <_printf_i+0x15e>
 800da46:	6822      	ldr	r2, [r4, #0]
 800da48:	f022 0220 	bic.w	r2, r2, #32
 800da4c:	6022      	str	r2, [r4, #0]
 800da4e:	2210      	movs	r2, #16
 800da50:	e7b7      	b.n	800d9c2 <_printf_i+0xd2>
 800da52:	064d      	lsls	r5, r1, #25
 800da54:	bf48      	it	mi
 800da56:	b29b      	uxthmi	r3, r3
 800da58:	e7ef      	b.n	800da3a <_printf_i+0x14a>
 800da5a:	4665      	mov	r5, ip
 800da5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da60:	fb02 3311 	mls	r3, r2, r1, r3
 800da64:	5cc3      	ldrb	r3, [r0, r3]
 800da66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800da6a:	460b      	mov	r3, r1
 800da6c:	2900      	cmp	r1, #0
 800da6e:	d1f5      	bne.n	800da5c <_printf_i+0x16c>
 800da70:	e7b9      	b.n	800d9e6 <_printf_i+0xf6>
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	6825      	ldr	r5, [r4, #0]
 800da76:	6961      	ldr	r1, [r4, #20]
 800da78:	1d18      	adds	r0, r3, #4
 800da7a:	6010      	str	r0, [r2, #0]
 800da7c:	0628      	lsls	r0, r5, #24
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	d501      	bpl.n	800da86 <_printf_i+0x196>
 800da82:	6019      	str	r1, [r3, #0]
 800da84:	e002      	b.n	800da8c <_printf_i+0x19c>
 800da86:	066a      	lsls	r2, r5, #25
 800da88:	d5fb      	bpl.n	800da82 <_printf_i+0x192>
 800da8a:	8019      	strh	r1, [r3, #0]
 800da8c:	2300      	movs	r3, #0
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	4665      	mov	r5, ip
 800da92:	e7b9      	b.n	800da08 <_printf_i+0x118>
 800da94:	6813      	ldr	r3, [r2, #0]
 800da96:	1d19      	adds	r1, r3, #4
 800da98:	6011      	str	r1, [r2, #0]
 800da9a:	681d      	ldr	r5, [r3, #0]
 800da9c:	6862      	ldr	r2, [r4, #4]
 800da9e:	2100      	movs	r1, #0
 800daa0:	4628      	mov	r0, r5
 800daa2:	f7f2 fbc5 	bl	8000230 <memchr>
 800daa6:	b108      	cbz	r0, 800daac <_printf_i+0x1bc>
 800daa8:	1b40      	subs	r0, r0, r5
 800daaa:	6060      	str	r0, [r4, #4]
 800daac:	6863      	ldr	r3, [r4, #4]
 800daae:	6123      	str	r3, [r4, #16]
 800dab0:	2300      	movs	r3, #0
 800dab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab6:	e7a7      	b.n	800da08 <_printf_i+0x118>
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	462a      	mov	r2, r5
 800dabc:	4639      	mov	r1, r7
 800dabe:	4630      	mov	r0, r6
 800dac0:	47c0      	blx	r8
 800dac2:	3001      	adds	r0, #1
 800dac4:	d0aa      	beq.n	800da1c <_printf_i+0x12c>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	079b      	lsls	r3, r3, #30
 800daca:	d413      	bmi.n	800daf4 <_printf_i+0x204>
 800dacc:	68e0      	ldr	r0, [r4, #12]
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	4298      	cmp	r0, r3
 800dad2:	bfb8      	it	lt
 800dad4:	4618      	movlt	r0, r3
 800dad6:	e7a3      	b.n	800da20 <_printf_i+0x130>
 800dad8:	2301      	movs	r3, #1
 800dada:	464a      	mov	r2, r9
 800dadc:	4639      	mov	r1, r7
 800dade:	4630      	mov	r0, r6
 800dae0:	47c0      	blx	r8
 800dae2:	3001      	adds	r0, #1
 800dae4:	d09a      	beq.n	800da1c <_printf_i+0x12c>
 800dae6:	3501      	adds	r5, #1
 800dae8:	68e3      	ldr	r3, [r4, #12]
 800daea:	9a03      	ldr	r2, [sp, #12]
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	42ab      	cmp	r3, r5
 800daf0:	dcf2      	bgt.n	800dad8 <_printf_i+0x1e8>
 800daf2:	e7eb      	b.n	800dacc <_printf_i+0x1dc>
 800daf4:	2500      	movs	r5, #0
 800daf6:	f104 0919 	add.w	r9, r4, #25
 800dafa:	e7f5      	b.n	800dae8 <_printf_i+0x1f8>
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1ac      	bne.n	800da5a <_printf_i+0x16a>
 800db00:	7803      	ldrb	r3, [r0, #0]
 800db02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db0a:	e76c      	b.n	800d9e6 <_printf_i+0xf6>
 800db0c:	0800df59 	.word	0x0800df59
 800db10:	0800df6a 	.word	0x0800df6a

0800db14 <memmove>:
 800db14:	4288      	cmp	r0, r1
 800db16:	b510      	push	{r4, lr}
 800db18:	eb01 0302 	add.w	r3, r1, r2
 800db1c:	d807      	bhi.n	800db2e <memmove+0x1a>
 800db1e:	1e42      	subs	r2, r0, #1
 800db20:	4299      	cmp	r1, r3
 800db22:	d00a      	beq.n	800db3a <memmove+0x26>
 800db24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db28:	f802 4f01 	strb.w	r4, [r2, #1]!
 800db2c:	e7f8      	b.n	800db20 <memmove+0xc>
 800db2e:	4283      	cmp	r3, r0
 800db30:	d9f5      	bls.n	800db1e <memmove+0xa>
 800db32:	1881      	adds	r1, r0, r2
 800db34:	1ad2      	subs	r2, r2, r3
 800db36:	42d3      	cmn	r3, r2
 800db38:	d100      	bne.n	800db3c <memmove+0x28>
 800db3a:	bd10      	pop	{r4, pc}
 800db3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800db44:	e7f7      	b.n	800db36 <memmove+0x22>
	...

0800db48 <_free_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4605      	mov	r5, r0
 800db4c:	2900      	cmp	r1, #0
 800db4e:	d045      	beq.n	800dbdc <_free_r+0x94>
 800db50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db54:	1f0c      	subs	r4, r1, #4
 800db56:	2b00      	cmp	r3, #0
 800db58:	bfb8      	it	lt
 800db5a:	18e4      	addlt	r4, r4, r3
 800db5c:	f000 f8d2 	bl	800dd04 <__malloc_lock>
 800db60:	4a1f      	ldr	r2, [pc, #124]	; (800dbe0 <_free_r+0x98>)
 800db62:	6813      	ldr	r3, [r2, #0]
 800db64:	4610      	mov	r0, r2
 800db66:	b933      	cbnz	r3, 800db76 <_free_r+0x2e>
 800db68:	6063      	str	r3, [r4, #4]
 800db6a:	6014      	str	r4, [r2, #0]
 800db6c:	4628      	mov	r0, r5
 800db6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db72:	f000 b8c8 	b.w	800dd06 <__malloc_unlock>
 800db76:	42a3      	cmp	r3, r4
 800db78:	d90c      	bls.n	800db94 <_free_r+0x4c>
 800db7a:	6821      	ldr	r1, [r4, #0]
 800db7c:	1862      	adds	r2, r4, r1
 800db7e:	4293      	cmp	r3, r2
 800db80:	bf04      	itt	eq
 800db82:	681a      	ldreq	r2, [r3, #0]
 800db84:	685b      	ldreq	r3, [r3, #4]
 800db86:	6063      	str	r3, [r4, #4]
 800db88:	bf04      	itt	eq
 800db8a:	1852      	addeq	r2, r2, r1
 800db8c:	6022      	streq	r2, [r4, #0]
 800db8e:	6004      	str	r4, [r0, #0]
 800db90:	e7ec      	b.n	800db6c <_free_r+0x24>
 800db92:	4613      	mov	r3, r2
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	b10a      	cbz	r2, 800db9c <_free_r+0x54>
 800db98:	42a2      	cmp	r2, r4
 800db9a:	d9fa      	bls.n	800db92 <_free_r+0x4a>
 800db9c:	6819      	ldr	r1, [r3, #0]
 800db9e:	1858      	adds	r0, r3, r1
 800dba0:	42a0      	cmp	r0, r4
 800dba2:	d10b      	bne.n	800dbbc <_free_r+0x74>
 800dba4:	6820      	ldr	r0, [r4, #0]
 800dba6:	4401      	add	r1, r0
 800dba8:	1858      	adds	r0, r3, r1
 800dbaa:	4282      	cmp	r2, r0
 800dbac:	6019      	str	r1, [r3, #0]
 800dbae:	d1dd      	bne.n	800db6c <_free_r+0x24>
 800dbb0:	6810      	ldr	r0, [r2, #0]
 800dbb2:	6852      	ldr	r2, [r2, #4]
 800dbb4:	605a      	str	r2, [r3, #4]
 800dbb6:	4401      	add	r1, r0
 800dbb8:	6019      	str	r1, [r3, #0]
 800dbba:	e7d7      	b.n	800db6c <_free_r+0x24>
 800dbbc:	d902      	bls.n	800dbc4 <_free_r+0x7c>
 800dbbe:	230c      	movs	r3, #12
 800dbc0:	602b      	str	r3, [r5, #0]
 800dbc2:	e7d3      	b.n	800db6c <_free_r+0x24>
 800dbc4:	6820      	ldr	r0, [r4, #0]
 800dbc6:	1821      	adds	r1, r4, r0
 800dbc8:	428a      	cmp	r2, r1
 800dbca:	bf04      	itt	eq
 800dbcc:	6811      	ldreq	r1, [r2, #0]
 800dbce:	6852      	ldreq	r2, [r2, #4]
 800dbd0:	6062      	str	r2, [r4, #4]
 800dbd2:	bf04      	itt	eq
 800dbd4:	1809      	addeq	r1, r1, r0
 800dbd6:	6021      	streq	r1, [r4, #0]
 800dbd8:	605c      	str	r4, [r3, #4]
 800dbda:	e7c7      	b.n	800db6c <_free_r+0x24>
 800dbdc:	bd38      	pop	{r3, r4, r5, pc}
 800dbde:	bf00      	nop
 800dbe0:	200004cc 	.word	0x200004cc

0800dbe4 <_malloc_r>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	1ccd      	adds	r5, r1, #3
 800dbe8:	f025 0503 	bic.w	r5, r5, #3
 800dbec:	3508      	adds	r5, #8
 800dbee:	2d0c      	cmp	r5, #12
 800dbf0:	bf38      	it	cc
 800dbf2:	250c      	movcc	r5, #12
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	db01      	blt.n	800dbfe <_malloc_r+0x1a>
 800dbfa:	42a9      	cmp	r1, r5
 800dbfc:	d903      	bls.n	800dc06 <_malloc_r+0x22>
 800dbfe:	230c      	movs	r3, #12
 800dc00:	6033      	str	r3, [r6, #0]
 800dc02:	2000      	movs	r0, #0
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	f000 f87d 	bl	800dd04 <__malloc_lock>
 800dc0a:	4a21      	ldr	r2, [pc, #132]	; (800dc90 <_malloc_r+0xac>)
 800dc0c:	6814      	ldr	r4, [r2, #0]
 800dc0e:	4621      	mov	r1, r4
 800dc10:	b991      	cbnz	r1, 800dc38 <_malloc_r+0x54>
 800dc12:	4c20      	ldr	r4, [pc, #128]	; (800dc94 <_malloc_r+0xb0>)
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	b91b      	cbnz	r3, 800dc20 <_malloc_r+0x3c>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 f863 	bl	800dce4 <_sbrk_r>
 800dc1e:	6020      	str	r0, [r4, #0]
 800dc20:	4629      	mov	r1, r5
 800dc22:	4630      	mov	r0, r6
 800dc24:	f000 f85e 	bl	800dce4 <_sbrk_r>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d124      	bne.n	800dc76 <_malloc_r+0x92>
 800dc2c:	230c      	movs	r3, #12
 800dc2e:	6033      	str	r3, [r6, #0]
 800dc30:	4630      	mov	r0, r6
 800dc32:	f000 f868 	bl	800dd06 <__malloc_unlock>
 800dc36:	e7e4      	b.n	800dc02 <_malloc_r+0x1e>
 800dc38:	680b      	ldr	r3, [r1, #0]
 800dc3a:	1b5b      	subs	r3, r3, r5
 800dc3c:	d418      	bmi.n	800dc70 <_malloc_r+0x8c>
 800dc3e:	2b0b      	cmp	r3, #11
 800dc40:	d90f      	bls.n	800dc62 <_malloc_r+0x7e>
 800dc42:	600b      	str	r3, [r1, #0]
 800dc44:	50cd      	str	r5, [r1, r3]
 800dc46:	18cc      	adds	r4, r1, r3
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 f85c 	bl	800dd06 <__malloc_unlock>
 800dc4e:	f104 000b 	add.w	r0, r4, #11
 800dc52:	1d23      	adds	r3, r4, #4
 800dc54:	f020 0007 	bic.w	r0, r0, #7
 800dc58:	1ac3      	subs	r3, r0, r3
 800dc5a:	d0d3      	beq.n	800dc04 <_malloc_r+0x20>
 800dc5c:	425a      	negs	r2, r3
 800dc5e:	50e2      	str	r2, [r4, r3]
 800dc60:	e7d0      	b.n	800dc04 <_malloc_r+0x20>
 800dc62:	428c      	cmp	r4, r1
 800dc64:	684b      	ldr	r3, [r1, #4]
 800dc66:	bf16      	itet	ne
 800dc68:	6063      	strne	r3, [r4, #4]
 800dc6a:	6013      	streq	r3, [r2, #0]
 800dc6c:	460c      	movne	r4, r1
 800dc6e:	e7eb      	b.n	800dc48 <_malloc_r+0x64>
 800dc70:	460c      	mov	r4, r1
 800dc72:	6849      	ldr	r1, [r1, #4]
 800dc74:	e7cc      	b.n	800dc10 <_malloc_r+0x2c>
 800dc76:	1cc4      	adds	r4, r0, #3
 800dc78:	f024 0403 	bic.w	r4, r4, #3
 800dc7c:	42a0      	cmp	r0, r4
 800dc7e:	d005      	beq.n	800dc8c <_malloc_r+0xa8>
 800dc80:	1a21      	subs	r1, r4, r0
 800dc82:	4630      	mov	r0, r6
 800dc84:	f000 f82e 	bl	800dce4 <_sbrk_r>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d0cf      	beq.n	800dc2c <_malloc_r+0x48>
 800dc8c:	6025      	str	r5, [r4, #0]
 800dc8e:	e7db      	b.n	800dc48 <_malloc_r+0x64>
 800dc90:	200004cc 	.word	0x200004cc
 800dc94:	200004d0 	.word	0x200004d0

0800dc98 <_realloc_r>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	4607      	mov	r7, r0
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	460e      	mov	r6, r1
 800dca0:	b921      	cbnz	r1, 800dcac <_realloc_r+0x14>
 800dca2:	4611      	mov	r1, r2
 800dca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dca8:	f7ff bf9c 	b.w	800dbe4 <_malloc_r>
 800dcac:	b922      	cbnz	r2, 800dcb8 <_realloc_r+0x20>
 800dcae:	f7ff ff4b 	bl	800db48 <_free_r>
 800dcb2:	4625      	mov	r5, r4
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcb8:	f000 f826 	bl	800dd08 <_malloc_usable_size_r>
 800dcbc:	42a0      	cmp	r0, r4
 800dcbe:	d20f      	bcs.n	800dce0 <_realloc_r+0x48>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	f7ff ff8e 	bl	800dbe4 <_malloc_r>
 800dcc8:	4605      	mov	r5, r0
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d0f2      	beq.n	800dcb4 <_realloc_r+0x1c>
 800dcce:	4631      	mov	r1, r6
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	f7ff fc11 	bl	800d4f8 <memcpy>
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff ff35 	bl	800db48 <_free_r>
 800dcde:	e7e9      	b.n	800dcb4 <_realloc_r+0x1c>
 800dce0:	4635      	mov	r5, r6
 800dce2:	e7e7      	b.n	800dcb4 <_realloc_r+0x1c>

0800dce4 <_sbrk_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4c06      	ldr	r4, [pc, #24]	; (800dd00 <_sbrk_r+0x1c>)
 800dce8:	2300      	movs	r3, #0
 800dcea:	4605      	mov	r5, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	6023      	str	r3, [r4, #0]
 800dcf0:	f7f4 f8fc 	bl	8001eec <_sbrk>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d102      	bne.n	800dcfe <_sbrk_r+0x1a>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	b103      	cbz	r3, 800dcfe <_sbrk_r+0x1a>
 800dcfc:	602b      	str	r3, [r5, #0]
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	20001f14 	.word	0x20001f14

0800dd04 <__malloc_lock>:
 800dd04:	4770      	bx	lr

0800dd06 <__malloc_unlock>:
 800dd06:	4770      	bx	lr

0800dd08 <_malloc_usable_size_r>:
 800dd08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd0c:	1f18      	subs	r0, r3, #4
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bfbc      	itt	lt
 800dd12:	580b      	ldrlt	r3, [r1, r0]
 800dd14:	18c0      	addlt	r0, r0, r3
 800dd16:	4770      	bx	lr

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr
